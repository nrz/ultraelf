;;;; ultraELF 0.0.1
;;;
;;; ultraELF x86-64 assembler, disassembler and metamorphic engine.
;;; ultraELF packs and reconstructs ELF executables, maintaining original functionality.

(in-package :cl-user)

(defpackage :x64
  (:import-from :cl :defclass
                    :defpackage
                    :defparameter
                    :in-package
                    :list
                    :make-instance)
  (:import-from :ultraelf :x64-asm-instruction
                          :name
                          :operands
                          :code-string
                          :arch-flags))

(in-package :x64)

(defclass x64-DB-instruction (x64-asm-instruction) ((name :reader name :initform "DB")))
(defclass x64-DW-instruction (x64-asm-instruction) ((name :reader name :initform "DW")))
(defclass x64-DD-instruction (x64-asm-instruction) ((name :reader name :initform "DD")))
(defclass x64-DQ-instruction (x64-asm-instruction) ((name :reader name :initform "DQ")))
(defclass x64-DT-instruction (x64-asm-instruction) ((name :reader name :initform "DT")))
(defclass x64-DO-instruction (x64-asm-instruction) ((name :reader name :initform "DO")))
(defclass x64-DY-instruction (x64-asm-instruction) ((name :reader name :initform "DY")))
(defclass x64-DZ-instruction (x64-asm-instruction) ((name :reader name :initform "DZ")))
(defclass x64-RESB-instruction (x64-asm-instruction) ((name :reader name :initform "RESB")))
(defclass x64-RESW-instruction (x64-asm-instruction) ((name :reader name :initform "RESW")))
(defclass x64-RESD-instruction (x64-asm-instruction) ((name :reader name :initform "RESD")))
(defclass x64-RESQ-instruction (x64-asm-instruction) ((name :reader name :initform "RESQ")))
(defclass x64-REST-instruction (x64-asm-instruction) ((name :reader name :initform "REST")))
(defclass x64-RESO-instruction (x64-asm-instruction) ((name :reader name :initform "RESO")))
(defclass x64-RESY-instruction (x64-asm-instruction) ((name :reader name :initform "RESY")))
(defclass x64-RESZ-instruction (x64-asm-instruction) ((name :reader name :initform "RESZ")))
(defclass x64-ADC-instruction (x64-asm-instruction) ((name :reader name :initform "ADC")))
(defclass x64-ADD-instruction (x64-asm-instruction) ((name :reader name :initform "ADD")))
(defclass x64-AND-instruction (x64-asm-instruction) ((name :reader name :initform "AND")))
(defclass x64-BB0_RESET-instruction (x64-asm-instruction) ((name :reader name :initform "BB0_RESET")))
(defclass x64-BB1_RESET-instruction (x64-asm-instruction) ((name :reader name :initform "BB1_RESET")))
(defclass x64-BSF-instruction (x64-asm-instruction) ((name :reader name :initform "BSF")))
(defclass x64-BSR-instruction (x64-asm-instruction) ((name :reader name :initform "BSR")))
(defclass x64-BSWAP-instruction (x64-asm-instruction) ((name :reader name :initform "BSWAP")))
(defclass x64-BT-instruction (x64-asm-instruction) ((name :reader name :initform "BT")))
(defclass x64-BTC-instruction (x64-asm-instruction) ((name :reader name :initform "BTC")))
(defclass x64-BTR-instruction (x64-asm-instruction) ((name :reader name :initform "BTR")))
(defclass x64-BTS-instruction (x64-asm-instruction) ((name :reader name :initform "BTS")))
(defclass x64-CALL-instruction (x64-asm-instruction) ((name :reader name :initform "CALL")))
(defclass x64-CBW-instruction (x64-asm-instruction) ((name :reader name :initform "CBW")))
(defclass x64-CDQ-instruction (x64-asm-instruction) ((name :reader name :initform "CDQ")))
(defclass x64-CDQE-instruction (x64-asm-instruction) ((name :reader name :initform "CDQE")))
(defclass x64-CLC-instruction (x64-asm-instruction) ((name :reader name :initform "CLC")))
(defclass x64-CLD-instruction (x64-asm-instruction) ((name :reader name :initform "CLD")))
(defclass x64-CLI-instruction (x64-asm-instruction) ((name :reader name :initform "CLI")))
(defclass x64-CLTS-instruction (x64-asm-instruction) ((name :reader name :initform "CLTS")))
(defclass x64-CMC-instruction (x64-asm-instruction) ((name :reader name :initform "CMC")))
(defclass x64-CMP-instruction (x64-asm-instruction) ((name :reader name :initform "CMP")))
(defclass x64-CMPSB-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSB")))
(defclass x64-CMPSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSD")))
(defclass x64-CMPSQ-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSQ")))
(defclass x64-CMPSW-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSW")))
(defclass x64-CMPXCHG-instruction (x64-asm-instruction) ((name :reader name :initform "CMPXCHG")))
(defclass x64-CMPXCHG486-instruction (x64-asm-instruction) ((name :reader name :initform "CMPXCHG486")))
(defclass x64-CMPXCHG8B-instruction (x64-asm-instruction) ((name :reader name :initform "CMPXCHG8B")))
(defclass x64-CMPXCHG16B-instruction (x64-asm-instruction) ((name :reader name :initform "CMPXCHG16B")))
(defclass x64-CPUID-instruction (x64-asm-instruction) ((name :reader name :initform "CPUID")))
(defclass x64-CPU_READ-instruction (x64-asm-instruction) ((name :reader name :initform "CPU_READ")))
(defclass x64-CPU_WRITE-instruction (x64-asm-instruction) ((name :reader name :initform "CPU_WRITE")))
(defclass x64-CQO-instruction (x64-asm-instruction) ((name :reader name :initform "CQO")))
(defclass x64-CWD-instruction (x64-asm-instruction) ((name :reader name :initform "CWD")))
(defclass x64-CWDE-instruction (x64-asm-instruction) ((name :reader name :initform "CWDE")))
(defclass x64-DEC-instruction (x64-asm-instruction) ((name :reader name :initform "DEC")))
(defclass x64-DIV-instruction (x64-asm-instruction) ((name :reader name :initform "DIV")))
(defclass x64-DMINT-instruction (x64-asm-instruction) ((name :reader name :initform "DMINT")))
(defclass x64-EMMS-instruction (x64-asm-instruction) ((name :reader name :initform "EMMS")))
(defclass x64-ENTER-instruction (x64-asm-instruction) ((name :reader name :initform "ENTER")))
(defclass x64-EQU-instruction (x64-asm-instruction) ((name :reader name :initform "EQU")))
(defclass x64-F2XM1-instruction (x64-asm-instruction) ((name :reader name :initform "F2XM1")))
(defclass x64-FABS-instruction (x64-asm-instruction) ((name :reader name :initform "FABS")))
(defclass x64-FADD-instruction (x64-asm-instruction) ((name :reader name :initform "FADD")))
(defclass x64-FADDP-instruction (x64-asm-instruction) ((name :reader name :initform "FADDP")))
(defclass x64-FBLD-instruction (x64-asm-instruction) ((name :reader name :initform "FBLD")))
(defclass x64-FBSTP-instruction (x64-asm-instruction) ((name :reader name :initform "FBSTP")))
(defclass x64-FCHS-instruction (x64-asm-instruction) ((name :reader name :initform "FCHS")))
(defclass x64-FCLEX-instruction (x64-asm-instruction) ((name :reader name :initform "FCLEX")))
(defclass x64-FCMOVB-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVB")))
(defclass x64-FCMOVBE-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVBE")))
(defclass x64-FCMOVE-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVE")))
(defclass x64-FCMOVNB-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVNB")))
(defclass x64-FCMOVNBE-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVNBE")))
(defclass x64-FCMOVNE-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVNE")))
(defclass x64-FCMOVNU-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVNU")))
(defclass x64-FCMOVU-instruction (x64-asm-instruction) ((name :reader name :initform "FCMOVU")))
(defclass x64-FCOM-instruction (x64-asm-instruction) ((name :reader name :initform "FCOM")))
(defclass x64-FCOMI-instruction (x64-asm-instruction) ((name :reader name :initform "FCOMI")))
(defclass x64-FCOMIP-instruction (x64-asm-instruction) ((name :reader name :initform "FCOMIP")))
(defclass x64-FCOMP-instruction (x64-asm-instruction) ((name :reader name :initform "FCOMP")))
(defclass x64-FCOMPP-instruction (x64-asm-instruction) ((name :reader name :initform "FCOMPP")))
(defclass x64-FCOS-instruction (x64-asm-instruction) ((name :reader name :initform "FCOS")))
(defclass x64-FDECSTP-instruction (x64-asm-instruction) ((name :reader name :initform "FDECSTP")))
(defclass x64-FDISI-instruction (x64-asm-instruction) ((name :reader name :initform "FDISI")))
(defclass x64-FDIV-instruction (x64-asm-instruction) ((name :reader name :initform "FDIV")))
(defclass x64-FDIVP-instruction (x64-asm-instruction) ((name :reader name :initform "FDIVP")))
(defclass x64-FDIVR-instruction (x64-asm-instruction) ((name :reader name :initform "FDIVR")))
(defclass x64-FDIVRP-instruction (x64-asm-instruction) ((name :reader name :initform "FDIVRP")))
(defclass x64-FEMMS-instruction (x64-asm-instruction) ((name :reader name :initform "FEMMS")))
(defclass x64-FENI-instruction (x64-asm-instruction) ((name :reader name :initform "FENI")))
(defclass x64-FFREE-instruction (x64-asm-instruction) ((name :reader name :initform "FFREE")))
(defclass x64-FFREEP-instruction (x64-asm-instruction) ((name :reader name :initform "FFREEP")))
(defclass x64-FIADD-instruction (x64-asm-instruction) ((name :reader name :initform "FIADD")))
(defclass x64-FICOM-instruction (x64-asm-instruction) ((name :reader name :initform "FICOM")))
(defclass x64-FICOMP-instruction (x64-asm-instruction) ((name :reader name :initform "FICOMP")))
(defclass x64-FIDIV-instruction (x64-asm-instruction) ((name :reader name :initform "FIDIV")))
(defclass x64-FIDIVR-instruction (x64-asm-instruction) ((name :reader name :initform "FIDIVR")))
(defclass x64-FILD-instruction (x64-asm-instruction) ((name :reader name :initform "FILD")))
(defclass x64-FIMUL-instruction (x64-asm-instruction) ((name :reader name :initform "FIMUL")))
(defclass x64-FINCSTP-instruction (x64-asm-instruction) ((name :reader name :initform "FINCSTP")))
(defclass x64-FINIT-instruction (x64-asm-instruction) ((name :reader name :initform "FINIT")))
(defclass x64-FIST-instruction (x64-asm-instruction) ((name :reader name :initform "FIST")))
(defclass x64-FISTP-instruction (x64-asm-instruction) ((name :reader name :initform "FISTP")))
(defclass x64-FISTTP-instruction (x64-asm-instruction) ((name :reader name :initform "FISTTP")))
(defclass x64-FISUB-instruction (x64-asm-instruction) ((name :reader name :initform "FISUB")))
(defclass x64-FISUBR-instruction (x64-asm-instruction) ((name :reader name :initform "FISUBR")))
(defclass x64-FLD-instruction (x64-asm-instruction) ((name :reader name :initform "FLD")))
(defclass x64-FLD1-instruction (x64-asm-instruction) ((name :reader name :initform "FLD1")))
(defclass x64-FLDCW-instruction (x64-asm-instruction) ((name :reader name :initform "FLDCW")))
(defclass x64-FLDENV-instruction (x64-asm-instruction) ((name :reader name :initform "FLDENV")))
(defclass x64-FLDL2E-instruction (x64-asm-instruction) ((name :reader name :initform "FLDL2E")))
(defclass x64-FLDL2T-instruction (x64-asm-instruction) ((name :reader name :initform "FLDL2T")))
(defclass x64-FLDLG2-instruction (x64-asm-instruction) ((name :reader name :initform "FLDLG2")))
(defclass x64-FLDLN2-instruction (x64-asm-instruction) ((name :reader name :initform "FLDLN2")))
(defclass x64-FLDPI-instruction (x64-asm-instruction) ((name :reader name :initform "FLDPI")))
(defclass x64-FLDZ-instruction (x64-asm-instruction) ((name :reader name :initform "FLDZ")))
(defclass x64-FMUL-instruction (x64-asm-instruction) ((name :reader name :initform "FMUL")))
(defclass x64-FMULP-instruction (x64-asm-instruction) ((name :reader name :initform "FMULP")))
(defclass x64-FNCLEX-instruction (x64-asm-instruction) ((name :reader name :initform "FNCLEX")))
(defclass x64-FNDISI-instruction (x64-asm-instruction) ((name :reader name :initform "FNDISI")))
(defclass x64-FNENI-instruction (x64-asm-instruction) ((name :reader name :initform "FNENI")))
(defclass x64-FNINIT-instruction (x64-asm-instruction) ((name :reader name :initform "FNINIT")))
(defclass x64-FNOP-instruction (x64-asm-instruction) ((name :reader name :initform "FNOP")))
(defclass x64-FNSAVE-instruction (x64-asm-instruction) ((name :reader name :initform "FNSAVE")))
(defclass x64-FNSTCW-instruction (x64-asm-instruction) ((name :reader name :initform "FNSTCW")))
(defclass x64-FNSTENV-instruction (x64-asm-instruction) ((name :reader name :initform "FNSTENV")))
(defclass x64-FNSTSW-instruction (x64-asm-instruction) ((name :reader name :initform "FNSTSW")))
(defclass x64-FPATAN-instruction (x64-asm-instruction) ((name :reader name :initform "FPATAN")))
(defclass x64-FPREM-instruction (x64-asm-instruction) ((name :reader name :initform "FPREM")))
(defclass x64-FPREM1-instruction (x64-asm-instruction) ((name :reader name :initform "FPREM1")))
(defclass x64-FPTAN-instruction (x64-asm-instruction) ((name :reader name :initform "FPTAN")))
(defclass x64-FRNDINT-instruction (x64-asm-instruction) ((name :reader name :initform "FRNDINT")))
(defclass x64-FRSTOR-instruction (x64-asm-instruction) ((name :reader name :initform "FRSTOR")))
(defclass x64-FSAVE-instruction (x64-asm-instruction) ((name :reader name :initform "FSAVE")))
(defclass x64-FSCALE-instruction (x64-asm-instruction) ((name :reader name :initform "FSCALE")))
(defclass x64-FSETPM-instruction (x64-asm-instruction) ((name :reader name :initform "FSETPM")))
(defclass x64-FSIN-instruction (x64-asm-instruction) ((name :reader name :initform "FSIN")))
(defclass x64-FSINCOS-instruction (x64-asm-instruction) ((name :reader name :initform "FSINCOS")))
(defclass x64-FSQRT-instruction (x64-asm-instruction) ((name :reader name :initform "FSQRT")))
(defclass x64-FST-instruction (x64-asm-instruction) ((name :reader name :initform "FST")))
(defclass x64-FSTCW-instruction (x64-asm-instruction) ((name :reader name :initform "FSTCW")))
(defclass x64-FSTENV-instruction (x64-asm-instruction) ((name :reader name :initform "FSTENV")))
(defclass x64-FSTP-instruction (x64-asm-instruction) ((name :reader name :initform "FSTP")))
(defclass x64-FSTSW-instruction (x64-asm-instruction) ((name :reader name :initform "FSTSW")))
(defclass x64-FSUB-instruction (x64-asm-instruction) ((name :reader name :initform "FSUB")))
(defclass x64-FSUBP-instruction (x64-asm-instruction) ((name :reader name :initform "FSUBP")))
(defclass x64-FSUBR-instruction (x64-asm-instruction) ((name :reader name :initform "FSUBR")))
(defclass x64-FSUBRP-instruction (x64-asm-instruction) ((name :reader name :initform "FSUBRP")))
(defclass x64-FTST-instruction (x64-asm-instruction) ((name :reader name :initform "FTST")))
(defclass x64-FUCOM-instruction (x64-asm-instruction) ((name :reader name :initform "FUCOM")))
(defclass x64-FUCOMI-instruction (x64-asm-instruction) ((name :reader name :initform "FUCOMI")))
(defclass x64-FUCOMIP-instruction (x64-asm-instruction) ((name :reader name :initform "FUCOMIP")))
(defclass x64-FUCOMP-instruction (x64-asm-instruction) ((name :reader name :initform "FUCOMP")))
(defclass x64-FUCOMPP-instruction (x64-asm-instruction) ((name :reader name :initform "FUCOMPP")))
(defclass x64-FXAM-instruction (x64-asm-instruction) ((name :reader name :initform "FXAM")))
(defclass x64-FXCH-instruction (x64-asm-instruction) ((name :reader name :initform "FXCH")))
(defclass x64-FXTRACT-instruction (x64-asm-instruction) ((name :reader name :initform "FXTRACT")))
(defclass x64-FYL2X-instruction (x64-asm-instruction) ((name :reader name :initform "FYL2X")))
(defclass x64-FYL2XP1-instruction (x64-asm-instruction) ((name :reader name :initform "FYL2XP1")))
(defclass x64-HLT-instruction (x64-asm-instruction) ((name :reader name :initform "HLT")))
(defclass x64-IBTS-instruction (x64-asm-instruction) ((name :reader name :initform "IBTS")))
(defclass x64-ICEBP-instruction (x64-asm-instruction) ((name :reader name :initform "ICEBP")))
(defclass x64-IDIV-instruction (x64-asm-instruction) ((name :reader name :initform "IDIV")))
(defclass x64-IMUL-instruction (x64-asm-instruction) ((name :reader name :initform "IMUL")))
(defclass x64-IN-instruction (x64-asm-instruction) ((name :reader name :initform "IN")))
(defclass x64-INC-instruction (x64-asm-instruction) ((name :reader name :initform "INC")))
(defclass x64-INCBIN-instruction (x64-asm-instruction) ((name :reader name :initform "INCBIN")))
(defclass x64-INSB-instruction (x64-asm-instruction) ((name :reader name :initform "INSB")))
(defclass x64-INSD-instruction (x64-asm-instruction) ((name :reader name :initform "INSD")))
(defclass x64-INSW-instruction (x64-asm-instruction) ((name :reader name :initform "INSW")))
(defclass x64-INT-instruction (x64-asm-instruction) ((name :reader name :initform "INT")))
(defclass x64-INT01-instruction (x64-asm-instruction) ((name :reader name :initform "INT01")))
(defclass x64-INT1-instruction (x64-asm-instruction) ((name :reader name :initform "INT1")))
(defclass x64-INT03-instruction (x64-asm-instruction) ((name :reader name :initform "INT03")))
(defclass x64-INT3-instruction (x64-asm-instruction) ((name :reader name :initform "INT3")))
(defclass x64-INVD-instruction (x64-asm-instruction) ((name :reader name :initform "INVD")))
(defclass x64-INVPCID-instruction (x64-asm-instruction) ((name :reader name :initform "INVPCID")))
(defclass x64-INVLPG-instruction (x64-asm-instruction) ((name :reader name :initform "INVLPG")))
(defclass x64-INVLPGA-instruction (x64-asm-instruction) ((name :reader name :initform "INVLPGA")))
(defclass x64-IRET-instruction (x64-asm-instruction) ((name :reader name :initform "IRET")))
(defclass x64-IRETD-instruction (x64-asm-instruction) ((name :reader name :initform "IRETD")))
(defclass x64-IRETQ-instruction (x64-asm-instruction) ((name :reader name :initform "IRETQ")))
(defclass x64-IRETW-instruction (x64-asm-instruction) ((name :reader name :initform "IRETW")))
(defclass x64-JECXZ-instruction (x64-asm-instruction) ((name :reader name :initform "JECXZ")))
(defclass x64-JRCXZ-instruction (x64-asm-instruction) ((name :reader name :initform "JRCXZ")))
(defclass x64-JMP-instruction (x64-asm-instruction) ((name :reader name :initform "JMP")))
(defclass x64-JMPE-instruction (x64-asm-instruction) ((name :reader name :initform "JMPE")))
(defclass x64-LAHF-instruction (x64-asm-instruction) ((name :reader name :initform "LAHF")))
(defclass x64-LAR-instruction (x64-asm-instruction) ((name :reader name :initform "LAR")))
(defclass x64-LEA-instruction (x64-asm-instruction) ((name :reader name :initform "LEA")))
(defclass x64-LEAVE-instruction (x64-asm-instruction) ((name :reader name :initform "LEAVE")))
(defclass x64-LFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "LFENCE")))
(defclass x64-LFS-instruction (x64-asm-instruction) ((name :reader name :initform "LFS")))
(defclass x64-LGDT-instruction (x64-asm-instruction) ((name :reader name :initform "LGDT")))
(defclass x64-LGS-instruction (x64-asm-instruction) ((name :reader name :initform "LGS")))
(defclass x64-LIDT-instruction (x64-asm-instruction) ((name :reader name :initform "LIDT")))
(defclass x64-LLDT-instruction (x64-asm-instruction) ((name :reader name :initform "LLDT")))
(defclass x64-LMSW-instruction (x64-asm-instruction) ((name :reader name :initform "LMSW")))
(defclass x64-LOADALL-instruction (x64-asm-instruction) ((name :reader name :initform "LOADALL")))
(defclass x64-LOADALL286-instruction (x64-asm-instruction) ((name :reader name :initform "LOADALL286")))
(defclass x64-LODSB-instruction (x64-asm-instruction) ((name :reader name :initform "LODSB")))
(defclass x64-LODSD-instruction (x64-asm-instruction) ((name :reader name :initform "LODSD")))
(defclass x64-LODSQ-instruction (x64-asm-instruction) ((name :reader name :initform "LODSQ")))
(defclass x64-LODSW-instruction (x64-asm-instruction) ((name :reader name :initform "LODSW")))
(defclass x64-LOOP-instruction (x64-asm-instruction) ((name :reader name :initform "LOOP")))
(defclass x64-LOOPE-instruction (x64-asm-instruction) ((name :reader name :initform "LOOPE")))
(defclass x64-LOOPNE-instruction (x64-asm-instruction) ((name :reader name :initform "LOOPNE")))
(defclass x64-LOOPNZ-instruction (x64-asm-instruction) ((name :reader name :initform "LOOPNZ")))
(defclass x64-LOOPZ-instruction (x64-asm-instruction) ((name :reader name :initform "LOOPZ")))
(defclass x64-LSL-instruction (x64-asm-instruction) ((name :reader name :initform "LSL")))
(defclass x64-LSS-instruction (x64-asm-instruction) ((name :reader name :initform "LSS")))
(defclass x64-LTR-instruction (x64-asm-instruction) ((name :reader name :initform "LTR")))
(defclass x64-MFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "MFENCE")))
(defclass x64-MONITOR-instruction (x64-asm-instruction) ((name :reader name :initform "MONITOR")))
(defclass x64-MOV-instruction (x64-asm-instruction) ((name :reader name :initform "MOV")))
(defclass x64-MOVD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVD")))
(defclass x64-MOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVQ")))
(defclass x64-MOVSB-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSB")))
(defclass x64-MOVSD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSD")))
(defclass x64-MOVSQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSQ")))
(defclass x64-MOVSW-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSW")))
(defclass x64-MOVSX-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSX")))
(defclass x64-MOVSXD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSXD")))
(defclass x64-MOVSX-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSX")))
(defclass x64-MOVZX-instruction (x64-asm-instruction) ((name :reader name :initform "MOVZX")))
(defclass x64-MUL-instruction (x64-asm-instruction) ((name :reader name :initform "MUL")))
(defclass x64-MWAIT-instruction (x64-asm-instruction) ((name :reader name :initform "MWAIT")))
(defclass x64-NEG-instruction (x64-asm-instruction) ((name :reader name :initform "NEG")))
(defclass x64-NOP-instruction (x64-asm-instruction) ((name :reader name :initform "NOP")))
(defclass x64-NOT-instruction (x64-asm-instruction) ((name :reader name :initform "NOT")))
(defclass x64-OR-instruction (x64-asm-instruction) ((name :reader name :initform "OR")))
(defclass x64-OUT-instruction (x64-asm-instruction) ((name :reader name :initform "OUT")))
(defclass x64-OUTSB-instruction (x64-asm-instruction) ((name :reader name :initform "OUTSB")))
(defclass x64-OUTSD-instruction (x64-asm-instruction) ((name :reader name :initform "OUTSD")))
(defclass x64-OUTSW-instruction (x64-asm-instruction) ((name :reader name :initform "OUTSW")))
(defclass x64-PACKSSDW-instruction (x64-asm-instruction) ((name :reader name :initform "PACKSSDW")))
(defclass x64-PACKSSWB-instruction (x64-asm-instruction) ((name :reader name :initform "PACKSSWB")))
(defclass x64-PACKUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "PACKUSWB")))
(defclass x64-PADDB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDB")))
(defclass x64-PADDD-instruction (x64-asm-instruction) ((name :reader name :initform "PADDD")))
(defclass x64-PADDSB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDSB")))
(defclass x64-PADDSIW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDSIW")))
(defclass x64-PADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDSW")))
(defclass x64-PADDUSB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDUSB")))
(defclass x64-PADDUSW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDUSW")))
(defclass x64-PADDW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDW")))
(defclass x64-PAND-instruction (x64-asm-instruction) ((name :reader name :initform "PAND")))
(defclass x64-PANDN-instruction (x64-asm-instruction) ((name :reader name :initform "PANDN")))
(defclass x64-PAUSE-instruction (x64-asm-instruction) ((name :reader name :initform "PAUSE")))
(defclass x64-PAVEB-instruction (x64-asm-instruction) ((name :reader name :initform "PAVEB")))
(defclass x64-PAVGUSB-instruction (x64-asm-instruction) ((name :reader name :initform "PAVGUSB")))
(defclass x64-PCMPEQB-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQB")))
(defclass x64-PCMPEQD-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQD")))
(defclass x64-PCMPEQW-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQW")))
(defclass x64-PCMPGTB-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTB")))
(defclass x64-PCMPGTD-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTD")))
(defclass x64-PCMPGTW-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTW")))
(defclass x64-PDISTIB-instruction (x64-asm-instruction) ((name :reader name :initform "PDISTIB")))
(defclass x64-PF2ID-instruction (x64-asm-instruction) ((name :reader name :initform "PF2ID")))
(defclass x64-PFACC-instruction (x64-asm-instruction) ((name :reader name :initform "PFACC")))
(defclass x64-PFADD-instruction (x64-asm-instruction) ((name :reader name :initform "PFADD")))
(defclass x64-PFCMPEQ-instruction (x64-asm-instruction) ((name :reader name :initform "PFCMPEQ")))
(defclass x64-PFCMPGE-instruction (x64-asm-instruction) ((name :reader name :initform "PFCMPGE")))
(defclass x64-PFCMPGT-instruction (x64-asm-instruction) ((name :reader name :initform "PFCMPGT")))
(defclass x64-PFMAX-instruction (x64-asm-instruction) ((name :reader name :initform "PFMAX")))
(defclass x64-PFMIN-instruction (x64-asm-instruction) ((name :reader name :initform "PFMIN")))
(defclass x64-PFMUL-instruction (x64-asm-instruction) ((name :reader name :initform "PFMUL")))
(defclass x64-PFRCP-instruction (x64-asm-instruction) ((name :reader name :initform "PFRCP")))
(defclass x64-PFRCPIT1-instruction (x64-asm-instruction) ((name :reader name :initform "PFRCPIT1")))
(defclass x64-PFRCPIT2-instruction (x64-asm-instruction) ((name :reader name :initform "PFRCPIT2")))
(defclass x64-PFRSQIT1-instruction (x64-asm-instruction) ((name :reader name :initform "PFRSQIT1")))
(defclass x64-PFRSQRT-instruction (x64-asm-instruction) ((name :reader name :initform "PFRSQRT")))
(defclass x64-PFSUB-instruction (x64-asm-instruction) ((name :reader name :initform "PFSUB")))
(defclass x64-PFSUBR-instruction (x64-asm-instruction) ((name :reader name :initform "PFSUBR")))
(defclass x64-PI2FD-instruction (x64-asm-instruction) ((name :reader name :initform "PI2FD")))
(defclass x64-PMACHRIW-instruction (x64-asm-instruction) ((name :reader name :initform "PMACHRIW")))
(defclass x64-PMADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "PMADDWD")))
(defclass x64-PMAGW-instruction (x64-asm-instruction) ((name :reader name :initform "PMAGW")))
(defclass x64-PMULHRIW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHRIW")))
(defclass x64-PMULHRWA-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHRWA")))
(defclass x64-PMULHRWC-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHRWC")))
(defclass x64-PMULHW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHW")))
(defclass x64-PMULLW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULLW")))
(defclass x64-PMVGEZB-instruction (x64-asm-instruction) ((name :reader name :initform "PMVGEZB")))
(defclass x64-PMVLZB-instruction (x64-asm-instruction) ((name :reader name :initform "PMVLZB")))
(defclass x64-PMVNZB-instruction (x64-asm-instruction) ((name :reader name :initform "PMVNZB")))
(defclass x64-PMVZB-instruction (x64-asm-instruction) ((name :reader name :initform "PMVZB")))
(defclass x64-POP-instruction (x64-asm-instruction) ((name :reader name :initform "POP")))
(defclass x64-POPF-instruction (x64-asm-instruction) ((name :reader name :initform "POPF")))
(defclass x64-POPFQ-instruction (x64-asm-instruction) ((name :reader name :initform "POPFQ")))
(defclass x64-POPFW-instruction (x64-asm-instruction) ((name :reader name :initform "POPFW")))
(defclass x64-POR-instruction (x64-asm-instruction) ((name :reader name :initform "POR")))
(defclass x64-PREFETCH-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCH")))
(defclass x64-PREFETCHW-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHW")))
(defclass x64-PSLLD-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLD")))
(defclass x64-PSLLQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLQ")))
(defclass x64-PSLLW-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLW")))
(defclass x64-PSRAD-instruction (x64-asm-instruction) ((name :reader name :initform "PSRAD")))
(defclass x64-PSRAW-instruction (x64-asm-instruction) ((name :reader name :initform "PSRAW")))
(defclass x64-PSRLD-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLD")))
(defclass x64-PSRLQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLQ")))
(defclass x64-PSRLW-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLW")))
(defclass x64-PSUBB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBB")))
(defclass x64-PSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBD")))
(defclass x64-PSUBSB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBSB")))
(defclass x64-PSUBSIW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBSIW")))
(defclass x64-PSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBSW")))
(defclass x64-PSUBUSB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBUSB")))
(defclass x64-PSUBUSW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBUSW")))
(defclass x64-PSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBW")))
(defclass x64-PUNPCKHBW-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHBW")))
(defclass x64-PUNPCKHDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHDQ")))
(defclass x64-PUNPCKHWD-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHWD")))
(defclass x64-PUNPCKLBW-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLBW")))
(defclass x64-PUNPCKLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLDQ")))
(defclass x64-PUNPCKLWD-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLWD")))
(defclass x64-PUSH-instruction (x64-asm-instruction) ((name :reader name :initform "PUSH")))
(defclass x64-PUSHF-instruction (x64-asm-instruction) ((name :reader name :initform "PUSHF")))
(defclass x64-PUSHFQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUSHFQ")))
(defclass x64-PUSHFW-instruction (x64-asm-instruction) ((name :reader name :initform "PUSHFW")))
(defclass x64-PXOR-instruction (x64-asm-instruction) ((name :reader name :initform "PXOR")))
(defclass x64-RCL-instruction (x64-asm-instruction) ((name :reader name :initform "RCL")))
(defclass x64-RCR-instruction (x64-asm-instruction) ((name :reader name :initform "RCR")))
(defclass x64-RDSHR-instruction (x64-asm-instruction) ((name :reader name :initform "RDSHR")))
(defclass x64-RDMSR-instruction (x64-asm-instruction) ((name :reader name :initform "RDMSR")))
(defclass x64-RDPMC-instruction (x64-asm-instruction) ((name :reader name :initform "RDPMC")))
(defclass x64-RDTSC-instruction (x64-asm-instruction) ((name :reader name :initform "RDTSC")))
(defclass x64-RDTSCP-instruction (x64-asm-instruction) ((name :reader name :initform "RDTSCP")))
(defclass x64-RET-instruction (x64-asm-instruction) ((name :reader name :initform "RET")))
(defclass x64-RETF-instruction (x64-asm-instruction) ((name :reader name :initform "RETF")))
(defclass x64-RETN-instruction (x64-asm-instruction) ((name :reader name :initform "RETN")))
(defclass x64-ROL-instruction (x64-asm-instruction) ((name :reader name :initform "ROL")))
(defclass x64-ROR-instruction (x64-asm-instruction) ((name :reader name :initform "ROR")))
(defclass x64-RDM-instruction (x64-asm-instruction) ((name :reader name :initform "RDM")))
(defclass x64-RSDC-instruction (x64-asm-instruction) ((name :reader name :initform "RSDC")))
(defclass x64-RSLDT-instruction (x64-asm-instruction) ((name :reader name :initform "RSLDT")))
(defclass x64-RSM-instruction (x64-asm-instruction) ((name :reader name :initform "RSM")))
(defclass x64-RSTS-instruction (x64-asm-instruction) ((name :reader name :initform "RSTS")))
(defclass x64-SAHF-instruction (x64-asm-instruction) ((name :reader name :initform "SAHF")))
(defclass x64-SAL-instruction (x64-asm-instruction) ((name :reader name :initform "SAL")))
(defclass x64-SALC-instruction (x64-asm-instruction) ((name :reader name :initform "SALC")))
(defclass x64-SAR-instruction (x64-asm-instruction) ((name :reader name :initform "SAR")))
(defclass x64-SBB-instruction (x64-asm-instruction) ((name :reader name :initform "SBB")))
(defclass x64-SCASB-instruction (x64-asm-instruction) ((name :reader name :initform "SCASB")))
(defclass x64-SCASD-instruction (x64-asm-instruction) ((name :reader name :initform "SCASD")))
(defclass x64-SCASQ-instruction (x64-asm-instruction) ((name :reader name :initform "SCASQ")))
(defclass x64-SCASW-instruction (x64-asm-instruction) ((name :reader name :initform "SCASW")))
(defclass x64-SFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "SFENCE")))
(defclass x64-SGDT-instruction (x64-asm-instruction) ((name :reader name :initform "SGDT")))
(defclass x64-SHL-instruction (x64-asm-instruction) ((name :reader name :initform "SHL")))
(defclass x64-SHLD-instruction (x64-asm-instruction) ((name :reader name :initform "SHLD")))
(defclass x64-SHR-instruction (x64-asm-instruction) ((name :reader name :initform "SHR")))
(defclass x64-SHRD-instruction (x64-asm-instruction) ((name :reader name :initform "SHRD")))
(defclass x64-SIDT-instruction (x64-asm-instruction) ((name :reader name :initform "SIDT")))
(defclass x64-SLDT-instruction (x64-asm-instruction) ((name :reader name :initform "SLDT")))
(defclass x64-SKINIT-instruction (x64-asm-instruction) ((name :reader name :initform "SKINIT")))
(defclass x64-SMI-instruction (x64-asm-instruction) ((name :reader name :initform "SMI")))
(defclass x64-SMINT-instruction (x64-asm-instruction) ((name :reader name :initform "SMINT")))
(defclass x64-SMINTOLD-instruction (x64-asm-instruction) ((name :reader name :initform "SMINTOLD")))
(defclass x64-SMSW-instruction (x64-asm-instruction) ((name :reader name :initform "SMSW")))
(defclass x64-STC-instruction (x64-asm-instruction) ((name :reader name :initform "STC")))
(defclass x64-STD-instruction (x64-asm-instruction) ((name :reader name :initform "STD")))
(defclass x64-STI-instruction (x64-asm-instruction) ((name :reader name :initform "STI")))
(defclass x64-STOSB-instruction (x64-asm-instruction) ((name :reader name :initform "STOSB")))
(defclass x64-STOSD-instruction (x64-asm-instruction) ((name :reader name :initform "STOSD")))
(defclass x64-STOSQ-instruction (x64-asm-instruction) ((name :reader name :initform "STOSQ")))
(defclass x64-STOSW-instruction (x64-asm-instruction) ((name :reader name :initform "STOSW")))
(defclass x64-STR-instruction (x64-asm-instruction) ((name :reader name :initform "STR")))
(defclass x64-SUB-instruction (x64-asm-instruction) ((name :reader name :initform "SUB")))
(defclass x64-SVDC-instruction (x64-asm-instruction) ((name :reader name :initform "SVDC")))
(defclass x64-SVLDT-instruction (x64-asm-instruction) ((name :reader name :initform "SVLDT")))
(defclass x64-SVTS-instruction (x64-asm-instruction) ((name :reader name :initform "SVTS")))
(defclass x64-SWAPGS-instruction (x64-asm-instruction) ((name :reader name :initform "SWAPGS")))
(defclass x64-SYSCALL-instruction (x64-asm-instruction) ((name :reader name :initform "SYSCALL")))
(defclass x64-SYSENTER-instruction (x64-asm-instruction) ((name :reader name :initform "SYSENTER")))
(defclass x64-SYSEXIT-instruction (x64-asm-instruction) ((name :reader name :initform "SYSEXIT")))
(defclass x64-SYSRET-instruction (x64-asm-instruction) ((name :reader name :initform "SYSRET")))
(defclass x64-TEST-instruction (x64-asm-instruction) ((name :reader name :initform "TEST")))
(defclass x64-UD0-instruction (x64-asm-instruction) ((name :reader name :initform "UD0")))
(defclass x64-UD1-instruction (x64-asm-instruction) ((name :reader name :initform "UD1")))
(defclass x64-UD2B-instruction (x64-asm-instruction) ((name :reader name :initform "UD2B")))
(defclass x64-UD2-instruction (x64-asm-instruction) ((name :reader name :initform "UD2")))
(defclass x64-UD2A-instruction (x64-asm-instruction) ((name :reader name :initform "UD2A")))
(defclass x64-UMOV-instruction (x64-asm-instruction) ((name :reader name :initform "UMOV")))
(defclass x64-VERR-instruction (x64-asm-instruction) ((name :reader name :initform "VERR")))
(defclass x64-VERW-instruction (x64-asm-instruction) ((name :reader name :initform "VERW")))
(defclass x64-FWAIT-instruction (x64-asm-instruction) ((name :reader name :initform "FWAIT")))
(defclass x64-WBINVD-instruction (x64-asm-instruction) ((name :reader name :initform "WBINVD")))
(defclass x64-WRSHR-instruction (x64-asm-instruction) ((name :reader name :initform "WRSHR")))
(defclass x64-WRMSR-instruction (x64-asm-instruction) ((name :reader name :initform "WRMSR")))
(defclass x64-XADD-instruction (x64-asm-instruction) ((name :reader name :initform "XADD")))
(defclass x64-XBTS-instruction (x64-asm-instruction) ((name :reader name :initform "XBTS")))
(defclass x64-XCHG-instruction (x64-asm-instruction) ((name :reader name :initform "XCHG")))
(defclass x64-XLATB-instruction (x64-asm-instruction) ((name :reader name :initform "XLATB")))
(defclass x64-XLAT-instruction (x64-asm-instruction) ((name :reader name :initform "XLAT")))
(defclass x64-XOR-instruction (x64-asm-instruction) ((name :reader name :initform "XOR")))
(defclass x64-CMOVcc-instruction (x64-asm-instruction) ((name :reader name :initform "CMOVcc")))
(defclass x64-Jcc-instruction (x64-asm-instruction) ((name :reader name :initform "Jcc")))
(defclass x64-SETcc-instruction (x64-asm-instruction) ((name :reader name :initform "SETcc")))
(defclass x64-ADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "ADDPS")))
(defclass x64-ADDSS-instruction (x64-asm-instruction) ((name :reader name :initform "ADDSS")))
(defclass x64-ANDNPS-instruction (x64-asm-instruction) ((name :reader name :initform "ANDNPS")))
(defclass x64-ANDPS-instruction (x64-asm-instruction) ((name :reader name :initform "ANDPS")))
(defclass x64-CMPEQPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPEQPS")))
(defclass x64-CMPEQSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPEQSS")))
(defclass x64-CMPLEPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLEPS")))
(defclass x64-CMPLESS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLESS")))
(defclass x64-CMPLTPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLTPS")))
(defclass x64-CMPLTSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLTSS")))
(defclass x64-CMPNEQPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNEQPS")))
(defclass x64-CMPNEQSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNEQSS")))
(defclass x64-CMPNLEPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLEPS")))
(defclass x64-CMPNLESS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLESS")))
(defclass x64-CMPNLTPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLTPS")))
(defclass x64-CMPNLTSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLTSS")))
(defclass x64-CMPORDPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPORDPS")))
(defclass x64-CMPORDSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPORDSS")))
(defclass x64-CMPUNORDPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPUNORDPS")))
(defclass x64-CMPUNORDSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPUNORDSS")))
(defclass x64-CMPPS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPPS")))
(defclass x64-CMPSS-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSS")))
(defclass x64-COMISS-instruction (x64-asm-instruction) ((name :reader name :initform "COMISS")))
(defclass x64-CVTPI2PS-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPI2PS")))
(defclass x64-CVTPS2PI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPS2PI")))
(defclass x64-CVTSI2SS-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSI2SS")))
(defclass x64-CVTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSS2SI")))
(defclass x64-CVTTPS2PI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTPS2PI")))
(defclass x64-CVTTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTSS2SI")))
(defclass x64-DIVPS-instruction (x64-asm-instruction) ((name :reader name :initform "DIVPS")))
(defclass x64-DIVSS-instruction (x64-asm-instruction) ((name :reader name :initform "DIVSS")))
(defclass x64-LDMXCSR-instruction (x64-asm-instruction) ((name :reader name :initform "LDMXCSR")))
(defclass x64-MAXPS-instruction (x64-asm-instruction) ((name :reader name :initform "MAXPS")))
(defclass x64-MAXSS-instruction (x64-asm-instruction) ((name :reader name :initform "MAXSS")))
(defclass x64-MINPS-instruction (x64-asm-instruction) ((name :reader name :initform "MINPS")))
(defclass x64-MINSS-instruction (x64-asm-instruction) ((name :reader name :initform "MINSS")))
(defclass x64-MOVAPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVAPS")))
(defclass x64-MOVHPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVHPS")))
(defclass x64-MOVLHPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVLHPS")))
(defclass x64-MOVLPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVLPS")))
(defclass x64-MOVHLPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVHLPS")))
(defclass x64-MOVMSKPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVMSKPS")))
(defclass x64-MOVNTPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTPS")))
(defclass x64-MOVSS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSS")))
(defclass x64-MOVUPS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVUPS")))
(defclass x64-MULPS-instruction (x64-asm-instruction) ((name :reader name :initform "MULPS")))
(defclass x64-MULSS-instruction (x64-asm-instruction) ((name :reader name :initform "MULSS")))
(defclass x64-ORPS-instruction (x64-asm-instruction) ((name :reader name :initform "ORPS")))
(defclass x64-RCPPS-instruction (x64-asm-instruction) ((name :reader name :initform "RCPPS")))
(defclass x64-RCPSS-instruction (x64-asm-instruction) ((name :reader name :initform "RCPSS")))
(defclass x64-RSQRTPS-instruction (x64-asm-instruction) ((name :reader name :initform "RSQRTPS")))
(defclass x64-RSQRTSS-instruction (x64-asm-instruction) ((name :reader name :initform "RSQRTSS")))
(defclass x64-SHUFPS-instruction (x64-asm-instruction) ((name :reader name :initform "SHUFPS")))
(defclass x64-SQRTPS-instruction (x64-asm-instruction) ((name :reader name :initform "SQRTPS")))
(defclass x64-SQRTSS-instruction (x64-asm-instruction) ((name :reader name :initform "SQRTSS")))
(defclass x64-STMXCSR-instruction (x64-asm-instruction) ((name :reader name :initform "STMXCSR")))
(defclass x64-SUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "SUBPS")))
(defclass x64-SUBSS-instruction (x64-asm-instruction) ((name :reader name :initform "SUBSS")))
(defclass x64-UCOMISS-instruction (x64-asm-instruction) ((name :reader name :initform "UCOMISS")))
(defclass x64-UNPCKHPS-instruction (x64-asm-instruction) ((name :reader name :initform "UNPCKHPS")))
(defclass x64-UNPCKLPS-instruction (x64-asm-instruction) ((name :reader name :initform "UNPCKLPS")))
(defclass x64-XORPS-instruction (x64-asm-instruction) ((name :reader name :initform "XORPS")))
(defclass x64-FXRSTOR-instruction (x64-asm-instruction) ((name :reader name :initform "FXRSTOR")))
(defclass x64-FXRSTOR64-instruction (x64-asm-instruction) ((name :reader name :initform "FXRSTOR64")))
(defclass x64-FXSAVE-instruction (x64-asm-instruction) ((name :reader name :initform "FXSAVE")))
(defclass x64-FXSAVE64-instruction (x64-asm-instruction) ((name :reader name :initform "FXSAVE64")))
(defclass x64-XGETBV-instruction (x64-asm-instruction) ((name :reader name :initform "XGETBV")))
(defclass x64-XSETBV-instruction (x64-asm-instruction) ((name :reader name :initform "XSETBV")))
(defclass x64-XSAVE-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVE")))
(defclass x64-XSAVE64-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVE64")))
(defclass x64-XSAVEC-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVEC")))
(defclass x64-XSAVEC64-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVEC64")))
(defclass x64-XSAVEOPT-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVEOPT")))
(defclass x64-XSAVEOPT64-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVEOPT64")))
(defclass x64-XSAVES-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVES")))
(defclass x64-XSAVES64-instruction (x64-asm-instruction) ((name :reader name :initform "XSAVES64")))
(defclass x64-XRSTOR-instruction (x64-asm-instruction) ((name :reader name :initform "XRSTOR")))
(defclass x64-XRSTOR64-instruction (x64-asm-instruction) ((name :reader name :initform "XRSTOR64")))
(defclass x64-XRSTORS-instruction (x64-asm-instruction) ((name :reader name :initform "XRSTORS")))
(defclass x64-XRSTORS64-instruction (x64-asm-instruction) ((name :reader name :initform "XRSTORS64")))
(defclass x64-PREFETCHNTA-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHNTA")))
(defclass x64-PREFETCHT0-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHT0")))
(defclass x64-PREFETCHT1-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHT1")))
(defclass x64-PREFETCHT2-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHT2")))
(defclass x64-SFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "SFENCE")))
(defclass x64-MASKMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "MASKMOVQ")))
(defclass x64-MOVNTQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTQ")))
(defclass x64-PAVGB-instruction (x64-asm-instruction) ((name :reader name :initform "PAVGB")))
(defclass x64-PAVGW-instruction (x64-asm-instruction) ((name :reader name :initform "PAVGW")))
(defclass x64-PEXTRW-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRW")))
(defclass x64-PINSRW-instruction (x64-asm-instruction) ((name :reader name :initform "PINSRW")))
(defclass x64-PMAXSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXSW")))
(defclass x64-PMAXUB-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXUB")))
(defclass x64-PMINSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMINSW")))
(defclass x64-PMINUB-instruction (x64-asm-instruction) ((name :reader name :initform "PMINUB")))
(defclass x64-PMOVMSKB-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVMSKB")))
(defclass x64-PMULHUW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHUW")))
(defclass x64-PSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "PSADBW")))
(defclass x64-PSHUFW-instruction (x64-asm-instruction) ((name :reader name :initform "PSHUFW")))
(defclass x64-PF2IW-instruction (x64-asm-instruction) ((name :reader name :initform "PF2IW")))
(defclass x64-PFNACC-instruction (x64-asm-instruction) ((name :reader name :initform "PFNACC")))
(defclass x64-PFPNACC-instruction (x64-asm-instruction) ((name :reader name :initform "PFPNACC")))
(defclass x64-PI2FW-instruction (x64-asm-instruction) ((name :reader name :initform "PI2FW")))
(defclass x64-PSWAPD-instruction (x64-asm-instruction) ((name :reader name :initform "PSWAPD")))
(defclass x64-MASKMOVDQU-instruction (x64-asm-instruction) ((name :reader name :initform "MASKMOVDQU")))
(defclass x64-CLFLUSH-instruction (x64-asm-instruction) ((name :reader name :initform "CLFLUSH")))
(defclass x64-MOVNTDQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTDQ")))
(defclass x64-MOVNTI-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTI")))
(defclass x64-MOVNTPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTPD")))
(defclass x64-LFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "LFENCE")))
(defclass x64-MFENCE-instruction (x64-asm-instruction) ((name :reader name :initform "MFENCE")))
(defclass x64-MOVD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVD")))
(defclass x64-MOVDQA-instruction (x64-asm-instruction) ((name :reader name :initform "MOVDQA")))
(defclass x64-MOVDQU-instruction (x64-asm-instruction) ((name :reader name :initform "MOVDQU")))
(defclass x64-MOVDQ2Q-instruction (x64-asm-instruction) ((name :reader name :initform "MOVDQ2Q")))
(defclass x64-MOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVQ")))
(defclass x64-MOVQ2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "MOVQ2DQ")))
(defclass x64-PACKSSWB-instruction (x64-asm-instruction) ((name :reader name :initform "PACKSSWB")))
(defclass x64-PACKSSDW-instruction (x64-asm-instruction) ((name :reader name :initform "PACKSSDW")))
(defclass x64-PACKUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "PACKUSWB")))
(defclass x64-PADDB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDB")))
(defclass x64-PADDW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDW")))
(defclass x64-PADDD-instruction (x64-asm-instruction) ((name :reader name :initform "PADDD")))
(defclass x64-PADDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PADDQ")))
(defclass x64-PADDSB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDSB")))
(defclass x64-PADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDSW")))
(defclass x64-PADDUSB-instruction (x64-asm-instruction) ((name :reader name :initform "PADDUSB")))
(defclass x64-PADDUSW-instruction (x64-asm-instruction) ((name :reader name :initform "PADDUSW")))
(defclass x64-PAND-instruction (x64-asm-instruction) ((name :reader name :initform "PAND")))
(defclass x64-PANDN-instruction (x64-asm-instruction) ((name :reader name :initform "PANDN")))
(defclass x64-PAVGB-instruction (x64-asm-instruction) ((name :reader name :initform "PAVGB")))
(defclass x64-PAVGW-instruction (x64-asm-instruction) ((name :reader name :initform "PAVGW")))
(defclass x64-PCMPEQB-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQB")))
(defclass x64-PCMPEQW-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQW")))
(defclass x64-PCMPEQD-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQD")))
(defclass x64-PCMPGTB-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTB")))
(defclass x64-PCMPGTW-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTW")))
(defclass x64-PCMPGTD-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTD")))
(defclass x64-PEXTRW-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRW")))
(defclass x64-PINSRW-instruction (x64-asm-instruction) ((name :reader name :initform "PINSRW")))
(defclass x64-PMADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "PMADDWD")))
(defclass x64-PMAXSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXSW")))
(defclass x64-PMAXUB-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXUB")))
(defclass x64-PMINSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMINSW")))
(defclass x64-PMINUB-instruction (x64-asm-instruction) ((name :reader name :initform "PMINUB")))
(defclass x64-PMOVMSKB-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVMSKB")))
(defclass x64-PMULHUW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHUW")))
(defclass x64-PMULHW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHW")))
(defclass x64-PMULLW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULLW")))
(defclass x64-PMULUDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMULUDQ")))
(defclass x64-POR-instruction (x64-asm-instruction) ((name :reader name :initform "POR")))
(defclass x64-PSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "PSADBW")))
(defclass x64-PSHUFD-instruction (x64-asm-instruction) ((name :reader name :initform "PSHUFD")))
(defclass x64-PSHUFHW-instruction (x64-asm-instruction) ((name :reader name :initform "PSHUFHW")))
(defclass x64-PSHUFLW-instruction (x64-asm-instruction) ((name :reader name :initform "PSHUFLW")))
(defclass x64-PSLLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLDQ")))
(defclass x64-PSLLW-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLW")))
(defclass x64-PSLLD-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLD")))
(defclass x64-PSLLQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSLLQ")))
(defclass x64-PSRAW-instruction (x64-asm-instruction) ((name :reader name :initform "PSRAW")))
(defclass x64-PSRAD-instruction (x64-asm-instruction) ((name :reader name :initform "PSRAD")))
(defclass x64-PSRLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLDQ")))
(defclass x64-PSRLW-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLW")))
(defclass x64-PSRLD-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLD")))
(defclass x64-PSRLQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSRLQ")))
(defclass x64-PSUBB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBB")))
(defclass x64-PSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBW")))
(defclass x64-PSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBD")))
(defclass x64-PSUBQ-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBQ")))
(defclass x64-PSUBSB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBSB")))
(defclass x64-PSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBSW")))
(defclass x64-PSUBUSB-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBUSB")))
(defclass x64-PSUBUSW-instruction (x64-asm-instruction) ((name :reader name :initform "PSUBUSW")))
(defclass x64-PUNPCKHBW-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHBW")))
(defclass x64-PUNPCKHWD-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHWD")))
(defclass x64-PUNPCKHDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHDQ")))
(defclass x64-PUNPCKHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKHQDQ")))
(defclass x64-PUNPCKLBW-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLBW")))
(defclass x64-PUNPCKLWD-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLWD")))
(defclass x64-PUNPCKLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLDQ")))
(defclass x64-PUNPCKLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PUNPCKLQDQ")))
(defclass x64-PXOR-instruction (x64-asm-instruction) ((name :reader name :initform "PXOR")))
(defclass x64-ADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "ADDPD")))
(defclass x64-ADDSD-instruction (x64-asm-instruction) ((name :reader name :initform "ADDSD")))
(defclass x64-ANDNPD-instruction (x64-asm-instruction) ((name :reader name :initform "ANDNPD")))
(defclass x64-ANDPD-instruction (x64-asm-instruction) ((name :reader name :initform "ANDPD")))
(defclass x64-CMPEQPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPEQPD")))
(defclass x64-CMPEQSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPEQSD")))
(defclass x64-CMPLEPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLEPD")))
(defclass x64-CMPLESD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLESD")))
(defclass x64-CMPLTPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLTPD")))
(defclass x64-CMPLTSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPLTSD")))
(defclass x64-CMPNEQPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNEQPD")))
(defclass x64-CMPNEQSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNEQSD")))
(defclass x64-CMPNLEPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLEPD")))
(defclass x64-CMPNLESD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLESD")))
(defclass x64-CMPNLTPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLTPD")))
(defclass x64-CMPNLTSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPNLTSD")))
(defclass x64-CMPORDPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPORDPD")))
(defclass x64-CMPORDSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPORDSD")))
(defclass x64-CMPUNORDPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPUNORDPD")))
(defclass x64-CMPUNORDSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPUNORDSD")))
(defclass x64-CMPPD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPPD")))
(defclass x64-CMPSD-instruction (x64-asm-instruction) ((name :reader name :initform "CMPSD")))
(defclass x64-COMISD-instruction (x64-asm-instruction) ((name :reader name :initform "COMISD")))
(defclass x64-CVTDQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "CVTDQ2PD")))
(defclass x64-CVTDQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "CVTDQ2PS")))
(defclass x64-CVTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPD2DQ")))
(defclass x64-CVTPD2PI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPD2PI")))
(defclass x64-CVTPD2PS-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPD2PS")))
(defclass x64-CVTPI2PD-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPI2PD")))
(defclass x64-CVTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPS2DQ")))
(defclass x64-CVTPS2PD-instruction (x64-asm-instruction) ((name :reader name :initform "CVTPS2PD")))
(defclass x64-CVTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSD2SI")))
(defclass x64-CVTSD2SS-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSD2SS")))
(defclass x64-CVTSI2SD-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSI2SD")))
(defclass x64-CVTSS2SD-instruction (x64-asm-instruction) ((name :reader name :initform "CVTSS2SD")))
(defclass x64-CVTTPD2PI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTPD2PI")))
(defclass x64-CVTTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTPD2DQ")))
(defclass x64-CVTTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTPS2DQ")))
(defclass x64-CVTTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "CVTTSD2SI")))
(defclass x64-DIVPD-instruction (x64-asm-instruction) ((name :reader name :initform "DIVPD")))
(defclass x64-DIVSD-instruction (x64-asm-instruction) ((name :reader name :initform "DIVSD")))
(defclass x64-MAXPD-instruction (x64-asm-instruction) ((name :reader name :initform "MAXPD")))
(defclass x64-MAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "MAXSD")))
(defclass x64-MINPD-instruction (x64-asm-instruction) ((name :reader name :initform "MINPD")))
(defclass x64-MINSD-instruction (x64-asm-instruction) ((name :reader name :initform "MINSD")))
(defclass x64-MOVAPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVAPD")))
(defclass x64-MOVHPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVHPD")))
(defclass x64-MOVLPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVLPD")))
(defclass x64-MOVMSKPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVMSKPD")))
(defclass x64-MOVSD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSD")))
(defclass x64-MOVUPD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVUPD")))
(defclass x64-MULPD-instruction (x64-asm-instruction) ((name :reader name :initform "MULPD")))
(defclass x64-MULSD-instruction (x64-asm-instruction) ((name :reader name :initform "MULSD")))
(defclass x64-ORPD-instruction (x64-asm-instruction) ((name :reader name :initform "ORPD")))
(defclass x64-SHUFPD-instruction (x64-asm-instruction) ((name :reader name :initform "SHUFPD")))
(defclass x64-SQRTPD-instruction (x64-asm-instruction) ((name :reader name :initform "SQRTPD")))
(defclass x64-SQRTSD-instruction (x64-asm-instruction) ((name :reader name :initform "SQRTSD")))
(defclass x64-SUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "SUBPD")))
(defclass x64-SUBSD-instruction (x64-asm-instruction) ((name :reader name :initform "SUBSD")))
(defclass x64-UCOMISD-instruction (x64-asm-instruction) ((name :reader name :initform "UCOMISD")))
(defclass x64-UNPCKHPD-instruction (x64-asm-instruction) ((name :reader name :initform "UNPCKHPD")))
(defclass x64-UNPCKLPD-instruction (x64-asm-instruction) ((name :reader name :initform "UNPCKLPD")))
(defclass x64-XORPD-instruction (x64-asm-instruction) ((name :reader name :initform "XORPD")))
(defclass x64-ADDSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "ADDSUBPD")))
(defclass x64-ADDSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "ADDSUBPS")))
(defclass x64-HADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "HADDPD")))
(defclass x64-HADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "HADDPS")))
(defclass x64-HSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "HSUBPD")))
(defclass x64-HSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "HSUBPS")))
(defclass x64-LDDQU-instruction (x64-asm-instruction) ((name :reader name :initform "LDDQU")))
(defclass x64-MOVDDUP-instruction (x64-asm-instruction) ((name :reader name :initform "MOVDDUP")))
(defclass x64-MOVSHDUP-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSHDUP")))
(defclass x64-MOVSLDUP-instruction (x64-asm-instruction) ((name :reader name :initform "MOVSLDUP")))
(defclass x64-CLGI-instruction (x64-asm-instruction) ((name :reader name :initform "CLGI")))
(defclass x64-STGI-instruction (x64-asm-instruction) ((name :reader name :initform "STGI")))
(defclass x64-VMCALL-instruction (x64-asm-instruction) ((name :reader name :initform "VMCALL")))
(defclass x64-VMCLEAR-instruction (x64-asm-instruction) ((name :reader name :initform "VMCLEAR")))
(defclass x64-VMFUNC-instruction (x64-asm-instruction) ((name :reader name :initform "VMFUNC")))
(defclass x64-VMLAUNCH-instruction (x64-asm-instruction) ((name :reader name :initform "VMLAUNCH")))
(defclass x64-VMLOAD-instruction (x64-asm-instruction) ((name :reader name :initform "VMLOAD")))
(defclass x64-VMMCALL-instruction (x64-asm-instruction) ((name :reader name :initform "VMMCALL")))
(defclass x64-VMPTRLD-instruction (x64-asm-instruction) ((name :reader name :initform "VMPTRLD")))
(defclass x64-VMPTRST-instruction (x64-asm-instruction) ((name :reader name :initform "VMPTRST")))
(defclass x64-VMREAD-instruction (x64-asm-instruction) ((name :reader name :initform "VMREAD")))
(defclass x64-VMRESUME-instruction (x64-asm-instruction) ((name :reader name :initform "VMRESUME")))
(defclass x64-VMRUN-instruction (x64-asm-instruction) ((name :reader name :initform "VMRUN")))
(defclass x64-VMSAVE-instruction (x64-asm-instruction) ((name :reader name :initform "VMSAVE")))
(defclass x64-VMWRITE-instruction (x64-asm-instruction) ((name :reader name :initform "VMWRITE")))
(defclass x64-VMXOFF-instruction (x64-asm-instruction) ((name :reader name :initform "VMXOFF")))
(defclass x64-VMXON-instruction (x64-asm-instruction) ((name :reader name :initform "VMXON")))
(defclass x64-INVEPT-instruction (x64-asm-instruction) ((name :reader name :initform "INVEPT")))
(defclass x64-INVVPID-instruction (x64-asm-instruction) ((name :reader name :initform "INVVPID")))
(defclass x64-PABSB-instruction (x64-asm-instruction) ((name :reader name :initform "PABSB")))
(defclass x64-PABSW-instruction (x64-asm-instruction) ((name :reader name :initform "PABSW")))
(defclass x64-PABSD-instruction (x64-asm-instruction) ((name :reader name :initform "PABSD")))
(defclass x64-PALIGNR-instruction (x64-asm-instruction) ((name :reader name :initform "PALIGNR")))
(defclass x64-PHADDW-instruction (x64-asm-instruction) ((name :reader name :initform "PHADDW")))
(defclass x64-PHADDD-instruction (x64-asm-instruction) ((name :reader name :initform "PHADDD")))
(defclass x64-PHADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "PHADDSW")))
(defclass x64-PHSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "PHSUBW")))
(defclass x64-PHSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "PHSUBD")))
(defclass x64-PHSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "PHSUBSW")))
(defclass x64-PMADDUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMADDUBSW")))
(defclass x64-PMULHRSW-instruction (x64-asm-instruction) ((name :reader name :initform "PMULHRSW")))
(defclass x64-PSHUFB-instruction (x64-asm-instruction) ((name :reader name :initform "PSHUFB")))
(defclass x64-PSIGNB-instruction (x64-asm-instruction) ((name :reader name :initform "PSIGNB")))
(defclass x64-PSIGNW-instruction (x64-asm-instruction) ((name :reader name :initform "PSIGNW")))
(defclass x64-PSIGND-instruction (x64-asm-instruction) ((name :reader name :initform "PSIGND")))
(defclass x64-EXTRQ-instruction (x64-asm-instruction) ((name :reader name :initform "EXTRQ")))
(defclass x64-INSERTQ-instruction (x64-asm-instruction) ((name :reader name :initform "INSERTQ")))
(defclass x64-MOVNTSD-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTSD")))
(defclass x64-MOVNTSS-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTSS")))
(defclass x64-LZCNT-instruction (x64-asm-instruction) ((name :reader name :initform "LZCNT")))
(defclass x64-BLENDPD-instruction (x64-asm-instruction) ((name :reader name :initform "BLENDPD")))
(defclass x64-BLENDPS-instruction (x64-asm-instruction) ((name :reader name :initform "BLENDPS")))
(defclass x64-BLENDVPD-instruction (x64-asm-instruction) ((name :reader name :initform "BLENDVPD")))
(defclass x64-BLENDVPS-instruction (x64-asm-instruction) ((name :reader name :initform "BLENDVPS")))
(defclass x64-DPPD-instruction (x64-asm-instruction) ((name :reader name :initform "DPPD")))
(defclass x64-DPPS-instruction (x64-asm-instruction) ((name :reader name :initform "DPPS")))
(defclass x64-EXTRACTPS-instruction (x64-asm-instruction) ((name :reader name :initform "EXTRACTPS")))
(defclass x64-INSERTPS-instruction (x64-asm-instruction) ((name :reader name :initform "INSERTPS")))
(defclass x64-MOVNTDQA-instruction (x64-asm-instruction) ((name :reader name :initform "MOVNTDQA")))
(defclass x64-MPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "MPSADBW")))
(defclass x64-PACKUSDW-instruction (x64-asm-instruction) ((name :reader name :initform "PACKUSDW")))
(defclass x64-PBLENDVB-instruction (x64-asm-instruction) ((name :reader name :initform "PBLENDVB")))
(defclass x64-PBLENDW-instruction (x64-asm-instruction) ((name :reader name :initform "PBLENDW")))
(defclass x64-PCMPEQQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPEQQ")))
(defclass x64-PEXTRB-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRB")))
(defclass x64-PEXTRD-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRD")))
(defclass x64-PEXTRQ-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRQ")))
(defclass x64-PEXTRW-instruction (x64-asm-instruction) ((name :reader name :initform "PEXTRW")))
(defclass x64-PHMINPOSUW-instruction (x64-asm-instruction) ((name :reader name :initform "PHMINPOSUW")))
(defclass x64-PINSRB-instruction (x64-asm-instruction) ((name :reader name :initform "PINSRB")))
(defclass x64-PINSRD-instruction (x64-asm-instruction) ((name :reader name :initform "PINSRD")))
(defclass x64-PINSRQ-instruction (x64-asm-instruction) ((name :reader name :initform "PINSRQ")))
(defclass x64-PMAXSB-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXSB")))
(defclass x64-PMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXSD")))
(defclass x64-PMAXUD-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXUD")))
(defclass x64-PMAXUW-instruction (x64-asm-instruction) ((name :reader name :initform "PMAXUW")))
(defclass x64-PMINSB-instruction (x64-asm-instruction) ((name :reader name :initform "PMINSB")))
(defclass x64-PMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "PMINSD")))
(defclass x64-PMINUD-instruction (x64-asm-instruction) ((name :reader name :initform "PMINUD")))
(defclass x64-PMINUW-instruction (x64-asm-instruction) ((name :reader name :initform "PMINUW")))
(defclass x64-PMOVSXBW-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXBW")))
(defclass x64-PMOVSXBD-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXBD")))
(defclass x64-PMOVSXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXBQ")))
(defclass x64-PMOVSXWD-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXWD")))
(defclass x64-PMOVSXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXWQ")))
(defclass x64-PMOVSXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVSXDQ")))
(defclass x64-PMOVZXBW-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXBW")))
(defclass x64-PMOVZXBD-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXBD")))
(defclass x64-PMOVZXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXBQ")))
(defclass x64-PMOVZXWD-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXWD")))
(defclass x64-PMOVZXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXWQ")))
(defclass x64-PMOVZXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMOVZXDQ")))
(defclass x64-PMULDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PMULDQ")))
(defclass x64-PMULLD-instruction (x64-asm-instruction) ((name :reader name :initform "PMULLD")))
(defclass x64-PTEST-instruction (x64-asm-instruction) ((name :reader name :initform "PTEST")))
(defclass x64-ROUNDPD-instruction (x64-asm-instruction) ((name :reader name :initform "ROUNDPD")))
(defclass x64-ROUNDPS-instruction (x64-asm-instruction) ((name :reader name :initform "ROUNDPS")))
(defclass x64-ROUNDSD-instruction (x64-asm-instruction) ((name :reader name :initform "ROUNDSD")))
(defclass x64-ROUNDSS-instruction (x64-asm-instruction) ((name :reader name :initform "ROUNDSS")))
(defclass x64-CRC32-instruction (x64-asm-instruction) ((name :reader name :initform "CRC32")))
(defclass x64-PCMPESTRI-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPESTRI")))
(defclass x64-PCMPESTRM-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPESTRM")))
(defclass x64-PCMPISTRI-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPISTRI")))
(defclass x64-PCMPISTRM-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPISTRM")))
(defclass x64-PCMPGTQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCMPGTQ")))
(defclass x64-POPCNT-instruction (x64-asm-instruction) ((name :reader name :initform "POPCNT")))
(defclass x64-GETSEC-instruction (x64-asm-instruction) ((name :reader name :initform "GETSEC")))
(defclass x64-PFRCPV-instruction (x64-asm-instruction) ((name :reader name :initform "PFRCPV")))
(defclass x64-PFRSQRTV-instruction (x64-asm-instruction) ((name :reader name :initform "PFRSQRTV")))
(defclass x64-MOVBE-instruction (x64-asm-instruction) ((name :reader name :initform "MOVBE")))
(defclass x64-AESENC-instruction (x64-asm-instruction) ((name :reader name :initform "AESENC")))
(defclass x64-AESENCLAST-instruction (x64-asm-instruction) ((name :reader name :initform "AESENCLAST")))
(defclass x64-AESDEC-instruction (x64-asm-instruction) ((name :reader name :initform "AESDEC")))
(defclass x64-AESDECLAST-instruction (x64-asm-instruction) ((name :reader name :initform "AESDECLAST")))
(defclass x64-AESIMC-instruction (x64-asm-instruction) ((name :reader name :initform "AESIMC")))
(defclass x64-AESKEYGENASSIST-instruction (x64-asm-instruction) ((name :reader name :initform "AESKEYGENASSIST")))
(defclass x64-VAESENC-instruction (x64-asm-instruction) ((name :reader name :initform "VAESENC")))
(defclass x64-VAESENCLAST-instruction (x64-asm-instruction) ((name :reader name :initform "VAESENCLAST")))
(defclass x64-VAESDEC-instruction (x64-asm-instruction) ((name :reader name :initform "VAESDEC")))
(defclass x64-VAESDECLAST-instruction (x64-asm-instruction) ((name :reader name :initform "VAESDECLAST")))
(defclass x64-VAESIMC-instruction (x64-asm-instruction) ((name :reader name :initform "VAESIMC")))
(defclass x64-VAESKEYGENASSIST-instruction (x64-asm-instruction) ((name :reader name :initform "VAESKEYGENASSIST")))
(defclass x64-VADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VADDPD")))
(defclass x64-VADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VADDPS")))
(defclass x64-VADDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSD")))
(defclass x64-VADDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSS")))
(defclass x64-VADDSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSUBPD")))
(defclass x64-VADDSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSUBPS")))
(defclass x64-VANDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VANDPD")))
(defclass x64-VANDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VANDPS")))
(defclass x64-VANDNPD-instruction (x64-asm-instruction) ((name :reader name :initform "VANDNPD")))
(defclass x64-VANDNPS-instruction (x64-asm-instruction) ((name :reader name :initform "VANDNPS")))
(defclass x64-VBLENDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDPD")))
(defclass x64-VBLENDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDPS")))
(defclass x64-VBLENDVPD-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDVPD")))
(defclass x64-VBLENDVPS-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDVPS")))
(defclass x64-VBROADCASTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSS")))
(defclass x64-VBROADCASTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSD")))
(defclass x64-VBROADCASTF128-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF128")))
(defclass x64-VCMPEQ_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSPD")))
(defclass x64-VCMPEQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQPD")))
(defclass x64-VCMPLT_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OSPD")))
(defclass x64-VCMPLTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLTPD")))
(defclass x64-VCMPLE_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OSPD")))
(defclass x64-VCMPLEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLEPD")))
(defclass x64-VCMPUNORD_QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_QPD")))
(defclass x64-VCMPUNORDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORDPD")))
(defclass x64-VCMPNEQ_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_UQPD")))
(defclass x64-VCMPNEQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQPD")))
(defclass x64-VCMPNLT_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_USPD")))
(defclass x64-VCMPNLTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLTPD")))
(defclass x64-VCMPNLE_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_USPD")))
(defclass x64-VCMPNLEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLEPD")))
(defclass x64-VCMPORD_QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_QPD")))
(defclass x64-VCMPORDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORDPD")))
(defclass x64-VCMPEQ_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_UQPD")))
(defclass x64-VCMPNGE_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_USPD")))
(defclass x64-VCMPNGEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGEPD")))
(defclass x64-VCMPNGT_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_USPD")))
(defclass x64-VCMPNGTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGTPD")))
(defclass x64-VCMPFALSE_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OQPD")))
(defclass x64-VCMPFALSEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSEPD")))
(defclass x64-VCMPNEQ_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OQPD")))
(defclass x64-VCMPGE_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OSPD")))
(defclass x64-VCMPGEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGEPD")))
(defclass x64-VCMPGT_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OSPD")))
(defclass x64-VCMPGTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGTPD")))
(defclass x64-VCMPTRUE_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_UQPD")))
(defclass x64-VCMPTRUEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUEPD")))
(defclass x64-VCMPEQ_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSPD")))
(defclass x64-VCMPLT_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OQPD")))
(defclass x64-VCMPLE_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OQPD")))
(defclass x64-VCMPUNORD_SPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_SPD")))
(defclass x64-VCMPNEQ_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_USPD")))
(defclass x64-VCMPNLT_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_UQPD")))
(defclass x64-VCMPNLE_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_UQPD")))
(defclass x64-VCMPORD_SPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_SPD")))
(defclass x64-VCMPEQ_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_USPD")))
(defclass x64-VCMPNGE_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_UQPD")))
(defclass x64-VCMPNGT_UQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_UQPD")))
(defclass x64-VCMPFALSE_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OSPD")))
(defclass x64-VCMPNEQ_OSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OSPD")))
(defclass x64-VCMPGE_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OQPD")))
(defclass x64-VCMPGT_OQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OQPD")))
(defclass x64-VCMPTRUE_USPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_USPD")))
(defclass x64-VCMPPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPPD")))
(defclass x64-VCMPEQ_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSPS")))
(defclass x64-VCMPEQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQPS")))
(defclass x64-VCMPLT_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OSPS")))
(defclass x64-VCMPLTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLTPS")))
(defclass x64-VCMPLE_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OSPS")))
(defclass x64-VCMPLEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLEPS")))
(defclass x64-VCMPUNORD_QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_QPS")))
(defclass x64-VCMPUNORDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORDPS")))
(defclass x64-VCMPNEQ_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_UQPS")))
(defclass x64-VCMPNEQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQPS")))
(defclass x64-VCMPNLT_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_USPS")))
(defclass x64-VCMPNLTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLTPS")))
(defclass x64-VCMPNLE_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_USPS")))
(defclass x64-VCMPNLEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLEPS")))
(defclass x64-VCMPORD_QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_QPS")))
(defclass x64-VCMPORDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORDPS")))
(defclass x64-VCMPEQ_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_UQPS")))
(defclass x64-VCMPNGE_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_USPS")))
(defclass x64-VCMPNGEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGEPS")))
(defclass x64-VCMPNGT_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_USPS")))
(defclass x64-VCMPNGTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGTPS")))
(defclass x64-VCMPFALSE_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OQPS")))
(defclass x64-VCMPFALSEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSEPS")))
(defclass x64-VCMPNEQ_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OQPS")))
(defclass x64-VCMPGE_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OSPS")))
(defclass x64-VCMPGEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGEPS")))
(defclass x64-VCMPGT_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OSPS")))
(defclass x64-VCMPGTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGTPS")))
(defclass x64-VCMPTRUE_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_UQPS")))
(defclass x64-VCMPTRUEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUEPS")))
(defclass x64-VCMPEQ_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSPS")))
(defclass x64-VCMPLT_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OQPS")))
(defclass x64-VCMPLE_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OQPS")))
(defclass x64-VCMPUNORD_SPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_SPS")))
(defclass x64-VCMPNEQ_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_USPS")))
(defclass x64-VCMPNLT_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_UQPS")))
(defclass x64-VCMPNLE_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_UQPS")))
(defclass x64-VCMPORD_SPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_SPS")))
(defclass x64-VCMPEQ_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_USPS")))
(defclass x64-VCMPNGE_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_UQPS")))
(defclass x64-VCMPNGT_UQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_UQPS")))
(defclass x64-VCMPFALSE_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OSPS")))
(defclass x64-VCMPNEQ_OSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OSPS")))
(defclass x64-VCMPGE_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OQPS")))
(defclass x64-VCMPGT_OQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OQPS")))
(defclass x64-VCMPTRUE_USPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_USPS")))
(defclass x64-VCMPPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPPS")))
(defclass x64-VCMPEQ_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSSD")))
(defclass x64-VCMPEQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQSD")))
(defclass x64-VCMPLT_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OSSD")))
(defclass x64-VCMPLTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLTSD")))
(defclass x64-VCMPLE_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OSSD")))
(defclass x64-VCMPLESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLESD")))
(defclass x64-VCMPUNORD_QSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_QSD")))
(defclass x64-VCMPUNORDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORDSD")))
(defclass x64-VCMPNEQ_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_UQSD")))
(defclass x64-VCMPNEQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQSD")))
(defclass x64-VCMPNLT_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_USSD")))
(defclass x64-VCMPNLTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLTSD")))
(defclass x64-VCMPNLE_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_USSD")))
(defclass x64-VCMPNLESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLESD")))
(defclass x64-VCMPORD_QSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_QSD")))
(defclass x64-VCMPORDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORDSD")))
(defclass x64-VCMPEQ_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_UQSD")))
(defclass x64-VCMPNGE_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_USSD")))
(defclass x64-VCMPNGESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGESD")))
(defclass x64-VCMPNGT_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_USSD")))
(defclass x64-VCMPNGTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGTSD")))
(defclass x64-VCMPFALSE_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OQSD")))
(defclass x64-VCMPFALSESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSESD")))
(defclass x64-VCMPNEQ_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OQSD")))
(defclass x64-VCMPGE_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OSSD")))
(defclass x64-VCMPGESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGESD")))
(defclass x64-VCMPGT_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OSSD")))
(defclass x64-VCMPGTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGTSD")))
(defclass x64-VCMPTRUE_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_UQSD")))
(defclass x64-VCMPTRUESD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUESD")))
(defclass x64-VCMPEQ_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSSD")))
(defclass x64-VCMPLT_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OQSD")))
(defclass x64-VCMPLE_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OQSD")))
(defclass x64-VCMPUNORD_SSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_SSD")))
(defclass x64-VCMPNEQ_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_USSD")))
(defclass x64-VCMPNLT_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_UQSD")))
(defclass x64-VCMPNLE_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_UQSD")))
(defclass x64-VCMPORD_SSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_SSD")))
(defclass x64-VCMPEQ_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_USSD")))
(defclass x64-VCMPNGE_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_UQSD")))
(defclass x64-VCMPNGT_UQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_UQSD")))
(defclass x64-VCMPFALSE_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OSSD")))
(defclass x64-VCMPNEQ_OSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OSSD")))
(defclass x64-VCMPGE_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OQSD")))
(defclass x64-VCMPGT_OQSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OQSD")))
(defclass x64-VCMPTRUE_USSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_USSD")))
(defclass x64-VCMPSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPSD")))
(defclass x64-VCMPEQ_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSSS")))
(defclass x64-VCMPEQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQSS")))
(defclass x64-VCMPLT_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OSSS")))
(defclass x64-VCMPLTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLTSS")))
(defclass x64-VCMPLE_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OSSS")))
(defclass x64-VCMPLESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLESS")))
(defclass x64-VCMPUNORD_QSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_QSS")))
(defclass x64-VCMPUNORDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORDSS")))
(defclass x64-VCMPNEQ_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_UQSS")))
(defclass x64-VCMPNEQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQSS")))
(defclass x64-VCMPNLT_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_USSS")))
(defclass x64-VCMPNLTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLTSS")))
(defclass x64-VCMPNLE_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_USSS")))
(defclass x64-VCMPNLESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLESS")))
(defclass x64-VCMPORD_QSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_QSS")))
(defclass x64-VCMPORDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORDSS")))
(defclass x64-VCMPEQ_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_UQSS")))
(defclass x64-VCMPNGE_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_USSS")))
(defclass x64-VCMPNGESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGESS")))
(defclass x64-VCMPNGT_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_USSS")))
(defclass x64-VCMPNGTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGTSS")))
(defclass x64-VCMPFALSE_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OQSS")))
(defclass x64-VCMPFALSESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSESS")))
(defclass x64-VCMPNEQ_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OQSS")))
(defclass x64-VCMPGE_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OSSS")))
(defclass x64-VCMPGESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGESS")))
(defclass x64-VCMPGT_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OSSS")))
(defclass x64-VCMPGTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGTSS")))
(defclass x64-VCMPTRUE_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_UQSS")))
(defclass x64-VCMPTRUESS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUESS")))
(defclass x64-VCMPEQ_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_OSSS")))
(defclass x64-VCMPLT_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLT_OQSS")))
(defclass x64-VCMPLE_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPLE_OQSS")))
(defclass x64-VCMPUNORD_SSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPUNORD_SSS")))
(defclass x64-VCMPNEQ_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_USSS")))
(defclass x64-VCMPNLT_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLT_UQSS")))
(defclass x64-VCMPNLE_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNLE_UQSS")))
(defclass x64-VCMPORD_SSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPORD_SSS")))
(defclass x64-VCMPEQ_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPEQ_USSS")))
(defclass x64-VCMPNGE_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGE_UQSS")))
(defclass x64-VCMPNGT_UQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNGT_UQSS")))
(defclass x64-VCMPFALSE_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPFALSE_OSSS")))
(defclass x64-VCMPNEQ_OSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPNEQ_OSSS")))
(defclass x64-VCMPGE_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGE_OQSS")))
(defclass x64-VCMPGT_OQSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPGT_OQSS")))
(defclass x64-VCMPTRUE_USSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPTRUE_USSS")))
(defclass x64-VCMPSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPSS")))
(defclass x64-VCOMISD-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMISD")))
(defclass x64-VCOMISS-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMISS")))
(defclass x64-VCVTDQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTDQ2PD")))
(defclass x64-VCVTDQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTDQ2PS")))
(defclass x64-VCVTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2DQ")))
(defclass x64-VCVTPD2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2PS")))
(defclass x64-VCVTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2DQ")))
(defclass x64-VCVTPS2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2PD")))
(defclass x64-VCVTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSD2SI")))
(defclass x64-VCVTSD2SS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSD2SS")))
(defclass x64-VCVTSI2SD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSI2SD")))
(defclass x64-VCVTSI2SS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSI2SS")))
(defclass x64-VCVTSS2SD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSS2SD")))
(defclass x64-VCVTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSS2SI")))
(defclass x64-VCVTTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPD2DQ")))
(defclass x64-VCVTTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPS2DQ")))
(defclass x64-VCVTTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSD2SI")))
(defclass x64-VCVTTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSS2SI")))
(defclass x64-VDIVPD-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVPD")))
(defclass x64-VDIVPS-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVPS")))
(defclass x64-VDIVSD-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVSD")))
(defclass x64-VDIVSS-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVSS")))
(defclass x64-VDPPD-instruction (x64-asm-instruction) ((name :reader name :initform "VDPPD")))
(defclass x64-VDPPS-instruction (x64-asm-instruction) ((name :reader name :initform "VDPPS")))
(defclass x64-VEXTRACTF128-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTF128")))
(defclass x64-VEXTRACTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTPS")))
(defclass x64-VHADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VHADDPD")))
(defclass x64-VHADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VHADDPS")))
(defclass x64-VHSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VHSUBPD")))
(defclass x64-VHSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VHSUBPS")))
(defclass x64-VINSERTF128-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTF128")))
(defclass x64-VINSERTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTPS")))
(defclass x64-VLDDQU-instruction (x64-asm-instruction) ((name :reader name :initform "VLDDQU")))
(defclass x64-VLDQQU-instruction (x64-asm-instruction) ((name :reader name :initform "VLDQQU")))
(defclass x64-VLDDQU-instruction (x64-asm-instruction) ((name :reader name :initform "VLDDQU")))
(defclass x64-VLDMXCSR-instruction (x64-asm-instruction) ((name :reader name :initform "VLDMXCSR")))
(defclass x64-VMASKMOVDQU-instruction (x64-asm-instruction) ((name :reader name :initform "VMASKMOVDQU")))
(defclass x64-VMASKMOVPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMASKMOVPS")))
(defclass x64-VMASKMOVPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMASKMOVPD")))
(defclass x64-VMAXPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXPD")))
(defclass x64-VMAXPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXPS")))
(defclass x64-VMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXSD")))
(defclass x64-VMAXSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXSS")))
(defclass x64-VMINPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMINPD")))
(defclass x64-VMINPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMINPS")))
(defclass x64-VMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMINSD")))
(defclass x64-VMINSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMINSS")))
(defclass x64-VMOVAPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVAPD")))
(defclass x64-VMOVAPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVAPS")))
(defclass x64-VMOVD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVD")))
(defclass x64-VMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVQ")))
(defclass x64-VMOVDDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDDUP")))
(defclass x64-VMOVDQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQA")))
(defclass x64-VMOVQQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVQQA")))
(defclass x64-VMOVDQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQA")))
(defclass x64-VMOVDQU-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU")))
(defclass x64-VMOVQQU-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVQQU")))
(defclass x64-VMOVDQU-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU")))
(defclass x64-VMOVHLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHLPS")))
(defclass x64-VMOVHPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHPD")))
(defclass x64-VMOVHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHPS")))
(defclass x64-VMOVLHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLHPS")))
(defclass x64-VMOVLPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLPD")))
(defclass x64-VMOVLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLPS")))
(defclass x64-VMOVMSKPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVMSKPD")))
(defclass x64-VMOVMSKPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVMSKPS")))
(defclass x64-VMOVNTDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQ")))
(defclass x64-VMOVNTQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTQQ")))
(defclass x64-VMOVNTDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQ")))
(defclass x64-VMOVNTDQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQA")))
(defclass x64-VMOVNTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTPD")))
(defclass x64-VMOVNTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTPS")))
(defclass x64-VMOVSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSD")))
(defclass x64-VMOVSHDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSHDUP")))
(defclass x64-VMOVSLDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSLDUP")))
(defclass x64-VMOVSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSS")))
(defclass x64-VMOVUPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVUPD")))
(defclass x64-VMOVUPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVUPS")))
(defclass x64-VMPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VMPSADBW")))
(defclass x64-VMULPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMULPD")))
(defclass x64-VMULPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMULPS")))
(defclass x64-VMULSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMULSD")))
(defclass x64-VMULSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMULSS")))
(defclass x64-VORPD-instruction (x64-asm-instruction) ((name :reader name :initform "VORPD")))
(defclass x64-VORPS-instruction (x64-asm-instruction) ((name :reader name :initform "VORPS")))
(defclass x64-VPABSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSB")))
(defclass x64-VPABSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSW")))
(defclass x64-VPABSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSD")))
(defclass x64-VPACKSSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSWB")))
(defclass x64-VPACKSSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSDW")))
(defclass x64-VPACKUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSWB")))
(defclass x64-VPACKUSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSDW")))
(defclass x64-VPADDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDB")))
(defclass x64-VPADDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDW")))
(defclass x64-VPADDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDD")))
(defclass x64-VPADDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDQ")))
(defclass x64-VPADDSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSB")))
(defclass x64-VPADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSW")))
(defclass x64-VPADDUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSB")))
(defclass x64-VPADDUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSW")))
(defclass x64-VPALIGNR-instruction (x64-asm-instruction) ((name :reader name :initform "VPALIGNR")))
(defclass x64-VPAND-instruction (x64-asm-instruction) ((name :reader name :initform "VPAND")))
(defclass x64-VPANDN-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDN")))
(defclass x64-VPAVGB-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGB")))
(defclass x64-VPAVGW-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGW")))
(defclass x64-VPBLENDVB-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDVB")))
(defclass x64-VPBLENDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDW")))
(defclass x64-VPCMPESTRI-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPESTRI")))
(defclass x64-VPCMPESTRM-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPESTRM")))
(defclass x64-VPCMPISTRI-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPISTRI")))
(defclass x64-VPCMPISTRM-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPISTRM")))
(defclass x64-VPCMPEQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQB")))
(defclass x64-VPCMPEQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQW")))
(defclass x64-VPCMPEQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQD")))
(defclass x64-VPCMPEQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQQ")))
(defclass x64-VPCMPGTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTB")))
(defclass x64-VPCMPGTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTW")))
(defclass x64-VPCMPGTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTD")))
(defclass x64-VPCMPGTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTQ")))
(defclass x64-VPERMILPD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMILPD")))
(defclass x64-VPERMILPS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMILPS")))
(defclass x64-VPERM2F128-instruction (x64-asm-instruction) ((name :reader name :initform "VPERM2F128")))
(defclass x64-VPEXTRB-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRB")))
(defclass x64-VPEXTRW-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRW")))
(defclass x64-VPEXTRD-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRD")))
(defclass x64-VPEXTRQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRQ")))
(defclass x64-VPHADDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDW")))
(defclass x64-VPHADDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDD")))
(defclass x64-VPHADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDSW")))
(defclass x64-VPHMINPOSUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHMINPOSUW")))
(defclass x64-VPHSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBW")))
(defclass x64-VPHSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBD")))
(defclass x64-VPHSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBSW")))
(defclass x64-VPINSRB-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRB")))
(defclass x64-VPINSRW-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRW")))
(defclass x64-VPINSRD-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRD")))
(defclass x64-VPINSRQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRQ")))
(defclass x64-VPMADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDWD")))
(defclass x64-VPMADDUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDUBSW")))
(defclass x64-VPMAXSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSB")))
(defclass x64-VPMAXSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSW")))
(defclass x64-VPMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSD")))
(defclass x64-VPMAXUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUB")))
(defclass x64-VPMAXUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUW")))
(defclass x64-VPMAXUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUD")))
(defclass x64-VPMINSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSB")))
(defclass x64-VPMINSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSW")))
(defclass x64-VPMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSD")))
(defclass x64-VPMINUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUB")))
(defclass x64-VPMINUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUW")))
(defclass x64-VPMINUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUD")))
(defclass x64-VPMOVMSKB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVMSKB")))
(defclass x64-VPMOVSXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBW")))
(defclass x64-VPMOVSXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBD")))
(defclass x64-VPMOVSXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBQ")))
(defclass x64-VPMOVSXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWD")))
(defclass x64-VPMOVSXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWQ")))
(defclass x64-VPMOVSXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXDQ")))
(defclass x64-VPMOVZXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBW")))
(defclass x64-VPMOVZXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBD")))
(defclass x64-VPMOVZXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBQ")))
(defclass x64-VPMOVZXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWD")))
(defclass x64-VPMOVZXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWQ")))
(defclass x64-VPMOVZXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXDQ")))
(defclass x64-VPMULHUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHUW")))
(defclass x64-VPMULHRSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHRSW")))
(defclass x64-VPMULHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHW")))
(defclass x64-VPMULLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLW")))
(defclass x64-VPMULLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLD")))
(defclass x64-VPMULUDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULUDQ")))
(defclass x64-VPMULDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULDQ")))
(defclass x64-VPOR-instruction (x64-asm-instruction) ((name :reader name :initform "VPOR")))
(defclass x64-VPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSADBW")))
(defclass x64-VPSHUFB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFB")))
(defclass x64-VPSHUFD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFD")))
(defclass x64-VPSHUFHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFHW")))
(defclass x64-VPSHUFLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFLW")))
(defclass x64-VPSIGNB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGNB")))
(defclass x64-VPSIGNW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGNW")))
(defclass x64-VPSIGND-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGND")))
(defclass x64-VPSLLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLDQ")))
(defclass x64-VPSRLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLDQ")))
(defclass x64-VPSLLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLW")))
(defclass x64-VPSLLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLD")))
(defclass x64-VPSLLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLQ")))
(defclass x64-VPSRAW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAW")))
(defclass x64-VPSRAD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAD")))
(defclass x64-VPSRLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLW")))
(defclass x64-VPSRLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLD")))
(defclass x64-VPSRLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLQ")))
(defclass x64-VPTEST-instruction (x64-asm-instruction) ((name :reader name :initform "VPTEST")))
(defclass x64-VPSUBB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBB")))
(defclass x64-VPSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBW")))
(defclass x64-VPSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBD")))
(defclass x64-VPSUBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBQ")))
(defclass x64-VPSUBSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSB")))
(defclass x64-VPSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSW")))
(defclass x64-VPSUBUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSB")))
(defclass x64-VPSUBUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSW")))
(defclass x64-VPUNPCKHBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHBW")))
(defclass x64-VPUNPCKHWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHWD")))
(defclass x64-VPUNPCKHDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHDQ")))
(defclass x64-VPUNPCKHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHQDQ")))
(defclass x64-VPUNPCKLBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLBW")))
(defclass x64-VPUNPCKLWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLWD")))
(defclass x64-VPUNPCKLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLDQ")))
(defclass x64-VPUNPCKLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLQDQ")))
(defclass x64-VPXOR-instruction (x64-asm-instruction) ((name :reader name :initform "VPXOR")))
(defclass x64-VRCPPS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCPPS")))
(defclass x64-VRCPSS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCPSS")))
(defclass x64-VRSQRTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRTPS")))
(defclass x64-VRSQRTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRTSS")))
(defclass x64-VROUNDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VROUNDPD")))
(defclass x64-VROUNDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VROUNDPS")))
(defclass x64-VROUNDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VROUNDSD")))
(defclass x64-VROUNDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VROUNDSS")))
(defclass x64-VSHUFPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFPD")))
(defclass x64-VSHUFPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFPS")))
(defclass x64-VSQRTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTPD")))
(defclass x64-VSQRTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTPS")))
(defclass x64-VSQRTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTSD")))
(defclass x64-VSQRTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTSS")))
(defclass x64-VSTMXCSR-instruction (x64-asm-instruction) ((name :reader name :initform "VSTMXCSR")))
(defclass x64-VSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBPD")))
(defclass x64-VSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBPS")))
(defclass x64-VSUBSD-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBSD")))
(defclass x64-VSUBSS-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBSS")))
(defclass x64-VTESTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VTESTPS")))
(defclass x64-VTESTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VTESTPD")))
(defclass x64-VUCOMISD-instruction (x64-asm-instruction) ((name :reader name :initform "VUCOMISD")))
(defclass x64-VUCOMISS-instruction (x64-asm-instruction) ((name :reader name :initform "VUCOMISS")))
(defclass x64-VUNPCKHPD-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKHPD")))
(defclass x64-VUNPCKHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKHPS")))
(defclass x64-VUNPCKLPD-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKLPD")))
(defclass x64-VUNPCKLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKLPS")))
(defclass x64-VXORPD-instruction (x64-asm-instruction) ((name :reader name :initform "VXORPD")))
(defclass x64-VXORPS-instruction (x64-asm-instruction) ((name :reader name :initform "VXORPS")))
(defclass x64-VZEROALL-instruction (x64-asm-instruction) ((name :reader name :initform "VZEROALL")))
(defclass x64-VZEROUPPER-instruction (x64-asm-instruction) ((name :reader name :initform "VZEROUPPER")))
(defclass x64-PCLMULLQLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCLMULLQLQDQ")))
(defclass x64-PCLMULHQLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCLMULHQLQDQ")))
(defclass x64-PCLMULLQHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCLMULLQHQDQ")))
(defclass x64-PCLMULHQHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCLMULHQHQDQ")))
(defclass x64-PCLMULQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "PCLMULQDQ")))
(defclass x64-VPCLMULLQLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCLMULLQLQDQ")))
(defclass x64-VPCLMULHQLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCLMULHQLQDQ")))
(defclass x64-VPCLMULLQHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCLMULLQHQDQ")))
(defclass x64-VPCLMULHQHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCLMULHQHQDQ")))
(defclass x64-VPCLMULQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCLMULQDQ")))
(defclass x64-VFMADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132PS")))
(defclass x64-VFMADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132PD")))
(defclass x64-VFMADD312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD312PS")))
(defclass x64-VFMADD312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD312PD")))
(defclass x64-VFMADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213PS")))
(defclass x64-VFMADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213PD")))
(defclass x64-VFMADD123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD123PS")))
(defclass x64-VFMADD123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD123PD")))
(defclass x64-VFMADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231PS")))
(defclass x64-VFMADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231PD")))
(defclass x64-VFMADD321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD321PS")))
(defclass x64-VFMADD321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD321PD")))
(defclass x64-VFMADDSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB132PS")))
(defclass x64-VFMADDSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB132PD")))
(defclass x64-VFMADDSUB312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB312PS")))
(defclass x64-VFMADDSUB312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB312PD")))
(defclass x64-VFMADDSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB213PS")))
(defclass x64-VFMADDSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB213PD")))
(defclass x64-VFMADDSUB123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB123PS")))
(defclass x64-VFMADDSUB123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB123PD")))
(defclass x64-VFMADDSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB231PS")))
(defclass x64-VFMADDSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB231PD")))
(defclass x64-VFMADDSUB321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB321PS")))
(defclass x64-VFMADDSUB321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB321PD")))
(defclass x64-VFMSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132PS")))
(defclass x64-VFMSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132PD")))
(defclass x64-VFMSUB312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB312PS")))
(defclass x64-VFMSUB312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB312PD")))
(defclass x64-VFMSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213PS")))
(defclass x64-VFMSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213PD")))
(defclass x64-VFMSUB123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB123PS")))
(defclass x64-VFMSUB123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB123PD")))
(defclass x64-VFMSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231PS")))
(defclass x64-VFMSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231PD")))
(defclass x64-VFMSUB321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB321PS")))
(defclass x64-VFMSUB321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB321PD")))
(defclass x64-VFMSUBADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD132PS")))
(defclass x64-VFMSUBADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD132PD")))
(defclass x64-VFMSUBADD312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD312PS")))
(defclass x64-VFMSUBADD312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD312PD")))
(defclass x64-VFMSUBADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD213PS")))
(defclass x64-VFMSUBADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD213PD")))
(defclass x64-VFMSUBADD123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD123PS")))
(defclass x64-VFMSUBADD123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD123PD")))
(defclass x64-VFMSUBADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD231PS")))
(defclass x64-VFMSUBADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD231PD")))
(defclass x64-VFMSUBADD321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD321PS")))
(defclass x64-VFMSUBADD321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD321PD")))
(defclass x64-VFNMADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132PS")))
(defclass x64-VFNMADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132PD")))
(defclass x64-VFNMADD312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD312PS")))
(defclass x64-VFNMADD312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD312PD")))
(defclass x64-VFNMADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213PS")))
(defclass x64-VFNMADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213PD")))
(defclass x64-VFNMADD123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD123PS")))
(defclass x64-VFNMADD123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD123PD")))
(defclass x64-VFNMADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231PS")))
(defclass x64-VFNMADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231PD")))
(defclass x64-VFNMADD321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD321PS")))
(defclass x64-VFNMADD321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD321PD")))
(defclass x64-VFNMSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132PS")))
(defclass x64-VFNMSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132PD")))
(defclass x64-VFNMSUB312PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB312PS")))
(defclass x64-VFNMSUB312PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB312PD")))
(defclass x64-VFNMSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213PS")))
(defclass x64-VFNMSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213PD")))
(defclass x64-VFNMSUB123PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB123PS")))
(defclass x64-VFNMSUB123PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB123PD")))
(defclass x64-VFNMSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231PS")))
(defclass x64-VFNMSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231PD")))
(defclass x64-VFNMSUB321PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB321PS")))
(defclass x64-VFNMSUB321PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB321PD")))
(defclass x64-VFMADD132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132SS")))
(defclass x64-VFMADD132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132SD")))
(defclass x64-VFMADD312SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD312SS")))
(defclass x64-VFMADD312SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD312SD")))
(defclass x64-VFMADD213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213SS")))
(defclass x64-VFMADD213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213SD")))
(defclass x64-VFMADD123SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD123SS")))
(defclass x64-VFMADD123SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD123SD")))
(defclass x64-VFMADD231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231SS")))
(defclass x64-VFMADD231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231SD")))
(defclass x64-VFMADD321SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD321SS")))
(defclass x64-VFMADD321SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD321SD")))
(defclass x64-VFMSUB132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132SS")))
(defclass x64-VFMSUB132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132SD")))
(defclass x64-VFMSUB312SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB312SS")))
(defclass x64-VFMSUB312SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB312SD")))
(defclass x64-VFMSUB213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213SS")))
(defclass x64-VFMSUB213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213SD")))
(defclass x64-VFMSUB123SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB123SS")))
(defclass x64-VFMSUB123SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB123SD")))
(defclass x64-VFMSUB231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231SS")))
(defclass x64-VFMSUB231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231SD")))
(defclass x64-VFMSUB321SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB321SS")))
(defclass x64-VFMSUB321SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB321SD")))
(defclass x64-VFNMADD132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132SS")))
(defclass x64-VFNMADD132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132SD")))
(defclass x64-VFNMADD312SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD312SS")))
(defclass x64-VFNMADD312SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD312SD")))
(defclass x64-VFNMADD213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213SS")))
(defclass x64-VFNMADD213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213SD")))
(defclass x64-VFNMADD123SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD123SS")))
(defclass x64-VFNMADD123SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD123SD")))
(defclass x64-VFNMADD231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231SS")))
(defclass x64-VFNMADD231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231SD")))
(defclass x64-VFNMADD321SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD321SS")))
(defclass x64-VFNMADD321SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD321SD")))
(defclass x64-VFNMSUB132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132SS")))
(defclass x64-VFNMSUB132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132SD")))
(defclass x64-VFNMSUB312SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB312SS")))
(defclass x64-VFNMSUB312SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB312SD")))
(defclass x64-VFNMSUB213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213SS")))
(defclass x64-VFNMSUB213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213SD")))
(defclass x64-VFNMSUB123SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB123SS")))
(defclass x64-VFNMSUB123SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB123SD")))
(defclass x64-VFNMSUB231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231SS")))
(defclass x64-VFNMSUB231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231SD")))
(defclass x64-VFNMSUB321SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB321SS")))
(defclass x64-VFNMSUB321SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB321SD")))
(defclass x64-RDFSBASE-instruction (x64-asm-instruction) ((name :reader name :initform "RDFSBASE")))
(defclass x64-RDGSBASE-instruction (x64-asm-instruction) ((name :reader name :initform "RDGSBASE")))
(defclass x64-RDRAND-instruction (x64-asm-instruction) ((name :reader name :initform "RDRAND")))
(defclass x64-WRFSBASE-instruction (x64-asm-instruction) ((name :reader name :initform "WRFSBASE")))
(defclass x64-WRGSBASE-instruction (x64-asm-instruction) ((name :reader name :initform "WRGSBASE")))
(defclass x64-VCVTPH2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPH2PS")))
(defclass x64-VCVTPS2PH-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2PH")))
(defclass x64-ADCX-instruction (x64-asm-instruction) ((name :reader name :initform "ADCX")))
(defclass x64-ADOX-instruction (x64-asm-instruction) ((name :reader name :initform "ADOX")))
(defclass x64-RDSEED-instruction (x64-asm-instruction) ((name :reader name :initform "RDSEED")))
(defclass x64-CLAC-instruction (x64-asm-instruction) ((name :reader name :initform "CLAC")))
(defclass x64-STAC-instruction (x64-asm-instruction) ((name :reader name :initform "STAC")))
(defclass x64-XSTORE-instruction (x64-asm-instruction) ((name :reader name :initform "XSTORE")))
(defclass x64-XCRYPTECB-instruction (x64-asm-instruction) ((name :reader name :initform "XCRYPTECB")))
(defclass x64-XCRYPTCBC-instruction (x64-asm-instruction) ((name :reader name :initform "XCRYPTCBC")))
(defclass x64-XCRYPTCTR-instruction (x64-asm-instruction) ((name :reader name :initform "XCRYPTCTR")))
(defclass x64-XCRYPTCFB-instruction (x64-asm-instruction) ((name :reader name :initform "XCRYPTCFB")))
(defclass x64-XCRYPTOFB-instruction (x64-asm-instruction) ((name :reader name :initform "XCRYPTOFB")))
(defclass x64-MONTMUL-instruction (x64-asm-instruction) ((name :reader name :initform "MONTMUL")))
(defclass x64-XSHA1-instruction (x64-asm-instruction) ((name :reader name :initform "XSHA1")))
(defclass x64-XSHA256-instruction (x64-asm-instruction) ((name :reader name :initform "XSHA256")))
(defclass x64-LLWPCB-instruction (x64-asm-instruction) ((name :reader name :initform "LLWPCB")))
(defclass x64-SLWPCB-instruction (x64-asm-instruction) ((name :reader name :initform "SLWPCB")))
(defclass x64-LWPVAL-instruction (x64-asm-instruction) ((name :reader name :initform "LWPVAL")))
(defclass x64-LWPINS-instruction (x64-asm-instruction) ((name :reader name :initform "LWPINS")))
(defclass x64-VFMADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDPD")))
(defclass x64-VFMADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDPS")))
(defclass x64-VFMADDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSD")))
(defclass x64-VFMADDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSS")))
(defclass x64-VFMADDSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUBPD")))
(defclass x64-VFMADDSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUBPS")))
(defclass x64-VFMSUBADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADDPD")))
(defclass x64-VFMSUBADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADDPS")))
(defclass x64-VFMSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBPD")))
(defclass x64-VFMSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBPS")))
(defclass x64-VFMSUBSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBSD")))
(defclass x64-VFMSUBSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBSS")))
(defclass x64-VFNMADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADDPD")))
(defclass x64-VFNMADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADDPS")))
(defclass x64-VFNMADDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADDSD")))
(defclass x64-VFNMADDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADDSS")))
(defclass x64-VFNMSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUBPD")))
(defclass x64-VFNMSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUBPS")))
(defclass x64-VFNMSUBSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUBSD")))
(defclass x64-VFNMSUBSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUBSS")))
(defclass x64-VFRCZPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFRCZPD")))
(defclass x64-VFRCZPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFRCZPS")))
(defclass x64-VFRCZSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFRCZSD")))
(defclass x64-VFRCZSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFRCZSS")))
(defclass x64-VPCMOV-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMOV")))
(defclass x64-VPCOMB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMB")))
(defclass x64-VPCOMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMD")))
(defclass x64-VPCOMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMQ")))
(defclass x64-VPCOMUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMUB")))
(defclass x64-VPCOMUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMUD")))
(defclass x64-VPCOMUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMUQ")))
(defclass x64-VPCOMUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMUW")))
(defclass x64-VPCOMW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMW")))
(defclass x64-VPHADDBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDBD")))
(defclass x64-VPHADDBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDBQ")))
(defclass x64-VPHADDBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDBW")))
(defclass x64-VPHADDDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDDQ")))
(defclass x64-VPHADDUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUBD")))
(defclass x64-VPHADDUBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUBQ")))
(defclass x64-VPHADDUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUBW")))
(defclass x64-VPHADDUDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUDQ")))
(defclass x64-VPHADDUWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUWD")))
(defclass x64-VPHADDUWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDUWQ")))
(defclass x64-VPHADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDWD")))
(defclass x64-VPHADDWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDWQ")))
(defclass x64-VPHSUBBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBBW")))
(defclass x64-VPHSUBDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBDQ")))
(defclass x64-VPHSUBWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBWD")))
(defclass x64-VPMACSDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSDD")))
(defclass x64-VPMACSDQH-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSDQH")))
(defclass x64-VPMACSDQL-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSDQL")))
(defclass x64-VPMACSSDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSSDD")))
(defclass x64-VPMACSSDQH-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSSDQH")))
(defclass x64-VPMACSSDQL-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSSDQL")))
(defclass x64-VPMACSSWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSSWD")))
(defclass x64-VPMACSSWW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSSWW")))
(defclass x64-VPMACSWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSWD")))
(defclass x64-VPMACSWW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMACSWW")))
(defclass x64-VPMADCSSWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADCSSWD")))
(defclass x64-VPMADCSWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADCSWD")))
(defclass x64-VPPERM-instruction (x64-asm-instruction) ((name :reader name :initform "VPPERM")))
(defclass x64-VPROTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPROTB")))
(defclass x64-VPROTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPROTD")))
(defclass x64-VPROTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPROTQ")))
(defclass x64-VPROTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPROTW")))
(defclass x64-VPSHAB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHAB")))
(defclass x64-VPSHAD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHAD")))
(defclass x64-VPSHAQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHAQ")))
(defclass x64-VPSHAW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHAW")))
(defclass x64-VPSHLB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHLB")))
(defclass x64-VPSHLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHLD")))
(defclass x64-VPSHLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHLQ")))
(defclass x64-VPSHLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHLW")))
(defclass x64-VMPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VMPSADBW")))
(defclass x64-VPABSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSB")))
(defclass x64-VPABSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSW")))
(defclass x64-VPABSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSD")))
(defclass x64-VPACKSSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSWB")))
(defclass x64-VPACKSSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSDW")))
(defclass x64-VPACKUSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSDW")))
(defclass x64-VPACKUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSWB")))
(defclass x64-VPADDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDB")))
(defclass x64-VPADDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDW")))
(defclass x64-VPADDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDD")))
(defclass x64-VPADDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDQ")))
(defclass x64-VPADDSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSB")))
(defclass x64-VPADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSW")))
(defclass x64-VPADDUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSB")))
(defclass x64-VPADDUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSW")))
(defclass x64-VPALIGNR-instruction (x64-asm-instruction) ((name :reader name :initform "VPALIGNR")))
(defclass x64-VPAND-instruction (x64-asm-instruction) ((name :reader name :initform "VPAND")))
(defclass x64-VPANDN-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDN")))
(defclass x64-VPAVGB-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGB")))
(defclass x64-VPAVGW-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGW")))
(defclass x64-VPBLENDVB-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDVB")))
(defclass x64-VPBLENDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDW")))
(defclass x64-VPCMPEQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQB")))
(defclass x64-VPCMPEQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQW")))
(defclass x64-VPCMPEQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQD")))
(defclass x64-VPCMPEQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQQ")))
(defclass x64-VPCMPGTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTB")))
(defclass x64-VPCMPGTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTW")))
(defclass x64-VPCMPGTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTD")))
(defclass x64-VPCMPGTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTQ")))
(defclass x64-VPHADDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDW")))
(defclass x64-VPHADDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDD")))
(defclass x64-VPHADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHADDSW")))
(defclass x64-VPHSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBW")))
(defclass x64-VPHSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBD")))
(defclass x64-VPHSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPHSUBSW")))
(defclass x64-VPMADDUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDUBSW")))
(defclass x64-VPMADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDWD")))
(defclass x64-VPMAXSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSB")))
(defclass x64-VPMAXSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSW")))
(defclass x64-VPMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSD")))
(defclass x64-VPMAXUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUB")))
(defclass x64-VPMAXUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUW")))
(defclass x64-VPMAXUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUD")))
(defclass x64-VPMINSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSB")))
(defclass x64-VPMINSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSW")))
(defclass x64-VPMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSD")))
(defclass x64-VPMINUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUB")))
(defclass x64-VPMINUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUW")))
(defclass x64-VPMINUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUD")))
(defclass x64-VPMOVMSKB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVMSKB")))
(defclass x64-VPMOVSXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBW")))
(defclass x64-VPMOVSXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBD")))
(defclass x64-VPMOVSXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBQ")))
(defclass x64-VPMOVSXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWD")))
(defclass x64-VPMOVSXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWQ")))
(defclass x64-VPMOVSXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXDQ")))
(defclass x64-VPMOVZXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBW")))
(defclass x64-VPMOVZXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBD")))
(defclass x64-VPMOVZXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBQ")))
(defclass x64-VPMOVZXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWD")))
(defclass x64-VPMOVZXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWQ")))
(defclass x64-VPMOVZXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXDQ")))
(defclass x64-VPMULDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULDQ")))
(defclass x64-VPMULHRSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHRSW")))
(defclass x64-VPMULHUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHUW")))
(defclass x64-VPMULHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHW")))
(defclass x64-VPMULLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLW")))
(defclass x64-VPMULLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLD")))
(defclass x64-VPMULUDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULUDQ")))
(defclass x64-VPOR-instruction (x64-asm-instruction) ((name :reader name :initform "VPOR")))
(defclass x64-VPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSADBW")))
(defclass x64-VPSHUFB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFB")))
(defclass x64-VPSHUFD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFD")))
(defclass x64-VPSHUFHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFHW")))
(defclass x64-VPSHUFLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFLW")))
(defclass x64-VPSIGNB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGNB")))
(defclass x64-VPSIGNW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGNW")))
(defclass x64-VPSIGND-instruction (x64-asm-instruction) ((name :reader name :initform "VPSIGND")))
(defclass x64-VPSLLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLDQ")))
(defclass x64-VPSLLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLW")))
(defclass x64-VPSLLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLD")))
(defclass x64-VPSLLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLQ")))
(defclass x64-VPSRAW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAW")))
(defclass x64-VPSRAD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAD")))
(defclass x64-VPSRLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLDQ")))
(defclass x64-VPSRLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLW")))
(defclass x64-VPSRLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLD")))
(defclass x64-VPSRLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLQ")))
(defclass x64-VPSUBB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBB")))
(defclass x64-VPSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBW")))
(defclass x64-VPSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBD")))
(defclass x64-VPSUBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBQ")))
(defclass x64-VPSUBSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSB")))
(defclass x64-VPSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSW")))
(defclass x64-VPSUBUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSB")))
(defclass x64-VPSUBUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSW")))
(defclass x64-VPUNPCKHBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHBW")))
(defclass x64-VPUNPCKHWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHWD")))
(defclass x64-VPUNPCKHDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHDQ")))
(defclass x64-VPUNPCKHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHQDQ")))
(defclass x64-VPUNPCKLBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLBW")))
(defclass x64-VPUNPCKLWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLWD")))
(defclass x64-VPUNPCKLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLDQ")))
(defclass x64-VPUNPCKLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLQDQ")))
(defclass x64-VPXOR-instruction (x64-asm-instruction) ((name :reader name :initform "VPXOR")))
(defclass x64-VMOVNTDQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQA")))
(defclass x64-VBROADCASTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSS")))
(defclass x64-VBROADCASTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSD")))
(defclass x64-VBROADCASTI128-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI128")))
(defclass x64-VPBLENDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDD")))
(defclass x64-VPBROADCASTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTB")))
(defclass x64-VPBROADCASTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTW")))
(defclass x64-VPBROADCASTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTD")))
(defclass x64-VPBROADCASTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTQ")))
(defclass x64-VPERMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMD")))
(defclass x64-VPERMPD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMPD")))
(defclass x64-VPERMPS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMPS")))
(defclass x64-VPERMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMQ")))
(defclass x64-VPERM2I128-instruction (x64-asm-instruction) ((name :reader name :initform "VPERM2I128")))
(defclass x64-VEXTRACTI128-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTI128")))
(defclass x64-VINSERTI128-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTI128")))
(defclass x64-VPMASKMOVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMASKMOVD")))
(defclass x64-VPMASKMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMASKMOVQ")))
(defclass x64-VPMASKMOVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMASKMOVD")))
(defclass x64-VPMASKMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMASKMOVQ")))
(defclass x64-VPSLLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVD")))
(defclass x64-VPSLLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVQ")))
(defclass x64-VPSLLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVD")))
(defclass x64-VPSLLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVQ")))
(defclass x64-VPSRAVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAVD")))
(defclass x64-VPSRLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVD")))
(defclass x64-VPSRLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVQ")))
(defclass x64-VPSRLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVD")))
(defclass x64-VPSRLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVQ")))
(defclass x64-VGATHERDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPD")))
(defclass x64-VGATHERQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPD")))
(defclass x64-VGATHERDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPD")))
(defclass x64-VGATHERQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPD")))
(defclass x64-VGATHERDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPS")))
(defclass x64-VGATHERQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPS")))
(defclass x64-VGATHERDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPS")))
(defclass x64-VGATHERQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPS")))
(defclass x64-VPGATHERDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDD")))
(defclass x64-VPGATHERQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQD")))
(defclass x64-VPGATHERDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDD")))
(defclass x64-VPGATHERQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQD")))
(defclass x64-VPGATHERDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDQ")))
(defclass x64-VPGATHERQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQQ")))
(defclass x64-VPGATHERDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDQ")))
(defclass x64-VPGATHERQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQQ")))
(defclass x64-XABORT-instruction (x64-asm-instruction) ((name :reader name :initform "XABORT")))
(defclass x64-XBEGIN-instruction (x64-asm-instruction) ((name :reader name :initform "XBEGIN")))
(defclass x64-XEND-instruction (x64-asm-instruction) ((name :reader name :initform "XEND")))
(defclass x64-XTEST-instruction (x64-asm-instruction) ((name :reader name :initform "XTEST")))
(defclass x64-ANDN-instruction (x64-asm-instruction) ((name :reader name :initform "ANDN")))
(defclass x64-BEXTR-instruction (x64-asm-instruction) ((name :reader name :initform "BEXTR")))
(defclass x64-BLCI-instruction (x64-asm-instruction) ((name :reader name :initform "BLCI")))
(defclass x64-BLCIC-instruction (x64-asm-instruction) ((name :reader name :initform "BLCIC")))
(defclass x64-BLSI-instruction (x64-asm-instruction) ((name :reader name :initform "BLSI")))
(defclass x64-BLSIC-instruction (x64-asm-instruction) ((name :reader name :initform "BLSIC")))
(defclass x64-BLCFILL-instruction (x64-asm-instruction) ((name :reader name :initform "BLCFILL")))
(defclass x64-BLSFILL-instruction (x64-asm-instruction) ((name :reader name :initform "BLSFILL")))
(defclass x64-BLCMSK-instruction (x64-asm-instruction) ((name :reader name :initform "BLCMSK")))
(defclass x64-BLSMSK-instruction (x64-asm-instruction) ((name :reader name :initform "BLSMSK")))
(defclass x64-BLSR-instruction (x64-asm-instruction) ((name :reader name :initform "BLSR")))
(defclass x64-BLCS-instruction (x64-asm-instruction) ((name :reader name :initform "BLCS")))
(defclass x64-BZHI-instruction (x64-asm-instruction) ((name :reader name :initform "BZHI")))
(defclass x64-MULX-instruction (x64-asm-instruction) ((name :reader name :initform "MULX")))
(defclass x64-PDEP-instruction (x64-asm-instruction) ((name :reader name :initform "PDEP")))
(defclass x64-PEXT-instruction (x64-asm-instruction) ((name :reader name :initform "PEXT")))
(defclass x64-RORX-instruction (x64-asm-instruction) ((name :reader name :initform "RORX")))
(defclass x64-SARX-instruction (x64-asm-instruction) ((name :reader name :initform "SARX")))
(defclass x64-SHLX-instruction (x64-asm-instruction) ((name :reader name :initform "SHLX")))
(defclass x64-SHRX-instruction (x64-asm-instruction) ((name :reader name :initform "SHRX")))
(defclass x64-TZCNT-instruction (x64-asm-instruction) ((name :reader name :initform "TZCNT")))
(defclass x64-TZMSK-instruction (x64-asm-instruction) ((name :reader name :initform "TZMSK")))
(defclass x64-T1MSKC-instruction (x64-asm-instruction) ((name :reader name :initform "T1MSKC")))
(defclass x64-PREFETCHWT1-instruction (x64-asm-instruction) ((name :reader name :initform "PREFETCHWT1")))
(defclass x64-BNDMK-instruction (x64-asm-instruction) ((name :reader name :initform "BNDMK")))
(defclass x64-BNDCL-instruction (x64-asm-instruction) ((name :reader name :initform "BNDCL")))
(defclass x64-BNDCU-instruction (x64-asm-instruction) ((name :reader name :initform "BNDCU")))
(defclass x64-BNDCN-instruction (x64-asm-instruction) ((name :reader name :initform "BNDCN")))
(defclass x64-BNDMOV-instruction (x64-asm-instruction) ((name :reader name :initform "BNDMOV")))
(defclass x64-BNDLDX-instruction (x64-asm-instruction) ((name :reader name :initform "BNDLDX")))
(defclass x64-BNDSTX-instruction (x64-asm-instruction) ((name :reader name :initform "BNDSTX")))
(defclass x64-KADDB-instruction (x64-asm-instruction) ((name :reader name :initform "KADDB")))
(defclass x64-KADDD-instruction (x64-asm-instruction) ((name :reader name :initform "KADDD")))
(defclass x64-KADDQ-instruction (x64-asm-instruction) ((name :reader name :initform "KADDQ")))
(defclass x64-KADDW-instruction (x64-asm-instruction) ((name :reader name :initform "KADDW")))
(defclass x64-KANDB-instruction (x64-asm-instruction) ((name :reader name :initform "KANDB")))
(defclass x64-KANDD-instruction (x64-asm-instruction) ((name :reader name :initform "KANDD")))
(defclass x64-KANDNB-instruction (x64-asm-instruction) ((name :reader name :initform "KANDNB")))
(defclass x64-KANDND-instruction (x64-asm-instruction) ((name :reader name :initform "KANDND")))
(defclass x64-KANDNQ-instruction (x64-asm-instruction) ((name :reader name :initform "KANDNQ")))
(defclass x64-KANDNW-instruction (x64-asm-instruction) ((name :reader name :initform "KANDNW")))
(defclass x64-KANDQ-instruction (x64-asm-instruction) ((name :reader name :initform "KANDQ")))
(defclass x64-KANDW-instruction (x64-asm-instruction) ((name :reader name :initform "KANDW")))
(defclass x64-KMOVB-instruction (x64-asm-instruction) ((name :reader name :initform "KMOVB")))
(defclass x64-KMOVD-instruction (x64-asm-instruction) ((name :reader name :initform "KMOVD")))
(defclass x64-KMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "KMOVQ")))
(defclass x64-KMOVW-instruction (x64-asm-instruction) ((name :reader name :initform "KMOVW")))
(defclass x64-KNOTB-instruction (x64-asm-instruction) ((name :reader name :initform "KNOTB")))
(defclass x64-KNOTD-instruction (x64-asm-instruction) ((name :reader name :initform "KNOTD")))
(defclass x64-KNOTQ-instruction (x64-asm-instruction) ((name :reader name :initform "KNOTQ")))
(defclass x64-KNOTW-instruction (x64-asm-instruction) ((name :reader name :initform "KNOTW")))
(defclass x64-KORB-instruction (x64-asm-instruction) ((name :reader name :initform "KORB")))
(defclass x64-KORD-instruction (x64-asm-instruction) ((name :reader name :initform "KORD")))
(defclass x64-KORQ-instruction (x64-asm-instruction) ((name :reader name :initform "KORQ")))
(defclass x64-KORTESTB-instruction (x64-asm-instruction) ((name :reader name :initform "KORTESTB")))
(defclass x64-KORTESTD-instruction (x64-asm-instruction) ((name :reader name :initform "KORTESTD")))
(defclass x64-KORTESTQ-instruction (x64-asm-instruction) ((name :reader name :initform "KORTESTQ")))
(defclass x64-KORTESTW-instruction (x64-asm-instruction) ((name :reader name :initform "KORTESTW")))
(defclass x64-KORW-instruction (x64-asm-instruction) ((name :reader name :initform "KORW")))
(defclass x64-KSHIFTLB-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTLB")))
(defclass x64-KSHIFTLD-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTLD")))
(defclass x64-KSHIFTLQ-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTLQ")))
(defclass x64-KSHIFTLW-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTLW")))
(defclass x64-KSHIFTRB-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTRB")))
(defclass x64-KSHIFTRD-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTRD")))
(defclass x64-KSHIFTRQ-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTRQ")))
(defclass x64-KSHIFTRW-instruction (x64-asm-instruction) ((name :reader name :initform "KSHIFTRW")))
(defclass x64-KTESTB-instruction (x64-asm-instruction) ((name :reader name :initform "KTESTB")))
(defclass x64-KTESTD-instruction (x64-asm-instruction) ((name :reader name :initform "KTESTD")))
(defclass x64-KTESTQ-instruction (x64-asm-instruction) ((name :reader name :initform "KTESTQ")))
(defclass x64-KTESTW-instruction (x64-asm-instruction) ((name :reader name :initform "KTESTW")))
(defclass x64-KUNPCKBW-instruction (x64-asm-instruction) ((name :reader name :initform "KUNPCKBW")))
(defclass x64-KUNPCKDQ-instruction (x64-asm-instruction) ((name :reader name :initform "KUNPCKDQ")))
(defclass x64-KUNPCKWD-instruction (x64-asm-instruction) ((name :reader name :initform "KUNPCKWD")))
(defclass x64-KXNORB-instruction (x64-asm-instruction) ((name :reader name :initform "KXNORB")))
(defclass x64-KXNORD-instruction (x64-asm-instruction) ((name :reader name :initform "KXNORD")))
(defclass x64-KXNORQ-instruction (x64-asm-instruction) ((name :reader name :initform "KXNORQ")))
(defclass x64-KXNORW-instruction (x64-asm-instruction) ((name :reader name :initform "KXNORW")))
(defclass x64-KXORB-instruction (x64-asm-instruction) ((name :reader name :initform "KXORB")))
(defclass x64-KXORD-instruction (x64-asm-instruction) ((name :reader name :initform "KXORD")))
(defclass x64-KXORQ-instruction (x64-asm-instruction) ((name :reader name :initform "KXORQ")))
(defclass x64-KXORW-instruction (x64-asm-instruction) ((name :reader name :initform "KXORW")))
(defclass x64-SHA1MSG1-instruction (x64-asm-instruction) ((name :reader name :initform "SHA1MSG1")))
(defclass x64-SHA1MSG2-instruction (x64-asm-instruction) ((name :reader name :initform "SHA1MSG2")))
(defclass x64-SHA1NEXTE-instruction (x64-asm-instruction) ((name :reader name :initform "SHA1NEXTE")))
(defclass x64-SHA1RNDS4-instruction (x64-asm-instruction) ((name :reader name :initform "SHA1RNDS4")))
(defclass x64-SHA256MSG1-instruction (x64-asm-instruction) ((name :reader name :initform "SHA256MSG1")))
(defclass x64-SHA256MSG2-instruction (x64-asm-instruction) ((name :reader name :initform "SHA256MSG2")))
(defclass x64-SHA256RNDS2-instruction (x64-asm-instruction) ((name :reader name :initform "SHA256RNDS2")))
(defclass x64-VADDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VADDPD")))
(defclass x64-VADDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VADDPS")))
(defclass x64-VADDSD-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSD")))
(defclass x64-VADDSS-instruction (x64-asm-instruction) ((name :reader name :initform "VADDSS")))
(defclass x64-VALIGND-instruction (x64-asm-instruction) ((name :reader name :initform "VALIGND")))
(defclass x64-VALIGNQ-instruction (x64-asm-instruction) ((name :reader name :initform "VALIGNQ")))
(defclass x64-VANDNPD-instruction (x64-asm-instruction) ((name :reader name :initform "VANDNPD")))
(defclass x64-VANDNPS-instruction (x64-asm-instruction) ((name :reader name :initform "VANDNPS")))
(defclass x64-VANDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VANDPD")))
(defclass x64-VANDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VANDPS")))
(defclass x64-VBLENDMPD-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDMPD")))
(defclass x64-VBLENDMPS-instruction (x64-asm-instruction) ((name :reader name :initform "VBLENDMPS")))
(defclass x64-VBROADCASTF32X2-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF32X2")))
(defclass x64-VBROADCASTF32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF32X4")))
(defclass x64-VBROADCASTF32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF32X8")))
(defclass x64-VBROADCASTF64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF64X2")))
(defclass x64-VBROADCASTF64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTF64X4")))
(defclass x64-VBROADCASTI32X2-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI32X2")))
(defclass x64-VBROADCASTI32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI32X4")))
(defclass x64-VBROADCASTI32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI32X8")))
(defclass x64-VBROADCASTI64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI64X2")))
(defclass x64-VBROADCASTI64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTI64X4")))
(defclass x64-VBROADCASTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSD")))
(defclass x64-VBROADCASTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VBROADCASTSS")))
(defclass x64-VCMPPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPPD")))
(defclass x64-VCMPPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPPS")))
(defclass x64-VCMPSD-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPSD")))
(defclass x64-VCMPSS-instruction (x64-asm-instruction) ((name :reader name :initform "VCMPSS")))
(defclass x64-VCOMISD-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMISD")))
(defclass x64-VCOMISS-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMISS")))
(defclass x64-VCOMPRESSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMPRESSPD")))
(defclass x64-VCOMPRESSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VCOMPRESSPS")))
(defclass x64-VCVTDQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTDQ2PD")))
(defclass x64-VCVTDQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTDQ2PS")))
(defclass x64-VCVTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2DQ")))
(defclass x64-VCVTPD2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2PS")))
(defclass x64-VCVTPD2QQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2QQ")))
(defclass x64-VCVTPD2UDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2UDQ")))
(defclass x64-VCVTPD2UQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPD2UQQ")))
(defclass x64-VCVTPH2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPH2PS")))
(defclass x64-VCVTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2DQ")))
(defclass x64-VCVTPS2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2PD")))
(defclass x64-VCVTPS2PH-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2PH")))
(defclass x64-VCVTPS2QQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2QQ")))
(defclass x64-VCVTPS2UDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2UDQ")))
(defclass x64-VCVTPS2UQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTPS2UQQ")))
(defclass x64-VCVTQQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTQQ2PD")))
(defclass x64-VCVTQQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTQQ2PS")))
(defclass x64-VCVTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSD2SI")))
(defclass x64-VCVTSD2SS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSD2SS")))
(defclass x64-VCVTSD2USI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSD2USI")))
(defclass x64-VCVTSI2SD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSI2SD")))
(defclass x64-VCVTSI2SS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSI2SS")))
(defclass x64-VCVTSS2SD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSS2SD")))
(defclass x64-VCVTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSS2SI")))
(defclass x64-VCVTSS2USI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTSS2USI")))
(defclass x64-VCVTTPD2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPD2DQ")))
(defclass x64-VCVTTPD2QQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPD2QQ")))
(defclass x64-VCVTTPD2UDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPD2UDQ")))
(defclass x64-VCVTTPD2UQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPD2UQQ")))
(defclass x64-VCVTTPS2DQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPS2DQ")))
(defclass x64-VCVTTPS2QQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPS2QQ")))
(defclass x64-VCVTTPS2UDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPS2UDQ")))
(defclass x64-VCVTTPS2UQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTPS2UQQ")))
(defclass x64-VCVTTSD2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSD2SI")))
(defclass x64-VCVTTSD2USI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSD2USI")))
(defclass x64-VCVTTSS2SI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSS2SI")))
(defclass x64-VCVTTSS2USI-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTTSS2USI")))
(defclass x64-VCVTUDQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUDQ2PD")))
(defclass x64-VCVTUDQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUDQ2PS")))
(defclass x64-VCVTUQQ2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUQQ2PD")))
(defclass x64-VCVTUQQ2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUQQ2PS")))
(defclass x64-VCVTUSI2SD-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUSI2SD")))
(defclass x64-VCVTUSI2SS-instruction (x64-asm-instruction) ((name :reader name :initform "VCVTUSI2SS")))
(defclass x64-VDBPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VDBPSADBW")))
(defclass x64-VDIVPD-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVPD")))
(defclass x64-VDIVPS-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVPS")))
(defclass x64-VDIVSD-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVSD")))
(defclass x64-VDIVSS-instruction (x64-asm-instruction) ((name :reader name :initform "VDIVSS")))
(defclass x64-VEXP2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VEXP2PD")))
(defclass x64-VEXP2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VEXP2PS")))
(defclass x64-VEXPANDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VEXPANDPD")))
(defclass x64-VEXPANDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VEXPANDPS")))
(defclass x64-VEXTRACTF32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTF32X4")))
(defclass x64-VEXTRACTF32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTF32X8")))
(defclass x64-VEXTRACTF64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTF64X2")))
(defclass x64-VEXTRACTF64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTF64X4")))
(defclass x64-VEXTRACTI32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTI32X4")))
(defclass x64-VEXTRACTI32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTI32X8")))
(defclass x64-VEXTRACTI64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTI64X2")))
(defclass x64-VEXTRACTI64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTI64X4")))
(defclass x64-VEXTRACTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VEXTRACTPS")))
(defclass x64-VFIXUPIMMPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFIXUPIMMPD")))
(defclass x64-VFIXUPIMMPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFIXUPIMMPS")))
(defclass x64-VFIXUPIMMSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFIXUPIMMSD")))
(defclass x64-VFIXUPIMMSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFIXUPIMMSS")))
(defclass x64-VFMADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132PD")))
(defclass x64-VFMADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132PS")))
(defclass x64-VFMADD132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132SD")))
(defclass x64-VFMADD132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD132SS")))
(defclass x64-VFMADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213PD")))
(defclass x64-VFMADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213PS")))
(defclass x64-VFMADD213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213SD")))
(defclass x64-VFMADD213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD213SS")))
(defclass x64-VFMADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231PD")))
(defclass x64-VFMADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231PS")))
(defclass x64-VFMADD231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231SD")))
(defclass x64-VFMADD231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADD231SS")))
(defclass x64-VFMADDSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB132PD")))
(defclass x64-VFMADDSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB132PS")))
(defclass x64-VFMADDSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB213PD")))
(defclass x64-VFMADDSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB213PS")))
(defclass x64-VFMADDSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB231PD")))
(defclass x64-VFMADDSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMADDSUB231PS")))
(defclass x64-VFMSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132PD")))
(defclass x64-VFMSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132PS")))
(defclass x64-VFMSUB132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132SD")))
(defclass x64-VFMSUB132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB132SS")))
(defclass x64-VFMSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213PD")))
(defclass x64-VFMSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213PS")))
(defclass x64-VFMSUB213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213SD")))
(defclass x64-VFMSUB213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB213SS")))
(defclass x64-VFMSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231PD")))
(defclass x64-VFMSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231PS")))
(defclass x64-VFMSUB231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231SD")))
(defclass x64-VFMSUB231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUB231SS")))
(defclass x64-VFMSUBADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD132PD")))
(defclass x64-VFMSUBADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD132PS")))
(defclass x64-VFMSUBADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD213PD")))
(defclass x64-VFMSUBADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD213PS")))
(defclass x64-VFMSUBADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD231PD")))
(defclass x64-VFMSUBADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFMSUBADD231PS")))
(defclass x64-VFNMADD132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132PD")))
(defclass x64-VFNMADD132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132PS")))
(defclass x64-VFNMADD132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132SD")))
(defclass x64-VFNMADD132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD132SS")))
(defclass x64-VFNMADD213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213PD")))
(defclass x64-VFNMADD213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213PS")))
(defclass x64-VFNMADD213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213SD")))
(defclass x64-VFNMADD213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD213SS")))
(defclass x64-VFNMADD231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231PD")))
(defclass x64-VFNMADD231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231PS")))
(defclass x64-VFNMADD231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231SD")))
(defclass x64-VFNMADD231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMADD231SS")))
(defclass x64-VFNMSUB132PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132PD")))
(defclass x64-VFNMSUB132PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132PS")))
(defclass x64-VFNMSUB132SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132SD")))
(defclass x64-VFNMSUB132SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB132SS")))
(defclass x64-VFNMSUB213PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213PD")))
(defclass x64-VFNMSUB213PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213PS")))
(defclass x64-VFNMSUB213SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213SD")))
(defclass x64-VFNMSUB213SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB213SS")))
(defclass x64-VFNMSUB231PD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231PD")))
(defclass x64-VFNMSUB231PS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231PS")))
(defclass x64-VFNMSUB231SD-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231SD")))
(defclass x64-VFNMSUB231SS-instruction (x64-asm-instruction) ((name :reader name :initform "VFNMSUB231SS")))
(defclass x64-VFPCLASSPD-instruction (x64-asm-instruction) ((name :reader name :initform "VFPCLASSPD")))
(defclass x64-VFPCLASSPS-instruction (x64-asm-instruction) ((name :reader name :initform "VFPCLASSPS")))
(defclass x64-VFPCLASSSD-instruction (x64-asm-instruction) ((name :reader name :initform "VFPCLASSSD")))
(defclass x64-VFPCLASSSS-instruction (x64-asm-instruction) ((name :reader name :initform "VFPCLASSSS")))
(defclass x64-VGATHERDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPD")))
(defclass x64-VGATHERDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERDPS")))
(defclass x64-VGATHERPF0DPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF0DPD")))
(defclass x64-VGATHERPF0DPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF0DPS")))
(defclass x64-VGATHERPF0QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF0QPD")))
(defclass x64-VGATHERPF0QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF0QPS")))
(defclass x64-VGATHERPF1DPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF1DPD")))
(defclass x64-VGATHERPF1DPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF1DPS")))
(defclass x64-VGATHERPF1QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF1QPD")))
(defclass x64-VGATHERPF1QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERPF1QPS")))
(defclass x64-VGATHERQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPD")))
(defclass x64-VGATHERQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGATHERQPS")))
(defclass x64-VGETEXPPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGETEXPPD")))
(defclass x64-VGETEXPPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGETEXPPS")))
(defclass x64-VGETEXPSD-instruction (x64-asm-instruction) ((name :reader name :initform "VGETEXPSD")))
(defclass x64-VGETEXPSS-instruction (x64-asm-instruction) ((name :reader name :initform "VGETEXPSS")))
(defclass x64-VGETMANTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VGETMANTPD")))
(defclass x64-VGETMANTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VGETMANTPS")))
(defclass x64-VGETMANTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VGETMANTSD")))
(defclass x64-VGETMANTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VGETMANTSS")))
(defclass x64-VINSERTF32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTF32X4")))
(defclass x64-VINSERTF32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTF32X8")))
(defclass x64-VINSERTF64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTF64X2")))
(defclass x64-VINSERTF64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTF64X4")))
(defclass x64-VINSERTI32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTI32X4")))
(defclass x64-VINSERTI32X8-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTI32X8")))
(defclass x64-VINSERTI64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTI64X2")))
(defclass x64-VINSERTI64X4-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTI64X4")))
(defclass x64-VINSERTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VINSERTPS")))
(defclass x64-VMAXPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXPD")))
(defclass x64-VMAXPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXPS")))
(defclass x64-VMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXSD")))
(defclass x64-VMAXSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMAXSS")))
(defclass x64-VMINPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMINPD")))
(defclass x64-VMINPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMINPS")))
(defclass x64-VMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMINSD")))
(defclass x64-VMINSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMINSS")))
(defclass x64-VMOVAPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVAPD")))
(defclass x64-VMOVAPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVAPS")))
(defclass x64-VMOVD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVD")))
(defclass x64-VMOVDDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDDUP")))
(defclass x64-VMOVDQA32-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQA32")))
(defclass x64-VMOVDQA64-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQA64")))
(defclass x64-VMOVDQU16-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU16")))
(defclass x64-VMOVDQU32-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU32")))
(defclass x64-VMOVDQU64-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU64")))
(defclass x64-VMOVDQU8-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVDQU8")))
(defclass x64-VMOVHLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHLPS")))
(defclass x64-VMOVHPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHPD")))
(defclass x64-VMOVHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVHPS")))
(defclass x64-VMOVLHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLHPS")))
(defclass x64-VMOVLPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLPD")))
(defclass x64-VMOVLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVLPS")))
(defclass x64-VMOVNTDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQ")))
(defclass x64-VMOVNTDQA-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTDQA")))
(defclass x64-VMOVNTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTPD")))
(defclass x64-VMOVNTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVNTPS")))
(defclass x64-VMOVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVQ")))
(defclass x64-VMOVSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSD")))
(defclass x64-VMOVSHDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSHDUP")))
(defclass x64-VMOVSLDUP-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSLDUP")))
(defclass x64-VMOVSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVSS")))
(defclass x64-VMOVUPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVUPD")))
(defclass x64-VMOVUPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMOVUPS")))
(defclass x64-VMULPD-instruction (x64-asm-instruction) ((name :reader name :initform "VMULPD")))
(defclass x64-VMULPS-instruction (x64-asm-instruction) ((name :reader name :initform "VMULPS")))
(defclass x64-VMULSD-instruction (x64-asm-instruction) ((name :reader name :initform "VMULSD")))
(defclass x64-VMULSS-instruction (x64-asm-instruction) ((name :reader name :initform "VMULSS")))
(defclass x64-VORPD-instruction (x64-asm-instruction) ((name :reader name :initform "VORPD")))
(defclass x64-VORPS-instruction (x64-asm-instruction) ((name :reader name :initform "VORPS")))
(defclass x64-VPABSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSB")))
(defclass x64-VPABSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSD")))
(defclass x64-VPABSQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSQ")))
(defclass x64-VPABSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPABSW")))
(defclass x64-VPACKSSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSDW")))
(defclass x64-VPACKSSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKSSWB")))
(defclass x64-VPACKUSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSDW")))
(defclass x64-VPACKUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPACKUSWB")))
(defclass x64-VPADDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDB")))
(defclass x64-VPADDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDD")))
(defclass x64-VPADDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDQ")))
(defclass x64-VPADDSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSB")))
(defclass x64-VPADDSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDSW")))
(defclass x64-VPADDUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSB")))
(defclass x64-VPADDUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDUSW")))
(defclass x64-VPADDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPADDW")))
(defclass x64-VPALIGNR-instruction (x64-asm-instruction) ((name :reader name :initform "VPALIGNR")))
(defclass x64-VPANDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDD")))
(defclass x64-VPANDND-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDND")))
(defclass x64-VPANDNQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDNQ")))
(defclass x64-VPANDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPANDQ")))
(defclass x64-VPAVGB-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGB")))
(defclass x64-VPAVGW-instruction (x64-asm-instruction) ((name :reader name :initform "VPAVGW")))
(defclass x64-VPBLENDMB-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDMB")))
(defclass x64-VPBLENDMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDMD")))
(defclass x64-VPBLENDMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDMQ")))
(defclass x64-VPBLENDMW-instruction (x64-asm-instruction) ((name :reader name :initform "VPBLENDMW")))
(defclass x64-VPBROADCASTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTB")))
(defclass x64-VPBROADCASTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTD")))
(defclass x64-VPBROADCASTMB2Q-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTMB2Q")))
(defclass x64-VPBROADCASTMW2D-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTMW2D")))
(defclass x64-VPBROADCASTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTQ")))
(defclass x64-VPBROADCASTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPBROADCASTW")))
(defclass x64-VPCMPB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPB")))
(defclass x64-VPCMPD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPD")))
(defclass x64-VPCMPEQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQB")))
(defclass x64-VPCMPEQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQD")))
(defclass x64-VPCMPEQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQQ")))
(defclass x64-VPCMPEQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPEQW")))
(defclass x64-VPCMPGTB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTB")))
(defclass x64-VPCMPGTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTD")))
(defclass x64-VPCMPGTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTQ")))
(defclass x64-VPCMPGTW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPGTW")))
(defclass x64-VPCMPQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPQ")))
(defclass x64-VPCMPUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPUB")))
(defclass x64-VPCMPUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPUD")))
(defclass x64-VPCMPUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPUQ")))
(defclass x64-VPCMPUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPUW")))
(defclass x64-VPCMPW-instruction (x64-asm-instruction) ((name :reader name :initform "VPCMPW")))
(defclass x64-VPCOMPRESSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMPRESSD")))
(defclass x64-VPCOMPRESSQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCOMPRESSQ")))
(defclass x64-VPCONFLICTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPCONFLICTD")))
(defclass x64-VPCONFLICTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPCONFLICTQ")))
(defclass x64-VPERMB-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMB")))
(defclass x64-VPERMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMD")))
(defclass x64-VPERMI2B-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2B")))
(defclass x64-VPERMI2D-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2D")))
(defclass x64-VPERMI2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2PD")))
(defclass x64-VPERMI2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2PS")))
(defclass x64-VPERMI2Q-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2Q")))
(defclass x64-VPERMI2W-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMI2W")))
(defclass x64-VPERMILPD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMILPD")))
(defclass x64-VPERMILPS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMILPS")))
(defclass x64-VPERMPD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMPD")))
(defclass x64-VPERMPS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMPS")))
(defclass x64-VPERMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMQ")))
(defclass x64-VPERMT2B-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2B")))
(defclass x64-VPERMT2D-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2D")))
(defclass x64-VPERMT2PD-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2PD")))
(defclass x64-VPERMT2PS-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2PS")))
(defclass x64-VPERMT2Q-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2Q")))
(defclass x64-VPERMT2W-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMT2W")))
(defclass x64-VPERMW-instruction (x64-asm-instruction) ((name :reader name :initform "VPERMW")))
(defclass x64-VPEXPANDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXPANDD")))
(defclass x64-VPEXPANDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXPANDQ")))
(defclass x64-VPEXTRB-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRB")))
(defclass x64-VPEXTRD-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRD")))
(defclass x64-VPEXTRQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRQ")))
(defclass x64-VPEXTRW-instruction (x64-asm-instruction) ((name :reader name :initform "VPEXTRW")))
(defclass x64-VPGATHERDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDD")))
(defclass x64-VPGATHERDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERDQ")))
(defclass x64-VPGATHERQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQD")))
(defclass x64-VPGATHERQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPGATHERQQ")))
(defclass x64-VPINSRB-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRB")))
(defclass x64-VPINSRD-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRD")))
(defclass x64-VPINSRQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRQ")))
(defclass x64-VPINSRW-instruction (x64-asm-instruction) ((name :reader name :initform "VPINSRW")))
(defclass x64-VPLZCNTD-instruction (x64-asm-instruction) ((name :reader name :initform "VPLZCNTD")))
(defclass x64-VPLZCNTQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPLZCNTQ")))
(defclass x64-VPMADD52HUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADD52HUQ")))
(defclass x64-VPMADD52LUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADD52LUQ")))
(defclass x64-VPMADDUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDUBSW")))
(defclass x64-VPMADDWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMADDWD")))
(defclass x64-VPMAXSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSB")))
(defclass x64-VPMAXSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSD")))
(defclass x64-VPMAXSQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSQ")))
(defclass x64-VPMAXSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXSW")))
(defclass x64-VPMAXUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUB")))
(defclass x64-VPMAXUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUD")))
(defclass x64-VPMAXUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUQ")))
(defclass x64-VPMAXUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMAXUW")))
(defclass x64-VPMINSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSB")))
(defclass x64-VPMINSD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSD")))
(defclass x64-VPMINSQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSQ")))
(defclass x64-VPMINSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINSW")))
(defclass x64-VPMINUB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUB")))
(defclass x64-VPMINUD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUD")))
(defclass x64-VPMINUQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUQ")))
(defclass x64-VPMINUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMINUW")))
(defclass x64-VPMOVB2M-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVB2M")))
(defclass x64-VPMOVD2M-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVD2M")))
(defclass x64-VPMOVDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVDB")))
(defclass x64-VPMOVDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVDW")))
(defclass x64-VPMOVM2B-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVM2B")))
(defclass x64-VPMOVM2D-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVM2D")))
(defclass x64-VPMOVM2Q-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVM2Q")))
(defclass x64-VPMOVM2W-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVM2W")))
(defclass x64-VPMOVQ2M-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVQ2M")))
(defclass x64-VPMOVQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVQB")))
(defclass x64-VPMOVQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVQD")))
(defclass x64-VPMOVQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVQW")))
(defclass x64-VPMOVSDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSDB")))
(defclass x64-VPMOVSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSDW")))
(defclass x64-VPMOVSQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSQB")))
(defclass x64-VPMOVSQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSQD")))
(defclass x64-VPMOVSQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSQW")))
(defclass x64-VPMOVSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSWB")))
(defclass x64-VPMOVSXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBD")))
(defclass x64-VPMOVSXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBQ")))
(defclass x64-VPMOVSXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXBW")))
(defclass x64-VPMOVSXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXDQ")))
(defclass x64-VPMOVSXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWD")))
(defclass x64-VPMOVSXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVSXWQ")))
(defclass x64-VPMOVUSDB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSDB")))
(defclass x64-VPMOVUSDW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSDW")))
(defclass x64-VPMOVUSQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSQB")))
(defclass x64-VPMOVUSQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSQD")))
(defclass x64-VPMOVUSQW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSQW")))
(defclass x64-VPMOVUSWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVUSWB")))
(defclass x64-VPMOVW2M-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVW2M")))
(defclass x64-VPMOVWB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVWB")))
(defclass x64-VPMOVZXBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBD")))
(defclass x64-VPMOVZXBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBQ")))
(defclass x64-VPMOVZXBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXBW")))
(defclass x64-VPMOVZXDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXDQ")))
(defclass x64-VPMOVZXWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWD")))
(defclass x64-VPMOVZXWQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMOVZXWQ")))
(defclass x64-VPMULDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULDQ")))
(defclass x64-VPMULHRSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHRSW")))
(defclass x64-VPMULHUW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHUW")))
(defclass x64-VPMULHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULHW")))
(defclass x64-VPMULLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLD")))
(defclass x64-VPMULLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLQ")))
(defclass x64-VPMULLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULLW")))
(defclass x64-VPMULTISHIFTQB-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULTISHIFTQB")))
(defclass x64-VPMULUDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPMULUDQ")))
(defclass x64-VPORD-instruction (x64-asm-instruction) ((name :reader name :initform "VPORD")))
(defclass x64-VPORQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPORQ")))
(defclass x64-VPROLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPROLD")))
(defclass x64-VPROLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPROLQ")))
(defclass x64-VPROLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPROLVD")))
(defclass x64-VPROLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPROLVQ")))
(defclass x64-VPRORD-instruction (x64-asm-instruction) ((name :reader name :initform "VPRORD")))
(defclass x64-VPRORQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPRORQ")))
(defclass x64-VPRORVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPRORVD")))
(defclass x64-VPRORVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPRORVQ")))
(defclass x64-VPSADBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSADBW")))
(defclass x64-VPSCATTERDD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSCATTERDD")))
(defclass x64-VPSCATTERDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSCATTERDQ")))
(defclass x64-VPSCATTERQD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSCATTERQD")))
(defclass x64-VPSCATTERQQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSCATTERQQ")))
(defclass x64-VPSHUFB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFB")))
(defclass x64-VPSHUFD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFD")))
(defclass x64-VPSHUFHW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFHW")))
(defclass x64-VPSHUFLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSHUFLW")))
(defclass x64-VPSLLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLD")))
(defclass x64-VPSLLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLDQ")))
(defclass x64-VPSLLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLQ")))
(defclass x64-VPSLLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVD")))
(defclass x64-VPSLLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVQ")))
(defclass x64-VPSLLVW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLVW")))
(defclass x64-VPSLLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSLLW")))
(defclass x64-VPSRAD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAD")))
(defclass x64-VPSRAQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAQ")))
(defclass x64-VPSRAVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAVD")))
(defclass x64-VPSRAVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAVQ")))
(defclass x64-VPSRAVW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAVW")))
(defclass x64-VPSRAW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRAW")))
(defclass x64-VPSRLD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLD")))
(defclass x64-VPSRLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLDQ")))
(defclass x64-VPSRLQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLQ")))
(defclass x64-VPSRLVD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVD")))
(defclass x64-VPSRLVQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVQ")))
(defclass x64-VPSRLVW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLVW")))
(defclass x64-VPSRLW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSRLW")))
(defclass x64-VPSUBB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBB")))
(defclass x64-VPSUBD-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBD")))
(defclass x64-VPSUBQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBQ")))
(defclass x64-VPSUBSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSB")))
(defclass x64-VPSUBSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBSW")))
(defclass x64-VPSUBUSB-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSB")))
(defclass x64-VPSUBUSW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBUSW")))
(defclass x64-VPSUBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPSUBW")))
(defclass x64-VPTERNLOGD-instruction (x64-asm-instruction) ((name :reader name :initform "VPTERNLOGD")))
(defclass x64-VPTERNLOGQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPTERNLOGQ")))
(defclass x64-VPTESTMB-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTMB")))
(defclass x64-VPTESTMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTMD")))
(defclass x64-VPTESTMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTMQ")))
(defclass x64-VPTESTMW-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTMW")))
(defclass x64-VPTESTNMB-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTNMB")))
(defclass x64-VPTESTNMD-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTNMD")))
(defclass x64-VPTESTNMQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTNMQ")))
(defclass x64-VPTESTNMW-instruction (x64-asm-instruction) ((name :reader name :initform "VPTESTNMW")))
(defclass x64-VPUNPCKHBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHBW")))
(defclass x64-VPUNPCKHDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHDQ")))
(defclass x64-VPUNPCKHQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHQDQ")))
(defclass x64-VPUNPCKHWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKHWD")))
(defclass x64-VPUNPCKLBW-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLBW")))
(defclass x64-VPUNPCKLDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLDQ")))
(defclass x64-VPUNPCKLQDQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLQDQ")))
(defclass x64-VPUNPCKLWD-instruction (x64-asm-instruction) ((name :reader name :initform "VPUNPCKLWD")))
(defclass x64-VPXORD-instruction (x64-asm-instruction) ((name :reader name :initform "VPXORD")))
(defclass x64-VPXORQ-instruction (x64-asm-instruction) ((name :reader name :initform "VPXORQ")))
(defclass x64-VRANGEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VRANGEPD")))
(defclass x64-VRANGEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VRANGEPS")))
(defclass x64-VRANGESD-instruction (x64-asm-instruction) ((name :reader name :initform "VRANGESD")))
(defclass x64-VRANGESS-instruction (x64-asm-instruction) ((name :reader name :initform "VRANGESS")))
(defclass x64-VRCP14PD-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP14PD")))
(defclass x64-VRCP14PS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP14PS")))
(defclass x64-VRCP14SD-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP14SD")))
(defclass x64-VRCP14SS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP14SS")))
(defclass x64-VRCP28PD-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP28PD")))
(defclass x64-VRCP28PS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP28PS")))
(defclass x64-VRCP28SD-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP28SD")))
(defclass x64-VRCP28SS-instruction (x64-asm-instruction) ((name :reader name :initform "VRCP28SS")))
(defclass x64-VREDUCEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VREDUCEPD")))
(defclass x64-VREDUCEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VREDUCEPS")))
(defclass x64-VREDUCESD-instruction (x64-asm-instruction) ((name :reader name :initform "VREDUCESD")))
(defclass x64-VREDUCESS-instruction (x64-asm-instruction) ((name :reader name :initform "VREDUCESS")))
(defclass x64-VRNDSCALEPD-instruction (x64-asm-instruction) ((name :reader name :initform "VRNDSCALEPD")))
(defclass x64-VRNDSCALEPS-instruction (x64-asm-instruction) ((name :reader name :initform "VRNDSCALEPS")))
(defclass x64-VRNDSCALESD-instruction (x64-asm-instruction) ((name :reader name :initform "VRNDSCALESD")))
(defclass x64-VRNDSCALESS-instruction (x64-asm-instruction) ((name :reader name :initform "VRNDSCALESS")))
(defclass x64-VRSQRT14PD-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT14PD")))
(defclass x64-VRSQRT14PS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT14PS")))
(defclass x64-VRSQRT14SD-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT14SD")))
(defclass x64-VRSQRT14SS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT14SS")))
(defclass x64-VRSQRT28PD-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT28PD")))
(defclass x64-VRSQRT28PS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT28PS")))
(defclass x64-VRSQRT28SD-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT28SD")))
(defclass x64-VRSQRT28SS-instruction (x64-asm-instruction) ((name :reader name :initform "VRSQRT28SS")))
(defclass x64-VSCALEFPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCALEFPD")))
(defclass x64-VSCALEFPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCALEFPS")))
(defclass x64-VSCALEFSD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCALEFSD")))
(defclass x64-VSCALEFSS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCALEFSS")))
(defclass x64-VSCATTERDPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERDPD")))
(defclass x64-VSCATTERDPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERDPS")))
(defclass x64-VSCATTERPF0DPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF0DPD")))
(defclass x64-VSCATTERPF0DPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF0DPS")))
(defclass x64-VSCATTERPF0QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF0QPD")))
(defclass x64-VSCATTERPF0QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF0QPS")))
(defclass x64-VSCATTERPF1DPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF1DPD")))
(defclass x64-VSCATTERPF1DPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF1DPS")))
(defclass x64-VSCATTERPF1QPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF1QPD")))
(defclass x64-VSCATTERPF1QPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERPF1QPS")))
(defclass x64-VSCATTERQPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERQPD")))
(defclass x64-VSCATTERQPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSCATTERQPS")))
(defclass x64-VSHUFF32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFF32X4")))
(defclass x64-VSHUFF64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFF64X2")))
(defclass x64-VSHUFI32X4-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFI32X4")))
(defclass x64-VSHUFI64X2-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFI64X2")))
(defclass x64-VSHUFPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFPD")))
(defclass x64-VSHUFPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSHUFPS")))
(defclass x64-VSQRTPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTPD")))
(defclass x64-VSQRTPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTPS")))
(defclass x64-VSQRTSD-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTSD")))
(defclass x64-VSQRTSS-instruction (x64-asm-instruction) ((name :reader name :initform "VSQRTSS")))
(defclass x64-VSUBPD-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBPD")))
(defclass x64-VSUBPS-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBPS")))
(defclass x64-VSUBSD-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBSD")))
(defclass x64-VSUBSS-instruction (x64-asm-instruction) ((name :reader name :initform "VSUBSS")))
(defclass x64-VUCOMISD-instruction (x64-asm-instruction) ((name :reader name :initform "VUCOMISD")))
(defclass x64-VUCOMISS-instruction (x64-asm-instruction) ((name :reader name :initform "VUCOMISS")))
(defclass x64-VUNPCKHPD-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKHPD")))
(defclass x64-VUNPCKHPS-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKHPS")))
(defclass x64-VUNPCKLPD-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKLPD")))
(defclass x64-VUNPCKLPS-instruction (x64-asm-instruction) ((name :reader name :initform "VUNPCKLPS")))
(defclass x64-VXORPD-instruction (x64-asm-instruction) ((name :reader name :initform "VXORPD")))
(defclass x64-VXORPS-instruction (x64-asm-instruction) ((name :reader name :initform "VXORPS")))
(defclass x64-CLFLUSHOPT-instruction (x64-asm-instruction) ((name :reader name :initform "CLFLUSHOPT")))
(defclass x64-HINT_NOP0-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP0")))
(defclass x64-HINT_NOP1-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP1")))
(defclass x64-HINT_NOP2-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP2")))
(defclass x64-HINT_NOP3-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP3")))
(defclass x64-HINT_NOP4-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP4")))
(defclass x64-HINT_NOP5-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP5")))
(defclass x64-HINT_NOP6-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP6")))
(defclass x64-HINT_NOP7-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP7")))
(defclass x64-HINT_NOP8-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP8")))
(defclass x64-HINT_NOP9-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP9")))
(defclass x64-HINT_NOP10-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP10")))
(defclass x64-HINT_NOP11-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP11")))
(defclass x64-HINT_NOP12-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP12")))
(defclass x64-HINT_NOP13-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP13")))
(defclass x64-HINT_NOP14-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP14")))
(defclass x64-HINT_NOP15-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP15")))
(defclass x64-HINT_NOP16-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP16")))
(defclass x64-HINT_NOP17-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP17")))
(defclass x64-HINT_NOP18-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP18")))
(defclass x64-HINT_NOP19-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP19")))
(defclass x64-HINT_NOP20-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP20")))
(defclass x64-HINT_NOP21-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP21")))
(defclass x64-HINT_NOP22-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP22")))
(defclass x64-HINT_NOP23-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP23")))
(defclass x64-HINT_NOP24-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP24")))
(defclass x64-HINT_NOP25-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP25")))
(defclass x64-HINT_NOP26-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP26")))
(defclass x64-HINT_NOP27-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP27")))
(defclass x64-HINT_NOP28-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP28")))
(defclass x64-HINT_NOP29-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP29")))
(defclass x64-HINT_NOP30-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP30")))
(defclass x64-HINT_NOP31-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP31")))
(defclass x64-HINT_NOP32-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP32")))
(defclass x64-HINT_NOP33-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP33")))
(defclass x64-HINT_NOP34-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP34")))
(defclass x64-HINT_NOP35-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP35")))
(defclass x64-HINT_NOP36-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP36")))
(defclass x64-HINT_NOP37-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP37")))
(defclass x64-HINT_NOP38-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP38")))
(defclass x64-HINT_NOP39-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP39")))
(defclass x64-HINT_NOP40-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP40")))
(defclass x64-HINT_NOP41-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP41")))
(defclass x64-HINT_NOP42-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP42")))
(defclass x64-HINT_NOP43-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP43")))
(defclass x64-HINT_NOP44-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP44")))
(defclass x64-HINT_NOP45-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP45")))
(defclass x64-HINT_NOP46-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP46")))
(defclass x64-HINT_NOP47-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP47")))
(defclass x64-HINT_NOP48-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP48")))
(defclass x64-HINT_NOP49-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP49")))
(defclass x64-HINT_NOP50-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP50")))
(defclass x64-HINT_NOP51-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP51")))
(defclass x64-HINT_NOP52-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP52")))
(defclass x64-HINT_NOP53-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP53")))
(defclass x64-HINT_NOP54-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP54")))
(defclass x64-HINT_NOP55-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP55")))
(defclass x64-HINT_NOP56-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP56")))
(defclass x64-HINT_NOP57-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP57")))
(defclass x64-HINT_NOP58-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP58")))
(defclass x64-HINT_NOP59-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP59")))
(defclass x64-HINT_NOP60-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP60")))
(defclass x64-HINT_NOP61-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP61")))
(defclass x64-HINT_NOP62-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP62")))
(defclass x64-HINT_NOP63-instruction (x64-asm-instruction) ((name :reader name :initform "HINT_NOP63")))

(defparameter DB-ignore (make-instance 'x64-DB-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DW-ignore (make-instance 'x64-DW-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DD-ignore (make-instance 'x64-DD-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DQ-ignore (make-instance 'x64-DQ-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DT-ignore (make-instance 'x64-DT-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DO-ignore (make-instance 'x64-DO-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DY-ignore (make-instance 'x64-DY-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter DZ-ignore (make-instance 'x64-DZ-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESB-imm (make-instance 'x64-RESB-instruction
:operands "imm"
:code-string "[ resb]"
:arch-flags (list "8086")))

(defparameter RESW-ignore (make-instance 'x64-RESW-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESD-ignore (make-instance 'x64-RESD-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESQ-ignore (make-instance 'x64-RESQ-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter REST-ignore (make-instance 'x64-REST-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESO-ignore (make-instance 'x64-RESO-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESY-ignore (make-instance 'x64-RESY-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter RESZ-ignore (make-instance 'x64-RESZ-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter ADC-mem.reg8 (make-instance 'x64-ADC-instruction
:operands "mem,reg8"
:code-string "[mr: hle 10 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-reg8.reg8 (make-instance 'x64-ADC-instruction
:operands "reg8,reg8"
:code-string "[mr: 10 /r]"
:arch-flags (list "8086")))

(defparameter ADC-mem.reg16 (make-instance 'x64-ADC-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 11 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-reg16.reg16 (make-instance 'x64-ADC-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 11 /r]"
:arch-flags (list "8086")))

(defparameter ADC-mem.reg32 (make-instance 'x64-ADC-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 11 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADC-reg32.reg32 (make-instance 'x64-ADC-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 11 /r]"
:arch-flags (list "386")))

(defparameter ADC-mem.reg64 (make-instance 'x64-ADC-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 11 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADC-reg64.reg64 (make-instance 'x64-ADC-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 11 /r]"
:arch-flags (list "X64")))

(defparameter ADC-reg8.mem (make-instance 'x64-ADC-instruction
:operands "reg8,mem"
:code-string "[rm: 12 /r]"
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg8.reg8 (make-instance 'x64-ADC-instruction
:operands "reg8,reg8"
:code-string "[rm: 12 /r]"
:arch-flags (list "8086")))

(defparameter ADC-reg16.mem (make-instance 'x64-ADC-instruction
:operands "reg16,mem"
:code-string "[rm: o16 13 /r]"
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg16.reg16 (make-instance 'x64-ADC-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 13 /r]"
:arch-flags (list "8086")))

(defparameter ADC-reg32.mem (make-instance 'x64-ADC-instruction
:operands "reg32,mem"
:code-string "[rm: o32 13 /r]"
:arch-flags (list "386" "SM")))

(defparameter ADC-reg32.reg32 (make-instance 'x64-ADC-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 13 /r]"
:arch-flags (list "386")))

(defparameter ADC-reg64.mem (make-instance 'x64-ADC-instruction
:operands "reg64,mem"
:code-string "[rm: o64 13 /r]"
:arch-flags (list "X64" "SM")))

(defparameter ADC-reg64.reg64 (make-instance 'x64-ADC-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 13 /r]"
:arch-flags (list "X64")))

(defparameter ADC-rm16.imm8 (make-instance 'x64-ADC-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter ADC-rm32.imm8 (make-instance 'x64-ADC-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter ADC-rm64.imm8 (make-instance 'x64-ADC-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /2 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter ADC-reg_al.imm (make-instance 'x64-ADC-instruction
:operands "reg_al,imm"
:code-string "[-i: 14 ib]"
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg_ax.sbyteword (make-instance 'x64-ADC-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter ADC-reg_ax.imm (make-instance 'x64-ADC-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 15 iw]"
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg_eax.sbytedword (make-instance 'x64-ADC-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter ADC-reg_eax.imm (make-instance 'x64-ADC-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 15 id]"
:arch-flags (list "386" "SM")))

(defparameter ADC-reg_rax.sbytedword (make-instance 'x64-ADC-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /2 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter ADC-reg_rax.imm (make-instance 'x64-ADC-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 15 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter ADC-rm8.imm (make-instance 'x64-ADC-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /2 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-rm16.sbyteword (make-instance 'x64-ADC-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-rm16.imm (make-instance 'x64-ADC-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /2 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-rm32.sbytedword (make-instance 'x64-ADC-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADC-rm32.imm (make-instance 'x64-ADC-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /2 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADC-rm64.sbytedword (make-instance 'x64-ADC-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /2 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter ADC-rm64.imm (make-instance 'x64-ADC-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /2 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADC-mem.imm8 (make-instance 'x64-ADC-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /2 ib]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-mem.sbyteword16 (make-instance 'x64-ADC-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-mem.imm16 (make-instance 'x64-ADC-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /2 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-mem.sbytedword32 (make-instance 'x64-ADC-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADC-mem.imm32 (make-instance 'x64-ADC-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /2 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-mem.reg8 (make-instance 'x64-ADD-instruction
:operands "mem,reg8"
:code-string "[mr: hle 00 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-reg8.reg8 (make-instance 'x64-ADD-instruction
:operands "reg8,reg8"
:code-string "[mr: 00 /r]"
:arch-flags (list "8086")))

(defparameter ADD-mem.reg16 (make-instance 'x64-ADD-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 01 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-reg16.reg16 (make-instance 'x64-ADD-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 01 /r]"
:arch-flags (list "8086")))

(defparameter ADD-mem.reg32 (make-instance 'x64-ADD-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 01 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-reg32.reg32 (make-instance 'x64-ADD-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 01 /r]"
:arch-flags (list "386")))

(defparameter ADD-mem.reg64 (make-instance 'x64-ADD-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 01 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADD-reg64.reg64 (make-instance 'x64-ADD-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 01 /r]"
:arch-flags (list "X64")))

(defparameter ADD-reg8.mem (make-instance 'x64-ADD-instruction
:operands "reg8,mem"
:code-string "[rm: 02 /r]"
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg8.reg8 (make-instance 'x64-ADD-instruction
:operands "reg8,reg8"
:code-string "[rm: 02 /r]"
:arch-flags (list "8086")))

(defparameter ADD-reg16.mem (make-instance 'x64-ADD-instruction
:operands "reg16,mem"
:code-string "[rm: o16 03 /r]"
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg16.reg16 (make-instance 'x64-ADD-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 03 /r]"
:arch-flags (list "8086")))

(defparameter ADD-reg32.mem (make-instance 'x64-ADD-instruction
:operands "reg32,mem"
:code-string "[rm: o32 03 /r]"
:arch-flags (list "386" "SM")))

(defparameter ADD-reg32.reg32 (make-instance 'x64-ADD-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 03 /r]"
:arch-flags (list "386")))

(defparameter ADD-reg64.mem (make-instance 'x64-ADD-instruction
:operands "reg64,mem"
:code-string "[rm: o64 03 /r]"
:arch-flags (list "X64" "SM")))

(defparameter ADD-reg64.reg64 (make-instance 'x64-ADD-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 03 /r]"
:arch-flags (list "X64")))

(defparameter ADD-rm16.imm8 (make-instance 'x64-ADD-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter ADD-rm32.imm8 (make-instance 'x64-ADD-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter ADD-rm64.imm8 (make-instance 'x64-ADD-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /0 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter ADD-reg_al.imm (make-instance 'x64-ADD-instruction
:operands "reg_al,imm"
:code-string "[-i: 04 ib]"
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg_ax.sbyteword (make-instance 'x64-ADD-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter ADD-reg_ax.imm (make-instance 'x64-ADD-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 05 iw]"
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg_eax.sbytedword (make-instance 'x64-ADD-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter ADD-reg_eax.imm (make-instance 'x64-ADD-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 05 id]"
:arch-flags (list "386" "SM")))

(defparameter ADD-reg_rax.sbytedword (make-instance 'x64-ADD-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /0 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter ADD-reg_rax.imm (make-instance 'x64-ADD-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 05 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter ADD-rm8.imm (make-instance 'x64-ADD-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /0 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-rm16.sbyteword (make-instance 'x64-ADD-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADD-rm16.imm (make-instance 'x64-ADD-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /0 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-rm32.sbytedword (make-instance 'x64-ADD-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADD-rm32.imm (make-instance 'x64-ADD-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /0 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-rm64.sbytedword (make-instance 'x64-ADD-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /0 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter ADD-rm64.imm (make-instance 'x64-ADD-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /0 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADD-mem.imm8 (make-instance 'x64-ADD-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /0 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-mem.sbyteword16 (make-instance 'x64-ADD-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADD-mem.imm16 (make-instance 'x64-ADD-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /0 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-mem.sbytedword32 (make-instance 'x64-ADD-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADD-mem.imm32 (make-instance 'x64-ADD-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /0 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-mem.reg8 (make-instance 'x64-AND-instruction
:operands "mem,reg8"
:code-string "[mr: hle 20 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-reg8.reg8 (make-instance 'x64-AND-instruction
:operands "reg8,reg8"
:code-string "[mr: 20 /r]"
:arch-flags (list "8086")))

(defparameter AND-mem.reg16 (make-instance 'x64-AND-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 21 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-reg16.reg16 (make-instance 'x64-AND-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 21 /r]"
:arch-flags (list "8086")))

(defparameter AND-mem.reg32 (make-instance 'x64-AND-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 21 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-reg32.reg32 (make-instance 'x64-AND-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 21 /r]"
:arch-flags (list "386")))

(defparameter AND-mem.reg64 (make-instance 'x64-AND-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 21 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter AND-reg64.reg64 (make-instance 'x64-AND-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 21 /r]"
:arch-flags (list "X64")))

(defparameter AND-reg8.mem (make-instance 'x64-AND-instruction
:operands "reg8,mem"
:code-string "[rm: 22 /r]"
:arch-flags (list "8086" "SM")))

(defparameter AND-reg8.reg8 (make-instance 'x64-AND-instruction
:operands "reg8,reg8"
:code-string "[rm: 22 /r]"
:arch-flags (list "8086")))

(defparameter AND-reg16.mem (make-instance 'x64-AND-instruction
:operands "reg16,mem"
:code-string "[rm: o16 23 /r]"
:arch-flags (list "8086" "SM")))

(defparameter AND-reg16.reg16 (make-instance 'x64-AND-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 23 /r]"
:arch-flags (list "8086")))

(defparameter AND-reg32.mem (make-instance 'x64-AND-instruction
:operands "reg32,mem"
:code-string "[rm: o32 23 /r]"
:arch-flags (list "386" "SM")))

(defparameter AND-reg32.reg32 (make-instance 'x64-AND-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 23 /r]"
:arch-flags (list "386")))

(defparameter AND-reg64.mem (make-instance 'x64-AND-instruction
:operands "reg64,mem"
:code-string "[rm: o64 23 /r]"
:arch-flags (list "X64" "SM")))

(defparameter AND-reg64.reg64 (make-instance 'x64-AND-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 23 /r]"
:arch-flags (list "X64")))

(defparameter AND-rm16.imm8 (make-instance 'x64-AND-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter AND-rm32.imm8 (make-instance 'x64-AND-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter AND-rm64.imm8 (make-instance 'x64-AND-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /4 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter AND-reg_al.imm (make-instance 'x64-AND-instruction
:operands "reg_al,imm"
:code-string "[-i: 24 ib]"
:arch-flags (list "8086" "SM")))

(defparameter AND-reg_ax.sbyteword (make-instance 'x64-AND-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter AND-reg_ax.imm (make-instance 'x64-AND-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 25 iw]"
:arch-flags (list "8086" "SM")))

(defparameter AND-reg_eax.sbytedword (make-instance 'x64-AND-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter AND-reg_eax.imm (make-instance 'x64-AND-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 25 id]"
:arch-flags (list "386" "SM")))

(defparameter AND-reg_rax.sbytedword (make-instance 'x64-AND-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /4 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter AND-reg_rax.imm (make-instance 'x64-AND-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 25 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter AND-rm8.imm (make-instance 'x64-AND-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /4 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-rm16.sbyteword (make-instance 'x64-AND-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter AND-rm16.imm (make-instance 'x64-AND-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /4 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-rm32.sbytedword (make-instance 'x64-AND-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter AND-rm32.imm (make-instance 'x64-AND-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /4 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-rm64.sbytedword (make-instance 'x64-AND-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /4 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter AND-rm64.imm (make-instance 'x64-AND-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /4 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter AND-mem.imm8 (make-instance 'x64-AND-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /4 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-mem.sbyteword16 (make-instance 'x64-AND-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter AND-mem.imm16 (make-instance 'x64-AND-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /4 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-mem.sbytedword32 (make-instance 'x64-AND-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter AND-mem.imm32 (make-instance 'x64-AND-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /4 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BB0_RESET-void (make-instance 'x64-BB0_RESET-instruction
:operands "void"
:code-string "[ 0f 3a]"
:arch-flags (list "PENT" "CYRIX" "ND")))

(defparameter BB1_RESET-void (make-instance 'x64-BB1_RESET-instruction
:operands "void"
:code-string "[ 0f 3b]"
:arch-flags (list "PENT" "CYRIX" "ND")))

(defparameter BSF-reg16.mem (make-instance 'x64-BSF-instruction
:operands "reg16,mem"
:code-string "[rm: o16 nof3 0f bc /r]"
:arch-flags (list "386" "SM")))

(defparameter BSF-reg16.reg16 (make-instance 'x64-BSF-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 nof3 0f bc /r]"
:arch-flags (list "386")))

(defparameter BSF-reg32.mem (make-instance 'x64-BSF-instruction
:operands "reg32,mem"
:code-string "[rm: o32 nof3 0f bc /r]"
:arch-flags (list "386" "SM")))

(defparameter BSF-reg32.reg32 (make-instance 'x64-BSF-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 nof3 0f bc /r]"
:arch-flags (list "386")))

(defparameter BSF-reg64.mem (make-instance 'x64-BSF-instruction
:operands "reg64,mem"
:code-string "[rm: o64 nof3 0f bc /r]"
:arch-flags (list "X64" "SM")))

(defparameter BSF-reg64.reg64 (make-instance 'x64-BSF-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 nof3 0f bc /r]"
:arch-flags (list "X64")))

(defparameter BSR-reg16.mem (make-instance 'x64-BSR-instruction
:operands "reg16,mem"
:code-string "[rm: o16 nof3 0f bd /r]"
:arch-flags (list "386" "SM")))

(defparameter BSR-reg16.reg16 (make-instance 'x64-BSR-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 nof3 0f bd /r]"
:arch-flags (list "386")))

(defparameter BSR-reg32.mem (make-instance 'x64-BSR-instruction
:operands "reg32,mem"
:code-string "[rm: o32 nof3 0f bd /r]"
:arch-flags (list "386" "SM")))

(defparameter BSR-reg32.reg32 (make-instance 'x64-BSR-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 nof3 0f bd /r]"
:arch-flags (list "386")))

(defparameter BSR-reg64.mem (make-instance 'x64-BSR-instruction
:operands "reg64,mem"
:code-string "[rm: o64 nof3 0f bd /r]"
:arch-flags (list "X64" "SM")))

(defparameter BSR-reg64.reg64 (make-instance 'x64-BSR-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 nof3 0f bd /r]"
:arch-flags (list "X64")))

(defparameter BSWAP-reg32 (make-instance 'x64-BSWAP-instruction
:operands "reg32"
:code-string "[r: o32 0f c8+r]"
:arch-flags (list "486")))

(defparameter BSWAP-reg64 (make-instance 'x64-BSWAP-instruction
:operands "reg64"
:code-string "[r: o64 0f c8+r]"
:arch-flags (list "X64")))

(defparameter BT-mem.reg16 (make-instance 'x64-BT-instruction
:operands "mem,reg16"
:code-string "[mr: o16 0f a3 /r]"
:arch-flags (list "386" "SM")))

(defparameter BT-reg16.reg16 (make-instance 'x64-BT-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f a3 /r]"
:arch-flags (list "386")))

(defparameter BT-mem.reg32 (make-instance 'x64-BT-instruction
:operands "mem,reg32"
:code-string "[mr: o32 0f a3 /r]"
:arch-flags (list "386" "SM")))

(defparameter BT-reg32.reg32 (make-instance 'x64-BT-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f a3 /r]"
:arch-flags (list "386")))

(defparameter BT-mem.reg64 (make-instance 'x64-BT-instruction
:operands "mem,reg64"
:code-string "[mr: o64 0f a3 /r]"
:arch-flags (list "X64" "SM")))

(defparameter BT-reg64.reg64 (make-instance 'x64-BT-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f a3 /r]"
:arch-flags (list "X64")))

(defparameter BT-rm16.imm (make-instance 'x64-BT-instruction
:operands "rm16,imm"
:code-string "[mi: o16 0f ba /4 ib,u]"
:arch-flags (list "386" "SB")))

(defparameter BT-rm32.imm (make-instance 'x64-BT-instruction
:operands "rm32,imm"
:code-string "[mi: o32 0f ba /4 ib,u]"
:arch-flags (list "386" "SB")))

(defparameter BT-rm64.imm (make-instance 'x64-BT-instruction
:operands "rm64,imm"
:code-string "[mi: o64 0f ba /4 ib,u]"
:arch-flags (list "X64" "SB")))

(defparameter BTC-mem.reg16 (make-instance 'x64-BTC-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 0f bb /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTC-reg16.reg16 (make-instance 'x64-BTC-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f bb /r]"
:arch-flags (list "386")))

(defparameter BTC-mem.reg32 (make-instance 'x64-BTC-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 0f bb /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTC-reg32.reg32 (make-instance 'x64-BTC-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f bb /r]"
:arch-flags (list "386")))

(defparameter BTC-mem.reg64 (make-instance 'x64-BTC-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 0f bb /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTC-reg64.reg64 (make-instance 'x64-BTC-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f bb /r]"
:arch-flags (list "X64")))

(defparameter BTC-rm16.imm (make-instance 'x64-BTC-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /7 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTC-rm32.imm (make-instance 'x64-BTC-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /7 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTC-rm64.imm (make-instance 'x64-BTC-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /7 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter BTR-mem.reg16 (make-instance 'x64-BTR-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 0f b3 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTR-reg16.reg16 (make-instance 'x64-BTR-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f b3 /r]"
:arch-flags (list "386")))

(defparameter BTR-mem.reg32 (make-instance 'x64-BTR-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 0f b3 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTR-reg32.reg32 (make-instance 'x64-BTR-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f b3 /r]"
:arch-flags (list "386")))

(defparameter BTR-mem.reg64 (make-instance 'x64-BTR-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 0f b3 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTR-reg64.reg64 (make-instance 'x64-BTR-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f b3 /r]"
:arch-flags (list "X64")))

(defparameter BTR-rm16.imm (make-instance 'x64-BTR-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /6 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTR-rm32.imm (make-instance 'x64-BTR-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /6 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTR-rm64.imm (make-instance 'x64-BTR-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /6 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter BTS-mem.reg16 (make-instance 'x64-BTS-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 0f ab /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTS-reg16.reg16 (make-instance 'x64-BTS-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f ab /r]"
:arch-flags (list "386")))

(defparameter BTS-mem.reg32 (make-instance 'x64-BTS-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 0f ab /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTS-reg32.reg32 (make-instance 'x64-BTS-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f ab /r]"
:arch-flags (list "386")))

(defparameter BTS-mem.reg64 (make-instance 'x64-BTS-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 0f ab /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTS-reg64.reg64 (make-instance 'x64-BTS-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f ab /r]"
:arch-flags (list "X64")))

(defparameter BTS-rm16.imm (make-instance 'x64-BTS-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /5 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTS-rm32.imm (make-instance 'x64-BTS-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /5 ib,u]"
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTS-rm64.imm (make-instance 'x64-BTS-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /5 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter CALL-imm (make-instance 'x64-CALL-instruction
:operands "imm"
:code-string "[i: odf e8 rel]"
:arch-flags (list "8086" "BND")))

(defparameter CALL-imm-near (make-instance 'x64-CALL-instruction
:operands "imm|near"
:code-string "[i: odf e8 rel]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter CALL-imm64 (make-instance 'x64-CALL-instruction
:operands "imm64"
:code-string "[i: o64nw e8 rel]"
:arch-flags (list "X64" "BND")))

(defparameter CALL-imm64-near (make-instance 'x64-CALL-instruction
:operands "imm64|near"
:code-string "[i: o64nw e8 rel]"
:arch-flags (list "X64" "ND" "BND")))

(defparameter CALL-mem-far (make-instance 'x64-CALL-instruction
:operands "mem|far"
:code-string "[m: o64 ff /3]"
:arch-flags (list "X64")))

(defparameter CALL-mem16-far (make-instance 'x64-CALL-instruction
:operands "mem16|far"
:code-string "[m: o16 ff /3]"
:arch-flags (list "8086")))

(defparameter CALL-mem32-far (make-instance 'x64-CALL-instruction
:operands "mem32|far"
:code-string "[m: o32 ff /3]"
:arch-flags (list "386")))

(defparameter CALL-mem64-far (make-instance 'x64-CALL-instruction
:operands "mem64|far"
:code-string "[m: o64 ff /3]"
:arch-flags (list "X64")))

(defparameter CALL-mem-near (make-instance 'x64-CALL-instruction
:operands "mem|near"
:code-string "[m: odf ff /2]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter CALL-rm64-near (make-instance 'x64-CALL-instruction
:operands "rm64|near"
:code-string "[m: o64nw ff /2]"
:arch-flags (list "X64" "ND" "BND")))

(defparameter CALL-mem (make-instance 'x64-CALL-instruction
:operands "mem"
:code-string "[m: odf ff /2]"
:arch-flags (list "8086" "BND")))

(defparameter CALL-rm64 (make-instance 'x64-CALL-instruction
:operands "rm64"
:code-string "[m: o64nw ff /2]"
:arch-flags (list "X64" "BND")))

(defparameter CBW-void (make-instance 'x64-CBW-instruction
:operands "void"
:code-string "[ o16 98]"
:arch-flags (list "8086")))

(defparameter CDQ-void (make-instance 'x64-CDQ-instruction
:operands "void"
:code-string "[ o32 99]"
:arch-flags (list "386")))

(defparameter CDQE-void (make-instance 'x64-CDQE-instruction
:operands "void"
:code-string "[ o64 98]"
:arch-flags (list "X64")))

(defparameter CLC-void (make-instance 'x64-CLC-instruction
:operands "void"
:code-string "[ f8]"
:arch-flags (list "8086")))

(defparameter CLD-void (make-instance 'x64-CLD-instruction
:operands "void"
:code-string "[ fc]"
:arch-flags (list "8086")))

(defparameter CLI-void (make-instance 'x64-CLI-instruction
:operands "void"
:code-string "[ fa]"
:arch-flags (list "8086")))

(defparameter CLTS-void (make-instance 'x64-CLTS-instruction
:operands "void"
:code-string "[ 0f 06]"
:arch-flags (list "286" "PRIV")))

(defparameter CMC-void (make-instance 'x64-CMC-instruction
:operands "void"
:code-string "[ f5]"
:arch-flags (list "8086")))

(defparameter CMP-mem.reg8 (make-instance 'x64-CMP-instruction
:operands "mem,reg8"
:code-string "[mr: 38 /r]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg8.reg8 (make-instance 'x64-CMP-instruction
:operands "reg8,reg8"
:code-string "[mr: 38 /r]"
:arch-flags (list "8086")))

(defparameter CMP-mem.reg16 (make-instance 'x64-CMP-instruction
:operands "mem,reg16"
:code-string "[mr: o16 39 /r]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg16.reg16 (make-instance 'x64-CMP-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 39 /r]"
:arch-flags (list "8086")))

(defparameter CMP-mem.reg32 (make-instance 'x64-CMP-instruction
:operands "mem,reg32"
:code-string "[mr: o32 39 /r]"
:arch-flags (list "386" "SM")))

(defparameter CMP-reg32.reg32 (make-instance 'x64-CMP-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 39 /r]"
:arch-flags (list "386")))

(defparameter CMP-mem.reg64 (make-instance 'x64-CMP-instruction
:operands "mem,reg64"
:code-string "[mr: o64 39 /r]"
:arch-flags (list "X64" "SM")))

(defparameter CMP-reg64.reg64 (make-instance 'x64-CMP-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 39 /r]"
:arch-flags (list "X64")))

(defparameter CMP-reg8.mem (make-instance 'x64-CMP-instruction
:operands "reg8,mem"
:code-string "[rm: 3a /r]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg8.reg8 (make-instance 'x64-CMP-instruction
:operands "reg8,reg8"
:code-string "[rm: 3a /r]"
:arch-flags (list "8086")))

(defparameter CMP-reg16.mem (make-instance 'x64-CMP-instruction
:operands "reg16,mem"
:code-string "[rm: o16 3b /r]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg16.reg16 (make-instance 'x64-CMP-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 3b /r]"
:arch-flags (list "8086")))

(defparameter CMP-reg32.mem (make-instance 'x64-CMP-instruction
:operands "reg32,mem"
:code-string "[rm: o32 3b /r]"
:arch-flags (list "386" "SM")))

(defparameter CMP-reg32.reg32 (make-instance 'x64-CMP-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 3b /r]"
:arch-flags (list "386")))

(defparameter CMP-reg64.mem (make-instance 'x64-CMP-instruction
:operands "reg64,mem"
:code-string "[rm: o64 3b /r]"
:arch-flags (list "X64" "SM")))

(defparameter CMP-reg64.reg64 (make-instance 'x64-CMP-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 3b /r]"
:arch-flags (list "X64")))

(defparameter CMP-rm16.imm8 (make-instance 'x64-CMP-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086")))

(defparameter CMP-rm32.imm8 (make-instance 'x64-CMP-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386")))

(defparameter CMP-rm64.imm8 (make-instance 'x64-CMP-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64")))

(defparameter CMP-reg_al.imm (make-instance 'x64-CMP-instruction
:operands "reg_al,imm"
:code-string "[-i: 3c ib]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg_ax.sbyteword (make-instance 'x64-CMP-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-reg_ax.imm (make-instance 'x64-CMP-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 3d iw]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg_eax.sbytedword (make-instance 'x64-CMP-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-reg_eax.imm (make-instance 'x64-CMP-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 3d id]"
:arch-flags (list "386" "SM")))

(defparameter CMP-reg_rax.sbytedword (make-instance 'x64-CMP-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter CMP-reg_rax.imm (make-instance 'x64-CMP-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 3d id,s]"
:arch-flags (list "X64" "SM")))

(defparameter CMP-rm8.imm (make-instance 'x64-CMP-instruction
:operands "rm8,imm"
:code-string "[mi: 80 /7 ib]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-rm16.sbyteword (make-instance 'x64-CMP-instruction
:operands "rm16,sbyteword"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-rm16.imm (make-instance 'x64-CMP-instruction
:operands "rm16,imm"
:code-string "[mi: o16 81 /7 iw]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-rm32.sbytedword (make-instance 'x64-CMP-instruction
:operands "rm32,sbytedword"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-rm32.imm (make-instance 'x64-CMP-instruction
:operands "rm32,imm"
:code-string "[mi: o32 81 /7 id]"
:arch-flags (list "386" "SM")))

(defparameter CMP-rm64.sbytedword (make-instance 'x64-CMP-instruction
:operands "rm64,sbytedword"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter CMP-rm64.imm (make-instance 'x64-CMP-instruction
:operands "rm64,imm"
:code-string "[mi: o64 81 /7 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter CMP-mem.imm8 (make-instance 'x64-CMP-instruction
:operands "mem,imm8"
:code-string "[mi: 80 /7 ib]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-mem.sbyteword16 (make-instance 'x64-CMP-instruction
:operands "mem,sbyteword16"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-mem.imm16 (make-instance 'x64-CMP-instruction
:operands "mem,imm16"
:code-string "[mi: o16 81 /7 iw]"
:arch-flags (list "8086" "SM")))

(defparameter CMP-mem.sbytedword32 (make-instance 'x64-CMP-instruction
:operands "mem,sbytedword32"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-mem.imm32 (make-instance 'x64-CMP-instruction
:operands "mem,imm32"
:code-string "[mi: o32 81 /7 id]"
:arch-flags (list "386" "SM")))

(defparameter CMPSB-void (make-instance 'x64-CMPSB-instruction
:operands "void"
:code-string "[ repe a6]"
:arch-flags (list "8086")))

(defparameter CMPSD-void (make-instance 'x64-CMPSD-instruction
:operands "void"
:code-string "[ repe o32 a7]"
:arch-flags (list "386")))

(defparameter CMPSQ-void (make-instance 'x64-CMPSQ-instruction
:operands "void"
:code-string "[ repe o64 a7]"
:arch-flags (list "X64")))

(defparameter CMPSW-void (make-instance 'x64-CMPSW-instruction
:operands "void"
:code-string "[ repe o16 a7]"
:arch-flags (list "8086")))

(defparameter CMPXCHG-mem.reg8 (make-instance 'x64-CMPXCHG-instruction
:operands "mem,reg8"
:code-string "[mr: hle 0f b0 /r]"
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg8.reg8 (make-instance 'x64-CMPXCHG-instruction
:operands "reg8,reg8"
:code-string "[mr: 0f b0 /r]"
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg16 (make-instance 'x64-CMPXCHG-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 0f b1 /r]"
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg16.reg16 (make-instance 'x64-CMPXCHG-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f b1 /r]"
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg32 (make-instance 'x64-CMPXCHG-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 0f b1 /r]"
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg32.reg32 (make-instance 'x64-CMPXCHG-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f b1 /r]"
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg64 (make-instance 'x64-CMPXCHG-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 0f b1 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter CMPXCHG-reg64.reg64 (make-instance 'x64-CMPXCHG-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f b1 /r]"
:arch-flags (list "X64")))

(defparameter CMPXCHG486-mem.reg8 (make-instance 'x64-CMPXCHG486-instruction
:operands "mem,reg8"
:code-string "[mr: 0f a6 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg8.reg8 (make-instance 'x64-CMPXCHG486-instruction
:operands "reg8,reg8"
:code-string "[mr: 0f a6 /r]"
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG486-mem.reg16 (make-instance 'x64-CMPXCHG486-instruction
:operands "mem,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg16.reg16 (make-instance 'x64-CMPXCHG486-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG486-mem.reg32 (make-instance 'x64-CMPXCHG486-instruction
:operands "mem,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg32.reg32 (make-instance 'x64-CMPXCHG486-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG8B-mem (make-instance 'x64-CMPXCHG8B-instruction
:operands "mem"
:code-string "[m: hle norexw 0f c7 /1]"
:arch-flags (list "PENT" "LOCK")))

(defparameter CMPXCHG16B-mem (make-instance 'x64-CMPXCHG16B-instruction
:operands "mem"
:code-string "[m: o64 0f c7 /1]"
:arch-flags (list "X64" "LOCK")))

(defparameter CPUID-void (make-instance 'x64-CPUID-instruction
:operands "void"
:code-string "[ 0f a2]"
:arch-flags (list "PENT")))

(defparameter CPU_READ-void (make-instance 'x64-CPU_READ-instruction
:operands "void"
:code-string "[ 0f 3d]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter CPU_WRITE-void (make-instance 'x64-CPU_WRITE-instruction
:operands "void"
:code-string "[ 0f 3c]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter CQO-void (make-instance 'x64-CQO-instruction
:operands "void"
:code-string "[ o64 99]"
:arch-flags (list "X64")))

(defparameter CWD-void (make-instance 'x64-CWD-instruction
:operands "void"
:code-string "[ o16 99]"
:arch-flags (list "8086")))

(defparameter CWDE-void (make-instance 'x64-CWDE-instruction
:operands "void"
:code-string "[ o32 98]"
:arch-flags (list "386")))

(defparameter DEC-rm8 (make-instance 'x64-DEC-instruction
:operands "rm8"
:code-string "[m: hle fe /1]"
:arch-flags (list "8086" "LOCK")))

(defparameter DEC-rm16 (make-instance 'x64-DEC-instruction
:operands "rm16"
:code-string "[m: hle o16 ff /1]"
:arch-flags (list "8086" "LOCK")))

(defparameter DEC-rm32 (make-instance 'x64-DEC-instruction
:operands "rm32"
:code-string "[m: hle o32 ff /1]"
:arch-flags (list "386" "LOCK")))

(defparameter DEC-rm64 (make-instance 'x64-DEC-instruction
:operands "rm64"
:code-string "[m: hle o64 ff /1]"
:arch-flags (list "X64" "LOCK")))

(defparameter DIV-rm8 (make-instance 'x64-DIV-instruction
:operands "rm8"
:code-string "[m: f6 /6]"
:arch-flags (list "8086")))

(defparameter DIV-rm16 (make-instance 'x64-DIV-instruction
:operands "rm16"
:code-string "[m: o16 f7 /6]"
:arch-flags (list "8086")))

(defparameter DIV-rm32 (make-instance 'x64-DIV-instruction
:operands "rm32"
:code-string "[m: o32 f7 /6]"
:arch-flags (list "386")))

(defparameter DIV-rm64 (make-instance 'x64-DIV-instruction
:operands "rm64"
:code-string "[m: o64 f7 /6]"
:arch-flags (list "X64")))

(defparameter DMINT-void (make-instance 'x64-DMINT-instruction
:operands "void"
:code-string "[ 0f 39]"
:arch-flags (list "P6" "CYRIX")))

(defparameter EMMS-void (make-instance 'x64-EMMS-instruction
:operands "void"
:code-string "[ 0f 77]"
:arch-flags (list "PENT" "MMX")))

(defparameter ENTER-imm.imm (make-instance 'x64-ENTER-instruction
:operands "imm,imm"
:code-string "[ij: c8 iw ib,u]"
:arch-flags (list "186")))

(defparameter EQU-imm (make-instance 'x64-EQU-instruction
:operands "imm"
:code-string "ignore"
:arch-flags (list "8086")))

(defparameter EQU-imm.imm (make-instance 'x64-EQU-instruction
:operands "imm:imm"
:code-string "ignore"
:arch-flags (list "8086")))

(defparameter F2XM1-void (make-instance 'x64-F2XM1-instruction
:operands "void"
:code-string "[ d9 f0]"
:arch-flags (list "8086" "FPU")))

(defparameter FABS-void (make-instance 'x64-FABS-instruction
:operands "void"
:code-string "[ d9 e1]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-mem32 (make-instance 'x64-FADD-instruction
:operands "mem32"
:code-string "[m: d8 /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-mem64 (make-instance 'x64-FADD-instruction
:operands "mem64"
:code-string "[m: dc /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg-to (make-instance 'x64-FADD-instruction
:operands "fpureg|to"
:code-string "[r: dc c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg (make-instance 'x64-FADD-instruction
:operands "fpureg"
:code-string "[r: d8 c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg.fpu0 (make-instance 'x64-FADD-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpu0.fpureg (make-instance 'x64-FADD-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADD-void (make-instance 'x64-FADD-instruction
:operands "void"
:code-string "[ de c1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FADDP-fpureg (make-instance 'x64-FADDP-instruction
:operands "fpureg"
:code-string "[r: de c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADDP-fpureg.fpu0 (make-instance 'x64-FADDP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FADDP-void (make-instance 'x64-FADDP-instruction
:operands "void"
:code-string "[ de c1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FBLD-mem80 (make-instance 'x64-FBLD-instruction
:operands "mem80"
:code-string "[m: df /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FBLD-mem (make-instance 'x64-FBLD-instruction
:operands "mem"
:code-string "[m: df /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FBSTP-mem80 (make-instance 'x64-FBSTP-instruction
:operands "mem80"
:code-string "[m: df /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FBSTP-mem (make-instance 'x64-FBSTP-instruction
:operands "mem"
:code-string "[m: df /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FCHS-void (make-instance 'x64-FCHS-instruction
:operands "void"
:code-string "[ d9 e0]"
:arch-flags (list "8086" "FPU")))

(defparameter FCLEX-void (make-instance 'x64-FCLEX-instruction
:operands "void"
:code-string "[ wait db e2]"
:arch-flags (list "8086" "FPU")))

(defparameter FCMOVB-fpureg (make-instance 'x64-FCMOVB-instruction
:operands "fpureg"
:code-string "[r: da c0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVB-fpu0.fpureg (make-instance 'x64-FCMOVB-instruction
:operands "fpu0,fpureg"
:code-string "[-r: da c0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVB-void (make-instance 'x64-FCMOVB-instruction
:operands "void"
:code-string "[ da c1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVBE-fpureg (make-instance 'x64-FCMOVBE-instruction
:operands "fpureg"
:code-string "[r: da d0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVBE-fpu0.fpureg (make-instance 'x64-FCMOVBE-instruction
:operands "fpu0,fpureg"
:code-string "[-r: da d0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVBE-void (make-instance 'x64-FCMOVBE-instruction
:operands "void"
:code-string "[ da d1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVE-fpureg (make-instance 'x64-FCMOVE-instruction
:operands "fpureg"
:code-string "[r: da c8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVE-fpu0.fpureg (make-instance 'x64-FCMOVE-instruction
:operands "fpu0,fpureg"
:code-string "[-r: da c8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVE-void (make-instance 'x64-FCMOVE-instruction
:operands "void"
:code-string "[ da c9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNB-fpureg (make-instance 'x64-FCMOVNB-instruction
:operands "fpureg"
:code-string "[r: db c0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNB-fpu0.fpureg (make-instance 'x64-FCMOVNB-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db c0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNB-void (make-instance 'x64-FCMOVNB-instruction
:operands "void"
:code-string "[ db c1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNBE-fpureg (make-instance 'x64-FCMOVNBE-instruction
:operands "fpureg"
:code-string "[r: db d0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNBE-fpu0.fpureg (make-instance 'x64-FCMOVNBE-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db d0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNBE-void (make-instance 'x64-FCMOVNBE-instruction
:operands "void"
:code-string "[ db d1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNE-fpureg (make-instance 'x64-FCMOVNE-instruction
:operands "fpureg"
:code-string "[r: db c8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNE-fpu0.fpureg (make-instance 'x64-FCMOVNE-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db c8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNE-void (make-instance 'x64-FCMOVNE-instruction
:operands "void"
:code-string "[ db c9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNU-fpureg (make-instance 'x64-FCMOVNU-instruction
:operands "fpureg"
:code-string "[r: db d8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNU-fpu0.fpureg (make-instance 'x64-FCMOVNU-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db d8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNU-void (make-instance 'x64-FCMOVNU-instruction
:operands "void"
:code-string "[ db d9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVU-fpureg (make-instance 'x64-FCMOVU-instruction
:operands "fpureg"
:code-string "[r: da d8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVU-fpu0.fpureg (make-instance 'x64-FCMOVU-instruction
:operands "fpu0,fpureg"
:code-string "[-r: da d8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVU-void (make-instance 'x64-FCMOVU-instruction
:operands "void"
:code-string "[ da d9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOM-mem32 (make-instance 'x64-FCOM-instruction
:operands "mem32"
:code-string "[m: d8 /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-mem64 (make-instance 'x64-FCOM-instruction
:operands "mem64"
:code-string "[m: dc /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-fpureg (make-instance 'x64-FCOM-instruction
:operands "fpureg"
:code-string "[r: d8 d0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-fpu0.fpureg (make-instance 'x64-FCOM-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 d0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-void (make-instance 'x64-FCOM-instruction
:operands "void"
:code-string "[ d8 d1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FCOMI-fpureg (make-instance 'x64-FCOMI-instruction
:operands "fpureg"
:code-string "[r: db f0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCOMI-fpu0.fpureg (make-instance 'x64-FCOMI-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db f0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCOMI-void (make-instance 'x64-FCOMI-instruction
:operands "void"
:code-string "[ db f1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOMIP-fpureg (make-instance 'x64-FCOMIP-instruction
:operands "fpureg"
:code-string "[r: df f0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCOMIP-fpu0.fpureg (make-instance 'x64-FCOMIP-instruction
:operands "fpu0,fpureg"
:code-string "[-r: df f0+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FCOMIP-void (make-instance 'x64-FCOMIP-instruction
:operands "void"
:code-string "[ df f1]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOMP-mem32 (make-instance 'x64-FCOMP-instruction
:operands "mem32"
:code-string "[m: d8 /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-mem64 (make-instance 'x64-FCOMP-instruction
:operands "mem64"
:code-string "[m: dc /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-fpureg (make-instance 'x64-FCOMP-instruction
:operands "fpureg"
:code-string "[r: d8 d8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-fpu0.fpureg (make-instance 'x64-FCOMP-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 d8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-void (make-instance 'x64-FCOMP-instruction
:operands "void"
:code-string "[ d8 d9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FCOMPP-void (make-instance 'x64-FCOMPP-instruction
:operands "void"
:code-string "[ de d9]"
:arch-flags (list "8086" "FPU")))

(defparameter FCOS-void (make-instance 'x64-FCOS-instruction
:operands "void"
:code-string "[ d9 ff]"
:arch-flags (list "386" "FPU")))

(defparameter FDECSTP-void (make-instance 'x64-FDECSTP-instruction
:operands "void"
:code-string "[ d9 f6]"
:arch-flags (list "8086" "FPU")))

(defparameter FDISI-void (make-instance 'x64-FDISI-instruction
:operands "void"
:code-string "[ wait db e1]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-mem32 (make-instance 'x64-FDIV-instruction
:operands "mem32"
:code-string "[m: d8 /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-mem64 (make-instance 'x64-FDIV-instruction
:operands "mem64"
:code-string "[m: dc /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg-to (make-instance 'x64-FDIV-instruction
:operands "fpureg|to"
:code-string "[r: dc f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg (make-instance 'x64-FDIV-instruction
:operands "fpureg"
:code-string "[r: d8 f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg.fpu0 (make-instance 'x64-FDIV-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpu0.fpureg (make-instance 'x64-FDIV-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-void (make-instance 'x64-FDIV-instruction
:operands "void"
:code-string "[ de f9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVP-fpureg (make-instance 'x64-FDIVP-instruction
:operands "fpureg"
:code-string "[r: de f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVP-fpureg.fpu0 (make-instance 'x64-FDIVP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVP-void (make-instance 'x64-FDIVP-instruction
:operands "void"
:code-string "[ de f9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVR-mem32 (make-instance 'x64-FDIVR-instruction
:operands "mem32"
:code-string "[m: d8 /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-mem64 (make-instance 'x64-FDIVR-instruction
:operands "mem64"
:code-string "[m: dc /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg-to (make-instance 'x64-FDIVR-instruction
:operands "fpureg|to"
:code-string "[r: dc f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg.fpu0 (make-instance 'x64-FDIVR-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg (make-instance 'x64-FDIVR-instruction
:operands "fpureg"
:code-string "[r: d8 f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpu0.fpureg (make-instance 'x64-FDIVR-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 f8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-void (make-instance 'x64-FDIVR-instruction
:operands "void"
:code-string "[ de f1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVRP-fpureg (make-instance 'x64-FDIVRP-instruction
:operands "fpureg"
:code-string "[r: de f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVRP-fpureg.fpu0 (make-instance 'x64-FDIVRP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de f0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FDIVRP-void (make-instance 'x64-FDIVRP-instruction
:operands "void"
:code-string "[ de f1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FEMMS-void (make-instance 'x64-FEMMS-instruction
:operands "void"
:code-string "[ 0f 0e]"
:arch-flags (list "PENT" "3DNOW")))

(defparameter FENI-void (make-instance 'x64-FENI-instruction
:operands "void"
:code-string "[ wait db e0]"
:arch-flags (list "8086" "FPU")))

(defparameter FFREE-fpureg (make-instance 'x64-FFREE-instruction
:operands "fpureg"
:code-string "[r: dd c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FFREE-void (make-instance 'x64-FFREE-instruction
:operands "void"
:code-string "[ dd c1]"
:arch-flags (list "8086" "FPU")))

(defparameter FFREEP-fpureg (make-instance 'x64-FFREEP-instruction
:operands "fpureg"
:code-string "[r: df c0+r]"
:arch-flags (list "286" "FPU" "UNDOC")))

(defparameter FFREEP-void (make-instance 'x64-FFREEP-instruction
:operands "void"
:code-string "[ df c1]"
:arch-flags (list "286" "FPU" "UNDOC")))

(defparameter FIADD-mem32 (make-instance 'x64-FIADD-instruction
:operands "mem32"
:code-string "[m: da /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FIADD-mem16 (make-instance 'x64-FIADD-instruction
:operands "mem16"
:code-string "[m: de /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FICOM-mem32 (make-instance 'x64-FICOM-instruction
:operands "mem32"
:code-string "[m: da /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FICOM-mem16 (make-instance 'x64-FICOM-instruction
:operands "mem16"
:code-string "[m: de /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FICOMP-mem32 (make-instance 'x64-FICOMP-instruction
:operands "mem32"
:code-string "[m: da /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FICOMP-mem16 (make-instance 'x64-FICOMP-instruction
:operands "mem16"
:code-string "[m: de /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FIDIV-mem32 (make-instance 'x64-FIDIV-instruction
:operands "mem32"
:code-string "[m: da /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FIDIV-mem16 (make-instance 'x64-FIDIV-instruction
:operands "mem16"
:code-string "[m: de /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FIDIVR-mem32 (make-instance 'x64-FIDIVR-instruction
:operands "mem32"
:code-string "[m: da /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FIDIVR-mem16 (make-instance 'x64-FIDIVR-instruction
:operands "mem16"
:code-string "[m: de /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem32 (make-instance 'x64-FILD-instruction
:operands "mem32"
:code-string "[m: db /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem16 (make-instance 'x64-FILD-instruction
:operands "mem16"
:code-string "[m: df /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem64 (make-instance 'x64-FILD-instruction
:operands "mem64"
:code-string "[m: df /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FIMUL-mem32 (make-instance 'x64-FIMUL-instruction
:operands "mem32"
:code-string "[m: da /1]"
:arch-flags (list "8086" "FPU")))

(defparameter FIMUL-mem16 (make-instance 'x64-FIMUL-instruction
:operands "mem16"
:code-string "[m: de /1]"
:arch-flags (list "8086" "FPU")))

(defparameter FINCSTP-void (make-instance 'x64-FINCSTP-instruction
:operands "void"
:code-string "[ d9 f7]"
:arch-flags (list "8086" "FPU")))

(defparameter FINIT-void (make-instance 'x64-FINIT-instruction
:operands "void"
:code-string "[ wait db e3]"
:arch-flags (list "8086" "FPU")))

(defparameter FIST-mem32 (make-instance 'x64-FIST-instruction
:operands "mem32"
:code-string "[m: db /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FIST-mem16 (make-instance 'x64-FIST-instruction
:operands "mem16"
:code-string "[m: df /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem32 (make-instance 'x64-FISTP-instruction
:operands "mem32"
:code-string "[m: db /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem16 (make-instance 'x64-FISTP-instruction
:operands "mem16"
:code-string "[m: df /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem64 (make-instance 'x64-FISTP-instruction
:operands "mem64"
:code-string "[m: df /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FISTTP-mem16 (make-instance 'x64-FISTTP-instruction
:operands "mem16"
:code-string "[m: df /1]"
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISTTP-mem32 (make-instance 'x64-FISTTP-instruction
:operands "mem32"
:code-string "[m: db /1]"
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISTTP-mem64 (make-instance 'x64-FISTTP-instruction
:operands "mem64"
:code-string "[m: dd /1]"
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISUB-mem32 (make-instance 'x64-FISUB-instruction
:operands "mem32"
:code-string "[m: da /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FISUB-mem16 (make-instance 'x64-FISUB-instruction
:operands "mem16"
:code-string "[m: de /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FISUBR-mem32 (make-instance 'x64-FISUBR-instruction
:operands "mem32"
:code-string "[m: da /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FISUBR-mem16 (make-instance 'x64-FISUBR-instruction
:operands "mem16"
:code-string "[m: de /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem32 (make-instance 'x64-FLD-instruction
:operands "mem32"
:code-string "[m: d9 /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem64 (make-instance 'x64-FLD-instruction
:operands "mem64"
:code-string "[m: dd /0]"
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem80 (make-instance 'x64-FLD-instruction
:operands "mem80"
:code-string "[m: db /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FLD-fpureg (make-instance 'x64-FLD-instruction
:operands "fpureg"
:code-string "[r: d9 c0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FLD-void (make-instance 'x64-FLD-instruction
:operands "void"
:code-string "[ d9 c1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FLD1-void (make-instance 'x64-FLD1-instruction
:operands "void"
:code-string "[ d9 e8]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDCW-mem (make-instance 'x64-FLDCW-instruction
:operands "mem"
:code-string "[m: d9 /5]"
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FLDENV-mem (make-instance 'x64-FLDENV-instruction
:operands "mem"
:code-string "[m: d9 /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDL2E-void (make-instance 'x64-FLDL2E-instruction
:operands "void"
:code-string "[ d9 ea]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDL2T-void (make-instance 'x64-FLDL2T-instruction
:operands "void"
:code-string "[ d9 e9]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDLG2-void (make-instance 'x64-FLDLG2-instruction
:operands "void"
:code-string "[ d9 ec]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDLN2-void (make-instance 'x64-FLDLN2-instruction
:operands "void"
:code-string "[ d9 ed]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDPI-void (make-instance 'x64-FLDPI-instruction
:operands "void"
:code-string "[ d9 eb]"
:arch-flags (list "8086" "FPU")))

(defparameter FLDZ-void (make-instance 'x64-FLDZ-instruction
:operands "void"
:code-string "[ d9 ee]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-mem32 (make-instance 'x64-FMUL-instruction
:operands "mem32"
:code-string "[m: d8 /1]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-mem64 (make-instance 'x64-FMUL-instruction
:operands "mem64"
:code-string "[m: dc /1]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg-to (make-instance 'x64-FMUL-instruction
:operands "fpureg|to"
:code-string "[r: dc c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg.fpu0 (make-instance 'x64-FMUL-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg (make-instance 'x64-FMUL-instruction
:operands "fpureg"
:code-string "[r: d8 c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpu0.fpureg (make-instance 'x64-FMUL-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-void (make-instance 'x64-FMUL-instruction
:operands "void"
:code-string "[ de c9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FMULP-fpureg (make-instance 'x64-FMULP-instruction
:operands "fpureg"
:code-string "[r: de c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMULP-fpureg.fpu0 (make-instance 'x64-FMULP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FMULP-void (make-instance 'x64-FMULP-instruction
:operands "void"
:code-string "[ de c9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FNCLEX-void (make-instance 'x64-FNCLEX-instruction
:operands "void"
:code-string "[ db e2]"
:arch-flags (list "8086" "FPU")))

(defparameter FNDISI-void (make-instance 'x64-FNDISI-instruction
:operands "void"
:code-string "[ db e1]"
:arch-flags (list "8086" "FPU")))

(defparameter FNENI-void (make-instance 'x64-FNENI-instruction
:operands "void"
:code-string "[ db e0]"
:arch-flags (list "8086" "FPU")))

(defparameter FNINIT-void (make-instance 'x64-FNINIT-instruction
:operands "void"
:code-string "[ db e3]"
:arch-flags (list "8086" "FPU")))

(defparameter FNOP-void (make-instance 'x64-FNOP-instruction
:operands "void"
:code-string "[ d9 d0]"
:arch-flags (list "8086" "FPU")))

(defparameter FNSAVE-mem (make-instance 'x64-FNSAVE-instruction
:operands "mem"
:code-string "[m: dd /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FNSTCW-mem (make-instance 'x64-FNSTCW-instruction
:operands "mem"
:code-string "[m: d9 /7]"
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FNSTENV-mem (make-instance 'x64-FNSTENV-instruction
:operands "mem"
:code-string "[m: d9 /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FNSTSW-mem (make-instance 'x64-FNSTSW-instruction
:operands "mem"
:code-string "[m: dd /7]"
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FNSTSW-reg_ax (make-instance 'x64-FNSTSW-instruction
:operands "reg_ax"
:code-string "[-: df e0]"
:arch-flags (list "286" "FPU")))

(defparameter FPATAN-void (make-instance 'x64-FPATAN-instruction
:operands "void"
:code-string "[ d9 f3]"
:arch-flags (list "8086" "FPU")))

(defparameter FPREM-void (make-instance 'x64-FPREM-instruction
:operands "void"
:code-string "[ d9 f8]"
:arch-flags (list "8086" "FPU")))

(defparameter FPREM1-void (make-instance 'x64-FPREM1-instruction
:operands "void"
:code-string "[ d9 f5]"
:arch-flags (list "386" "FPU")))

(defparameter FPTAN-void (make-instance 'x64-FPTAN-instruction
:operands "void"
:code-string "[ d9 f2]"
:arch-flags (list "8086" "FPU")))

(defparameter FRNDINT-void (make-instance 'x64-FRNDINT-instruction
:operands "void"
:code-string "[ d9 fc]"
:arch-flags (list "8086" "FPU")))

(defparameter FRSTOR-mem (make-instance 'x64-FRSTOR-instruction
:operands "mem"
:code-string "[m: dd /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FSAVE-mem (make-instance 'x64-FSAVE-instruction
:operands "mem"
:code-string "[m: wait dd /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FSCALE-void (make-instance 'x64-FSCALE-instruction
:operands "void"
:code-string "[ d9 fd]"
:arch-flags (list "8086" "FPU")))

(defparameter FSETPM-void (make-instance 'x64-FSETPM-instruction
:operands "void"
:code-string "[ db e4]"
:arch-flags (list "286" "FPU")))

(defparameter FSIN-void (make-instance 'x64-FSIN-instruction
:operands "void"
:code-string "[ d9 fe]"
:arch-flags (list "386" "FPU")))

(defparameter FSINCOS-void (make-instance 'x64-FSINCOS-instruction
:operands "void"
:code-string "[ d9 fb]"
:arch-flags (list "386" "FPU")))

(defparameter FSQRT-void (make-instance 'x64-FSQRT-instruction
:operands "void"
:code-string "[ d9 fa]"
:arch-flags (list "8086" "FPU")))

(defparameter FST-mem32 (make-instance 'x64-FST-instruction
:operands "mem32"
:code-string "[m: d9 /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FST-mem64 (make-instance 'x64-FST-instruction
:operands "mem64"
:code-string "[m: dd /2]"
:arch-flags (list "8086" "FPU")))

(defparameter FST-fpureg (make-instance 'x64-FST-instruction
:operands "fpureg"
:code-string "[r: dd d0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FST-void (make-instance 'x64-FST-instruction
:operands "void"
:code-string "[ dd d1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSTCW-mem (make-instance 'x64-FSTCW-instruction
:operands "mem"
:code-string "[m: wait d9 /7]"
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FSTENV-mem (make-instance 'x64-FSTENV-instruction
:operands "mem"
:code-string "[m: wait d9 /6]"
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem32 (make-instance 'x64-FSTP-instruction
:operands "mem32"
:code-string "[m: d9 /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem64 (make-instance 'x64-FSTP-instruction
:operands "mem64"
:code-string "[m: dd /3]"
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem80 (make-instance 'x64-FSTP-instruction
:operands "mem80"
:code-string "[m: db /7]"
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-fpureg (make-instance 'x64-FSTP-instruction
:operands "fpureg"
:code-string "[r: dd d8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-void (make-instance 'x64-FSTP-instruction
:operands "void"
:code-string "[ dd d9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSTSW-mem (make-instance 'x64-FSTSW-instruction
:operands "mem"
:code-string "[m: wait dd /7]"
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FSTSW-reg_ax (make-instance 'x64-FSTSW-instruction
:operands "reg_ax"
:code-string "[-: wait df e0]"
:arch-flags (list "286" "FPU")))

(defparameter FSUB-mem32 (make-instance 'x64-FSUB-instruction
:operands "mem32"
:code-string "[m: d8 /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-mem64 (make-instance 'x64-FSUB-instruction
:operands "mem64"
:code-string "[m: dc /4]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg-to (make-instance 'x64-FSUB-instruction
:operands "fpureg|to"
:code-string "[r: dc e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg.fpu0 (make-instance 'x64-FSUB-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg (make-instance 'x64-FSUB-instruction
:operands "fpureg"
:code-string "[r: d8 e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpu0.fpureg (make-instance 'x64-FSUB-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-void (make-instance 'x64-FSUB-instruction
:operands "void"
:code-string "[ de e9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBP-fpureg (make-instance 'x64-FSUBP-instruction
:operands "fpureg"
:code-string "[r: de e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBP-fpureg.fpu0 (make-instance 'x64-FSUBP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBP-void (make-instance 'x64-FSUBP-instruction
:operands "void"
:code-string "[ de e9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBR-mem32 (make-instance 'x64-FSUBR-instruction
:operands "mem32"
:code-string "[m: d8 /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-mem64 (make-instance 'x64-FSUBR-instruction
:operands "mem64"
:code-string "[m: dc /5]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg-to (make-instance 'x64-FSUBR-instruction
:operands "fpureg|to"
:code-string "[r: dc e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg.fpu0 (make-instance 'x64-FSUBR-instruction
:operands "fpureg,fpu0"
:code-string "[r-: dc e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg (make-instance 'x64-FSUBR-instruction
:operands "fpureg"
:code-string "[r: d8 e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpu0.fpureg (make-instance 'x64-FSUBR-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d8 e8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-void (make-instance 'x64-FSUBR-instruction
:operands "void"
:code-string "[ de e1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBRP-fpureg (make-instance 'x64-FSUBRP-instruction
:operands "fpureg"
:code-string "[r: de e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBRP-fpureg.fpu0 (make-instance 'x64-FSUBRP-instruction
:operands "fpureg,fpu0"
:code-string "[r-: de e0+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FSUBRP-void (make-instance 'x64-FSUBRP-instruction
:operands "void"
:code-string "[ de e1]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FTST-void (make-instance 'x64-FTST-instruction
:operands "void"
:code-string "[ d9 e4]"
:arch-flags (list "8086" "FPU")))

(defparameter FUCOM-fpureg (make-instance 'x64-FUCOM-instruction
:operands "fpureg"
:code-string "[r: dd e0+r]"
:arch-flags (list "386" "FPU")))

(defparameter FUCOM-fpu0.fpureg (make-instance 'x64-FUCOM-instruction
:operands "fpu0,fpureg"
:code-string "[-r: dd e0+r]"
:arch-flags (list "386" "FPU")))

(defparameter FUCOM-void (make-instance 'x64-FUCOM-instruction
:operands "void"
:code-string "[ dd e1]"
:arch-flags (list "386" "FPU" "ND")))

(defparameter FUCOMI-fpureg (make-instance 'x64-FUCOMI-instruction
:operands "fpureg"
:code-string "[r: db e8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMI-fpu0.fpureg (make-instance 'x64-FUCOMI-instruction
:operands "fpu0,fpureg"
:code-string "[-r: db e8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMI-void (make-instance 'x64-FUCOMI-instruction
:operands "void"
:code-string "[ db e9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FUCOMIP-fpureg (make-instance 'x64-FUCOMIP-instruction
:operands "fpureg"
:code-string "[r: df e8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMIP-fpu0.fpureg (make-instance 'x64-FUCOMIP-instruction
:operands "fpu0,fpureg"
:code-string "[-r: df e8+r]"
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMIP-void (make-instance 'x64-FUCOMIP-instruction
:operands "void"
:code-string "[ df e9]"
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FUCOMP-fpureg (make-instance 'x64-FUCOMP-instruction
:operands "fpureg"
:code-string "[r: dd e8+r]"
:arch-flags (list "386" "FPU")))

(defparameter FUCOMP-fpu0.fpureg (make-instance 'x64-FUCOMP-instruction
:operands "fpu0,fpureg"
:code-string "[-r: dd e8+r]"
:arch-flags (list "386" "FPU")))

(defparameter FUCOMP-void (make-instance 'x64-FUCOMP-instruction
:operands "void"
:code-string "[ dd e9]"
:arch-flags (list "386" "FPU" "ND")))

(defparameter FUCOMPP-void (make-instance 'x64-FUCOMPP-instruction
:operands "void"
:code-string "[ da e9]"
:arch-flags (list "386" "FPU")))

(defparameter FXAM-void (make-instance 'x64-FXAM-instruction
:operands "void"
:code-string "[ d9 e5]"
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpureg (make-instance 'x64-FXCH-instruction
:operands "fpureg"
:code-string "[r: d9 c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpureg.fpu0 (make-instance 'x64-FXCH-instruction
:operands "fpureg,fpu0"
:code-string "[r-: d9 c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpu0.fpureg (make-instance 'x64-FXCH-instruction
:operands "fpu0,fpureg"
:code-string "[-r: d9 c8+r]"
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-void (make-instance 'x64-FXCH-instruction
:operands "void"
:code-string "[ d9 c9]"
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FXTRACT-void (make-instance 'x64-FXTRACT-instruction
:operands "void"
:code-string "[ d9 f4]"
:arch-flags (list "8086" "FPU")))

(defparameter FYL2X-void (make-instance 'x64-FYL2X-instruction
:operands "void"
:code-string "[ d9 f1]"
:arch-flags (list "8086" "FPU")))

(defparameter FYL2XP1-void (make-instance 'x64-FYL2XP1-instruction
:operands "void"
:code-string "[ d9 f9]"
:arch-flags (list "8086" "FPU")))

(defparameter HLT-void (make-instance 'x64-HLT-instruction
:operands "void"
:code-string "[ f4]"
:arch-flags (list "8086" "PRIV")))

(defparameter IBTS-mem.reg16 (make-instance 'x64-IBTS-instruction
:operands "mem,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "386" "SW" "UNDOC" "ND")))

(defparameter IBTS-reg16.reg16 (make-instance 'x64-IBTS-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter IBTS-mem.reg32 (make-instance 'x64-IBTS-instruction
:operands "mem,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "386" "SD" "UNDOC" "ND")))

(defparameter IBTS-reg32.reg32 (make-instance 'x64-IBTS-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter ICEBP-void (make-instance 'x64-ICEBP-instruction
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "ND")))

(defparameter IDIV-rm8 (make-instance 'x64-IDIV-instruction
:operands "rm8"
:code-string "[m: f6 /7]"
:arch-flags (list "8086")))

(defparameter IDIV-rm16 (make-instance 'x64-IDIV-instruction
:operands "rm16"
:code-string "[m: o16 f7 /7]"
:arch-flags (list "8086")))

(defparameter IDIV-rm32 (make-instance 'x64-IDIV-instruction
:operands "rm32"
:code-string "[m: o32 f7 /7]"
:arch-flags (list "386")))

(defparameter IDIV-rm64 (make-instance 'x64-IDIV-instruction
:operands "rm64"
:code-string "[m: o64 f7 /7]"
:arch-flags (list "X64")))

(defparameter IMUL-rm8 (make-instance 'x64-IMUL-instruction
:operands "rm8"
:code-string "[m: f6 /5]"
:arch-flags (list "8086")))

(defparameter IMUL-rm16 (make-instance 'x64-IMUL-instruction
:operands "rm16"
:code-string "[m: o16 f7 /5]"
:arch-flags (list "8086")))

(defparameter IMUL-rm32 (make-instance 'x64-IMUL-instruction
:operands "rm32"
:code-string "[m: o32 f7 /5]"
:arch-flags (list "386")))

(defparameter IMUL-rm64 (make-instance 'x64-IMUL-instruction
:operands "rm64"
:code-string "[m: o64 f7 /5]"
:arch-flags (list "X64")))

(defparameter IMUL-reg16.mem (make-instance 'x64-IMUL-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f af /r]"
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg16.reg16 (make-instance 'x64-IMUL-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0f af /r]"
:arch-flags (list "386")))

(defparameter IMUL-reg32.mem (make-instance 'x64-IMUL-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f af /r]"
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.reg32 (make-instance 'x64-IMUL-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0f af /r]"
:arch-flags (list "386")))

(defparameter IMUL-reg64.mem (make-instance 'x64-IMUL-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f af /r]"
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.reg64 (make-instance 'x64-IMUL-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 0f af /r]"
:arch-flags (list "X64")))

(defparameter IMUL-reg16.mem.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg16,mem,imm8"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM")))

(defparameter IMUL-reg16.mem.sbyteword (make-instance 'x64-IMUL-instruction
:operands "reg16,mem,sbyteword"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.mem.imm16 (make-instance 'x64-IMUL-instruction
:operands "reg16,mem,imm16"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM")))

(defparameter IMUL-reg16.mem.imm (make-instance 'x64-IMUL-instruction
:operands "reg16,mem,imm"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.reg16.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg16,reg16,imm8"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186")))

(defparameter IMUL-reg16.reg16.sbyteword (make-instance 'x64-IMUL-instruction
:operands "reg16,reg16,sbyteword"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.reg16.imm16 (make-instance 'x64-IMUL-instruction
:operands "reg16,reg16,imm16"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186")))

(defparameter IMUL-reg16.reg16.imm (make-instance 'x64-IMUL-instruction
:operands "reg16,reg16,imm"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg32.mem.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg32,mem,imm8"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.mem.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg32,mem,sbytedword"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.mem.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg32,mem,imm32"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.mem.imm (make-instance 'x64-IMUL-instruction
:operands "reg32,mem,imm"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.reg32.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg32,reg32,imm8"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386")))

(defparameter IMUL-reg32.reg32.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg32,reg32,sbytedword"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.reg32.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg32,reg32,imm32"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386")))

(defparameter IMUL-reg32.reg32.imm (make-instance 'x64-IMUL-instruction
:operands "reg32,reg32,imm"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg64.mem.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg64,mem,imm8"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.mem.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg64,mem,sbytedword"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.mem.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg64,mem,imm32"
:code-string "[rmi: o64 69 /r id]"
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.mem.imm (make-instance 'x64-IMUL-instruction
:operands "reg64,mem,imm"
:code-string "[rmi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.reg64.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg64,reg64,imm8"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64")))

(defparameter IMUL-reg64.reg64.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg64,reg64,sbytedword"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.reg64.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg64,reg64,imm32"
:code-string "[rmi: o64 69 /r id]"
:arch-flags (list "X64")))

(defparameter IMUL-reg64.reg64.imm (make-instance 'x64-IMUL-instruction
:operands "reg64,reg64,imm"
:code-string "[rmi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg16.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg16,imm8"
:code-string "[r+mi: o16 6b /r ib,s]"
:arch-flags (list "186")))

(defparameter IMUL-reg16.sbyteword (make-instance 'x64-IMUL-instruction
:operands "reg16,sbyteword"
:code-string "[r+mi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.imm16 (make-instance 'x64-IMUL-instruction
:operands "reg16,imm16"
:code-string "[r+mi: o16 69 /r iw]"
:arch-flags (list "186")))

(defparameter IMUL-reg16.imm (make-instance 'x64-IMUL-instruction
:operands "reg16,imm"
:code-string "[r+mi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg32.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg32,imm8"
:code-string "[r+mi: o32 6b /r ib,s]"
:arch-flags (list "386")))

(defparameter IMUL-reg32.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg32,sbytedword"
:code-string "[r+mi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg32,imm32"
:code-string "[r+mi: o32 69 /r id]"
:arch-flags (list "386")))

(defparameter IMUL-reg32.imm (make-instance 'x64-IMUL-instruction
:operands "reg32,imm"
:code-string "[r+mi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg64.imm8 (make-instance 'x64-IMUL-instruction
:operands "reg64,imm8"
:code-string "[r+mi: o64 6b /r ib,s]"
:arch-flags (list "X64")))

(defparameter IMUL-reg64.sbytedword (make-instance 'x64-IMUL-instruction
:operands "reg64,sbytedword"
:code-string "[r+mi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.imm32 (make-instance 'x64-IMUL-instruction
:operands "reg64,imm32"
:code-string "[r+mi: o64 69 /r id,s]"
:arch-flags (list "X64")))

(defparameter IMUL-reg64.imm (make-instance 'x64-IMUL-instruction
:operands "reg64,imm"
:code-string "[r+mi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter IN-reg_al.imm (make-instance 'x64-IN-instruction
:operands "reg_al,imm"
:code-string "[-i: e4 ib,u]"
:arch-flags (list "8086" "SB")))

(defparameter IN-reg_ax.imm (make-instance 'x64-IN-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 e5 ib,u]"
:arch-flags (list "8086" "SB")))

(defparameter IN-reg_eax.imm (make-instance 'x64-IN-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 e5 ib,u]"
:arch-flags (list "386" "SB")))

(defparameter IN-reg_al.reg_dx (make-instance 'x64-IN-instruction
:operands "reg_al,reg_dx"
:code-string "[--: ec]"
:arch-flags (list "8086")))

(defparameter IN-reg_ax.reg_dx (make-instance 'x64-IN-instruction
:operands "reg_ax,reg_dx"
:code-string "[--: o16 ed]"
:arch-flags (list "8086")))

(defparameter IN-reg_eax.reg_dx (make-instance 'x64-IN-instruction
:operands "reg_eax,reg_dx"
:code-string "[--: o32 ed]"
:arch-flags (list "386")))

(defparameter INC-rm8 (make-instance 'x64-INC-instruction
:operands "rm8"
:code-string "[m: hle fe /0]"
:arch-flags (list "8086" "LOCK")))

(defparameter INC-rm16 (make-instance 'x64-INC-instruction
:operands "rm16"
:code-string "[m: hle o16 ff /0]"
:arch-flags (list "8086" "LOCK")))

(defparameter INC-rm32 (make-instance 'x64-INC-instruction
:operands "rm32"
:code-string "[m: hle o32 ff /0]"
:arch-flags (list "386" "LOCK")))

(defparameter INC-rm64 (make-instance 'x64-INC-instruction
:operands "rm64"
:code-string "[m: hle o64 ff /0]"
:arch-flags (list "X64" "LOCK")))

(defparameter INCBIN-ignore (make-instance 'x64-INCBIN-instruction
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")))

(defparameter INSB-void (make-instance 'x64-INSB-instruction
:operands "void"
:code-string "[ 6c]"
:arch-flags (list "186")))

(defparameter INSD-void (make-instance 'x64-INSD-instruction
:operands "void"
:code-string "[ o32 6d]"
:arch-flags (list "386")))

(defparameter INSW-void (make-instance 'x64-INSW-instruction
:operands "void"
:code-string "[ o16 6d]"
:arch-flags (list "186")))

(defparameter INT-imm (make-instance 'x64-INT-instruction
:operands "imm"
:code-string "[i: cd ib,u]"
:arch-flags (list "8086" "SB")))

(defparameter INT01-void (make-instance 'x64-INT01-instruction
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "ND")))

(defparameter INT1-void (make-instance 'x64-INT1-instruction
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386")))

(defparameter INT03-void (make-instance 'x64-INT03-instruction
:operands "void"
:code-string "[ cc]"
:arch-flags (list "8086" "ND")))

(defparameter INT3-void (make-instance 'x64-INT3-instruction
:operands "void"
:code-string "[ cc]"
:arch-flags (list "8086")))

(defparameter INVD-void (make-instance 'x64-INVD-instruction
:operands "void"
:code-string "[ 0f 08]"
:arch-flags (list "486" "PRIV")))

(defparameter INVPCID-reg64.mem128 (make-instance 'x64-INVPCID-instruction
:operands "reg64,mem128"
:code-string "[rm: 66 0f 38 82 /r]"
:arch-flags (list "FUTURE" "INVPCID" "PRIV" "LONG")))

(defparameter INVLPG-mem (make-instance 'x64-INVLPG-instruction
:operands "mem"
:code-string "[m: 0f 01 /7]"
:arch-flags (list "486" "PRIV")))

(defparameter INVLPGA-reg_eax.reg_ecx (make-instance 'x64-INVLPGA-instruction
:operands "reg_eax,reg_ecx"
:code-string "[--: a32 0f 01 df]"
:arch-flags (list "X86_64" "AMD")))

(defparameter INVLPGA-reg_rax.reg_ecx (make-instance 'x64-INVLPGA-instruction
:operands "reg_rax,reg_ecx"
:code-string "[--: o64nw a64 0f 01 df]"
:arch-flags (list "X64" "AMD")))

(defparameter INVLPGA-void (make-instance 'x64-INVLPGA-instruction
:operands "void"
:code-string "[ 0f 01 df]"
:arch-flags (list "X86_64" "AMD")))

(defparameter IRET-void (make-instance 'x64-IRET-instruction
:operands "void"
:code-string "[ odf cf]"
:arch-flags (list "8086")))

(defparameter IRETD-void (make-instance 'x64-IRETD-instruction
:operands "void"
:code-string "[ o32 cf]"
:arch-flags (list "386")))

(defparameter IRETQ-void (make-instance 'x64-IRETQ-instruction
:operands "void"
:code-string "[ o64 cf]"
:arch-flags (list "X64")))

(defparameter IRETW-void (make-instance 'x64-IRETW-instruction
:operands "void"
:code-string "[ o16 cf]"
:arch-flags (list "8086")))

(defparameter JECXZ-imm (make-instance 'x64-JECXZ-instruction
:operands "imm"
:code-string "[i: a32 e3 rel8]"
:arch-flags (list "386")))

(defparameter JRCXZ-imm (make-instance 'x64-JRCXZ-instruction
:operands "imm"
:code-string "[i: a64 e3 rel8]"
:arch-flags (list "X64")))

(defparameter JMP-imm-short (make-instance 'x64-JMP-instruction
:operands "imm|short"
:code-string "[i: eb rel8]"
:arch-flags (list "8086")))

(defparameter JMP-imm (make-instance 'x64-JMP-instruction
:operands "imm"
:code-string "[i: jmp8 eb rel8]"
:arch-flags (list "8086" "ND")))

(defparameter JMP-imm (make-instance 'x64-JMP-instruction
:operands "imm"
:code-string "[i: odf e9 rel]"
:arch-flags (list "8086" "BND")))

(defparameter JMP-imm-near (make-instance 'x64-JMP-instruction
:operands "imm|near"
:code-string "[i: odf e9 rel]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter JMP-imm64 (make-instance 'x64-JMP-instruction
:operands "imm64"
:code-string "[i: o64nw e9 rel]"
:arch-flags (list "X64" "BND")))

(defparameter JMP-imm64-near (make-instance 'x64-JMP-instruction
:operands "imm64|near"
:code-string "[i: o64nw e9 rel]"
:arch-flags (list "X64" "ND" "BND")))

(defparameter JMP-mem-far (make-instance 'x64-JMP-instruction
:operands "mem|far"
:code-string "[m: o64 ff /5]"
:arch-flags (list "X64")))

(defparameter JMP-mem16-far (make-instance 'x64-JMP-instruction
:operands "mem16|far"
:code-string "[m: o16 ff /5]"
:arch-flags (list "8086")))

(defparameter JMP-mem32-far (make-instance 'x64-JMP-instruction
:operands "mem32|far"
:code-string "[m: o32 ff /5]"
:arch-flags (list "386")))

(defparameter JMP-mem64-far (make-instance 'x64-JMP-instruction
:operands "mem64|far"
:code-string "[m: o64 ff /5]"
:arch-flags (list "X64")))

(defparameter JMP-mem-near (make-instance 'x64-JMP-instruction
:operands "mem|near"
:code-string "[m: odf ff /4]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter JMP-rm64-near (make-instance 'x64-JMP-instruction
:operands "rm64|near"
:code-string "[m: o64nw ff /4]"
:arch-flags (list "X64" "ND" "BND")))

(defparameter JMP-mem (make-instance 'x64-JMP-instruction
:operands "mem"
:code-string "[m: odf ff /4]"
:arch-flags (list "8086" "BND")))

(defparameter JMP-rm64 (make-instance 'x64-JMP-instruction
:operands "rm64"
:code-string "[m: o64nw ff /4]"
:arch-flags (list "X64" "BND")))

(defparameter JMPE-imm (make-instance 'x64-JMPE-instruction
:operands "imm"
:code-string "[i: odf 0f b8 rel]"
:arch-flags (list "IA64")))

(defparameter JMPE-imm16 (make-instance 'x64-JMPE-instruction
:operands "imm16"
:code-string "[i: o16 0f b8 rel]"
:arch-flags (list "IA64")))

(defparameter JMPE-imm32 (make-instance 'x64-JMPE-instruction
:operands "imm32"
:code-string "[i: o32 0f b8 rel]"
:arch-flags (list "IA64")))

(defparameter JMPE-rm16 (make-instance 'x64-JMPE-instruction
:operands "rm16"
:code-string "[m: o16 0f 00 /6]"
:arch-flags (list "IA64")))

(defparameter JMPE-rm32 (make-instance 'x64-JMPE-instruction
:operands "rm32"
:code-string "[m: o32 0f 00 /6]"
:arch-flags (list "IA64")))

(defparameter LAHF-void (make-instance 'x64-LAHF-instruction
:operands "void"
:code-string "[ 9f]"
:arch-flags (list "8086")))

(defparameter LAR-reg16.mem (make-instance 'x64-LAR-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "286" "PROT" "SW")))

(defparameter LAR-reg16.reg16 (make-instance 'x64-LAR-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "286" "PROT")))

(defparameter LAR-reg16.reg32 (make-instance 'x64-LAR-instruction
:operands "reg16,reg32"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg16.reg64 (make-instance 'x64-LAR-instruction
:operands "reg16,reg64"
:code-string "[rm: o16 o64nw 0f 02 /r]"
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LAR-reg32.mem (make-instance 'x64-LAR-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT" "SW")))

(defparameter LAR-reg32.reg16 (make-instance 'x64-LAR-instruction
:operands "reg32,reg16"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg32.reg32 (make-instance 'x64-LAR-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg32.reg64 (make-instance 'x64-LAR-instruction
:operands "reg32,reg64"
:code-string "[rm: o32 o64nw 0f 02 /r]"
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LAR-reg64.mem (make-instance 'x64-LAR-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT" "SW")))

(defparameter LAR-reg64.reg16 (make-instance 'x64-LAR-instruction
:operands "reg64,reg16"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LAR-reg64.reg32 (make-instance 'x64-LAR-instruction
:operands "reg64,reg32"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LAR-reg64.reg64 (make-instance 'x64-LAR-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LEA-reg16.mem (make-instance 'x64-LEA-instruction
:operands "reg16,mem"
:code-string "[rm: o16 8d /r]"
:arch-flags (list "8086")))

(defparameter LEA-reg32.mem (make-instance 'x64-LEA-instruction
:operands "reg32,mem"
:code-string "[rm: o32 8d /r]"
:arch-flags (list "386")))

(defparameter LEA-reg64.mem (make-instance 'x64-LEA-instruction
:operands "reg64,mem"
:code-string "[rm: o64 8d /r]"
:arch-flags (list "X64")))

(defparameter LEAVE-void (make-instance 'x64-LEAVE-instruction
:operands "void"
:code-string "[ c9]"
:arch-flags (list "186")))

(defparameter LFENCE-void (make-instance 'x64-LFENCE-instruction
:operands "void"
:code-string "[ np 0f ae e8]"
:arch-flags (list "X64" "AMD")))

(defparameter LFS-reg16.mem (make-instance 'x64-LFS-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f b4 /r]"
:arch-flags (list "386")))

(defparameter LFS-reg32.mem (make-instance 'x64-LFS-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f b4 /r]"
:arch-flags (list "386")))

(defparameter LFS-reg64.mem (make-instance 'x64-LFS-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f b4 /r]"
:arch-flags (list "X64")))

(defparameter LGDT-mem (make-instance 'x64-LGDT-instruction
:operands "mem"
:code-string "[m: 0f 01 /2]"
:arch-flags (list "286" "PRIV")))

(defparameter LGS-reg16.mem (make-instance 'x64-LGS-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f b5 /r]"
:arch-flags (list "386")))

(defparameter LGS-reg32.mem (make-instance 'x64-LGS-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f b5 /r]"
:arch-flags (list "386")))

(defparameter LGS-reg64.mem (make-instance 'x64-LGS-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f b5 /r]"
:arch-flags (list "X64")))

(defparameter LIDT-mem (make-instance 'x64-LIDT-instruction
:operands "mem"
:code-string "[m: 0f 01 /3]"
:arch-flags (list "286" "PRIV")))

(defparameter LLDT-mem (make-instance 'x64-LLDT-instruction
:operands "mem"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LLDT-mem16 (make-instance 'x64-LLDT-instruction
:operands "mem16"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LLDT-reg16 (make-instance 'x64-LLDT-instruction
:operands "reg16"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LMSW-mem (make-instance 'x64-LMSW-instruction
:operands "mem"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")))

(defparameter LMSW-mem16 (make-instance 'x64-LMSW-instruction
:operands "mem16"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")))

(defparameter LMSW-reg16 (make-instance 'x64-LMSW-instruction
:operands "reg16"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")))

(defparameter LOADALL-void (make-instance 'x64-LOADALL-instruction
:operands "void"
:code-string "[ 0f 07]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter LOADALL286-void (make-instance 'x64-LOADALL286-instruction
:operands "void"
:code-string "[ 0f 05]"
:arch-flags (list "286" "UNDOC" "ND")))

(defparameter LODSB-void (make-instance 'x64-LODSB-instruction
:operands "void"
:code-string "[ ac]"
:arch-flags (list "8086")))

(defparameter LODSD-void (make-instance 'x64-LODSD-instruction
:operands "void"
:code-string "[ o32 ad]"
:arch-flags (list "386")))

(defparameter LODSQ-void (make-instance 'x64-LODSQ-instruction
:operands "void"
:code-string "[ o64 ad]"
:arch-flags (list "X64")))

(defparameter LODSW-void (make-instance 'x64-LODSW-instruction
:operands "void"
:code-string "[ o16 ad]"
:arch-flags (list "8086")))

(defparameter LOOP-imm (make-instance 'x64-LOOP-instruction
:operands "imm"
:code-string "[i: adf e2 rel8]"
:arch-flags (list "8086")))

(defparameter LOOP-imm.reg_ecx (make-instance 'x64-LOOP-instruction
:operands "imm,reg_ecx"
:code-string "[i-: a32 e2 rel8]"
:arch-flags (list "386")))

(defparameter LOOP-imm.reg_rcx (make-instance 'x64-LOOP-instruction
:operands "imm,reg_rcx"
:code-string "[i-: a64 e2 rel8]"
:arch-flags (list "X64")))

(defparameter LOOPE-imm (make-instance 'x64-LOOPE-instruction
:operands "imm"
:code-string "[i: adf e1 rel8]"
:arch-flags (list "8086")))

(defparameter LOOPE-imm.reg_ecx (make-instance 'x64-LOOPE-instruction
:operands "imm,reg_ecx"
:code-string "[i-: a32 e1 rel8]"
:arch-flags (list "386")))

(defparameter LOOPE-imm.reg_rcx (make-instance 'x64-LOOPE-instruction
:operands "imm,reg_rcx"
:code-string "[i-: a64 e1 rel8]"
:arch-flags (list "X64")))

(defparameter LOOPNE-imm (make-instance 'x64-LOOPNE-instruction
:operands "imm"
:code-string "[i: adf e0 rel8]"
:arch-flags (list "8086")))

(defparameter LOOPNE-imm.reg_ecx (make-instance 'x64-LOOPNE-instruction
:operands "imm,reg_ecx"
:code-string "[i-: a32 e0 rel8]"
:arch-flags (list "386")))

(defparameter LOOPNE-imm.reg_rcx (make-instance 'x64-LOOPNE-instruction
:operands "imm,reg_rcx"
:code-string "[i-: a64 e0 rel8]"
:arch-flags (list "X64")))

(defparameter LOOPNZ-imm (make-instance 'x64-LOOPNZ-instruction
:operands "imm"
:code-string "[i: adf e0 rel8]"
:arch-flags (list "8086")))

(defparameter LOOPNZ-imm.reg_ecx (make-instance 'x64-LOOPNZ-instruction
:operands "imm,reg_ecx"
:code-string "[i-: a32 e0 rel8]"
:arch-flags (list "386")))

(defparameter LOOPNZ-imm.reg_rcx (make-instance 'x64-LOOPNZ-instruction
:operands "imm,reg_rcx"
:code-string "[i-: a64 e0 rel8]"
:arch-flags (list "X64")))

(defparameter LOOPZ-imm (make-instance 'x64-LOOPZ-instruction
:operands "imm"
:code-string "[i: adf e1 rel8]"
:arch-flags (list "8086")))

(defparameter LOOPZ-imm.reg_ecx (make-instance 'x64-LOOPZ-instruction
:operands "imm,reg_ecx"
:code-string "[i-: a32 e1 rel8]"
:arch-flags (list "386")))

(defparameter LOOPZ-imm.reg_rcx (make-instance 'x64-LOOPZ-instruction
:operands "imm,reg_rcx"
:code-string "[i-: a64 e1 rel8]"
:arch-flags (list "X64")))

(defparameter LSL-reg16.mem (make-instance 'x64-LSL-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "286" "PROT" "SW")))

(defparameter LSL-reg16.reg16 (make-instance 'x64-LSL-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "286" "PROT")))

(defparameter LSL-reg16.reg32 (make-instance 'x64-LSL-instruction
:operands "reg16,reg32"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg16.reg64 (make-instance 'x64-LSL-instruction
:operands "reg16,reg64"
:code-string "[rm: o16 o64nw 0f 03 /r]"
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LSL-reg32.mem (make-instance 'x64-LSL-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT" "SW")))

(defparameter LSL-reg32.reg16 (make-instance 'x64-LSL-instruction
:operands "reg32,reg16"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg32.reg32 (make-instance 'x64-LSL-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg32.reg64 (make-instance 'x64-LSL-instruction
:operands "reg32,reg64"
:code-string "[rm: o32 o64nw 0f 03 /r]"
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LSL-reg64.mem (make-instance 'x64-LSL-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT" "SW")))

(defparameter LSL-reg64.reg16 (make-instance 'x64-LSL-instruction
:operands "reg64,reg16"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LSL-reg64.reg32 (make-instance 'x64-LSL-instruction
:operands "reg64,reg32"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LSL-reg64.reg64 (make-instance 'x64-LSL-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")))

(defparameter LSS-reg16.mem (make-instance 'x64-LSS-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f b2 /r]"
:arch-flags (list "386")))

(defparameter LSS-reg32.mem (make-instance 'x64-LSS-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f b2 /r]"
:arch-flags (list "386")))

(defparameter LSS-reg64.mem (make-instance 'x64-LSS-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f b2 /r]"
:arch-flags (list "X64")))

(defparameter LTR-mem (make-instance 'x64-LTR-instruction
:operands "mem"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LTR-mem16 (make-instance 'x64-LTR-instruction
:operands "mem16"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LTR-reg16 (make-instance 'x64-LTR-instruction
:operands "reg16"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter MFENCE-void (make-instance 'x64-MFENCE-instruction
:operands "void"
:code-string "[ np 0f ae f0]"
:arch-flags (list "X64" "AMD")))

(defparameter MONITOR-void (make-instance 'x64-MONITOR-instruction
:operands "void"
:code-string "[ 0f 01 c8]"
:arch-flags (list "PRESCOTT")))

(defparameter MONITOR-reg_rax.reg_ecx.reg_edx (make-instance 'x64-MONITOR-instruction
:operands "reg_rax,reg_ecx,reg_edx"
:code-string "[---: 0f 01 c8]"
:arch-flags (list "X64" "ND")))

(defparameter MOV-mem.reg_sreg (make-instance 'x64-MOV-instruction
:operands "mem,reg_sreg"
:code-string "[mr: 8c /r]"
:arch-flags (list "8086" "SW")))

(defparameter MOV-reg16.reg_sreg (make-instance 'x64-MOV-instruction
:operands "reg16,reg_sreg"
:code-string "[mr: o16 8c /r]"
:arch-flags (list "8086")))

(defparameter MOV-reg32.reg_sreg (make-instance 'x64-MOV-instruction
:operands "reg32,reg_sreg"
:code-string "[mr: o32 8c /r]"
:arch-flags (list "386")))

(defparameter MOV-reg64.reg_sreg (make-instance 'x64-MOV-instruction
:operands "reg64,reg_sreg"
:code-string "[mr: o64nw 8c /r]"
:arch-flags (list "X64" "OPT" "ND")))

(defparameter MOV-rm64.reg_sreg (make-instance 'x64-MOV-instruction
:operands "rm64,reg_sreg"
:code-string "[mr: o64 8c /r]"
:arch-flags (list "X64")))

(defparameter MOV-reg_sreg.mem (make-instance 'x64-MOV-instruction
:operands "reg_sreg,mem"
:code-string "[rm: 8e /r]"
:arch-flags (list "8086" "SW")))

(defparameter MOV-reg_sreg.reg16 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,reg16"
:code-string "[rm: 8e /r]"
:arch-flags (list "8086" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg32 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,reg32"
:code-string "[rm: 8e /r]"
:arch-flags (list "386" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg64 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,reg64"
:code-string "[rm: o64nw 8e /r]"
:arch-flags (list "X64" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg16 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,reg16"
:code-string "[rm: o16 8e /r]"
:arch-flags (list "8086")))

(defparameter MOV-reg_sreg.reg32 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,reg32"
:code-string "[rm: o32 8e /r]"
:arch-flags (list "386")))

(defparameter MOV-reg_sreg.rm64 (make-instance 'x64-MOV-instruction
:operands "reg_sreg,rm64"
:code-string "[rm: o64 8e /r]"
:arch-flags (list "X64")))

(defparameter MOV-reg_al.mem_offs (make-instance 'x64-MOV-instruction
:operands "reg_al,mem_offs"
:code-string "[-i: a0 iwdq]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg_ax.mem_offs (make-instance 'x64-MOV-instruction
:operands "reg_ax,mem_offs"
:code-string "[-i: o16 a1 iwdq]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg_eax.mem_offs (make-instance 'x64-MOV-instruction
:operands "reg_eax,mem_offs"
:code-string "[-i: o32 a1 iwdq]"
:arch-flags (list "386" "SM")))

(defparameter MOV-reg_rax.mem_offs (make-instance 'x64-MOV-instruction
:operands "reg_rax,mem_offs"
:code-string "[-i: o64 a1 iwdq]"
:arch-flags (list "X64" "SM")))

(defparameter MOV-mem_offs.reg_al (make-instance 'x64-MOV-instruction
:operands "mem_offs,reg_al"
:code-string "[i-: a2 iwdq]"
:arch-flags (list "8086" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_ax (make-instance 'x64-MOV-instruction
:operands "mem_offs,reg_ax"
:code-string "[i-: o16 a3 iwdq]"
:arch-flags (list "8086" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_eax (make-instance 'x64-MOV-instruction
:operands "mem_offs,reg_eax"
:code-string "[i-: o32 a3 iwdq]"
:arch-flags (list "386" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_rax (make-instance 'x64-MOV-instruction
:operands "mem_offs,reg_rax"
:code-string "[i-: o64 a3 iwdq]"
:arch-flags (list "X64" "SM" "NOHLE")))

(defparameter MOV-reg64.reg_creg (make-instance 'x64-MOV-instruction
:operands "reg64,reg_creg"
:code-string "[mr: o64nw 0f 20 /r]"
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg_creg.reg64 (make-instance 'x64-MOV-instruction
:operands "reg_creg,reg64"
:code-string "[rm: o64nw 0f 22 /r]"
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg64.reg_dreg (make-instance 'x64-MOV-instruction
:operands "reg64,reg_dreg"
:code-string "[mr: o64nw 0f 21 /r]"
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg_dreg.reg64 (make-instance 'x64-MOV-instruction
:operands "reg_dreg,reg64"
:code-string "[rm: o64nw 0f 23 /r]"
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-mem.reg8 (make-instance 'x64-MOV-instruction
:operands "mem,reg8"
:code-string "[mr: hlexr 88 /r]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg8.reg8 (make-instance 'x64-MOV-instruction
:operands "reg8,reg8"
:code-string "[mr: 88 /r]"
:arch-flags (list "8086")))

(defparameter MOV-mem.reg16 (make-instance 'x64-MOV-instruction
:operands "mem,reg16"
:code-string "[mr: hlexr o16 89 /r]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.reg16 (make-instance 'x64-MOV-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 89 /r]"
:arch-flags (list "8086")))

(defparameter MOV-mem.reg32 (make-instance 'x64-MOV-instruction
:operands "mem,reg32"
:code-string "[mr: hlexr o32 89 /r]"
:arch-flags (list "386" "SM")))

(defparameter MOV-reg32.reg32 (make-instance 'x64-MOV-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 89 /r]"
:arch-flags (list "386")))

(defparameter MOV-mem.reg64 (make-instance 'x64-MOV-instruction
:operands "mem,reg64"
:code-string "[mr: hlexr o64 89 /r]"
:arch-flags (list "X64" "SM")))

(defparameter MOV-reg64.reg64 (make-instance 'x64-MOV-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 89 /r]"
:arch-flags (list "X64")))

(defparameter MOV-reg8.mem (make-instance 'x64-MOV-instruction
:operands "reg8,mem"
:code-string "[rm: 8a /r]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg8.reg8 (make-instance 'x64-MOV-instruction
:operands "reg8,reg8"
:code-string "[rm: 8a /r]"
:arch-flags (list "8086")))

(defparameter MOV-reg16.mem (make-instance 'x64-MOV-instruction
:operands "reg16,mem"
:code-string "[rm: o16 8b /r]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.reg16 (make-instance 'x64-MOV-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 8b /r]"
:arch-flags (list "8086")))

(defparameter MOV-reg32.mem (make-instance 'x64-MOV-instruction
:operands "reg32,mem"
:code-string "[rm: o32 8b /r]"
:arch-flags (list "386" "SM")))

(defparameter MOV-reg32.reg32 (make-instance 'x64-MOV-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 8b /r]"
:arch-flags (list "386")))

(defparameter MOV-reg64.mem (make-instance 'x64-MOV-instruction
:operands "reg64,mem"
:code-string "[rm: o64 8b /r]"
:arch-flags (list "X64" "SM")))

(defparameter MOV-reg64.reg64 (make-instance 'x64-MOV-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 8b /r]"
:arch-flags (list "X64")))

(defparameter MOV-reg8.imm (make-instance 'x64-MOV-instruction
:operands "reg8,imm"
:code-string "[ri: b0+r ib]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.imm (make-instance 'x64-MOV-instruction
:operands "reg16,imm"
:code-string "[ri: o16 b8+r iw]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg32.imm (make-instance 'x64-MOV-instruction
:operands "reg32,imm"
:code-string "[ri: o32 b8+r id]"
:arch-flags (list "386" "SM")))

(defparameter MOV-reg64.udword (make-instance 'x64-MOV-instruction
:operands "reg64,udword"
:code-string "[ri: o64nw b8+r id]"
:arch-flags (list "X64" "SM" "OPT" "ND")))

(defparameter MOV-reg64.sdword (make-instance 'x64-MOV-instruction
:operands "reg64,sdword"
:code-string "[mi: o64 c7 /0 id,s]"
:arch-flags (list "X64" "SM" "OPT" "ND")))

(defparameter MOV-reg64.imm (make-instance 'x64-MOV-instruction
:operands "reg64,imm"
:code-string "[ri: o64 b8+r iq]"
:arch-flags (list "X64" "SM")))

(defparameter MOV-rm8.imm (make-instance 'x64-MOV-instruction
:operands "rm8,imm"
:code-string "[mi: hlexr c6 /0 ib]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-rm16.imm (make-instance 'x64-MOV-instruction
:operands "rm16,imm"
:code-string "[mi: hlexr o16 c7 /0 iw]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-rm32.imm (make-instance 'x64-MOV-instruction
:operands "rm32,imm"
:code-string "[mi: hlexr o32 c7 /0 id]"
:arch-flags (list "386" "SM")))

(defparameter MOV-rm64.imm (make-instance 'x64-MOV-instruction
:operands "rm64,imm"
:code-string "[mi: hlexr o64 c7 /0 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter MOV-rm64.imm32 (make-instance 'x64-MOV-instruction
:operands "rm64,imm32"
:code-string "[mi: hlexr o64 c7 /0 id,s]"
:arch-flags (list "X64")))

(defparameter MOV-mem.imm8 (make-instance 'x64-MOV-instruction
:operands "mem,imm8"
:code-string "[mi: hlexr c6 /0 ib]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-mem.imm16 (make-instance 'x64-MOV-instruction
:operands "mem,imm16"
:code-string "[mi: hlexr o16 c7 /0 iw]"
:arch-flags (list "8086" "SM")))

(defparameter MOV-mem.imm32 (make-instance 'x64-MOV-instruction
:operands "mem,imm32"
:code-string "[mi: hlexr o32 c7 /0 id]"
:arch-flags (list "386" "SM")))

(defparameter MOVD-mmxreg.rm32 (make-instance 'x64-MOVD-instruction
:operands "mmxreg,rm32"
:code-string "[rm: np 0f 6e /r]"
:arch-flags (list "PENT" "MMX" "SD")))

(defparameter MOVD-rm32.mmxreg (make-instance 'x64-MOVD-instruction
:operands "rm32,mmxreg"
:code-string "[mr: np 0f 7e /r]"
:arch-flags (list "PENT" "MMX" "SD")))

(defparameter MOVD-mmxreg.rm64 (make-instance 'x64-MOVD-instruction
:operands "mmxreg,rm64"
:code-string "[rm: np o64 0f 6e /r]"
:arch-flags (list "X64" "MMX" "SX" "ND")))

(defparameter MOVD-rm64.mmxreg (make-instance 'x64-MOVD-instruction
:operands "rm64,mmxreg"
:code-string "[mr: np o64 0f 7e /r]"
:arch-flags (list "X64" "MMX" "SX" "ND")))

(defparameter MOVQ-mmxreg.mmxrm (make-instance 'x64-MOVQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 6f /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter MOVQ-mmxrm.mmxreg (make-instance 'x64-MOVQ-instruction
:operands "mmxrm,mmxreg"
:code-string "[mr: np 0f 7f /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter MOVQ-mmxreg.rm64 (make-instance 'x64-MOVQ-instruction
:operands "mmxreg,rm64"
:code-string "[rm: np o64 0f 6e /r]"
:arch-flags (list "X64" "MMX")))

(defparameter MOVQ-rm64.mmxreg (make-instance 'x64-MOVQ-instruction
:operands "rm64,mmxreg"
:code-string "[mr: np o64 0f 7e /r]"
:arch-flags (list "X64" "MMX")))

(defparameter MOVSB-void (make-instance 'x64-MOVSB-instruction
:operands "void"
:code-string "[ a4]"
:arch-flags (list "8086")))

(defparameter MOVSD-void (make-instance 'x64-MOVSD-instruction
:operands "void"
:code-string "[ o32 a5]"
:arch-flags (list "386")))

(defparameter MOVSQ-void (make-instance 'x64-MOVSQ-instruction
:operands "void"
:code-string "[ o64 a5]"
:arch-flags (list "X64")))

(defparameter MOVSW-void (make-instance 'x64-MOVSW-instruction
:operands "void"
:code-string "[ o16 a5]"
:arch-flags (list "8086")))

(defparameter MOVSX-reg16.mem (make-instance 'x64-MOVSX-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f be /r]"
:arch-flags (list "386" "SB")))

(defparameter MOVSX-reg16.reg8 (make-instance 'x64-MOVSX-instruction
:operands "reg16,reg8"
:code-string "[rm: o16 0f be /r]"
:arch-flags (list "386")))

(defparameter MOVSX-reg32.rm8 (make-instance 'x64-MOVSX-instruction
:operands "reg32,rm8"
:code-string "[rm: o32 0f be /r]"
:arch-flags (list "386")))

(defparameter MOVSX-reg32.rm16 (make-instance 'x64-MOVSX-instruction
:operands "reg32,rm16"
:code-string "[rm: o32 0f bf /r]"
:arch-flags (list "386")))

(defparameter MOVSX-reg64.rm8 (make-instance 'x64-MOVSX-instruction
:operands "reg64,rm8"
:code-string "[rm: o64 0f be /r]"
:arch-flags (list "X64")))

(defparameter MOVSX-reg64.rm16 (make-instance 'x64-MOVSX-instruction
:operands "reg64,rm16"
:code-string "[rm: o64 0f bf /r]"
:arch-flags (list "X64")))

(defparameter MOVSXD-reg64.rm32 (make-instance 'x64-MOVSXD-instruction
:operands "reg64,rm32"
:code-string "[rm: o64 63 /r]"
:arch-flags (list "X64")))

(defparameter MOVSX-reg64.rm32 (make-instance 'x64-MOVSX-instruction
:operands "reg64,rm32"
:code-string "[rm: o64 63 /r]"
:arch-flags (list "X64" "ND")))

(defparameter MOVZX-reg16.mem (make-instance 'x64-MOVZX-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f b6 /r]"
:arch-flags (list "386" "SB")))

(defparameter MOVZX-reg16.reg8 (make-instance 'x64-MOVZX-instruction
:operands "reg16,reg8"
:code-string "[rm: o16 0f b6 /r]"
:arch-flags (list "386")))

(defparameter MOVZX-reg32.rm8 (make-instance 'x64-MOVZX-instruction
:operands "reg32,rm8"
:code-string "[rm: o32 0f b6 /r]"
:arch-flags (list "386")))

(defparameter MOVZX-reg32.rm16 (make-instance 'x64-MOVZX-instruction
:operands "reg32,rm16"
:code-string "[rm: o32 0f b7 /r]"
:arch-flags (list "386")))

(defparameter MOVZX-reg64.rm8 (make-instance 'x64-MOVZX-instruction
:operands "reg64,rm8"
:code-string "[rm: o64 0f b6 /r]"
:arch-flags (list "X64")))

(defparameter MOVZX-reg64.rm16 (make-instance 'x64-MOVZX-instruction
:operands "reg64,rm16"
:code-string "[rm: o64 0f b7 /r]"
:arch-flags (list "X64")))

(defparameter MUL-rm8 (make-instance 'x64-MUL-instruction
:operands "rm8"
:code-string "[m: f6 /4]"
:arch-flags (list "8086")))

(defparameter MUL-rm16 (make-instance 'x64-MUL-instruction
:operands "rm16"
:code-string "[m: o16 f7 /4]"
:arch-flags (list "8086")))

(defparameter MUL-rm32 (make-instance 'x64-MUL-instruction
:operands "rm32"
:code-string "[m: o32 f7 /4]"
:arch-flags (list "386")))

(defparameter MUL-rm64 (make-instance 'x64-MUL-instruction
:operands "rm64"
:code-string "[m: o64 f7 /4]"
:arch-flags (list "X64")))

(defparameter MWAIT-void (make-instance 'x64-MWAIT-instruction
:operands "void"
:code-string "[ 0f 01 c9]"
:arch-flags (list "PRESCOTT")))

(defparameter MWAIT-reg_eax.reg_ecx (make-instance 'x64-MWAIT-instruction
:operands "reg_eax,reg_ecx"
:code-string "[--: 0f 01 c9]"
:arch-flags (list "PRESCOTT" "ND")))

(defparameter NEG-rm8 (make-instance 'x64-NEG-instruction
:operands "rm8"
:code-string "[m: hle f6 /3]"
:arch-flags (list "8086" "LOCK")))

(defparameter NEG-rm16 (make-instance 'x64-NEG-instruction
:operands "rm16"
:code-string "[m: hle o16 f7 /3]"
:arch-flags (list "8086" "LOCK")))

(defparameter NEG-rm32 (make-instance 'x64-NEG-instruction
:operands "rm32"
:code-string "[m: hle o32 f7 /3]"
:arch-flags (list "386" "LOCK")))

(defparameter NEG-rm64 (make-instance 'x64-NEG-instruction
:operands "rm64"
:code-string "[m: hle o64 f7 /3]"
:arch-flags (list "X64" "LOCK")))

(defparameter NOP-void (make-instance 'x64-NOP-instruction
:operands "void"
:code-string "[ norexb nof3 90]"
:arch-flags (list "8086")))

(defparameter NOP-rm16 (make-instance 'x64-NOP-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /0]"
:arch-flags (list "P6")))

(defparameter NOP-rm32 (make-instance 'x64-NOP-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /0]"
:arch-flags (list "P6")))

(defparameter NOP-rm64 (make-instance 'x64-NOP-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /0]"
:arch-flags (list "X64")))

(defparameter NOT-rm8 (make-instance 'x64-NOT-instruction
:operands "rm8"
:code-string "[m: hle f6 /2]"
:arch-flags (list "8086" "LOCK")))

(defparameter NOT-rm16 (make-instance 'x64-NOT-instruction
:operands "rm16"
:code-string "[m: hle o16 f7 /2]"
:arch-flags (list "8086" "LOCK")))

(defparameter NOT-rm32 (make-instance 'x64-NOT-instruction
:operands "rm32"
:code-string "[m: hle o32 f7 /2]"
:arch-flags (list "386" "LOCK")))

(defparameter NOT-rm64 (make-instance 'x64-NOT-instruction
:operands "rm64"
:code-string "[m: hle o64 f7 /2]"
:arch-flags (list "X64" "LOCK")))

(defparameter OR-mem.reg8 (make-instance 'x64-OR-instruction
:operands "mem,reg8"
:code-string "[mr: hle 08 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-reg8.reg8 (make-instance 'x64-OR-instruction
:operands "reg8,reg8"
:code-string "[mr: 08 /r]"
:arch-flags (list "8086")))

(defparameter OR-mem.reg16 (make-instance 'x64-OR-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 09 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-reg16.reg16 (make-instance 'x64-OR-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 09 /r]"
:arch-flags (list "8086")))

(defparameter OR-mem.reg32 (make-instance 'x64-OR-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 09 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OR-reg32.reg32 (make-instance 'x64-OR-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 09 /r]"
:arch-flags (list "386")))

(defparameter OR-mem.reg64 (make-instance 'x64-OR-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 09 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter OR-reg64.reg64 (make-instance 'x64-OR-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 09 /r]"
:arch-flags (list "X64")))

(defparameter OR-reg8.mem (make-instance 'x64-OR-instruction
:operands "reg8,mem"
:code-string "[rm: 0a /r]"
:arch-flags (list "8086" "SM")))

(defparameter OR-reg8.reg8 (make-instance 'x64-OR-instruction
:operands "reg8,reg8"
:code-string "[rm: 0a /r]"
:arch-flags (list "8086")))

(defparameter OR-reg16.mem (make-instance 'x64-OR-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0b /r]"
:arch-flags (list "8086" "SM")))

(defparameter OR-reg16.reg16 (make-instance 'x64-OR-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0b /r]"
:arch-flags (list "8086")))

(defparameter OR-reg32.mem (make-instance 'x64-OR-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0b /r]"
:arch-flags (list "386" "SM")))

(defparameter OR-reg32.reg32 (make-instance 'x64-OR-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0b /r]"
:arch-flags (list "386")))

(defparameter OR-reg64.mem (make-instance 'x64-OR-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0b /r]"
:arch-flags (list "X64" "SM")))

(defparameter OR-reg64.reg64 (make-instance 'x64-OR-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 0b /r]"
:arch-flags (list "X64")))

(defparameter OR-rm16.imm8 (make-instance 'x64-OR-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter OR-rm32.imm8 (make-instance 'x64-OR-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter OR-rm64.imm8 (make-instance 'x64-OR-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /1 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter OR-reg_al.imm (make-instance 'x64-OR-instruction
:operands "reg_al,imm"
:code-string "[-i: 0c ib]"
:arch-flags (list "8086" "SM")))

(defparameter OR-reg_ax.sbyteword (make-instance 'x64-OR-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter OR-reg_ax.imm (make-instance 'x64-OR-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 0d iw]"
:arch-flags (list "8086" "SM")))

(defparameter OR-reg_eax.sbytedword (make-instance 'x64-OR-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter OR-reg_eax.imm (make-instance 'x64-OR-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 0d id]"
:arch-flags (list "386" "SM")))

(defparameter OR-reg_rax.sbytedword (make-instance 'x64-OR-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /1 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter OR-reg_rax.imm (make-instance 'x64-OR-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 0d id,s]"
:arch-flags (list "X64" "SM")))

(defparameter OR-rm8.imm (make-instance 'x64-OR-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /1 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-rm16.sbyteword (make-instance 'x64-OR-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter OR-rm16.imm (make-instance 'x64-OR-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /1 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-rm32.sbytedword (make-instance 'x64-OR-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter OR-rm32.imm (make-instance 'x64-OR-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /1 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OR-rm64.sbytedword (make-instance 'x64-OR-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /1 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter OR-rm64.imm (make-instance 'x64-OR-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /1 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter OR-mem.imm8 (make-instance 'x64-OR-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /1 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-mem.sbyteword16 (make-instance 'x64-OR-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter OR-mem.imm16 (make-instance 'x64-OR-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /1 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-mem.sbytedword32 (make-instance 'x64-OR-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter OR-mem.imm32 (make-instance 'x64-OR-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /1 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OUT-imm.reg_al (make-instance 'x64-OUT-instruction
:operands "imm,reg_al"
:code-string "[i-: e6 ib,u]"
:arch-flags (list "8086" "SB")))

(defparameter OUT-imm.reg_ax (make-instance 'x64-OUT-instruction
:operands "imm,reg_ax"
:code-string "[i-: o16 e7 ib,u]"
:arch-flags (list "8086" "SB")))

(defparameter OUT-imm.reg_eax (make-instance 'x64-OUT-instruction
:operands "imm,reg_eax"
:code-string "[i-: o32 e7 ib,u]"
:arch-flags (list "386" "SB")))

(defparameter OUT-reg_dx.reg_al (make-instance 'x64-OUT-instruction
:operands "reg_dx,reg_al"
:code-string "[--: ee]"
:arch-flags (list "8086")))

(defparameter OUT-reg_dx.reg_ax (make-instance 'x64-OUT-instruction
:operands "reg_dx,reg_ax"
:code-string "[--: o16 ef]"
:arch-flags (list "8086")))

(defparameter OUT-reg_dx.reg_eax (make-instance 'x64-OUT-instruction
:operands "reg_dx,reg_eax"
:code-string "[--: o32 ef]"
:arch-flags (list "386")))

(defparameter OUTSB-void (make-instance 'x64-OUTSB-instruction
:operands "void"
:code-string "[ 6e]"
:arch-flags (list "186")))

(defparameter OUTSD-void (make-instance 'x64-OUTSD-instruction
:operands "void"
:code-string "[ o32 6f]"
:arch-flags (list "386")))

(defparameter OUTSW-void (make-instance 'x64-OUTSW-instruction
:operands "void"
:code-string "[ o16 6f]"
:arch-flags (list "186")))

(defparameter PACKSSDW-mmxreg.mmxrm (make-instance 'x64-PACKSSDW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 6b /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PACKSSWB-mmxreg.mmxrm (make-instance 'x64-PACKSSWB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 63 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PACKUSWB-mmxreg.mmxrm (make-instance 'x64-PACKUSWB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 67 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDB-mmxreg.mmxrm (make-instance 'x64-PADDB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fc /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDD-mmxreg.mmxrm (make-instance 'x64-PADDD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fe /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDSB-mmxreg.mmxrm (make-instance 'x64-PADDSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ec /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDSIW-mmxreg.mmxrm (make-instance 'x64-PADDSIW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 51 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PADDSW-mmxreg.mmxrm (make-instance 'x64-PADDSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ed /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDUSB-mmxreg.mmxrm (make-instance 'x64-PADDUSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f dc /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDUSW-mmxreg.mmxrm (make-instance 'x64-PADDUSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f dd /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDW-mmxreg.mmxrm (make-instance 'x64-PADDW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fd /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PAND-mmxreg.mmxrm (make-instance 'x64-PAND-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f db /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PANDN-mmxreg.mmxrm (make-instance 'x64-PANDN-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f df /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PAUSE-void (make-instance 'x64-PAUSE-instruction
:operands "void"
:code-string "[ f3i 90]"
:arch-flags (list "8086")))

(defparameter PAVEB-mmxreg.mmxrm (make-instance 'x64-PAVEB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 50 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PAVGUSB-mmxreg.mmxrm (make-instance 'x64-PAVGUSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r bf]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PCMPEQB-mmxreg.mmxrm (make-instance 'x64-PCMPEQB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 74 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPEQD-mmxreg.mmxrm (make-instance 'x64-PCMPEQD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 76 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPEQW-mmxreg.mmxrm (make-instance 'x64-PCMPEQW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 75 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTB-mmxreg.mmxrm (make-instance 'x64-PCMPGTB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 64 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTD-mmxreg.mmxrm (make-instance 'x64-PCMPGTD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 66 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTW-mmxreg.mmxrm (make-instance 'x64-PCMPGTW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 65 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PDISTIB-mmxreg.mem (make-instance 'x64-PDISTIB-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 54 /r]"
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")))

(defparameter PF2ID-mmxreg.mmxrm (make-instance 'x64-PF2ID-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 1d]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFACC-mmxreg.mmxrm (make-instance 'x64-PFACC-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r ae]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFADD-mmxreg.mmxrm (make-instance 'x64-PFADD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 9e]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPEQ-mmxreg.mmxrm (make-instance 'x64-PFCMPEQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b0]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPGE-mmxreg.mmxrm (make-instance 'x64-PFCMPGE-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 90]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPGT-mmxreg.mmxrm (make-instance 'x64-PFCMPGT-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a0]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMAX-mmxreg.mmxrm (make-instance 'x64-PFMAX-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a4]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMIN-mmxreg.mmxrm (make-instance 'x64-PFMIN-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 94]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMUL-mmxreg.mmxrm (make-instance 'x64-PFMUL-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b4]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCP-mmxreg.mmxrm (make-instance 'x64-PFRCP-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 96]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCPIT1-mmxreg.mmxrm (make-instance 'x64-PFRCPIT1-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a6]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCPIT2-mmxreg.mmxrm (make-instance 'x64-PFRCPIT2-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b6]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRSQIT1-mmxreg.mmxrm (make-instance 'x64-PFRSQIT1-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a7]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRSQRT-mmxreg.mmxrm (make-instance 'x64-PFRSQRT-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 97]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFSUB-mmxreg.mmxrm (make-instance 'x64-PFSUB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 9a]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFSUBR-mmxreg.mmxrm (make-instance 'x64-PFSUBR-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r aa]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PI2FD-mmxreg.mmxrm (make-instance 'x64-PI2FD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 0d]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PMACHRIW-mmxreg.mem (make-instance 'x64-PMACHRIW-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 5e /r]"
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")))

(defparameter PMADDWD-mmxreg.mmxrm (make-instance 'x64-PMADDWD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMAGW-mmxreg.mmxrm (make-instance 'x64-PMAGW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 52 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHRIW-mmxreg.mmxrm (make-instance 'x64-PMULHRIW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 5d /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHRWA-mmxreg.mmxrm (make-instance 'x64-PMULHRWA-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b7]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PMULHRWC-mmxreg.mmxrm (make-instance 'x64-PMULHRWC-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 59 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHW-mmxreg.mmxrm (make-instance 'x64-PMULHW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMULLW-mmxreg.mmxrm (make-instance 'x64-PMULLW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMVGEZB-mmxreg.mem (make-instance 'x64-PMVGEZB-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 5c /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVLZB-mmxreg.mem (make-instance 'x64-PMVLZB-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 5b /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVNZB-mmxreg.mem (make-instance 'x64-PMVNZB-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 5a /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVZB-mmxreg.mem (make-instance 'x64-PMVZB-instruction
:operands "mmxreg,mem"
:code-string "[rm: 0f 58 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter POP-reg16 (make-instance 'x64-POP-instruction
:operands "reg16"
:code-string "[r: o16 58+r]"
:arch-flags (list "8086")))

(defparameter POP-reg64 (make-instance 'x64-POP-instruction
:operands "reg64"
:code-string "[r: o64nw 58+r]"
:arch-flags (list "X64")))

(defparameter POP-rm16 (make-instance 'x64-POP-instruction
:operands "rm16"
:code-string "[m: o16 8f /0]"
:arch-flags (list "8086")))

(defparameter POP-rm64 (make-instance 'x64-POP-instruction
:operands "rm64"
:code-string "[m: o64nw 8f /0]"
:arch-flags (list "X64")))

(defparameter POP-reg_cs (make-instance 'x64-POP-instruction
:operands "reg_cs"
:code-string "[-: 0f]"
:arch-flags (list "8086" "UNDOC" "ND")))

(defparameter POP-reg_fs (make-instance 'x64-POP-instruction
:operands "reg_fs"
:code-string "[-: 0f a1]"
:arch-flags (list "386")))

(defparameter POP-reg_gs (make-instance 'x64-POP-instruction
:operands "reg_gs"
:code-string "[-: 0f a9]"
:arch-flags (list "386")))

(defparameter POPF-void (make-instance 'x64-POPF-instruction
:operands "void"
:code-string "[ odf 9d]"
:arch-flags (list "8086")))

(defparameter POPFQ-void (make-instance 'x64-POPFQ-instruction
:operands "void"
:code-string "[ o32 9d]"
:arch-flags (list "X64")))

(defparameter POPFW-void (make-instance 'x64-POPFW-instruction
:operands "void"
:code-string "[ o16 9d]"
:arch-flags (list "8086")))

(defparameter POR-mmxreg.mmxrm (make-instance 'x64-POR-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f eb /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PREFETCH-mem (make-instance 'x64-PREFETCH-instruction
:operands "mem"
:code-string "[m: 0f 0d /0]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PREFETCHW-mem (make-instance 'x64-PREFETCHW-instruction
:operands "mem"
:code-string "[m: 0f 0d /1]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PSLLD-mmxreg.mmxrm (make-instance 'x64-PSLLD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLD-mmxreg.imm (make-instance 'x64-PSLLD-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /6 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSLLQ-mmxreg.mmxrm (make-instance 'x64-PSLLQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f3 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLQ-mmxreg.imm (make-instance 'x64-PSLLQ-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 73 /6 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSLLW-mmxreg.mmxrm (make-instance 'x64-PSLLW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLW-mmxreg.imm (make-instance 'x64-PSLLW-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /6 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSRAD-mmxreg.mmxrm (make-instance 'x64-PSRAD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRAD-mmxreg.imm (make-instance 'x64-PSRAD-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /4 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSRAW-mmxreg.mmxrm (make-instance 'x64-PSRAW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRAW-mmxreg.imm (make-instance 'x64-PSRAW-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /4 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLD-mmxreg.mmxrm (make-instance 'x64-PSRLD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLD-mmxreg.imm (make-instance 'x64-PSRLD-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /2 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLQ-mmxreg.mmxrm (make-instance 'x64-PSRLQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d3 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLQ-mmxreg.imm (make-instance 'x64-PSRLQ-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 73 /2 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLW-mmxreg.mmxrm (make-instance 'x64-PSRLW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLW-mmxreg.imm (make-instance 'x64-PSRLW-instruction
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /2 ib,u]"
:arch-flags (list "PENT" "MMX")))

(defparameter PSUBB-mmxreg.mmxrm (make-instance 'x64-PSUBB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBD-mmxreg.mmxrm (make-instance 'x64-PSUBD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fa /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBSB-mmxreg.mmxrm (make-instance 'x64-PSUBSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBSIW-mmxreg.mmxrm (make-instance 'x64-PSUBSIW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 55 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PSUBSW-mmxreg.mmxrm (make-instance 'x64-PSUBSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBUSB-mmxreg.mmxrm (make-instance 'x64-PSUBUSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBUSW-mmxreg.mmxrm (make-instance 'x64-PSUBUSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBW-mmxreg.mmxrm (make-instance 'x64-PSUBW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHBW-mmxreg.mmxrm (make-instance 'x64-PUNPCKHBW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 68 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHDQ-mmxreg.mmxrm (make-instance 'x64-PUNPCKHDQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 6a /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHWD-mmxreg.mmxrm (make-instance 'x64-PUNPCKHWD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 69 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLBW-mmxreg.mmxrm (make-instance 'x64-PUNPCKLBW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 60 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLDQ-mmxreg.mmxrm (make-instance 'x64-PUNPCKLDQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 62 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLWD-mmxreg.mmxrm (make-instance 'x64-PUNPCKLWD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 61 /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUSH-reg16 (make-instance 'x64-PUSH-instruction
:operands "reg16"
:code-string "[r: o16 50+r]"
:arch-flags (list "8086")))

(defparameter PUSH-reg64 (make-instance 'x64-PUSH-instruction
:operands "reg64"
:code-string "[r: o64nw 50+r]"
:arch-flags (list "X64")))

(defparameter PUSH-rm16 (make-instance 'x64-PUSH-instruction
:operands "rm16"
:code-string "[m: o16 ff /6]"
:arch-flags (list "8086")))

(defparameter PUSH-rm64 (make-instance 'x64-PUSH-instruction
:operands "rm64"
:code-string "[m: o64nw ff /6]"
:arch-flags (list "X64")))

(defparameter PUSH-reg_fs (make-instance 'x64-PUSH-instruction
:operands "reg_fs"
:code-string "[-: 0f a0]"
:arch-flags (list "386")))

(defparameter PUSH-reg_gs (make-instance 'x64-PUSH-instruction
:operands "reg_gs"
:code-string "[-: 0f a8]"
:arch-flags (list "386")))

(defparameter PUSH-imm8 (make-instance 'x64-PUSH-instruction
:operands "imm8"
:code-string "[i: 6a ib,s]"
:arch-flags (list "186")))

(defparameter PUSH-sbyteword16 (make-instance 'x64-PUSH-instruction
:operands "sbyteword16"
:code-string "[i: o16 6a ib,s]"
:arch-flags (list "186" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm16 (make-instance 'x64-PUSH-instruction
:operands "imm16"
:code-string "[i: o16 68 iw]"
:arch-flags (list "186" "AR0" "SIZE")))

(defparameter PUSH-sbytedword64 (make-instance 'x64-PUSH-instruction
:operands "sbytedword64"
:code-string "[i: o64nw 6a ib,s]"
:arch-flags (list "X64" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm64 (make-instance 'x64-PUSH-instruction
:operands "imm64"
:code-string "[i: o64nw 68 id,s]"
:arch-flags (list "X64" "AR0" "SIZE")))

(defparameter PUSH-sbytedword32 (make-instance 'x64-PUSH-instruction
:operands "sbytedword32"
:code-string "[i: o64nw 6a ib,s]"
:arch-flags (list "X64" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm32 (make-instance 'x64-PUSH-instruction
:operands "imm32"
:code-string "[i: o64nw 68 id,s]"
:arch-flags (list "X64" "AR0" "SIZE")))

(defparameter PUSHF-void (make-instance 'x64-PUSHF-instruction
:operands "void"
:code-string "[ odf 9c]"
:arch-flags (list "8086")))

(defparameter PUSHFQ-void (make-instance 'x64-PUSHFQ-instruction
:operands "void"
:code-string "[ o32 9c]"
:arch-flags (list "X64")))

(defparameter PUSHFW-void (make-instance 'x64-PUSHFW-instruction
:operands "void"
:code-string "[ o16 9c]"
:arch-flags (list "8086")))

(defparameter PXOR-mmxreg.mmxrm (make-instance 'x64-PXOR-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ef /r]"
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter RCL-rm8.unity (make-instance 'x64-RCL-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /2]"
:arch-flags (list "8086")))

(defparameter RCL-rm8.reg_cl (make-instance 'x64-RCL-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /2]"
:arch-flags (list "8086")))

(defparameter RCL-rm8.imm8 (make-instance 'x64-RCL-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /2 ib,u]"
:arch-flags (list "186")))

(defparameter RCL-rm16.unity (make-instance 'x64-RCL-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /2]"
:arch-flags (list "8086")))

(defparameter RCL-rm16.reg_cl (make-instance 'x64-RCL-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /2]"
:arch-flags (list "8086")))

(defparameter RCL-rm16.imm8 (make-instance 'x64-RCL-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /2 ib,u]"
:arch-flags (list "186")))

(defparameter RCL-rm32.unity (make-instance 'x64-RCL-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /2]"
:arch-flags (list "386")))

(defparameter RCL-rm32.reg_cl (make-instance 'x64-RCL-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /2]"
:arch-flags (list "386")))

(defparameter RCL-rm32.imm8 (make-instance 'x64-RCL-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /2 ib,u]"
:arch-flags (list "386")))

(defparameter RCL-rm64.unity (make-instance 'x64-RCL-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /2]"
:arch-flags (list "X64")))

(defparameter RCL-rm64.reg_cl (make-instance 'x64-RCL-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /2]"
:arch-flags (list "X64")))

(defparameter RCL-rm64.imm8 (make-instance 'x64-RCL-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /2 ib,u]"
:arch-flags (list "X64")))

(defparameter RCR-rm8.unity (make-instance 'x64-RCR-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /3]"
:arch-flags (list "8086")))

(defparameter RCR-rm8.reg_cl (make-instance 'x64-RCR-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /3]"
:arch-flags (list "8086")))

(defparameter RCR-rm8.imm8 (make-instance 'x64-RCR-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /3 ib,u]"
:arch-flags (list "186")))

(defparameter RCR-rm16.unity (make-instance 'x64-RCR-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /3]"
:arch-flags (list "8086")))

(defparameter RCR-rm16.reg_cl (make-instance 'x64-RCR-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /3]"
:arch-flags (list "8086")))

(defparameter RCR-rm16.imm8 (make-instance 'x64-RCR-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /3 ib,u]"
:arch-flags (list "186")))

(defparameter RCR-rm32.unity (make-instance 'x64-RCR-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /3]"
:arch-flags (list "386")))

(defparameter RCR-rm32.reg_cl (make-instance 'x64-RCR-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /3]"
:arch-flags (list "386")))

(defparameter RCR-rm32.imm8 (make-instance 'x64-RCR-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /3 ib,u]"
:arch-flags (list "386")))

(defparameter RCR-rm64.unity (make-instance 'x64-RCR-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /3]"
:arch-flags (list "X64")))

(defparameter RCR-rm64.reg_cl (make-instance 'x64-RCR-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /3]"
:arch-flags (list "X64")))

(defparameter RCR-rm64.imm8 (make-instance 'x64-RCR-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /3 ib,u]"
:arch-flags (list "X64")))

(defparameter RDSHR-rm32 (make-instance 'x64-RDSHR-instruction
:operands "rm32"
:code-string "[m: o32 0f 36 /0]"
:arch-flags (list "P6" "CYRIX" "SMM")))

(defparameter RDMSR-void (make-instance 'x64-RDMSR-instruction
:operands "void"
:code-string "[ 0f 32]"
:arch-flags (list "PENT" "PRIV")))

(defparameter RDPMC-void (make-instance 'x64-RDPMC-instruction
:operands "void"
:code-string "[ 0f 33]"
:arch-flags (list "P6")))

(defparameter RDTSC-void (make-instance 'x64-RDTSC-instruction
:operands "void"
:code-string "[ 0f 31]"
:arch-flags (list "PENT")))

(defparameter RDTSCP-void (make-instance 'x64-RDTSCP-instruction
:operands "void"
:code-string "[ 0f 01 f9]"
:arch-flags (list "X86_64")))

(defparameter RET-void (make-instance 'x64-RET-instruction
:operands "void"
:code-string "[ c3]"
:arch-flags (list "8086" "BND")))

(defparameter RET-imm (make-instance 'x64-RET-instruction
:operands "imm"
:code-string "[i: c2 iw]"
:arch-flags (list "8086" "SW" "BND")))

(defparameter RETF-void (make-instance 'x64-RETF-instruction
:operands "void"
:code-string "[ cb]"
:arch-flags (list "8086")))

(defparameter RETF-imm (make-instance 'x64-RETF-instruction
:operands "imm"
:code-string "[i: ca iw]"
:arch-flags (list "8086" "SW")))

(defparameter RETN-void (make-instance 'x64-RETN-instruction
:operands "void"
:code-string "[ c3]"
:arch-flags (list "8086" "BND")))

(defparameter RETN-imm (make-instance 'x64-RETN-instruction
:operands "imm"
:code-string "[i: c2 iw]"
:arch-flags (list "8086" "SW" "BND")))

(defparameter ROL-rm8.unity (make-instance 'x64-ROL-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /0]"
:arch-flags (list "8086")))

(defparameter ROL-rm8.reg_cl (make-instance 'x64-ROL-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /0]"
:arch-flags (list "8086")))

(defparameter ROL-rm8.imm8 (make-instance 'x64-ROL-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /0 ib,u]"
:arch-flags (list "186")))

(defparameter ROL-rm16.unity (make-instance 'x64-ROL-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /0]"
:arch-flags (list "8086")))

(defparameter ROL-rm16.reg_cl (make-instance 'x64-ROL-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /0]"
:arch-flags (list "8086")))

(defparameter ROL-rm16.imm8 (make-instance 'x64-ROL-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /0 ib,u]"
:arch-flags (list "186")))

(defparameter ROL-rm32.unity (make-instance 'x64-ROL-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /0]"
:arch-flags (list "386")))

(defparameter ROL-rm32.reg_cl (make-instance 'x64-ROL-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /0]"
:arch-flags (list "386")))

(defparameter ROL-rm32.imm8 (make-instance 'x64-ROL-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /0 ib,u]"
:arch-flags (list "386")))

(defparameter ROL-rm64.unity (make-instance 'x64-ROL-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /0]"
:arch-flags (list "X64")))

(defparameter ROL-rm64.reg_cl (make-instance 'x64-ROL-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /0]"
:arch-flags (list "X64")))

(defparameter ROL-rm64.imm8 (make-instance 'x64-ROL-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /0 ib,u]"
:arch-flags (list "X64")))

(defparameter ROR-rm8.unity (make-instance 'x64-ROR-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /1]"
:arch-flags (list "8086")))

(defparameter ROR-rm8.reg_cl (make-instance 'x64-ROR-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /1]"
:arch-flags (list "8086")))

(defparameter ROR-rm8.imm8 (make-instance 'x64-ROR-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /1 ib,u]"
:arch-flags (list "186")))

(defparameter ROR-rm16.unity (make-instance 'x64-ROR-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /1]"
:arch-flags (list "8086")))

(defparameter ROR-rm16.reg_cl (make-instance 'x64-ROR-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /1]"
:arch-flags (list "8086")))

(defparameter ROR-rm16.imm8 (make-instance 'x64-ROR-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /1 ib,u]"
:arch-flags (list "186")))

(defparameter ROR-rm32.unity (make-instance 'x64-ROR-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /1]"
:arch-flags (list "386")))

(defparameter ROR-rm32.reg_cl (make-instance 'x64-ROR-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /1]"
:arch-flags (list "386")))

(defparameter ROR-rm32.imm8 (make-instance 'x64-ROR-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /1 ib,u]"
:arch-flags (list "386")))

(defparameter ROR-rm64.unity (make-instance 'x64-ROR-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /1]"
:arch-flags (list "X64")))

(defparameter ROR-rm64.reg_cl (make-instance 'x64-ROR-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /1]"
:arch-flags (list "X64")))

(defparameter ROR-rm64.imm8 (make-instance 'x64-ROR-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /1 ib,u]"
:arch-flags (list "X64")))

(defparameter RDM-void (make-instance 'x64-RDM-instruction
:operands "void"
:code-string "[ 0f 3a]"
:arch-flags (list "P6" "CYRIX" "ND")))

(defparameter RSDC-reg_sreg.mem80 (make-instance 'x64-RSDC-instruction
:operands "reg_sreg,mem80"
:code-string "[rm: 0f 79 /r]"
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter RSLDT-mem80 (make-instance 'x64-RSLDT-instruction
:operands "mem80"
:code-string "[m: 0f 7b /0]"
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter RSM-void (make-instance 'x64-RSM-instruction
:operands "void"
:code-string "[ 0f aa]"
:arch-flags (list "PENT" "SMM")))

(defparameter RSTS-mem80 (make-instance 'x64-RSTS-instruction
:operands "mem80"
:code-string "[m: 0f 7d /0]"
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SAHF-void (make-instance 'x64-SAHF-instruction
:operands "void"
:code-string "[ 9e]"
:arch-flags (list "8086")))

(defparameter SAL-rm8.unity (make-instance 'x64-SAL-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /4]"
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm8.reg_cl (make-instance 'x64-SAL-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /4]"
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm8.imm8 (make-instance 'x64-SAL-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /4 ib,u]"
:arch-flags (list "186" "ND")))

(defparameter SAL-rm16.unity (make-instance 'x64-SAL-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /4]"
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm16.reg_cl (make-instance 'x64-SAL-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /4]"
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm16.imm8 (make-instance 'x64-SAL-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /4 ib,u]"
:arch-flags (list "186" "ND")))

(defparameter SAL-rm32.unity (make-instance 'x64-SAL-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /4]"
:arch-flags (list "386" "ND")))

(defparameter SAL-rm32.reg_cl (make-instance 'x64-SAL-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /4]"
:arch-flags (list "386" "ND")))

(defparameter SAL-rm32.imm8 (make-instance 'x64-SAL-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /4 ib,u]"
:arch-flags (list "386" "ND")))

(defparameter SAL-rm64.unity (make-instance 'x64-SAL-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /4]"
:arch-flags (list "X64" "ND")))

(defparameter SAL-rm64.reg_cl (make-instance 'x64-SAL-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /4]"
:arch-flags (list "X64" "ND")))

(defparameter SAL-rm64.imm8 (make-instance 'x64-SAL-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /4 ib,u]"
:arch-flags (list "X64" "ND")))

(defparameter SALC-void (make-instance 'x64-SALC-instruction
:operands "void"
:code-string "[ d6]"
:arch-flags (list "8086" "UNDOC")))

(defparameter SAR-rm8.unity (make-instance 'x64-SAR-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /7]"
:arch-flags (list "8086")))

(defparameter SAR-rm8.reg_cl (make-instance 'x64-SAR-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /7]"
:arch-flags (list "8086")))

(defparameter SAR-rm8.imm8 (make-instance 'x64-SAR-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /7 ib,u]"
:arch-flags (list "186")))

(defparameter SAR-rm16.unity (make-instance 'x64-SAR-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /7]"
:arch-flags (list "8086")))

(defparameter SAR-rm16.reg_cl (make-instance 'x64-SAR-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /7]"
:arch-flags (list "8086")))

(defparameter SAR-rm16.imm8 (make-instance 'x64-SAR-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /7 ib,u]"
:arch-flags (list "186")))

(defparameter SAR-rm32.unity (make-instance 'x64-SAR-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /7]"
:arch-flags (list "386")))

(defparameter SAR-rm32.reg_cl (make-instance 'x64-SAR-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /7]"
:arch-flags (list "386")))

(defparameter SAR-rm32.imm8 (make-instance 'x64-SAR-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /7 ib,u]"
:arch-flags (list "386")))

(defparameter SAR-rm64.unity (make-instance 'x64-SAR-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /7]"
:arch-flags (list "X64")))

(defparameter SAR-rm64.reg_cl (make-instance 'x64-SAR-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /7]"
:arch-flags (list "X64")))

(defparameter SAR-rm64.imm8 (make-instance 'x64-SAR-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /7 ib,u]"
:arch-flags (list "X64")))

(defparameter SBB-mem.reg8 (make-instance 'x64-SBB-instruction
:operands "mem,reg8"
:code-string "[mr: hle 18 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-reg8.reg8 (make-instance 'x64-SBB-instruction
:operands "reg8,reg8"
:code-string "[mr: 18 /r]"
:arch-flags (list "8086")))

(defparameter SBB-mem.reg16 (make-instance 'x64-SBB-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 19 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-reg16.reg16 (make-instance 'x64-SBB-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 19 /r]"
:arch-flags (list "8086")))

(defparameter SBB-mem.reg32 (make-instance 'x64-SBB-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 19 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SBB-reg32.reg32 (make-instance 'x64-SBB-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 19 /r]"
:arch-flags (list "386")))

(defparameter SBB-mem.reg64 (make-instance 'x64-SBB-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 19 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SBB-reg64.reg64 (make-instance 'x64-SBB-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 19 /r]"
:arch-flags (list "X64")))

(defparameter SBB-reg8.mem (make-instance 'x64-SBB-instruction
:operands "reg8,mem"
:code-string "[rm: 1a /r]"
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg8.reg8 (make-instance 'x64-SBB-instruction
:operands "reg8,reg8"
:code-string "[rm: 1a /r]"
:arch-flags (list "8086")))

(defparameter SBB-reg16.mem (make-instance 'x64-SBB-instruction
:operands "reg16,mem"
:code-string "[rm: o16 1b /r]"
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg16.reg16 (make-instance 'x64-SBB-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 1b /r]"
:arch-flags (list "8086")))

(defparameter SBB-reg32.mem (make-instance 'x64-SBB-instruction
:operands "reg32,mem"
:code-string "[rm: o32 1b /r]"
:arch-flags (list "386" "SM")))

(defparameter SBB-reg32.reg32 (make-instance 'x64-SBB-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 1b /r]"
:arch-flags (list "386")))

(defparameter SBB-reg64.mem (make-instance 'x64-SBB-instruction
:operands "reg64,mem"
:code-string "[rm: o64 1b /r]"
:arch-flags (list "X64" "SM")))

(defparameter SBB-reg64.reg64 (make-instance 'x64-SBB-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 1b /r]"
:arch-flags (list "X64")))

(defparameter SBB-rm16.imm8 (make-instance 'x64-SBB-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter SBB-rm32.imm8 (make-instance 'x64-SBB-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter SBB-rm64.imm8 (make-instance 'x64-SBB-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /3 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter SBB-reg_al.imm (make-instance 'x64-SBB-instruction
:operands "reg_al,imm"
:code-string "[-i: 1c ib]"
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg_ax.sbyteword (make-instance 'x64-SBB-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter SBB-reg_ax.imm (make-instance 'x64-SBB-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 1d iw]"
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg_eax.sbytedword (make-instance 'x64-SBB-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter SBB-reg_eax.imm (make-instance 'x64-SBB-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 1d id]"
:arch-flags (list "386" "SM")))

(defparameter SBB-reg_rax.sbytedword (make-instance 'x64-SBB-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /3 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter SBB-reg_rax.imm (make-instance 'x64-SBB-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 1d id,s]"
:arch-flags (list "X64" "SM")))

(defparameter SBB-rm8.imm (make-instance 'x64-SBB-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /3 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-rm16.sbyteword (make-instance 'x64-SBB-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SBB-rm16.imm (make-instance 'x64-SBB-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /3 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-rm32.sbytedword (make-instance 'x64-SBB-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SBB-rm32.imm (make-instance 'x64-SBB-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /3 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SBB-rm64.sbytedword (make-instance 'x64-SBB-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /3 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter SBB-rm64.imm (make-instance 'x64-SBB-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /3 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SBB-mem.imm8 (make-instance 'x64-SBB-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /3 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-mem.sbyteword16 (make-instance 'x64-SBB-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SBB-mem.imm16 (make-instance 'x64-SBB-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /3 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-mem.sbytedword32 (make-instance 'x64-SBB-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SBB-mem.imm32 (make-instance 'x64-SBB-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /3 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SCASB-void (make-instance 'x64-SCASB-instruction
:operands "void"
:code-string "[ repe ae]"
:arch-flags (list "8086")))

(defparameter SCASD-void (make-instance 'x64-SCASD-instruction
:operands "void"
:code-string "[ repe o32 af]"
:arch-flags (list "386")))

(defparameter SCASQ-void (make-instance 'x64-SCASQ-instruction
:operands "void"
:code-string "[ repe o64 af]"
:arch-flags (list "X64")))

(defparameter SCASW-void (make-instance 'x64-SCASW-instruction
:operands "void"
:code-string "[ repe o16 af]"
:arch-flags (list "8086")))

(defparameter SFENCE-void (make-instance 'x64-SFENCE-instruction
:operands "void"
:code-string "[ np 0f ae f8]"
:arch-flags (list "X64" "AMD")))

(defparameter SGDT-mem (make-instance 'x64-SGDT-instruction
:operands "mem"
:code-string "[m: 0f 01 /0]"
:arch-flags (list "286")))

(defparameter SHL-rm8.unity (make-instance 'x64-SHL-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /4]"
:arch-flags (list "8086")))

(defparameter SHL-rm8.reg_cl (make-instance 'x64-SHL-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /4]"
:arch-flags (list "8086")))

(defparameter SHL-rm8.imm8 (make-instance 'x64-SHL-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /4 ib,u]"
:arch-flags (list "186")))

(defparameter SHL-rm16.unity (make-instance 'x64-SHL-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /4]"
:arch-flags (list "8086")))

(defparameter SHL-rm16.reg_cl (make-instance 'x64-SHL-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /4]"
:arch-flags (list "8086")))

(defparameter SHL-rm16.imm8 (make-instance 'x64-SHL-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /4 ib,u]"
:arch-flags (list "186")))

(defparameter SHL-rm32.unity (make-instance 'x64-SHL-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /4]"
:arch-flags (list "386")))

(defparameter SHL-rm32.reg_cl (make-instance 'x64-SHL-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /4]"
:arch-flags (list "386")))

(defparameter SHL-rm32.imm8 (make-instance 'x64-SHL-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /4 ib,u]"
:arch-flags (list "386")))

(defparameter SHL-rm64.unity (make-instance 'x64-SHL-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /4]"
:arch-flags (list "X64")))

(defparameter SHL-rm64.reg_cl (make-instance 'x64-SHL-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /4]"
:arch-flags (list "X64")))

(defparameter SHL-rm64.imm8 (make-instance 'x64-SHL-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /4 ib,u]"
:arch-flags (list "X64")))

(defparameter SHLD-mem.reg16.imm (make-instance 'x64-SHLD-instruction
:operands "mem,reg16,imm"
:code-string "[mri: o16 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-reg16.reg16.imm (make-instance 'x64-SHLD-instruction
:operands "reg16,reg16,imm"
:code-string "[mri: o16 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg32.imm (make-instance 'x64-SHLD-instruction
:operands "mem,reg32,imm"
:code-string "[mri: o32 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-reg32.reg32.imm (make-instance 'x64-SHLD-instruction
:operands "reg32,reg32,imm"
:code-string "[mri: o32 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg64.imm (make-instance 'x64-SHLD-instruction
:operands "mem,reg64,imm"
:code-string "[mri: o64 0f a4 /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHLD-reg64.reg64.imm (make-instance 'x64-SHLD-instruction
:operands "reg64,reg64,imm"
:code-string "[mri: o64 0f a4 /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg16.reg_cl (make-instance 'x64-SHLD-instruction
:operands "mem,reg16,reg_cl"
:code-string "[mr-: o16 0f a5 /r]"
:arch-flags (list "386" "SM")))

(defparameter SHLD-reg16.reg16.reg_cl (make-instance 'x64-SHLD-instruction
:operands "reg16,reg16,reg_cl"
:code-string "[mr-: o16 0f a5 /r]"
:arch-flags (list "386")))

(defparameter SHLD-mem.reg32.reg_cl (make-instance 'x64-SHLD-instruction
:operands "mem,reg32,reg_cl"
:code-string "[mr-: o32 0f a5 /r]"
:arch-flags (list "386" "SM")))

(defparameter SHLD-reg32.reg32.reg_cl (make-instance 'x64-SHLD-instruction
:operands "reg32,reg32,reg_cl"
:code-string "[mr-: o32 0f a5 /r]"
:arch-flags (list "386")))

(defparameter SHLD-mem.reg64.reg_cl (make-instance 'x64-SHLD-instruction
:operands "mem,reg64,reg_cl"
:code-string "[mr-: o64 0f a5 /r]"
:arch-flags (list "X64" "SM")))

(defparameter SHLD-reg64.reg64.reg_cl (make-instance 'x64-SHLD-instruction
:operands "reg64,reg64,reg_cl"
:code-string "[mr-: o64 0f a5 /r]"
:arch-flags (list "X64")))

(defparameter SHR-rm8.unity (make-instance 'x64-SHR-instruction
:operands "rm8,unity"
:code-string "[m-: d0 /5]"
:arch-flags (list "8086")))

(defparameter SHR-rm8.reg_cl (make-instance 'x64-SHR-instruction
:operands "rm8,reg_cl"
:code-string "[m-: d2 /5]"
:arch-flags (list "8086")))

(defparameter SHR-rm8.imm8 (make-instance 'x64-SHR-instruction
:operands "rm8,imm8"
:code-string "[mi: c0 /5 ib,u]"
:arch-flags (list "186")))

(defparameter SHR-rm16.unity (make-instance 'x64-SHR-instruction
:operands "rm16,unity"
:code-string "[m-: o16 d1 /5]"
:arch-flags (list "8086")))

(defparameter SHR-rm16.reg_cl (make-instance 'x64-SHR-instruction
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /5]"
:arch-flags (list "8086")))

(defparameter SHR-rm16.imm8 (make-instance 'x64-SHR-instruction
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /5 ib,u]"
:arch-flags (list "186")))

(defparameter SHR-rm32.unity (make-instance 'x64-SHR-instruction
:operands "rm32,unity"
:code-string "[m-: o32 d1 /5]"
:arch-flags (list "386")))

(defparameter SHR-rm32.reg_cl (make-instance 'x64-SHR-instruction
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /5]"
:arch-flags (list "386")))

(defparameter SHR-rm32.imm8 (make-instance 'x64-SHR-instruction
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /5 ib,u]"
:arch-flags (list "386")))

(defparameter SHR-rm64.unity (make-instance 'x64-SHR-instruction
:operands "rm64,unity"
:code-string "[m-: o64 d1 /5]"
:arch-flags (list "X64")))

(defparameter SHR-rm64.reg_cl (make-instance 'x64-SHR-instruction
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /5]"
:arch-flags (list "X64")))

(defparameter SHR-rm64.imm8 (make-instance 'x64-SHR-instruction
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /5 ib,u]"
:arch-flags (list "X64")))

(defparameter SHRD-mem.reg16.imm (make-instance 'x64-SHRD-instruction
:operands "mem,reg16,imm"
:code-string "[mri: o16 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-reg16.reg16.imm (make-instance 'x64-SHRD-instruction
:operands "reg16,reg16,imm"
:code-string "[mri: o16 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg32.imm (make-instance 'x64-SHRD-instruction
:operands "mem,reg32,imm"
:code-string "[mri: o32 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-reg32.reg32.imm (make-instance 'x64-SHRD-instruction
:operands "reg32,reg32,imm"
:code-string "[mri: o32 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg64.imm (make-instance 'x64-SHRD-instruction
:operands "mem,reg64,imm"
:code-string "[mri: o64 0f ac /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHRD-reg64.reg64.imm (make-instance 'x64-SHRD-instruction
:operands "reg64,reg64,imm"
:code-string "[mri: o64 0f ac /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg16.reg_cl (make-instance 'x64-SHRD-instruction
:operands "mem,reg16,reg_cl"
:code-string "[mr-: o16 0f ad /r]"
:arch-flags (list "386" "SM")))

(defparameter SHRD-reg16.reg16.reg_cl (make-instance 'x64-SHRD-instruction
:operands "reg16,reg16,reg_cl"
:code-string "[mr-: o16 0f ad /r]"
:arch-flags (list "386")))

(defparameter SHRD-mem.reg32.reg_cl (make-instance 'x64-SHRD-instruction
:operands "mem,reg32,reg_cl"
:code-string "[mr-: o32 0f ad /r]"
:arch-flags (list "386" "SM")))

(defparameter SHRD-reg32.reg32.reg_cl (make-instance 'x64-SHRD-instruction
:operands "reg32,reg32,reg_cl"
:code-string "[mr-: o32 0f ad /r]"
:arch-flags (list "386")))

(defparameter SHRD-mem.reg64.reg_cl (make-instance 'x64-SHRD-instruction
:operands "mem,reg64,reg_cl"
:code-string "[mr-: o64 0f ad /r]"
:arch-flags (list "X64" "SM")))

(defparameter SHRD-reg64.reg64.reg_cl (make-instance 'x64-SHRD-instruction
:operands "reg64,reg64,reg_cl"
:code-string "[mr-: o64 0f ad /r]"
:arch-flags (list "X64")))

(defparameter SIDT-mem (make-instance 'x64-SIDT-instruction
:operands "mem"
:code-string "[m: 0f 01 /1]"
:arch-flags (list "286")))

(defparameter SLDT-mem (make-instance 'x64-SLDT-instruction
:operands "mem"
:code-string "[m: 0f 00 /0]"
:arch-flags (list "286")))

(defparameter SLDT-mem16 (make-instance 'x64-SLDT-instruction
:operands "mem16"
:code-string "[m: 0f 00 /0]"
:arch-flags (list "286")))

(defparameter SLDT-reg16 (make-instance 'x64-SLDT-instruction
:operands "reg16"
:code-string "[m: o16 0f 00 /0]"
:arch-flags (list "286")))

(defparameter SLDT-reg32 (make-instance 'x64-SLDT-instruction
:operands "reg32"
:code-string "[m: o32 0f 00 /0]"
:arch-flags (list "386")))

(defparameter SLDT-reg64 (make-instance 'x64-SLDT-instruction
:operands "reg64"
:code-string "[m: o64nw 0f 00 /0]"
:arch-flags (list "X64" "ND")))

(defparameter SLDT-reg64 (make-instance 'x64-SLDT-instruction
:operands "reg64"
:code-string "[m: o64 0f 00 /0]"
:arch-flags (list "X64")))

(defparameter SKINIT-void (make-instance 'x64-SKINIT-instruction
:operands "void"
:code-string "[ 0f 01 de]"
:arch-flags (list "X64")))

(defparameter SMI-void (make-instance 'x64-SMI-instruction
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "UNDOC")))

(defparameter SMINT-void (make-instance 'x64-SMINT-instruction
:operands "void"
:code-string "[ 0f 38]"
:arch-flags (list "P6" "CYRIX" "ND")))

(defparameter SMINTOLD-void (make-instance 'x64-SMINTOLD-instruction
:operands "void"
:code-string "[ 0f 7e]"
:arch-flags (list "486" "CYRIX" "ND")))

(defparameter SMSW-mem (make-instance 'x64-SMSW-instruction
:operands "mem"
:code-string "[m: 0f 01 /4]"
:arch-flags (list "286")))

(defparameter SMSW-mem16 (make-instance 'x64-SMSW-instruction
:operands "mem16"
:code-string "[m: 0f 01 /4]"
:arch-flags (list "286")))

(defparameter SMSW-reg16 (make-instance 'x64-SMSW-instruction
:operands "reg16"
:code-string "[m: o16 0f 01 /4]"
:arch-flags (list "286")))

(defparameter SMSW-reg32 (make-instance 'x64-SMSW-instruction
:operands "reg32"
:code-string "[m: o32 0f 01 /4]"
:arch-flags (list "386")))

(defparameter STC-void (make-instance 'x64-STC-instruction
:operands "void"
:code-string "[ f9]"
:arch-flags (list "8086")))

(defparameter STD-void (make-instance 'x64-STD-instruction
:operands "void"
:code-string "[ fd]"
:arch-flags (list "8086")))

(defparameter STI-void (make-instance 'x64-STI-instruction
:operands "void"
:code-string "[ fb]"
:arch-flags (list "8086")))

(defparameter STOSB-void (make-instance 'x64-STOSB-instruction
:operands "void"
:code-string "[ aa]"
:arch-flags (list "8086")))

(defparameter STOSD-void (make-instance 'x64-STOSD-instruction
:operands "void"
:code-string "[ o32 ab]"
:arch-flags (list "386")))

(defparameter STOSQ-void (make-instance 'x64-STOSQ-instruction
:operands "void"
:code-string "[ o64 ab]"
:arch-flags (list "X64")))

(defparameter STOSW-void (make-instance 'x64-STOSW-instruction
:operands "void"
:code-string "[ o16 ab]"
:arch-flags (list "8086")))

(defparameter STR-mem (make-instance 'x64-STR-instruction
:operands "mem"
:code-string "[m: 0f 00 /1]"
:arch-flags (list "286" "PROT")))

(defparameter STR-mem16 (make-instance 'x64-STR-instruction
:operands "mem16"
:code-string "[m: 0f 00 /1]"
:arch-flags (list "286" "PROT")))

(defparameter STR-reg16 (make-instance 'x64-STR-instruction
:operands "reg16"
:code-string "[m: o16 0f 00 /1]"
:arch-flags (list "286" "PROT")))

(defparameter STR-reg32 (make-instance 'x64-STR-instruction
:operands "reg32"
:code-string "[m: o32 0f 00 /1]"
:arch-flags (list "386" "PROT")))

(defparameter STR-reg64 (make-instance 'x64-STR-instruction
:operands "reg64"
:code-string "[m: o64 0f 00 /1]"
:arch-flags (list "X64")))

(defparameter SUB-mem.reg8 (make-instance 'x64-SUB-instruction
:operands "mem,reg8"
:code-string "[mr: hle 28 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-reg8.reg8 (make-instance 'x64-SUB-instruction
:operands "reg8,reg8"
:code-string "[mr: 28 /r]"
:arch-flags (list "8086")))

(defparameter SUB-mem.reg16 (make-instance 'x64-SUB-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 29 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-reg16.reg16 (make-instance 'x64-SUB-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 29 /r]"
:arch-flags (list "8086")))

(defparameter SUB-mem.reg32 (make-instance 'x64-SUB-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 29 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SUB-reg32.reg32 (make-instance 'x64-SUB-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 29 /r]"
:arch-flags (list "386")))

(defparameter SUB-mem.reg64 (make-instance 'x64-SUB-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 29 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SUB-reg64.reg64 (make-instance 'x64-SUB-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 29 /r]"
:arch-flags (list "X64")))

(defparameter SUB-reg8.mem (make-instance 'x64-SUB-instruction
:operands "reg8,mem"
:code-string "[rm: 2a /r]"
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg8.reg8 (make-instance 'x64-SUB-instruction
:operands "reg8,reg8"
:code-string "[rm: 2a /r]"
:arch-flags (list "8086")))

(defparameter SUB-reg16.mem (make-instance 'x64-SUB-instruction
:operands "reg16,mem"
:code-string "[rm: o16 2b /r]"
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg16.reg16 (make-instance 'x64-SUB-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 2b /r]"
:arch-flags (list "8086")))

(defparameter SUB-reg32.mem (make-instance 'x64-SUB-instruction
:operands "reg32,mem"
:code-string "[rm: o32 2b /r]"
:arch-flags (list "386" "SM")))

(defparameter SUB-reg32.reg32 (make-instance 'x64-SUB-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 2b /r]"
:arch-flags (list "386")))

(defparameter SUB-reg64.mem (make-instance 'x64-SUB-instruction
:operands "reg64,mem"
:code-string "[rm: o64 2b /r]"
:arch-flags (list "X64" "SM")))

(defparameter SUB-reg64.reg64 (make-instance 'x64-SUB-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 2b /r]"
:arch-flags (list "X64")))

(defparameter SUB-rm16.imm8 (make-instance 'x64-SUB-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter SUB-rm32.imm8 (make-instance 'x64-SUB-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter SUB-rm64.imm8 (make-instance 'x64-SUB-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /5 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter SUB-reg_al.imm (make-instance 'x64-SUB-instruction
:operands "reg_al,imm"
:code-string "[-i: 2c ib]"
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg_ax.sbyteword (make-instance 'x64-SUB-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter SUB-reg_ax.imm (make-instance 'x64-SUB-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 2d iw]"
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg_eax.sbytedword (make-instance 'x64-SUB-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter SUB-reg_eax.imm (make-instance 'x64-SUB-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 2d id]"
:arch-flags (list "386" "SM")))

(defparameter SUB-reg_rax.sbytedword (make-instance 'x64-SUB-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /5 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter SUB-reg_rax.imm (make-instance 'x64-SUB-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 2d id,s]"
:arch-flags (list "X64" "SM")))

(defparameter SUB-rm8.imm (make-instance 'x64-SUB-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /5 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-rm16.sbyteword (make-instance 'x64-SUB-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SUB-rm16.imm (make-instance 'x64-SUB-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /5 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-rm32.sbytedword (make-instance 'x64-SUB-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SUB-rm32.imm (make-instance 'x64-SUB-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /5 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SUB-rm64.sbytedword (make-instance 'x64-SUB-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /5 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter SUB-rm64.imm (make-instance 'x64-SUB-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /5 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SUB-mem.imm8 (make-instance 'x64-SUB-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /5 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-mem.sbyteword16 (make-instance 'x64-SUB-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SUB-mem.imm16 (make-instance 'x64-SUB-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /5 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-mem.sbytedword32 (make-instance 'x64-SUB-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SUB-mem.imm32 (make-instance 'x64-SUB-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /5 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SVDC-mem80.reg_sreg (make-instance 'x64-SVDC-instruction
:operands "mem80,reg_sreg"
:code-string "[mr: 0f 78 /r]"
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SVLDT-mem80 (make-instance 'x64-SVLDT-instruction
:operands "mem80"
:code-string "[m: 0f 7a /0]"
:arch-flags (list "486" "CYRIX" "SMM" "ND")))

(defparameter SVTS-mem80 (make-instance 'x64-SVTS-instruction
:operands "mem80"
:code-string "[m: 0f 7c /0]"
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SWAPGS-void (make-instance 'x64-SWAPGS-instruction
:operands "void"
:code-string "[ 0f 01 f8]"
:arch-flags (list "X64")))

(defparameter SYSCALL-void (make-instance 'x64-SYSCALL-instruction
:operands "void"
:code-string "[ 0f 05]"
:arch-flags (list "P6" "AMD")))

(defparameter SYSENTER-void (make-instance 'x64-SYSENTER-instruction
:operands "void"
:code-string "[ 0f 34]"
:arch-flags (list "P6")))

(defparameter SYSEXIT-void (make-instance 'x64-SYSEXIT-instruction
:operands "void"
:code-string "[ 0f 35]"
:arch-flags (list "P6" "PRIV")))

(defparameter SYSRET-void (make-instance 'x64-SYSRET-instruction
:operands "void"
:code-string "[ 0f 07]"
:arch-flags (list "P6" "PRIV" "AMD")))

(defparameter TEST-mem.reg8 (make-instance 'x64-TEST-instruction
:operands "mem,reg8"
:code-string "[mr: 84 /r]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg8.reg8 (make-instance 'x64-TEST-instruction
:operands "reg8,reg8"
:code-string "[mr: 84 /r]"
:arch-flags (list "8086")))

(defparameter TEST-mem.reg16 (make-instance 'x64-TEST-instruction
:operands "mem,reg16"
:code-string "[mr: o16 85 /r]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg16.reg16 (make-instance 'x64-TEST-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 85 /r]"
:arch-flags (list "8086")))

(defparameter TEST-mem.reg32 (make-instance 'x64-TEST-instruction
:operands "mem,reg32"
:code-string "[mr: o32 85 /r]"
:arch-flags (list "386" "SM")))

(defparameter TEST-reg32.reg32 (make-instance 'x64-TEST-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 85 /r]"
:arch-flags (list "386")))

(defparameter TEST-mem.reg64 (make-instance 'x64-TEST-instruction
:operands "mem,reg64"
:code-string "[mr: o64 85 /r]"
:arch-flags (list "X64" "SM")))

(defparameter TEST-reg64.reg64 (make-instance 'x64-TEST-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 85 /r]"
:arch-flags (list "X64")))

(defparameter TEST-reg8.mem (make-instance 'x64-TEST-instruction
:operands "reg8,mem"
:code-string "[rm: 84 /r]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg16.mem (make-instance 'x64-TEST-instruction
:operands "reg16,mem"
:code-string "[rm: o16 85 /r]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg32.mem (make-instance 'x64-TEST-instruction
:operands "reg32,mem"
:code-string "[rm: o32 85 /r]"
:arch-flags (list "386" "SM")))

(defparameter TEST-reg64.mem (make-instance 'x64-TEST-instruction
:operands "reg64,mem"
:code-string "[rm: o64 85 /r]"
:arch-flags (list "X64" "SM")))

(defparameter TEST-reg_al.imm (make-instance 'x64-TEST-instruction
:operands "reg_al,imm"
:code-string "[-i: a8 ib]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg_ax.imm (make-instance 'x64-TEST-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 a9 iw]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg_eax.imm (make-instance 'x64-TEST-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 a9 id]"
:arch-flags (list "386" "SM")))

(defparameter TEST-reg_rax.imm (make-instance 'x64-TEST-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 a9 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter TEST-rm8.imm (make-instance 'x64-TEST-instruction
:operands "rm8,imm"
:code-string "[mi: f6 /0 ib]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-rm16.imm (make-instance 'x64-TEST-instruction
:operands "rm16,imm"
:code-string "[mi: o16 f7 /0 iw]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-rm32.imm (make-instance 'x64-TEST-instruction
:operands "rm32,imm"
:code-string "[mi: o32 f7 /0 id]"
:arch-flags (list "386" "SM")))

(defparameter TEST-rm64.imm (make-instance 'x64-TEST-instruction
:operands "rm64,imm"
:code-string "[mi: o64 f7 /0 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter TEST-mem.imm8 (make-instance 'x64-TEST-instruction
:operands "mem,imm8"
:code-string "[mi: f6 /0 ib]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-mem.imm16 (make-instance 'x64-TEST-instruction
:operands "mem,imm16"
:code-string "[mi: o16 f7 /0 iw]"
:arch-flags (list "8086" "SM")))

(defparameter TEST-mem.imm32 (make-instance 'x64-TEST-instruction
:operands "mem,imm32"
:code-string "[mi: o32 f7 /0 id]"
:arch-flags (list "386" "SM")))

(defparameter UD0-void (make-instance 'x64-UD0-instruction
:operands "void"
:code-string "[ 0f ff]"
:arch-flags (list "186" "UNDOC")))

(defparameter UD1-void (make-instance 'x64-UD1-instruction
:operands "void"
:code-string "[ 0f b9]"
:arch-flags (list "186" "UNDOC")))

(defparameter UD2B-void (make-instance 'x64-UD2B-instruction
:operands "void"
:code-string "[ 0f b9]"
:arch-flags (list "186" "UNDOC" "ND")))

(defparameter UD2-void (make-instance 'x64-UD2-instruction
:operands "void"
:code-string "[ 0f 0b]"
:arch-flags (list "186")))

(defparameter UD2A-void (make-instance 'x64-UD2A-instruction
:operands "void"
:code-string "[ 0f 0b]"
:arch-flags (list "186" "ND")))

(defparameter UMOV-mem.reg8 (make-instance 'x64-UMOV-instruction
:operands "mem,reg8"
:code-string "[mr: np 0f 10 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg8.reg8 (make-instance 'x64-UMOV-instruction
:operands "reg8,reg8"
:code-string "[mr: np 0f 10 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-mem.reg16 (make-instance 'x64-UMOV-instruction
:operands "mem,reg16"
:code-string "[mr: np o16 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg16.reg16 (make-instance 'x64-UMOV-instruction
:operands "reg16,reg16"
:code-string "[mr: np o16 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-mem.reg32 (make-instance 'x64-UMOV-instruction
:operands "mem,reg32"
:code-string "[mr: np o32 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg32.reg32 (make-instance 'x64-UMOV-instruction
:operands "reg32,reg32"
:code-string "[mr: np o32 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg8.mem (make-instance 'x64-UMOV-instruction
:operands "reg8,mem"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg8.reg8 (make-instance 'x64-UMOV-instruction
:operands "reg8,reg8"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg16.mem (make-instance 'x64-UMOV-instruction
:operands "reg16,mem"
:code-string "[rm: np o16 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg16.reg16 (make-instance 'x64-UMOV-instruction
:operands "reg16,reg16"
:code-string "[rm: np o16 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg32.mem (make-instance 'x64-UMOV-instruction
:operands "reg32,mem"
:code-string "[rm: np o32 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg32.reg32 (make-instance 'x64-UMOV-instruction
:operands "reg32,reg32"
:code-string "[rm: np o32 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter VERR-mem (make-instance 'x64-VERR-instruction
:operands "mem"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")))

(defparameter VERR-mem16 (make-instance 'x64-VERR-instruction
:operands "mem16"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")))

(defparameter VERR-reg16 (make-instance 'x64-VERR-instruction
:operands "reg16"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")))

(defparameter VERW-mem (make-instance 'x64-VERW-instruction
:operands "mem"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")))

(defparameter VERW-mem16 (make-instance 'x64-VERW-instruction
:operands "mem16"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")))

(defparameter VERW-reg16 (make-instance 'x64-VERW-instruction
:operands "reg16"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")))

(defparameter FWAIT-void (make-instance 'x64-FWAIT-instruction
:operands "void"
:code-string "[ wait]"
:arch-flags (list "8086")))

(defparameter WBINVD-void (make-instance 'x64-WBINVD-instruction
:operands "void"
:code-string "[ 0f 09]"
:arch-flags (list "486" "PRIV")))

(defparameter WRSHR-rm32 (make-instance 'x64-WRSHR-instruction
:operands "rm32"
:code-string "[m: o32 0f 37 /0]"
:arch-flags (list "P6" "CYRIX" "SMM")))

(defparameter WRMSR-void (make-instance 'x64-WRMSR-instruction
:operands "void"
:code-string "[ 0f 30]"
:arch-flags (list "PENT" "PRIV")))

(defparameter XADD-mem.reg8 (make-instance 'x64-XADD-instruction
:operands "mem,reg8"
:code-string "[mr: hle 0f c0 /r]"
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg8.reg8 (make-instance 'x64-XADD-instruction
:operands "reg8,reg8"
:code-string "[mr: 0f c0 /r]"
:arch-flags (list "486")))

(defparameter XADD-mem.reg16 (make-instance 'x64-XADD-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 0f c1 /r]"
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg16.reg16 (make-instance 'x64-XADD-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 0f c1 /r]"
:arch-flags (list "486")))

(defparameter XADD-mem.reg32 (make-instance 'x64-XADD-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 0f c1 /r]"
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg32.reg32 (make-instance 'x64-XADD-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 0f c1 /r]"
:arch-flags (list "486")))

(defparameter XADD-mem.reg64 (make-instance 'x64-XADD-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 0f c1 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XADD-reg64.reg64 (make-instance 'x64-XADD-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 0f c1 /r]"
:arch-flags (list "X64")))

(defparameter XBTS-reg16.mem (make-instance 'x64-XBTS-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f a6 /r]"
:arch-flags (list "386" "SW" "UNDOC" "ND")))

(defparameter XBTS-reg16.reg16 (make-instance 'x64-XBTS-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0f a6 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter XBTS-reg32.mem (make-instance 'x64-XBTS-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f a6 /r]"
:arch-flags (list "386" "SD" "UNDOC" "ND")))

(defparameter XBTS-reg32.reg32 (make-instance 'x64-XBTS-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0f a6 /r]"
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter XCHG-reg_ax.reg16 (make-instance 'x64-XCHG-instruction
:operands "reg_ax,reg16"
:code-string "[-r: o16 90+r]"
:arch-flags (list "8086")))

(defparameter XCHG-reg_eax.reg32na (make-instance 'x64-XCHG-instruction
:operands "reg_eax,reg32na"
:code-string "[-r: o32 90+r]"
:arch-flags (list "386")))

(defparameter XCHG-reg_rax.reg64 (make-instance 'x64-XCHG-instruction
:operands "reg_rax,reg64"
:code-string "[-r: o64 90+r]"
:arch-flags (list "X64")))

(defparameter XCHG-reg16.reg_ax (make-instance 'x64-XCHG-instruction
:operands "reg16,reg_ax"
:code-string "[r-: o16 90+r]"
:arch-flags (list "8086")))

(defparameter XCHG-reg32na.reg_eax (make-instance 'x64-XCHG-instruction
:operands "reg32na,reg_eax"
:code-string "[r-: o32 90+r]"
:arch-flags (list "386")))

(defparameter XCHG-reg64.reg_rax (make-instance 'x64-XCHG-instruction
:operands "reg64,reg_rax"
:code-string "[r-: o64 90+r]"
:arch-flags (list "X64")))

(defparameter XCHG-reg8.mem (make-instance 'x64-XCHG-instruction
:operands "reg8,mem"
:code-string "[rm: hlenl 86 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg8.reg8 (make-instance 'x64-XCHG-instruction
:operands "reg8,reg8"
:code-string "[rm: 86 /r]"
:arch-flags (list "8086")))

(defparameter XCHG-reg16.mem (make-instance 'x64-XCHG-instruction
:operands "reg16,mem"
:code-string "[rm: hlenl o16 87 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg16.reg16 (make-instance 'x64-XCHG-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 87 /r]"
:arch-flags (list "8086")))

(defparameter XCHG-reg32.mem (make-instance 'x64-XCHG-instruction
:operands "reg32,mem"
:code-string "[rm: hlenl o32 87 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XCHG-reg32.reg32 (make-instance 'x64-XCHG-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 87 /r]"
:arch-flags (list "386")))

(defparameter XCHG-reg64.mem (make-instance 'x64-XCHG-instruction
:operands "reg64,mem"
:code-string "[rm: hlenl o64 87 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XCHG-reg64.reg64 (make-instance 'x64-XCHG-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 87 /r]"
:arch-flags (list "X64")))

(defparameter XCHG-mem.reg8 (make-instance 'x64-XCHG-instruction
:operands "mem,reg8"
:code-string "[mr: hlenl 86 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg8.reg8 (make-instance 'x64-XCHG-instruction
:operands "reg8,reg8"
:code-string "[mr: 86 /r]"
:arch-flags (list "8086")))

(defparameter XCHG-mem.reg16 (make-instance 'x64-XCHG-instruction
:operands "mem,reg16"
:code-string "[mr: hlenl o16 87 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg16.reg16 (make-instance 'x64-XCHG-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 87 /r]"
:arch-flags (list "8086")))

(defparameter XCHG-mem.reg32 (make-instance 'x64-XCHG-instruction
:operands "mem,reg32"
:code-string "[mr: hlenl o32 87 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XCHG-reg32.reg32 (make-instance 'x64-XCHG-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 87 /r]"
:arch-flags (list "386")))

(defparameter XCHG-mem.reg64 (make-instance 'x64-XCHG-instruction
:operands "mem,reg64"
:code-string "[mr: hlenl o64 87 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XCHG-reg64.reg64 (make-instance 'x64-XCHG-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 87 /r]"
:arch-flags (list "X64")))

(defparameter XLATB-void (make-instance 'x64-XLATB-instruction
:operands "void"
:code-string "[ d7]"
:arch-flags (list "8086")))

(defparameter XLAT-void (make-instance 'x64-XLAT-instruction
:operands "void"
:code-string "[ d7]"
:arch-flags (list "8086")))

(defparameter XOR-mem.reg8 (make-instance 'x64-XOR-instruction
:operands "mem,reg8"
:code-string "[mr: hle 30 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-reg8.reg8 (make-instance 'x64-XOR-instruction
:operands "reg8,reg8"
:code-string "[mr: 30 /r]"
:arch-flags (list "8086")))

(defparameter XOR-mem.reg16 (make-instance 'x64-XOR-instruction
:operands "mem,reg16"
:code-string "[mr: hle o16 31 /r]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-reg16.reg16 (make-instance 'x64-XOR-instruction
:operands "reg16,reg16"
:code-string "[mr: o16 31 /r]"
:arch-flags (list "8086")))

(defparameter XOR-mem.reg32 (make-instance 'x64-XOR-instruction
:operands "mem,reg32"
:code-string "[mr: hle o32 31 /r]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XOR-reg32.reg32 (make-instance 'x64-XOR-instruction
:operands "reg32,reg32"
:code-string "[mr: o32 31 /r]"
:arch-flags (list "386")))

(defparameter XOR-mem.reg64 (make-instance 'x64-XOR-instruction
:operands "mem,reg64"
:code-string "[mr: hle o64 31 /r]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XOR-reg64.reg64 (make-instance 'x64-XOR-instruction
:operands "reg64,reg64"
:code-string "[mr: o64 31 /r]"
:arch-flags (list "X64")))

(defparameter XOR-reg8.mem (make-instance 'x64-XOR-instruction
:operands "reg8,mem"
:code-string "[rm: 32 /r]"
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg8.reg8 (make-instance 'x64-XOR-instruction
:operands "reg8,reg8"
:code-string "[rm: 32 /r]"
:arch-flags (list "8086")))

(defparameter XOR-reg16.mem (make-instance 'x64-XOR-instruction
:operands "reg16,mem"
:code-string "[rm: o16 33 /r]"
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg16.reg16 (make-instance 'x64-XOR-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 33 /r]"
:arch-flags (list "8086")))

(defparameter XOR-reg32.mem (make-instance 'x64-XOR-instruction
:operands "reg32,mem"
:code-string "[rm: o32 33 /r]"
:arch-flags (list "386" "SM")))

(defparameter XOR-reg32.reg32 (make-instance 'x64-XOR-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 33 /r]"
:arch-flags (list "386")))

(defparameter XOR-reg64.mem (make-instance 'x64-XOR-instruction
:operands "reg64,mem"
:code-string "[rm: o64 33 /r]"
:arch-flags (list "X64" "SM")))

(defparameter XOR-reg64.reg64 (make-instance 'x64-XOR-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 33 /r]"
:arch-flags (list "X64")))

(defparameter XOR-rm16.imm8 (make-instance 'x64-XOR-instruction
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "LOCK")))

(defparameter XOR-rm32.imm8 (make-instance 'x64-XOR-instruction
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "LOCK")))

(defparameter XOR-rm64.imm8 (make-instance 'x64-XOR-instruction
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /6 ib,s]"
:arch-flags (list "X64" "LOCK")))

(defparameter XOR-reg_al.imm (make-instance 'x64-XOR-instruction
:operands "reg_al,imm"
:code-string "[-i: 34 ib]"
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg_ax.sbyteword (make-instance 'x64-XOR-instruction
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "ND")))

(defparameter XOR-reg_ax.imm (make-instance 'x64-XOR-instruction
:operands "reg_ax,imm"
:code-string "[-i: o16 35 iw]"
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg_eax.sbytedword (make-instance 'x64-XOR-instruction
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "ND")))

(defparameter XOR-reg_eax.imm (make-instance 'x64-XOR-instruction
:operands "reg_eax,imm"
:code-string "[-i: o32 35 id]"
:arch-flags (list "386" "SM")))

(defparameter XOR-reg_rax.sbytedword (make-instance 'x64-XOR-instruction
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /6 ib,s]"
:arch-flags (list "X64" "SM" "ND")))

(defparameter XOR-reg_rax.imm (make-instance 'x64-XOR-instruction
:operands "reg_rax,imm"
:code-string "[-i: o64 35 id,s]"
:arch-flags (list "X64" "SM")))

(defparameter XOR-rm8.imm (make-instance 'x64-XOR-instruction
:operands "rm8,imm"
:code-string "[mi: hle 80 /6 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-rm16.sbyteword (make-instance 'x64-XOR-instruction
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter XOR-rm16.imm (make-instance 'x64-XOR-instruction
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /6 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-rm32.sbytedword (make-instance 'x64-XOR-instruction
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter XOR-rm32.imm (make-instance 'x64-XOR-instruction
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /6 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XOR-rm64.sbytedword (make-instance 'x64-XOR-instruction
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /6 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter XOR-rm64.imm (make-instance 'x64-XOR-instruction
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /6 id,s]"
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XOR-mem.imm8 (make-instance 'x64-XOR-instruction
:operands "mem,imm8"
:code-string "[mi: hle 80 /6 ib]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-mem.sbyteword16 (make-instance 'x64-XOR-instruction
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter XOR-mem.imm16 (make-instance 'x64-XOR-instruction
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /6 iw]"
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-mem.sbytedword32 (make-instance 'x64-XOR-instruction
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter XOR-mem.imm32 (make-instance 'x64-XOR-instruction
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /6 id]"
:arch-flags (list "386" "SM" "LOCK")))

(defparameter CMOVcc-reg16.mem (make-instance 'x64-CMOVcc-instruction
:operands "reg16,mem"
:code-string "[rm: o16 0f 40+c /r]"
:arch-flags (list "P6" "SM")))

(defparameter CMOVcc-reg16.reg16 (make-instance 'x64-CMOVcc-instruction
:operands "reg16,reg16"
:code-string "[rm: o16 0f 40+c /r]"
:arch-flags (list "P6")))

(defparameter CMOVcc-reg32.mem (make-instance 'x64-CMOVcc-instruction
:operands "reg32,mem"
:code-string "[rm: o32 0f 40+c /r]"
:arch-flags (list "P6" "SM")))

(defparameter CMOVcc-reg32.reg32 (make-instance 'x64-CMOVcc-instruction
:operands "reg32,reg32"
:code-string "[rm: o32 0f 40+c /r]"
:arch-flags (list "P6")))

(defparameter CMOVcc-reg64.mem (make-instance 'x64-CMOVcc-instruction
:operands "reg64,mem"
:code-string "[rm: o64 0f 40+c /r]"
:arch-flags (list "X64" "SM")))

(defparameter CMOVcc-reg64.reg64 (make-instance 'x64-CMOVcc-instruction
:operands "reg64,reg64"
:code-string "[rm: o64 0f 40+c /r]"
:arch-flags (list "X64")))

(defparameter Jcc-imm-near (make-instance 'x64-Jcc-instruction
:operands "imm|near"
:code-string "[i: odf 0f 80+c rel]"
:arch-flags (list "386" "BND")))

(defparameter Jcc-imm64-near (make-instance 'x64-Jcc-instruction
:operands "imm64|near"
:code-string "[i: o64nw 0f 80+c rel]"
:arch-flags (list "X64" "BND")))

(defparameter Jcc-imm-short (make-instance 'x64-Jcc-instruction
:operands "imm|short"
:code-string "[i: 70+c rel8]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-Jcc-instruction
:operands "imm"
:code-string "[i: jcc8 70+c rel8]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-Jcc-instruction
:operands "imm"
:code-string "[i: 0f 80+c rel]"
:arch-flags (list "386" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-Jcc-instruction
:operands "imm"
:code-string "[i: 71+c jlen e9 rel]"
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-Jcc-instruction
:operands "imm"
:code-string "[i: 70+c rel8]"
:arch-flags (list "8086" "BND")))

(defparameter SETcc-mem (make-instance 'x64-SETcc-instruction
:operands "mem"
:code-string "[m: 0f 90+c /0]"
:arch-flags (list "386" "SB")))

(defparameter SETcc-reg8 (make-instance 'x64-SETcc-instruction
:operands "reg8"
:code-string "[m: 0f 90+c /0]"
:arch-flags (list "386")))

(defparameter ADDPS-xmmreg.xmmrm128 (make-instance 'x64-ADDPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 58 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter ADDSS-xmmreg.xmmrm32 (make-instance 'x64-ADDSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 58 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter ANDNPS-xmmreg.xmmrm128 (make-instance 'x64-ANDNPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 55 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter ANDPS-xmmreg.xmmrm128 (make-instance 'x64-ANDPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 54 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPEQPS-xmmreg.xmmrm128 (make-instance 'x64-CMPEQPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 00]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPEQSS-xmmreg.xmmrm32 (make-instance 'x64-CMPEQSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 00]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLEPS-xmmreg.xmmrm128 (make-instance 'x64-CMPLEPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 02]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLESS-xmmreg.xmmrm32 (make-instance 'x64-CMPLESS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 02]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLTPS-xmmreg.xmmrm128 (make-instance 'x64-CMPLTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 01]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLTSS-xmmreg.xmmrm32 (make-instance 'x64-CMPLTSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 01]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNEQPS-xmmreg.xmmrm128 (make-instance 'x64-CMPNEQPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 04]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNEQSS-xmmreg.xmmrm32 (make-instance 'x64-CMPNEQSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 04]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLEPS-xmmreg.xmmrm128 (make-instance 'x64-CMPNLEPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 06]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLESS-xmmreg.xmmrm32 (make-instance 'x64-CMPNLESS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 06]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLTPS-xmmreg.xmmrm128 (make-instance 'x64-CMPNLTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 05]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLTSS-xmmreg.xmmrm32 (make-instance 'x64-CMPNLTSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 05]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPORDPS-xmmreg.xmmrm128 (make-instance 'x64-CMPORDPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 07]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPORDSS-xmmreg.xmmrm32 (make-instance 'x64-CMPORDSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 07]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPUNORDPS-xmmreg.xmmrm128 (make-instance 'x64-CMPUNORDPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 03]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPUNORDSS-xmmreg.xmmrm32 (make-instance 'x64-CMPUNORDSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 03]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPPS-xmmreg.mem.imm (make-instance 'x64-CMPPS-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: np 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPPS-xmmreg.xmmreg.imm (make-instance 'x64-CMPPS-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: np 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPSS-xmmreg.mem.imm (make-instance 'x64-CMPSS-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: f3 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPSS-xmmreg.xmmreg.imm (make-instance 'x64-CMPSS-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f3 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter COMISS-xmmreg.xmmrm32 (make-instance 'x64-COMISS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: np 0f 2f /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter CVTPI2PS-xmmreg.mmxrm64 (make-instance 'x64-CVTPI2PS-instruction
:operands "xmmreg,mmxrm64"
:code-string "[rm: np 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "MMX")))

(defparameter CVTPS2PI-mmxreg.xmmrm64 (make-instance 'x64-CVTPS2PI-instruction
:operands "mmxreg,xmmrm64"
:code-string "[rm: np 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "MMX")))

(defparameter CVTSI2SS-xmmreg.mem (make-instance 'x64-CVTSI2SS-instruction
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1" "ND")))

(defparameter CVTSI2SS-xmmreg.rm32 (make-instance 'x64-CVTSI2SS-instruction
:operands "xmmreg,rm32"
:code-string "[rm: f3 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSI2SS-xmmreg.rm64 (make-instance 'x64-CVTSI2SS-instruction
:operands "xmmreg,rm64"
:code-string "[rm: o64 f3 0f 2a /r]"
:arch-flags (list "X64" "SSE" "SQ" "AR1")))

(defparameter CVTSS2SI-reg32.xmmreg (make-instance 'x64-CVTSS2SI-instruction
:operands "reg32,xmmreg"
:code-string "[rm: f3 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg32.mem (make-instance 'x64-CVTSS2SI-instruction
:operands "reg32,mem"
:code-string "[rm: f3 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg64.xmmreg (make-instance 'x64-CVTSS2SI-instruction
:operands "reg64,xmmreg"
:code-string "[rm: o64 f3 0f 2d /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg64.mem (make-instance 'x64-CVTSS2SI-instruction
:operands "reg64,mem"
:code-string "[rm: o64 f3 0f 2d /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter CVTTPS2PI-mmxreg.xmmrm (make-instance 'x64-CVTTPS2PI-instruction
:operands "mmxreg,xmmrm"
:code-string "[rm: np 0f 2c /r]"
:arch-flags (list "KATMAI" "SSE" "MMX" "SQ")))

(defparameter CVTTSS2SI-reg32.xmmrm (make-instance 'x64-CVTTSS2SI-instruction
:operands "reg32,xmmrm"
:code-string "[rm: f3 0f 2c /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTTSS2SI-reg64.xmmrm (make-instance 'x64-CVTTSS2SI-instruction
:operands "reg64,xmmrm"
:code-string "[rm: o64 f3 0f 2c /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter DIVPS-xmmreg.xmmrm128 (make-instance 'x64-DIVPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5e /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter DIVSS-xmmreg.xmmrm32 (make-instance 'x64-DIVSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5e /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter LDMXCSR-mem32 (make-instance 'x64-LDMXCSR-instruction
:operands "mem32"
:code-string "[m: np 0f ae /2]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MAXPS-xmmreg.xmmrm128 (make-instance 'x64-MAXPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5f /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MAXSS-xmmreg.xmmrm32 (make-instance 'x64-MAXSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5f /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MINPS-xmmreg.xmmrm128 (make-instance 'x64-MINPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5d /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MINSS-xmmreg.xmmrm32 (make-instance 'x64-MINSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5d /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVAPS-xmmreg.xmmrm128 (make-instance 'x64-MOVAPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 28 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVAPS-xmmrm128.xmmreg (make-instance 'x64-MOVAPS-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: np 0f 29 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHPS-xmmreg.mem64 (make-instance 'x64-MOVHPS-instruction
:operands "xmmreg,mem64"
:code-string "[rm: np 0f 16 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHPS-mem64.xmmreg (make-instance 'x64-MOVHPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr: np 0f 17 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLHPS-xmmreg.xmmreg (make-instance 'x64-MOVLHPS-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: np 0f 16 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLPS-xmmreg.mem64 (make-instance 'x64-MOVLPS-instruction
:operands "xmmreg,mem64"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLPS-mem64.xmmreg (make-instance 'x64-MOVLPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr: np 0f 13 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHLPS-xmmreg.xmmreg (make-instance 'x64-MOVHLPS-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVMSKPS-reg32.xmmreg (make-instance 'x64-MOVMSKPS-instruction
:operands "reg32,xmmreg"
:code-string "[rm: np 0f 50 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVMSKPS-reg64.xmmreg (make-instance 'x64-MOVMSKPS-instruction
:operands "reg64,xmmreg"
:code-string "[rm: np o64 0f 50 /r]"
:arch-flags (list "X64" "SSE")))

(defparameter MOVNTPS-mem128.xmmreg (make-instance 'x64-MOVNTPS-instruction
:operands "mem128,xmmreg"
:code-string "[mr: np 0f 2b /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-xmmreg.xmmrm32 (make-instance 'x64-MOVSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-mem32.xmmreg (make-instance 'x64-MOVSS-instruction
:operands "mem32,xmmreg"
:code-string "[mr: f3 0f 11 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-xmmreg.xmmreg (make-instance 'x64-MOVSS-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVUPS-xmmreg.xmmrm128 (make-instance 'x64-MOVUPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVUPS-xmmrm128.xmmreg (make-instance 'x64-MOVUPS-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: np 0f 11 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MULPS-xmmreg.xmmrm128 (make-instance 'x64-MULPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 59 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter MULSS-xmmreg.xmmrm32 (make-instance 'x64-MULSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 59 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter ORPS-xmmreg.xmmrm128 (make-instance 'x64-ORPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 56 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter RCPPS-xmmreg.xmmrm128 (make-instance 'x64-RCPPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 53 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter RCPSS-xmmreg.xmmrm32 (make-instance 'x64-RCPSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 53 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter RSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-RSQRTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 52 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter RSQRTSS-xmmreg.xmmrm32 (make-instance 'x64-RSQRTSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 52 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter SHUFPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-SHUFPS-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: np 0f c6 /r ib,u]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter SQRTPS-xmmreg.xmmrm128 (make-instance 'x64-SQRTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 51 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter SQRTSS-xmmreg.xmmrm32 (make-instance 'x64-SQRTSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 51 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter STMXCSR-mem32 (make-instance 'x64-STMXCSR-instruction
:operands "mem32"
:code-string "[m: np 0f ae /3]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter SUBPS-xmmreg.xmmrm128 (make-instance 'x64-SUBPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5c /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter SUBSS-xmmreg.xmmrm32 (make-instance 'x64-SUBSS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5c /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter UCOMISS-xmmreg.xmmrm32 (make-instance 'x64-UCOMISS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: np 0f 2e /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter UNPCKHPS-xmmreg.xmmrm128 (make-instance 'x64-UNPCKHPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 15 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter UNPCKLPS-xmmreg.xmmrm128 (make-instance 'x64-UNPCKLPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 14 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter XORPS-xmmreg.xmmrm128 (make-instance 'x64-XORPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 57 /r]"
:arch-flags (list "KATMAI" "SSE")))

(defparameter FXRSTOR-mem (make-instance 'x64-FXRSTOR-instruction
:operands "mem"
:code-string "[m: np 0f ae /1]"
:arch-flags (list "P6" "SSE" "FPU")))

(defparameter FXRSTOR64-mem (make-instance 'x64-FXRSTOR64-instruction
:operands "mem"
:code-string "[m: o64 np 0f ae /1]"
:arch-flags (list "X64" "SSE" "FPU")))

(defparameter FXSAVE-mem (make-instance 'x64-FXSAVE-instruction
:operands "mem"
:code-string "[m: np 0f ae /0]"
:arch-flags (list "P6" "SSE" "FPU")))

(defparameter FXSAVE64-mem (make-instance 'x64-FXSAVE64-instruction
:operands "mem"
:code-string "[m: o64 np 0f ae /0]"
:arch-flags (list "X64" "SSE" "FPU")))

(defparameter XGETBV-void (make-instance 'x64-XGETBV-instruction
:operands "void"
:code-string "[ 0f 01 d0]"
:arch-flags (list "NEHALEM")))

(defparameter XSETBV-void (make-instance 'x64-XSETBV-instruction
:operands "void"
:code-string "[ 0f 01 d1]"
:arch-flags (list "NEHALEM" "PRIV")))

(defparameter XSAVE-mem (make-instance 'x64-XSAVE-instruction
:operands "mem"
:code-string "[m: np 0f ae /4]"
:arch-flags (list "NEHALEM")))

(defparameter XSAVE64-mem (make-instance 'x64-XSAVE64-instruction
:operands "mem"
:code-string "[m: o64 np 0f ae /4]"
:arch-flags (list "LONG" "NEHALEM")))

(defparameter XSAVEC-mem (make-instance 'x64-XSAVEC-instruction
:operands "mem"
:code-string "[m: np 0f c7 /4]"
:arch-flags (list "FUTURE")))

(defparameter XSAVEC64-mem (make-instance 'x64-XSAVEC64-instruction
:operands "mem"
:code-string "[m: o64 np 0f c7 /4]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter XSAVEOPT-mem (make-instance 'x64-XSAVEOPT-instruction
:operands "mem"
:code-string "[m: np 0f ae /6]"
:arch-flags (list "FUTURE")))

(defparameter XSAVEOPT64-mem (make-instance 'x64-XSAVEOPT64-instruction
:operands "mem"
:code-string "[m: o64 np 0f ae /6]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter XSAVES-mem (make-instance 'x64-XSAVES-instruction
:operands "mem"
:code-string "[m: np 0f c7 /5]"
:arch-flags (list "FUTURE")))

(defparameter XSAVES64-mem (make-instance 'x64-XSAVES64-instruction
:operands "mem"
:code-string "[m: o64 np 0f c7 /5]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter XRSTOR-mem (make-instance 'x64-XRSTOR-instruction
:operands "mem"
:code-string "[m: np 0f ae /5]"
:arch-flags (list "NEHALEM")))

(defparameter XRSTOR64-mem (make-instance 'x64-XRSTOR64-instruction
:operands "mem"
:code-string "[m: o64 np 0f ae /5]"
:arch-flags (list "LONG" "NEHALEM")))

(defparameter XRSTORS-mem (make-instance 'x64-XRSTORS-instruction
:operands "mem"
:code-string "[m: np 0f c7 /3]"
:arch-flags (list "FUTURE")))

(defparameter XRSTORS64-mem (make-instance 'x64-XRSTORS64-instruction
:operands "mem"
:code-string "[m: o64 np 0f c7 /3]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter PREFETCHNTA-mem8 (make-instance 'x64-PREFETCHNTA-instruction
:operands "mem8"
:code-string "[m: 0f 18 /0]"
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT0-mem8 (make-instance 'x64-PREFETCHT0-instruction
:operands "mem8"
:code-string "[m: 0f 18 /1]"
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT1-mem8 (make-instance 'x64-PREFETCHT1-instruction
:operands "mem8"
:code-string "[m: 0f 18 /2]"
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT2-mem8 (make-instance 'x64-PREFETCHT2-instruction
:operands "mem8"
:code-string "[m: 0f 18 /3]"
:arch-flags (list "KATMAI")))

(defparameter SFENCE-void (make-instance 'x64-SFENCE-instruction
:operands "void"
:code-string "[ np 0f ae f8]"
:arch-flags (list "KATMAI")))

(defparameter MASKMOVQ-mmxreg.mmxreg (make-instance 'x64-MASKMOVQ-instruction
:operands "mmxreg,mmxreg"
:code-string "[rm: np 0f f7 /r]"
:arch-flags (list "KATMAI" "MMX")))

(defparameter MOVNTQ-mem.mmxreg (make-instance 'x64-MOVNTQ-instruction
:operands "mem,mmxreg"
:code-string "[mr: np 0f e7 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PAVGB-mmxreg.mmxrm (make-instance 'x64-PAVGB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e0 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PAVGW-mmxreg.mmxrm (make-instance 'x64-PAVGW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e3 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PEXTRW-reg32.mmxreg.imm (make-instance 'x64-PEXTRW-instruction
:operands "reg32,mmxreg,imm"
:code-string "[rmi: np 0f c5 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.mem.imm (make-instance 'x64-PINSRW-instruction
:operands "mmxreg,mem,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.rm16.imm (make-instance 'x64-PINSRW-instruction
:operands "mmxreg,rm16,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.reg32.imm (make-instance 'x64-PINSRW-instruction
:operands "mmxreg,reg32,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PMAXSW-mmxreg.mmxrm (make-instance 'x64-PMAXSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ee /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMAXUB-mmxreg.mmxrm (make-instance 'x64-PMAXUB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f de /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMINSW-mmxreg.mmxrm (make-instance 'x64-PMINSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ea /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMINUB-mmxreg.mmxrm (make-instance 'x64-PMINUB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f da /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMOVMSKB-reg32.mmxreg (make-instance 'x64-PMOVMSKB-instruction
:operands "reg32,mmxreg"
:code-string "[rm: np 0f d7 /r]"
:arch-flags (list "KATMAI" "MMX")))

(defparameter PMULHUW-mmxreg.mmxrm (make-instance 'x64-PMULHUW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e4 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PSADBW-mmxreg.mmxrm (make-instance 'x64-PSADBW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f6 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PSHUFW-mmxreg.mmxrm.imm (make-instance 'x64-PSHUFW-instruction
:operands "mmxreg,mmxrm,imm"
:code-string "[rmi: np o64nw 0f 70 /r ib]"
:arch-flags (list "KATMAI" "MMX" "SM2" "SB" "AR2")))

(defparameter PF2IW-mmxreg.mmxrm (make-instance 'x64-PF2IW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 1c]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFNACC-mmxreg.mmxrm (make-instance 'x64-PFNACC-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 8a]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFPNACC-mmxreg.mmxrm (make-instance 'x64-PFPNACC-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 8e]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PI2FW-mmxreg.mmxrm (make-instance 'x64-PI2FW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 0c]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PSWAPD-mmxreg.mmxrm (make-instance 'x64-PSWAPD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r bb]"
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter MASKMOVDQU-xmmreg.xmmreg (make-instance 'x64-MASKMOVDQU-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f f7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CLFLUSH-mem (make-instance 'x64-CLFLUSH-instruction
:operands "mem"
:code-string "[m: np 0f ae /7]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVNTDQ-mem.xmmreg (make-instance 'x64-MOVNTDQ-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f e7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVNTI-mem.reg32 (make-instance 'x64-MOVNTI-instruction
:operands "mem,reg32"
:code-string "[mr: np 0f c3 /r]"
:arch-flags (list "WILLAMETTE" "SD")))

(defparameter MOVNTI-mem.reg64 (make-instance 'x64-MOVNTI-instruction
:operands "mem,reg64"
:code-string "[mr: o64 np 0f c3 /r]"
:arch-flags (list "X64" "SQ")))

(defparameter MOVNTPD-mem.xmmreg (make-instance 'x64-MOVNTPD-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 2b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter LFENCE-void (make-instance 'x64-LFENCE-instruction
:operands "void"
:code-string "[ np 0f ae e8]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MFENCE-void (make-instance 'x64-MFENCE-instruction
:operands "void"
:code-string "[ np 0f ae f0]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVD-mem.xmmreg (make-instance 'x64-MOVD-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 norexw 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter MOVD-xmmreg.mem (make-instance 'x64-MOVD-instruction
:operands "xmmreg,mem"
:code-string "[rm: 66 norexw 0f 6e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter MOVD-xmmreg.rm32 (make-instance 'x64-MOVD-instruction
:operands "xmmreg,rm32"
:code-string "[rm: 66 norexw 0f 6e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVD-rm32.xmmreg (make-instance 'x64-MOVD-instruction
:operands "rm32,xmmreg"
:code-string "[mr: 66 norexw 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQA-xmmreg.xmmreg (make-instance 'x64-MOVDQA-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQA-mem.xmmreg (make-instance 'x64-MOVDQA-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQA-xmmreg.mem (make-instance 'x64-MOVDQA-instruction
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQA-xmmreg.xmmreg (make-instance 'x64-MOVDQA-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQU-xmmreg.xmmreg (make-instance 'x64-MOVDQU-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQU-mem.xmmreg (make-instance 'x64-MOVDQU-instruction
:operands "mem,xmmreg"
:code-string "[mr: f3 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQU-xmmreg.mem (make-instance 'x64-MOVDQU-instruction
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQU-xmmreg.xmmreg (make-instance 'x64-MOVDQU-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: f3 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQ2Q-mmxreg.xmmreg (make-instance 'x64-MOVDQ2Q-instruction
:operands "mmxreg,xmmreg"
:code-string "[rm: f2 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-xmmreg.xmmreg (make-instance 'x64-MOVQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-xmmreg.xmmreg (make-instance 'x64-MOVQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-mem.xmmreg (make-instance 'x64-MOVQ-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter MOVQ-xmmreg.mem (make-instance 'x64-MOVQ-instruction
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter MOVQ-xmmreg.rm64 (make-instance 'x64-MOVQ-instruction
:operands "xmmreg,rm64"
:code-string "[rm: 66 o64 0f 6e /r]"
:arch-flags (list "X64" "SSE2")))

(defparameter MOVQ-rm64.xmmreg (make-instance 'x64-MOVQ-instruction
:operands "rm64,xmmreg"
:code-string "[mr: 66 o64 0f 7e /r]"
:arch-flags (list "X64" "SSE2")))

(defparameter MOVQ2DQ-xmmreg.mmxreg (make-instance 'x64-MOVQ2DQ-instruction
:operands "xmmreg,mmxreg"
:code-string "[rm: f3 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter PACKSSWB-xmmreg.xmmrm (make-instance 'x64-PACKSSWB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 63 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PACKSSDW-xmmreg.xmmrm (make-instance 'x64-PACKSSDW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PACKUSWB-xmmreg.xmmrm (make-instance 'x64-PACKUSWB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 67 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDB-xmmreg.xmmrm (make-instance 'x64-PADDB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fc /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDW-xmmreg.xmmrm (make-instance 'x64-PADDW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fd /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDD-xmmreg.xmmrm (make-instance 'x64-PADDD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fe /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDQ-mmxreg.mmxrm (make-instance 'x64-PADDQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f d4 /r]"
:arch-flags (list "WILLAMETTE" "MMX" "SQ")))

(defparameter PADDQ-xmmreg.xmmrm (make-instance 'x64-PADDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDSB-xmmreg.xmmrm (make-instance 'x64-PADDSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ec /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDSW-xmmreg.xmmrm (make-instance 'x64-PADDSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ed /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDUSB-xmmreg.xmmrm (make-instance 'x64-PADDUSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f dc /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDUSW-xmmreg.xmmrm (make-instance 'x64-PADDUSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f dd /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAND-xmmreg.xmmrm (make-instance 'x64-PAND-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f db /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PANDN-xmmreg.xmmrm (make-instance 'x64-PANDN-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f df /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAVGB-xmmreg.xmmrm (make-instance 'x64-PAVGB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e0 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAVGW-xmmreg.xmmrm (make-instance 'x64-PAVGW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQB-xmmreg.xmmrm (make-instance 'x64-PCMPEQB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 74 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQW-xmmreg.xmmrm (make-instance 'x64-PCMPEQW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 75 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQD-xmmreg.xmmrm (make-instance 'x64-PCMPEQD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 76 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTB-xmmreg.xmmrm (make-instance 'x64-PCMPGTB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 64 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTW-xmmreg.xmmrm (make-instance 'x64-PCMPGTW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 65 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTD-xmmreg.xmmrm (make-instance 'x64-PCMPGTD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 66 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PEXTRW-reg32.xmmreg.imm (make-instance 'x64-PEXTRW-instruction
:operands "reg32,xmmreg,imm"
:code-string "[rmi: 66 0f c5 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.reg16.imm (make-instance 'x64-PINSRW-instruction
:operands "xmmreg,reg16,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.reg32.imm (make-instance 'x64-PINSRW-instruction
:operands "xmmreg,reg32,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2" "ND")))

(defparameter PINSRW-xmmreg.mem.imm (make-instance 'x64-PINSRW-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.mem16.imm (make-instance 'x64-PINSRW-instruction
:operands "xmmreg,mem16,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PMADDWD-xmmreg.xmmrm (make-instance 'x64-PMADDWD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMAXSW-xmmreg.xmmrm (make-instance 'x64-PMAXSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ee /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMAXUB-xmmreg.xmmrm (make-instance 'x64-PMAXUB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f de /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMINSW-xmmreg.xmmrm (make-instance 'x64-PMINSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ea /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMINUB-xmmreg.xmmrm (make-instance 'x64-PMINUB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f da /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMOVMSKB-reg32.xmmreg (make-instance 'x64-PMOVMSKB-instruction
:operands "reg32,xmmreg"
:code-string "[rm: 66 0f d7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter PMULHUW-xmmreg.xmmrm (make-instance 'x64-PMULHUW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULHW-xmmreg.xmmrm (make-instance 'x64-PMULHW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULLW-xmmreg.xmmrm (make-instance 'x64-PMULLW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULUDQ-mmxreg.mmxrm (make-instance 'x64-PMULUDQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULUDQ-xmmreg.xmmrm (make-instance 'x64-PMULUDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter POR-xmmreg.xmmrm (make-instance 'x64-POR-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f eb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSADBW-xmmreg.xmmrm (make-instance 'x64-PSADBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSHUFD-xmmreg.xmmreg.imm (make-instance 'x64-PSHUFD-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: 66 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFD-xmmreg.mem.imm (make-instance 'x64-PSHUFD-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSHUFHW-xmmreg.xmmreg.imm (make-instance 'x64-PSHUFHW-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f3 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFHW-xmmreg.mem.imm (make-instance 'x64-PSHUFHW-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: f3 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSHUFLW-xmmreg.xmmreg.imm (make-instance 'x64-PSHUFLW-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f2 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFLW-xmmreg.mem.imm (make-instance 'x64-PSHUFLW-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: f2 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSLLDQ-xmmreg.imm (make-instance 'x64-PSLLDQ-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /7 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLW-xmmreg.xmmrm (make-instance 'x64-PSLLW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLW-xmmreg.imm (make-instance 'x64-PSLLW-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLD-xmmreg.xmmrm (make-instance 'x64-PSLLD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLD-xmmreg.imm (make-instance 'x64-PSLLD-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLQ-xmmreg.xmmrm (make-instance 'x64-PSLLQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLQ-xmmreg.imm (make-instance 'x64-PSLLQ-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRAW-xmmreg.xmmrm (make-instance 'x64-PSRAW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRAW-xmmreg.imm (make-instance 'x64-PSRAW-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /4 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRAD-xmmreg.xmmrm (make-instance 'x64-PSRAD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRAD-xmmreg.imm (make-instance 'x64-PSRAD-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /4 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLDQ-xmmreg.imm (make-instance 'x64-PSRLDQ-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /3 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLW-xmmreg.xmmrm (make-instance 'x64-PSRLW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLW-xmmreg.imm (make-instance 'x64-PSRLW-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLD-xmmreg.xmmrm (make-instance 'x64-PSRLD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLD-xmmreg.imm (make-instance 'x64-PSRLD-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLQ-xmmreg.xmmrm (make-instance 'x64-PSRLQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLQ-xmmreg.imm (make-instance 'x64-PSRLQ-instruction
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSUBB-xmmreg.xmmrm (make-instance 'x64-PSUBB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBW-xmmreg.xmmrm (make-instance 'x64-PSUBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBD-xmmreg.xmmrm (make-instance 'x64-PSUBD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fa /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBQ-mmxreg.mmxrm (make-instance 'x64-PSUBQ-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBQ-xmmreg.xmmrm (make-instance 'x64-PSUBQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBSB-xmmreg.xmmrm (make-instance 'x64-PSUBSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBSW-xmmreg.xmmrm (make-instance 'x64-PSUBSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBUSB-xmmreg.xmmrm (make-instance 'x64-PSUBUSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBUSW-xmmreg.xmmrm (make-instance 'x64-PSUBUSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHBW-xmmreg.xmmrm (make-instance 'x64-PUNPCKHBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 68 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHWD-xmmreg.xmmrm (make-instance 'x64-PUNPCKHWD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 69 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHDQ-xmmreg.xmmrm (make-instance 'x64-PUNPCKHDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHQDQ-xmmreg.xmmrm (make-instance 'x64-PUNPCKHQDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLBW-xmmreg.xmmrm (make-instance 'x64-PUNPCKLBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 60 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLWD-xmmreg.xmmrm (make-instance 'x64-PUNPCKLWD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 61 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLDQ-xmmreg.xmmrm (make-instance 'x64-PUNPCKLDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 62 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLQDQ-xmmreg.xmmrm (make-instance 'x64-PUNPCKLQDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PXOR-xmmreg.xmmrm (make-instance 'x64-PXOR-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ef /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ADDPD-xmmreg.xmmrm (make-instance 'x64-ADDPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 58 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ADDSD-xmmreg.xmmrm (make-instance 'x64-ADDSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 58 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter ANDNPD-xmmreg.xmmrm (make-instance 'x64-ANDNPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 55 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ANDPD-xmmreg.xmmrm (make-instance 'x64-ANDPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 54 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPEQPD-xmmreg.xmmrm (make-instance 'x64-CMPEQPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 00]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPEQSD-xmmreg.xmmrm (make-instance 'x64-CMPEQSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 00]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPLEPD-xmmreg.xmmrm (make-instance 'x64-CMPLEPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 02]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPLESD-xmmreg.xmmrm (make-instance 'x64-CMPLESD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 02]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPLTPD-xmmreg.xmmrm (make-instance 'x64-CMPLTPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 01]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPLTSD-xmmreg.xmmrm (make-instance 'x64-CMPLTSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 01]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNEQPD-xmmreg.xmmrm (make-instance 'x64-CMPNEQPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 04]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNEQSD-xmmreg.xmmrm (make-instance 'x64-CMPNEQSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 04]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNLEPD-xmmreg.xmmrm (make-instance 'x64-CMPNLEPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 06]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNLESD-xmmreg.xmmrm (make-instance 'x64-CMPNLESD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 06]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNLTPD-xmmreg.xmmrm (make-instance 'x64-CMPNLTPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 05]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNLTSD-xmmreg.xmmrm (make-instance 'x64-CMPNLTSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 05]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPORDPD-xmmreg.xmmrm (make-instance 'x64-CMPORDPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 07]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPORDSD-xmmreg.xmmrm (make-instance 'x64-CMPORDSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 07]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPUNORDPD-xmmreg.xmmrm (make-instance 'x64-CMPUNORDPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 03]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPUNORDSD-xmmreg.xmmrm (make-instance 'x64-CMPUNORDSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 03]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-CMPPD-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f c2 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPSD-xmmreg.xmmrm128.imm8 (make-instance 'x64-CMPSD-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: f2 0f c2 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter COMISD-xmmreg.xmmrm (make-instance 'x64-COMISD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 2f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CVTDQ2PD-xmmreg.xmmrm (make-instance 'x64-CVTDQ2PD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTDQ2PS-xmmreg.xmmrm (make-instance 'x64-CVTDQ2PS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: np 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2DQ-xmmreg.xmmrm (make-instance 'x64-CVTPD2DQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2PI-mmxreg.xmmrm (make-instance 'x64-CVTPD2PI-instruction
:operands "mmxreg,xmmrm"
:code-string "[rm: 66 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2PS-xmmreg.xmmrm (make-instance 'x64-CVTPD2PS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPI2PD-xmmreg.mmxrm (make-instance 'x64-CVTPI2PD-instruction
:operands "xmmreg,mmxrm"
:code-string "[rm: 66 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTPS2DQ-xmmreg.xmmrm (make-instance 'x64-CVTPS2DQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPS2PD-xmmreg.xmmrm (make-instance 'x64-CVTPS2PD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: np 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTSD2SI-reg32.xmmreg (make-instance 'x64-CVTSD2SI-instruction
:operands "reg32,xmmreg"
:code-string "[rm: norexw f2 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg32.mem (make-instance 'x64-CVTSD2SI-instruction
:operands "reg32,mem"
:code-string "[rm: norexw f2 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg64.xmmreg (make-instance 'x64-CVTSD2SI-instruction
:operands "reg64,xmmreg"
:code-string "[rm: o64 f2 0f 2d /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg64.mem (make-instance 'x64-CVTSD2SI-instruction
:operands "reg64,mem"
:code-string "[rm: o64 f2 0f 2d /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SS-xmmreg.xmmrm (make-instance 'x64-CVTSD2SS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTSI2SD-xmmreg.mem (make-instance 'x64-CVTSI2SD-instruction
:operands "xmmreg,mem"
:code-string "[rm: f2 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1" "ND")))

(defparameter CVTSI2SD-xmmreg.rm32 (make-instance 'x64-CVTSI2SD-instruction
:operands "xmmreg,rm32"
:code-string "[rm: norexw f2 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1")))

(defparameter CVTSI2SD-xmmreg.rm64 (make-instance 'x64-CVTSI2SD-instruction
:operands "xmmreg,rm64"
:code-string "[rm: o64 f2 0f 2a /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSS2SD-xmmreg.xmmrm (make-instance 'x64-CVTSS2SD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter CVTTPD2PI-mmxreg.xmmrm (make-instance 'x64-CVTTPD2PI-instruction
:operands "mmxreg,xmmrm"
:code-string "[rm: 66 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTPD2DQ-xmmreg.xmmrm (make-instance 'x64-CVTTPD2DQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTPS2DQ-xmmreg.xmmrm (make-instance 'x64-CVTTPS2DQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTSD2SI-reg32.xmmreg (make-instance 'x64-CVTTSD2SI-instruction
:operands "reg32,xmmreg"
:code-string "[rm: norexw f2 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg32.mem (make-instance 'x64-CVTTSD2SI-instruction
:operands "reg32,mem"
:code-string "[rm: norexw f2 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg64.xmmreg (make-instance 'x64-CVTTSD2SI-instruction
:operands "reg64,xmmreg"
:code-string "[rm: o64 f2 0f 2c /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg64.mem (make-instance 'x64-CVTTSD2SI-instruction
:operands "reg64,mem"
:code-string "[rm: o64 f2 0f 2c /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter DIVPD-xmmreg.xmmrm (make-instance 'x64-DIVPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter DIVSD-xmmreg.xmmrm (make-instance 'x64-DIVSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MAXPD-xmmreg.xmmrm (make-instance 'x64-MAXPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MAXSD-xmmreg.xmmrm (make-instance 'x64-MAXSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MINPD-xmmreg.xmmrm (make-instance 'x64-MINPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MINSD-xmmreg.xmmrm (make-instance 'x64-MINSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5d /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-xmmreg.xmmreg (make-instance 'x64-MOVAPD-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 28 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-xmmreg.xmmreg (make-instance 'x64-MOVAPD-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 29 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-mem.xmmreg (make-instance 'x64-MOVAPD-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 29 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVAPD-xmmreg.mem (make-instance 'x64-MOVAPD-instruction
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 28 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVHPD-mem.xmmreg (make-instance 'x64-MOVHPD-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 17 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVHPD-xmmreg.mem (make-instance 'x64-MOVHPD-instruction
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 16 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVLPD-mem64.xmmreg (make-instance 'x64-MOVLPD-instruction
:operands "mem64,xmmreg"
:code-string "[mr: 66 0f 13 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVLPD-xmmreg.mem64 (make-instance 'x64-MOVLPD-instruction
:operands "xmmreg,mem64"
:code-string "[rm: 66 0f 12 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVMSKPD-reg32.xmmreg (make-instance 'x64-MOVMSKPD-instruction
:operands "reg32,xmmreg"
:code-string "[rm: 66 0f 50 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVMSKPD-reg64.xmmreg (make-instance 'x64-MOVMSKPD-instruction
:operands "reg64,xmmreg"
:code-string "[rm: 66 o64 0f 50 /r]"
:arch-flags (list "X64" "SSE2")))

(defparameter MOVSD-xmmreg.xmmreg (make-instance 'x64-MOVSD-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: f2 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-xmmreg.xmmreg (make-instance 'x64-MOVSD-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: f2 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-mem64.xmmreg (make-instance 'x64-MOVSD-instruction
:operands "mem64,xmmreg"
:code-string "[mr: f2 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-xmmreg.mem64 (make-instance 'x64-MOVSD-instruction
:operands "xmmreg,mem64"
:code-string "[rm: f2 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-xmmreg.xmmreg (make-instance 'x64-MOVUPD-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-xmmreg.xmmreg (make-instance 'x64-MOVUPD-instruction
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-mem.xmmreg (make-instance 'x64-MOVUPD-instruction
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVUPD-xmmreg.mem (make-instance 'x64-MOVUPD-instruction
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MULPD-xmmreg.xmmrm (make-instance 'x64-MULPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 59 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MULSD-xmmreg.xmmrm (make-instance 'x64-MULSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 59 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter ORPD-xmmreg.xmmrm (make-instance 'x64-ORPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 56 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SHUFPD-xmmreg.xmmreg.imm (make-instance 'x64-SHUFPD-instruction
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: 66 0f c6 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter SHUFPD-xmmreg.mem.imm (make-instance 'x64-SHUFPD-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f c6 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM" "SB" "AR2")))

(defparameter SQRTPD-xmmreg.xmmrm (make-instance 'x64-SQRTPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 51 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SQRTSD-xmmreg.xmmrm (make-instance 'x64-SQRTSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 51 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter SUBPD-xmmreg.xmmrm (make-instance 'x64-SUBPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SUBSD-xmmreg.xmmrm (make-instance 'x64-SUBSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5c /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UCOMISD-xmmreg.xmmrm (make-instance 'x64-UCOMISD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 2e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UNPCKHPD-xmmreg.xmmrm128 (make-instance 'x64-UNPCKHPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 15 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UNPCKLPD-xmmreg.xmmrm128 (make-instance 'x64-UNPCKLPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 14 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter XORPD-xmmreg.xmmrm128 (make-instance 'x64-XORPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 57 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter ADDSUBPD-xmmreg.xmmrm (make-instance 'x64-ADDSUBPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter ADDSUBPS-xmmreg.xmmrm (make-instance 'x64-ADDSUBPS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f d0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HADDPD-xmmreg.xmmrm (make-instance 'x64-HADDPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 7c /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HADDPS-xmmreg.xmmrm (make-instance 'x64-HADDPS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 7c /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HSUBPD-xmmreg.xmmrm (make-instance 'x64-HSUBPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 7d /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HSUBPS-xmmreg.xmmrm (make-instance 'x64-HSUBPS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 7d /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter LDDQU-xmmreg.mem (make-instance 'x64-LDDQU-instruction
:operands "xmmreg,mem"
:code-string "[rm: f2 0f f0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter MOVDDUP-xmmreg.xmmrm (make-instance 'x64-MOVDDUP-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 12 /r]"
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter MOVSHDUP-xmmreg.xmmrm (make-instance 'x64-MOVSHDUP-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 16 /r]"
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter MOVSLDUP-xmmreg.xmmrm (make-instance 'x64-MOVSLDUP-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 12 /r]"
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter CLGI-void (make-instance 'x64-CLGI-instruction
:operands "void"
:code-string "[ 0f 01 dd]"
:arch-flags (list "VMX" "AMD")))

(defparameter STGI-void (make-instance 'x64-STGI-instruction
:operands "void"
:code-string "[ 0f 01 dc]"
:arch-flags (list "VMX" "AMD")))

(defparameter VMCALL-void (make-instance 'x64-VMCALL-instruction
:operands "void"
:code-string "[ 0f 01 c1]"
:arch-flags (list "VMX")))

(defparameter VMCLEAR-mem (make-instance 'x64-VMCLEAR-instruction
:operands "mem"
:code-string "[m: 66 0f c7 /6]"
:arch-flags (list "VMX")))

(defparameter VMFUNC-void (make-instance 'x64-VMFUNC-instruction
:operands "void"
:code-string "[ 0f 01 d4]"
:arch-flags (list "VMX")))

(defparameter VMLAUNCH-void (make-instance 'x64-VMLAUNCH-instruction
:operands "void"
:code-string "[ 0f 01 c2]"
:arch-flags (list "VMX")))

(defparameter VMLOAD-void (make-instance 'x64-VMLOAD-instruction
:operands "void"
:code-string "[ 0f 01 da]"
:arch-flags (list "VMX" "AMD")))

(defparameter VMMCALL-void (make-instance 'x64-VMMCALL-instruction
:operands "void"
:code-string "[ 0f 01 d9]"
:arch-flags (list "VMX" "AMD")))

(defparameter VMPTRLD-mem (make-instance 'x64-VMPTRLD-instruction
:operands "mem"
:code-string "[m: np 0f c7 /6]"
:arch-flags (list "VMX")))

(defparameter VMPTRST-mem (make-instance 'x64-VMPTRST-instruction
:operands "mem"
:code-string "[m: np 0f c7 /7]"
:arch-flags (list "VMX")))

(defparameter VMREAD-rm64.reg64 (make-instance 'x64-VMREAD-instruction
:operands "rm64,reg64"
:code-string "[mr: o64nw np 0f 78 /r]"
:arch-flags (list "X64" "VMX" "SQ")))

(defparameter VMRESUME-void (make-instance 'x64-VMRESUME-instruction
:operands "void"
:code-string "[ 0f 01 c3]"
:arch-flags (list "VMX")))

(defparameter VMRUN-void (make-instance 'x64-VMRUN-instruction
:operands "void"
:code-string "[ 0f 01 d8]"
:arch-flags (list "VMX" "AMD")))

(defparameter VMSAVE-void (make-instance 'x64-VMSAVE-instruction
:operands "void"
:code-string "[ 0f 01 db]"
:arch-flags (list "VMX" "AMD")))

(defparameter VMWRITE-reg64.rm64 (make-instance 'x64-VMWRITE-instruction
:operands "reg64,rm64"
:code-string "[rm: o64nw np 0f 79 /r]"
:arch-flags (list "X64" "VMX" "SQ")))

(defparameter VMXOFF-void (make-instance 'x64-VMXOFF-instruction
:operands "void"
:code-string "[ 0f 01 c4]"
:arch-flags (list "VMX")))

(defparameter VMXON-mem (make-instance 'x64-VMXON-instruction
:operands "mem"
:code-string "[m: f3 0f c7 /6]"
:arch-flags (list "VMX")))

(defparameter INVEPT-reg64.mem (make-instance 'x64-INVEPT-instruction
:operands "reg64,mem"
:code-string "[rm: o64nw 66 0f 38 80 /r]"
:arch-flags (list "VMX" "SO" "LONG")))

(defparameter INVVPID-reg64.mem (make-instance 'x64-INVVPID-instruction
:operands "reg64,mem"
:code-string "[rm: o64nw 66 0f 38 81 /r]"
:arch-flags (list "VMX" "SO" "LONG")))

(defparameter PABSB-mmxreg.mmxrm (make-instance 'x64-PABSB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1c /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSB-xmmreg.xmmrm (make-instance 'x64-PABSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1c /r]"
:arch-flags (list "SSSE3")))

(defparameter PABSW-mmxreg.mmxrm (make-instance 'x64-PABSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1d /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSW-xmmreg.xmmrm (make-instance 'x64-PABSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1d /r]"
:arch-flags (list "SSSE3")))

(defparameter PABSD-mmxreg.mmxrm (make-instance 'x64-PABSD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1e /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSD-xmmreg.xmmrm (make-instance 'x64-PABSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1e /r]"
:arch-flags (list "SSSE3")))

(defparameter PALIGNR-mmxreg.mmxrm.imm (make-instance 'x64-PALIGNR-instruction
:operands "mmxreg,mmxrm,imm"
:code-string "[rmi: np 0f 3a 0f /r ib,u]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PALIGNR-xmmreg.xmmrm.imm (make-instance 'x64-PALIGNR-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0f /r ib,u]"
:arch-flags (list "SSSE3")))

(defparameter PHADDW-mmxreg.mmxrm (make-instance 'x64-PHADDW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 01 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDW-xmmreg.xmmrm (make-instance 'x64-PHADDW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 01 /r]"
:arch-flags (list "SSSE3")))

(defparameter PHADDD-mmxreg.mmxrm (make-instance 'x64-PHADDD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 02 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDD-xmmreg.xmmrm (make-instance 'x64-PHADDD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 02 /r]"
:arch-flags (list "SSSE3")))

(defparameter PHADDSW-mmxreg.mmxrm (make-instance 'x64-PHADDSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 03 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDSW-xmmreg.xmmrm (make-instance 'x64-PHADDSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 03 /r]"
:arch-flags (list "SSSE3")))

(defparameter PHSUBW-mmxreg.mmxrm (make-instance 'x64-PHSUBW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 05 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBW-xmmreg.xmmrm (make-instance 'x64-PHSUBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 05 /r]"
:arch-flags (list "SSSE3")))

(defparameter PHSUBD-mmxreg.mmxrm (make-instance 'x64-PHSUBD-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 06 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBD-xmmreg.xmmrm (make-instance 'x64-PHSUBD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 06 /r]"
:arch-flags (list "SSSE3")))

(defparameter PHSUBSW-mmxreg.mmxrm (make-instance 'x64-PHSUBSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 07 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBSW-xmmreg.xmmrm (make-instance 'x64-PHSUBSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 07 /r]"
:arch-flags (list "SSSE3")))

(defparameter PMADDUBSW-mmxreg.mmxrm (make-instance 'x64-PMADDUBSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 04 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PMADDUBSW-xmmreg.xmmrm (make-instance 'x64-PMADDUBSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 04 /r]"
:arch-flags (list "SSSE3")))

(defparameter PMULHRSW-mmxreg.mmxrm (make-instance 'x64-PMULHRSW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 0b /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PMULHRSW-xmmreg.xmmrm (make-instance 'x64-PMULHRSW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 0b /r]"
:arch-flags (list "SSSE3")))

(defparameter PSHUFB-mmxreg.mmxrm (make-instance 'x64-PSHUFB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 00 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSHUFB-xmmreg.xmmrm (make-instance 'x64-PSHUFB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 00 /r]"
:arch-flags (list "SSSE3")))

(defparameter PSIGNB-mmxreg.mmxrm (make-instance 'x64-PSIGNB-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 08 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGNB-xmmreg.xmmrm (make-instance 'x64-PSIGNB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 08 /r]"
:arch-flags (list "SSSE3")))

(defparameter PSIGNW-mmxreg.mmxrm (make-instance 'x64-PSIGNW-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 09 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGNW-xmmreg.xmmrm (make-instance 'x64-PSIGNW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 09 /r]"
:arch-flags (list "SSSE3")))

(defparameter PSIGND-mmxreg.mmxrm (make-instance 'x64-PSIGND-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 0a /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGND-xmmreg.xmmrm (make-instance 'x64-PSIGND-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 0a /r]"
:arch-flags (list "SSSE3")))

(defparameter EXTRQ-xmmreg.imm.imm (make-instance 'x64-EXTRQ-instruction
:operands "xmmreg,imm,imm"
:code-string "[mij: 66 0f 78 /0 ib,u ib,u]"
:arch-flags (list "SSE4A" "AMD")))

(defparameter EXTRQ-xmmreg.xmmreg (make-instance 'x64-EXTRQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 79 /r]"
:arch-flags (list "SSE4A" "AMD")))

(defparameter INSERTQ-xmmreg.xmmreg.imm.imm (make-instance 'x64-INSERTQ-instruction
:operands "xmmreg,xmmreg,imm,imm"
:code-string "[rmij: f2 0f 78 /r ib,u ib,u]"
:arch-flags (list "SSE4A" "AMD")))

(defparameter INSERTQ-xmmreg.xmmreg (make-instance 'x64-INSERTQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: f2 0f 79 /r]"
:arch-flags (list "SSE4A" "AMD")))

(defparameter MOVNTSD-mem.xmmreg (make-instance 'x64-MOVNTSD-instruction
:operands "mem,xmmreg"
:code-string "[mr: f2 0f 2b /r]"
:arch-flags (list "SSE4A" "AMD" "SQ")))

(defparameter MOVNTSS-mem.xmmreg (make-instance 'x64-MOVNTSS-instruction
:operands "mem,xmmreg"
:code-string "[mr: f3 0f 2b /r]"
:arch-flags (list "SSE4A" "AMD" "SD")))

(defparameter LZCNT-reg16.rm16 (make-instance 'x64-LZCNT-instruction
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f bd /r]"
:arch-flags (list "P6" "AMD")))

(defparameter LZCNT-reg32.rm32 (make-instance 'x64-LZCNT-instruction
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f bd /r]"
:arch-flags (list "P6" "AMD")))

(defparameter LZCNT-reg64.rm64 (make-instance 'x64-LZCNT-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f bd /r]"
:arch-flags (list "X64" "AMD")))

(defparameter BLENDPD-xmmreg.xmmrm.imm (make-instance 'x64-BLENDPD-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0d /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter BLENDPS-xmmreg.xmmrm.imm (make-instance 'x64-BLENDPS-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0c /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter BLENDVPD-xmmreg.xmmrm.xmm0 (make-instance 'x64-BLENDVPD-instruction
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 15 /r]"
:arch-flags (list "SSE41")))

(defparameter BLENDVPD-xmmreg.xmmrm (make-instance 'x64-BLENDVPD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 15 /r]"
:arch-flags (list "SSE41")))

(defparameter BLENDVPS-xmmreg.xmmrm.xmm0 (make-instance 'x64-BLENDVPS-instruction
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 14 /r]"
:arch-flags (list "SSE41")))

(defparameter BLENDVPS-xmmreg.xmmrm (make-instance 'x64-BLENDVPS-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 14 /r]"
:arch-flags (list "SSE41")))

(defparameter DPPD-xmmreg.xmmrm.imm (make-instance 'x64-DPPD-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 41 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter DPPS-xmmreg.xmmrm.imm (make-instance 'x64-DPPS-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 40 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter EXTRACTPS-rm32.xmmreg.imm (make-instance 'x64-EXTRACTPS-instruction
:operands "rm32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 17 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter EXTRACTPS-reg64.xmmreg.imm (make-instance 'x64-EXTRACTPS-instruction
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 17 /r ib,u]"
:arch-flags (list "SSE41" "X64")))

(defparameter INSERTPS-xmmreg.xmmrm.imm (make-instance 'x64-INSERTPS-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 21 /r ib,u]"
:arch-flags (list "SSE41" "SD")))

(defparameter MOVNTDQA-xmmreg.mem128 (make-instance 'x64-MOVNTDQA-instruction
:operands "xmmreg,mem128"
:code-string "[rm: 66 0f 38 2a /r]"
:arch-flags (list "SSE41")))

(defparameter MPSADBW-xmmreg.xmmrm.imm (make-instance 'x64-MPSADBW-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 42 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PACKUSDW-xmmreg.xmmrm (make-instance 'x64-PACKUSDW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 2b /r]"
:arch-flags (list "SSE41")))

(defparameter PBLENDVB-xmmreg.xmmrm.xmm0 (make-instance 'x64-PBLENDVB-instruction
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 10 /r]"
:arch-flags (list "SSE41")))

(defparameter PBLENDVB-xmmreg.xmmrm (make-instance 'x64-PBLENDVB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 10 /r]"
:arch-flags (list "SSE41")))

(defparameter PBLENDW-xmmreg.xmmrm.imm (make-instance 'x64-PBLENDW-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0e /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PCMPEQQ-xmmreg.xmmrm (make-instance 'x64-PCMPEQQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 29 /r]"
:arch-flags (list "SSE41")))

(defparameter PEXTRB-reg32.xmmreg.imm (make-instance 'x64-PEXTRB-instruction
:operands "reg32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PEXTRB-mem8.xmmreg.imm (make-instance 'x64-PEXTRB-instruction
:operands "mem8,xmmreg,imm"
:code-string "[mri: 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PEXTRB-reg64.xmmreg.imm (make-instance 'x64-PEXTRB-instruction
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41" "X64")))

(defparameter PEXTRD-rm32.xmmreg.imm (make-instance 'x64-PEXTRD-instruction
:operands "rm32,xmmreg,imm"
:code-string "[mri: norexw 66 0f 3a 16 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PEXTRQ-rm64.xmmreg.imm (make-instance 'x64-PEXTRQ-instruction
:operands "rm64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 16 /r ib,u]"
:arch-flags (list "SSE41" "X64")))

(defparameter PEXTRW-reg32.xmmreg.imm (make-instance 'x64-PEXTRW-instruction
:operands "reg32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PEXTRW-mem16.xmmreg.imm (make-instance 'x64-PEXTRW-instruction
:operands "mem16,xmmreg,imm"
:code-string "[mri: 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter PEXTRW-reg64.xmmreg.imm (make-instance 'x64-PEXTRW-instruction
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41" "X64")))

(defparameter PHMINPOSUW-xmmreg.xmmrm (make-instance 'x64-PHMINPOSUW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 41 /r]"
:arch-flags (list "SSE41")))

(defparameter PINSRB-xmmreg.mem.imm (make-instance 'x64-PINSRB-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRB-xmmreg.rm8.imm (make-instance 'x64-PINSRB-instruction
:operands "xmmreg,rm8,imm"
:code-string "[rmi: nohi 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRB-xmmreg.reg32.imm (make-instance 'x64-PINSRB-instruction
:operands "xmmreg,reg32,imm"
:code-string "[rmi: 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRD-xmmreg.mem.imm (make-instance 'x64-PINSRD-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: norexw 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRD-xmmreg.rm32.imm (make-instance 'x64-PINSRD-instruction
:operands "xmmreg,rm32,imm"
:code-string "[rmi: norexw 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRQ-xmmreg.mem.imm (make-instance 'x64-PINSRQ-instruction
:operands "xmmreg,mem,imm"
:code-string "[rmi: o64 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "X64" "SB" "AR2")))

(defparameter PINSRQ-xmmreg.rm64.imm (make-instance 'x64-PINSRQ-instruction
:operands "xmmreg,rm64,imm"
:code-string "[rmi: o64 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "X64" "SB" "AR2")))

(defparameter PMAXSB-xmmreg.xmmrm (make-instance 'x64-PMAXSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3c /r]"
:arch-flags (list "SSE41")))

(defparameter PMAXSD-xmmreg.xmmrm (make-instance 'x64-PMAXSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3d /r]"
:arch-flags (list "SSE41")))

(defparameter PMAXUD-xmmreg.xmmrm (make-instance 'x64-PMAXUD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3f /r]"
:arch-flags (list "SSE41")))

(defparameter PMAXUW-xmmreg.xmmrm (make-instance 'x64-PMAXUW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3e /r]"
:arch-flags (list "SSE41")))

(defparameter PMINSB-xmmreg.xmmrm (make-instance 'x64-PMINSB-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 38 /r]"
:arch-flags (list "SSE41")))

(defparameter PMINSD-xmmreg.xmmrm (make-instance 'x64-PMINSD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 39 /r]"
:arch-flags (list "SSE41")))

(defparameter PMINUD-xmmreg.xmmrm (make-instance 'x64-PMINUD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3b /r]"
:arch-flags (list "SSE41")))

(defparameter PMINUW-xmmreg.xmmrm (make-instance 'x64-PMINUW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3a /r]"
:arch-flags (list "SSE41")))

(defparameter PMOVSXBW-xmmreg.xmmrm (make-instance 'x64-PMOVSXBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 20 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVSXBD-xmmreg.xmmrm (make-instance 'x64-PMOVSXBD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 21 /r]"
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVSXBQ-xmmreg.xmmrm (make-instance 'x64-PMOVSXBQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 22 /r]"
:arch-flags (list "SSE41" "SW")))

(defparameter PMOVSXWD-xmmreg.xmmrm (make-instance 'x64-PMOVSXWD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 23 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVSXWQ-xmmreg.xmmrm (make-instance 'x64-PMOVSXWQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 24 /r]"
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVSXDQ-xmmreg.xmmrm (make-instance 'x64-PMOVSXDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 25 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXBW-xmmreg.xmmrm (make-instance 'x64-PMOVZXBW-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 30 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXBD-xmmreg.xmmrm (make-instance 'x64-PMOVZXBD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 31 /r]"
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVZXBQ-xmmreg.xmmrm (make-instance 'x64-PMOVZXBQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 32 /r]"
:arch-flags (list "SSE41" "SW")))

(defparameter PMOVZXWD-xmmreg.xmmrm (make-instance 'x64-PMOVZXWD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 33 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXWQ-xmmreg.xmmrm (make-instance 'x64-PMOVZXWQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 34 /r]"
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVZXDQ-xmmreg.xmmrm (make-instance 'x64-PMOVZXDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 35 /r]"
:arch-flags (list "SSE41" "SQ")))

(defparameter PMULDQ-xmmreg.xmmrm (make-instance 'x64-PMULDQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 28 /r]"
:arch-flags (list "SSE41")))

(defparameter PMULLD-xmmreg.xmmrm (make-instance 'x64-PMULLD-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 40 /r]"
:arch-flags (list "SSE41")))

(defparameter PTEST-xmmreg.xmmrm (make-instance 'x64-PTEST-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 17 /r]"
:arch-flags (list "SSE41")))

(defparameter ROUNDPD-xmmreg.xmmrm.imm (make-instance 'x64-ROUNDPD-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 09 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter ROUNDPS-xmmreg.xmmrm.imm (make-instance 'x64-ROUNDPS-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 08 /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter ROUNDSD-xmmreg.xmmrm.imm (make-instance 'x64-ROUNDSD-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0b /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter ROUNDSS-xmmreg.xmmrm.imm (make-instance 'x64-ROUNDSS-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0a /r ib,u]"
:arch-flags (list "SSE41")))

(defparameter CRC32-reg32.rm8 (make-instance 'x64-CRC32-instruction
:operands "reg32,rm8"
:code-string "[rm: f2i 0f 38 f0 /r]"
:arch-flags (list "SSE42")))

(defparameter CRC32-reg32.rm16 (make-instance 'x64-CRC32-instruction
:operands "reg32,rm16"
:code-string "[rm: o16 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42")))

(defparameter CRC32-reg32.rm32 (make-instance 'x64-CRC32-instruction
:operands "reg32,rm32"
:code-string "[rm: o32 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42")))

(defparameter CRC32-reg64.rm8 (make-instance 'x64-CRC32-instruction
:operands "reg64,rm8"
:code-string "[rm: o64 f2i 0f 38 f0 /r]"
:arch-flags (list "SSE42" "X64")))

(defparameter CRC32-reg64.rm64 (make-instance 'x64-CRC32-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42" "X64")))

(defparameter PCMPESTRI-xmmreg.xmmrm.imm (make-instance 'x64-PCMPESTRI-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 61 /r ib,u]"
:arch-flags (list "SSE42")))

(defparameter PCMPESTRM-xmmreg.xmmrm.imm (make-instance 'x64-PCMPESTRM-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 60 /r ib,u]"
:arch-flags (list "SSE42")))

(defparameter PCMPISTRI-xmmreg.xmmrm.imm (make-instance 'x64-PCMPISTRI-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 63 /r ib,u]"
:arch-flags (list "SSE42")))

(defparameter PCMPISTRM-xmmreg.xmmrm.imm (make-instance 'x64-PCMPISTRM-instruction
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 62 /r ib,u]"
:arch-flags (list "SSE42")))

(defparameter PCMPGTQ-xmmreg.xmmrm (make-instance 'x64-PCMPGTQ-instruction
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 37 /r]"
:arch-flags (list "SSE42")))

(defparameter POPCNT-reg16.rm16 (make-instance 'x64-POPCNT-instruction
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SW")))

(defparameter POPCNT-reg32.rm32 (make-instance 'x64-POPCNT-instruction
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SD")))

(defparameter POPCNT-reg64.rm64 (make-instance 'x64-POPCNT-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SQ" "X64")))

(defparameter GETSEC-void (make-instance 'x64-GETSEC-instruction
:operands "void"
:code-string "[ 0f 37]"
:arch-flags (list "KATMAI")))

(defparameter PFRCPV-mmxreg.mmxrm (make-instance 'x64-PFRCPV-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 86]"
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")))

(defparameter PFRSQRTV-mmxreg.mmxrm (make-instance 'x64-PFRSQRTV-instruction
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 87]"
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")))

(defparameter MOVBE-reg16.mem16 (make-instance 'x64-MOVBE-instruction
:operands "reg16,mem16"
:code-string "[rm: o16 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-reg32.mem32 (make-instance 'x64-MOVBE-instruction
:operands "reg32,mem32"
:code-string "[rm: o32 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-reg64.mem64 (make-instance 'x64-MOVBE-instruction
:operands "reg64,mem64"
:code-string "[rm: o64 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem16.reg16 (make-instance 'x64-MOVBE-instruction
:operands "mem16,reg16"
:code-string "[mr: o16 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem32.reg32 (make-instance 'x64-MOVBE-instruction
:operands "mem32,reg32"
:code-string "[mr: o32 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem64.reg64 (make-instance 'x64-MOVBE-instruction
:operands "mem64,reg64"
:code-string "[mr: o64 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")))

(defparameter AESENC-xmmreg.xmmrm128 (make-instance 'x64-AESENC-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 dc /r]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESENCLAST-xmmreg.xmmrm128 (make-instance 'x64-AESENCLAST-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 dd /r]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESDEC-xmmreg.xmmrm128 (make-instance 'x64-AESDEC-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 de /r]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESDECLAST-xmmreg.xmmrm128 (make-instance 'x64-AESDECLAST-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 df /r]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESIMC-xmmreg.xmmrm128 (make-instance 'x64-AESIMC-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 db /r]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x64-AESKEYGENASSIST-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f 3a df /r ib]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter VAESENC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VAESENC-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 dc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESENCLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VAESENCLAST-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 dd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESDEC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VAESDEC-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 de /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESDECLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VAESDECLAST-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 df /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESIMC-xmmreg.xmmrm128 (make-instance 'x64-VAESIMC-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 db /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x64-VAESKEYGENASSIST-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a df /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VADDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VADDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VADDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VADDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VADDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VADDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VADDSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VADDSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VADDSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VADDSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VANDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VANDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VANDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VANDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VANDNPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VANDNPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VANDNPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VANDNPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VBLENDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0d /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VBLENDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0d /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VBLENDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0c /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VBLENDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0c /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VBLENDVPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4b /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VBLENDVPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a.w0 4b /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VBLENDVPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4a /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VBLENDVPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a.w0 4a /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSS-xmmreg.mem32 (make-instance 'x64-VBROADCASTSS-instruction
:operands "xmmreg,mem32"
:code-string "[rm: vex.128.66.0f38.w0 18 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSS-ymmreg.mem32 (make-instance 'x64-VBROADCASTSS-instruction
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38.w0 18 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSD-ymmreg.mem64 (make-instance 'x64-VBROADCASTSD-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38.w0 19 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTF128-ymmreg.mem128 (make-instance 'x64-VBROADCASTF128-instruction
:operands "ymmreg,mem128"
:code-string "[rm: vex.256.66.0f38.w0 1a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLT_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLT_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLTPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLTPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLE_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLE_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORD_QPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORD_QPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLT_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLT_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLTPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLTPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLE_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLE_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORD_QPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORD_QPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGE_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGE_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGT_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGT_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGTPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGTPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSE_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSE_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGE_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGE_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGT_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGT_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGTPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGTPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUE_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUE_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUEPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUEPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLT_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLT_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLE_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLE_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORD_SPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORD_SPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLT_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLT_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLE_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLE_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORD_SPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORD_SPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGE_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGE_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGT_UQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGT_UQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSE_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSE_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_OSPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_OSPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGE_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGE_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGT_OQPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGT_OQPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUE_USPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUE_USPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VCMPPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VCMPPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLT_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLT_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLTPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLTPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLE_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLE_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORD_QPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORD_QPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLT_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLT_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLTPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLTPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLE_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLE_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORD_QPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORD_QPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGE_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGE_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGT_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGT_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGTPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGTPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSE_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSE_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGE_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGE_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGT_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGT_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGTPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGTPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUE_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUE_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUEPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUEPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLT_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLT_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPLE_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPLE_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPUNORD_SPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPUNORD_SPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLT_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLT_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNLE_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNLE_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPORD_SPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPORD_SPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPEQ_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPEQ_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGE_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGE_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNGT_UQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNGT_UQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPFALSE_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPFALSE_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPNEQ_OSPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPNEQ_OSPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGE_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGE_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPGT_OQPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPGT_OQPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VCMPTRUE_USPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VCMPTRUE_USPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VCMPPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VCMPPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLT_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLTSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLE_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORD_QSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLT_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLTSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLE_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORD_QSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGE_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGT_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGTSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSE_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGE_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGT_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGTSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUE_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUESD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLT_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLE_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORD_SSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLT_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLE_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORD_SSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGE_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGT_UQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSE_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_OSSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGE_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGT_OQSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUE_USSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-VCMPSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.lig.f2.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLT_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLE_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORD_QSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLT_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLE_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORD_QSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGE_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGT_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSE_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGE_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGT_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUE_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUESS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLT_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPLE_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPUNORD_SSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLT_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNLE_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPORD_SSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPEQ_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGE_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNGT_UQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPFALSE_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPNEQ_OSSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGE_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPGT_OQSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCMPTRUE_USSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-VCMPSS-instruction
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.lig.f3.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCOMISD-xmmreg.xmmrm64 (make-instance 'x64-VCOMISD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.lig.66.0f 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCOMISS-xmmreg.xmmrm32 (make-instance 'x64-VCOMISS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.lig.0f 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PD-xmmreg.xmmrm64 (make-instance 'x64-VCVTDQ2PD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f3.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PD-ymmreg.xmmrm128 (make-instance 'x64-VCVTDQ2PD-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.f3.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PS-xmmreg.xmmrm128 (make-instance 'x64-VCVTDQ2PS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PS-ymmreg.ymmrm256 (make-instance 'x64-VCVTDQ2PS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.xmmreg (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.mem128 (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTPD2DQ-xmmreg.ymmreg (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.mem256 (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTPD2PS-xmmreg.xmmreg (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2PS-xmmreg.mem128 (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTPD2PS-xmmreg.ymmreg (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2PS-xmmreg.mem256 (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTPS2DQ-xmmreg.xmmrm128 (make-instance 'x64-VCVTPS2DQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2DQ-ymmreg.ymmrm256 (make-instance 'x64-VCVTPS2DQ-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2PD-xmmreg.xmmrm64 (make-instance 'x64-VCVTPS2PD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2PD-ymmreg.xmmrm128 (make-instance 'x64-VCVTPS2PD-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSD2SI-reg32.xmmrm64 (make-instance 'x64-VCVTSD2SI-instruction
:operands "reg32,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSD2SI-reg64.xmmrm64 (make-instance 'x64-VCVTSD2SI-instruction
:operands "reg64,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w1 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTSD2SS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VCVTSD2SS-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.rm32 (make-instance 'x64-VCVTSI2SD-instruction
:operands "xmmreg,xmmreg*,rm32"
:code-string "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.mem32 (make-instance 'x64-VCVTSI2SD-instruction
:operands "xmmreg,xmmreg*,mem32"
:code-string "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.rm64 (make-instance 'x64-VCVTSI2SD-instruction
:operands "xmmreg,xmmreg*,rm64"
:code-string "[rvm: vex.nds.lig.f2.0f.w1 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.rm32 (make-instance 'x64-VCVTSI2SS-instruction
:operands "xmmreg,xmmreg*,rm32"
:code-string "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.mem32 (make-instance 'x64-VCVTSI2SS-instruction
:operands "xmmreg,xmmreg*,mem32"
:code-string "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.rm64 (make-instance 'x64-VCVTSI2SS-instruction
:operands "xmmreg,xmmreg*,rm64"
:code-string "[rvm: vex.nds.lig.f3.0f.w1 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VCVTSS2SD-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VCVTSS2SD-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSS2SI-reg32.xmmrm32 (make-instance 'x64-VCVTSS2SI-instruction
:operands "reg32,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSS2SI-reg64.xmmrm32 (make-instance 'x64-VCVTSS2SI-instruction
:operands "reg64,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w1 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTTPD2DQ-xmmreg.xmmreg (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPD2DQ-xmmreg.mem128 (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTTPD2DQ-xmmreg.ymmreg (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPD2DQ-xmmreg.mem256 (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTTPS2DQ-xmmreg.xmmrm128 (make-instance 'x64-VCVTTPS2DQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPS2DQ-ymmreg.ymmrm256 (make-instance 'x64-VCVTTPS2DQ-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSD2SI-reg32.xmmrm64 (make-instance 'x64-VCVTTSD2SI-instruction
:operands "reg32,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSD2SI-reg64.xmmrm64 (make-instance 'x64-VCVTTSD2SI-instruction
:operands "reg64,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w1 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTTSS2SI-reg32.xmmrm32 (make-instance 'x64-VCVTTSS2SI-instruction
:operands "reg32,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSS2SI-reg64.xmmrm32 (make-instance 'x64-VCVTTSS2SI-instruction
:operands "reg64,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w1 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VDIVPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VDIVPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VDIVPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VDIVPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VDIVPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VDIVSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VDIVSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VDPPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 41 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VDPPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 40 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VDPPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 40 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VEXTRACTF128-xmmrm128.ymmreg.imm8 (make-instance 'x64-VEXTRACTF128-instruction
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 19 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VEXTRACTPS-rm32.xmmreg.imm8 (make-instance 'x64-VEXTRACTPS-instruction
:operands "rm32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a 17 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VHADDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VHADDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VHADDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VHADDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VHSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VHSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VHSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VHSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTF128-instruction
:operands "ymmreg,ymmreg,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 18 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x64-VINSERTPS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 21 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDDQU-xmmreg.mem128 (make-instance 'x64-VLDDQU-instruction
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDQQU-ymmreg.mem256 (make-instance 'x64-VLDQQU-instruction
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDDQU-ymmreg.mem256 (make-instance 'x64-VLDDQU-instruction
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDMXCSR-mem32 (make-instance 'x64-VLDMXCSR-instruction
:operands "mem32"
:code-string "[m: vex.lz.0f ae /2]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVDQU-xmmreg.xmmreg (make-instance 'x64-VMASKMOVDQU-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f f7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-xmmreg.xmmreg.mem128 (make-instance 'x64-VMASKMOVPS-instruction
:operands "xmmreg,xmmreg,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-ymmreg.ymmreg.mem256 (make-instance 'x64-VMASKMOVPS-instruction
:operands "ymmreg,ymmreg,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-mem128.xmmreg.xmmreg (make-instance 'x64-VMASKMOVPS-instruction
:operands "mem128,xmmreg,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VMASKMOVPS-mem256.ymmreg.ymmreg (make-instance 'x64-VMASKMOVPS-instruction
:operands "mem256,ymmreg,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VMASKMOVPD-xmmreg.xmmreg.mem128 (make-instance 'x64-VMASKMOVPD-instruction
:operands "xmmreg,xmmreg,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-ymmreg.ymmreg.mem256 (make-instance 'x64-VMASKMOVPD-instruction
:operands "ymmreg,ymmreg,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-mem128.xmmreg.xmmreg (make-instance 'x64-VMASKMOVPD-instruction
:operands "mem128,xmmreg,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-mem256.ymmreg.ymmreg (make-instance 'x64-VMASKMOVPD-instruction
:operands "mem256,ymmreg,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMAXPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMAXPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMAXPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMAXPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VMAXSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VMAXSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMINPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMINPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMINPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMINPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VMINSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VMINSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-xmmreg.xmmrm128 (make-instance 'x64-VMOVAPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-xmmrm128.xmmreg (make-instance 'x64-VMOVAPD-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-ymmreg.ymmrm256 (make-instance 'x64-VMOVAPD-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-ymmrm256.ymmreg (make-instance 'x64-VMOVAPD-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-xmmreg.xmmrm128 (make-instance 'x64-VMOVAPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-xmmrm128.xmmreg (make-instance 'x64-VMOVAPS-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-ymmreg.ymmrm256 (make-instance 'x64-VMOVAPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-ymmrm256.ymmreg (make-instance 'x64-VMOVAPS-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVD-xmmreg.rm32 (make-instance 'x64-VMOVD-instruction
:operands "xmmreg,rm32"
:code-string "[rm: vex.128.66.0f.w0 6e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVD-rm32.xmmreg (make-instance 'x64-VMOVD-instruction
:operands "rm32,xmmreg"
:code-string "[mr: vex.128.66.0f.w0 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQ-xmmreg.xmmrm64 (make-instance 'x64-VMOVQ-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f3.0f 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")))

(defparameter VMOVQ-xmmrm64.xmmreg (make-instance 'x64-VMOVQ-instruction
:operands "xmmrm64,xmmreg"
:code-string "[mr: vex.128.66.0f d6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")))

(defparameter VMOVQ-xmmreg.rm64 (make-instance 'x64-VMOVQ-instruction
:operands "xmmreg,rm64"
:code-string "[rm: vex.128.66.0f.w1 6e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VMOVQ-rm64.xmmreg (make-instance 'x64-VMOVQ-instruction
:operands "rm64,xmmreg"
:code-string "[mr: vex.128.66.0f.w1 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VMOVDDUP-xmmreg.xmmrm64 (make-instance 'x64-VMOVDDUP-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f2.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDDUP-ymmreg.ymmrm256 (make-instance 'x64-VMOVDDUP-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f2.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-xmmreg.xmmrm128 (make-instance 'x64-VMOVDQA-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-xmmrm128.xmmreg (make-instance 'x64-VMOVDQA-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQA-ymmreg.ymmrm256 (make-instance 'x64-VMOVQQA-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQA-ymmrm256.ymmreg (make-instance 'x64-VMOVQQA-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-ymmreg.ymmrm (make-instance 'x64-VMOVDQA-instruction
:operands "ymmreg,ymmrm"
:code-string "[rm: vex.256.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-ymmrm256.ymmreg (make-instance 'x64-VMOVDQA-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-xmmreg.xmmrm128 (make-instance 'x64-VMOVDQU-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-xmmrm128.xmmreg (make-instance 'x64-VMOVDQU-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQU-ymmreg.ymmrm256 (make-instance 'x64-VMOVQQU-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQU-ymmrm256.ymmreg (make-instance 'x64-VMOVQQU-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-ymmreg.ymmrm256 (make-instance 'x64-VMOVDQU-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-ymmrm256.ymmreg (make-instance 'x64-VMOVDQU-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHLPS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVHLPS-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.128.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPD-xmmreg.xmmreg*.mem64 (make-instance 'x64-VMOVHPD-instruction
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.66.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPD-mem64.xmmreg (make-instance 'x64-VMOVHPD-instruction
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.66.0f 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPS-xmmreg.xmmreg*.mem64 (make-instance 'x64-VMOVHPS-instruction
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPS-mem64.xmmreg (make-instance 'x64-VMOVHPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.0f 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLHPS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVLHPS-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.128.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPD-xmmreg.xmmreg*.mem64 (make-instance 'x64-VMOVLPD-instruction
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.66.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPD-mem64.xmmreg (make-instance 'x64-VMOVLPD-instruction
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.66.0f 13 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPS-xmmreg.xmmreg*.mem64 (make-instance 'x64-VMOVLPS-instruction
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPS-mem64.xmmreg (make-instance 'x64-VMOVLPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.0f 13 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPD-reg64.xmmreg (make-instance 'x64-VMOVMSKPD-instruction
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPD-reg32.xmmreg (make-instance 'x64-VMOVMSKPD-instruction
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPD-reg64.ymmreg (make-instance 'x64-VMOVMSKPD-instruction
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPD-reg32.ymmreg (make-instance 'x64-VMOVMSKPD-instruction
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPS-reg64.xmmreg (make-instance 'x64-VMOVMSKPS-instruction
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPS-reg32.xmmreg (make-instance 'x64-VMOVMSKPS-instruction
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPS-reg64.ymmreg (make-instance 'x64-VMOVMSKPS-instruction
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPS-reg32.ymmreg (make-instance 'x64-VMOVMSKPS-instruction
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQ-mem128.xmmreg (make-instance 'x64-VMOVNTDQ-instruction
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTQQ-mem256.ymmreg (make-instance 'x64-VMOVNTQQ-instruction
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQ-mem256.ymmreg (make-instance 'x64-VMOVNTDQ-instruction
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQA-xmmreg.mem128 (make-instance 'x64-VMOVNTDQA-instruction
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f38 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPD-mem128.xmmreg (make-instance 'x64-VMOVNTPD-instruction
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.66.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPD-mem256.ymmreg (make-instance 'x64-VMOVNTPD-instruction
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPS-mem128.xmmreg (make-instance 'x64-VMOVNTPS-instruction
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPS-mem128.ymmreg (make-instance 'x64-VMOVNTPS-instruction
:operands "mem128,ymmreg"
:code-string "[mr: vex.256.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.lig.f2.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.mem64 (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg,mem64"
:code-string "[rm: vex.lig.f2.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.lig.f2.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-mem64.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "mem64,xmmreg"
:code-string "[mr: vex.lig.f2.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSHDUP-xmmreg.xmmrm128 (make-instance 'x64-VMOVSHDUP-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSHDUP-ymmreg.ymmrm256 (make-instance 'x64-VMOVSHDUP-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSLDUP-xmmreg.xmmrm128 (make-instance 'x64-VMOVSLDUP-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSLDUP-ymmreg.ymmrm256 (make-instance 'x64-VMOVSLDUP-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.lig.f3.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.mem32 (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg,mem32"
:code-string "[rm: vex.lig.f3.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.lig.f3.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-mem32.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "mem32,xmmreg"
:code-string "[mr: vex.lig.f3.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-xmmreg.xmmrm128 (make-instance 'x64-VMOVUPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-xmmrm128.xmmreg (make-instance 'x64-VMOVUPD-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-ymmreg.ymmrm256 (make-instance 'x64-VMOVUPD-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-ymmrm256.ymmreg (make-instance 'x64-VMOVUPD-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-xmmreg.xmmrm128 (make-instance 'x64-VMOVUPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-xmmrm128.xmmreg (make-instance 'x64-VMOVUPS-instruction
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-ymmreg.ymmrm256 (make-instance 'x64-VMOVUPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-ymmrm256.ymmreg (make-instance 'x64-VMOVUPS-instruction
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VMPSADBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 42 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMULPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMULPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VMULPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VMULPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VMULSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VMULSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VORPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VORPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VORPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VORPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSB-xmmreg.xmmrm128 (make-instance 'x64-VPABSB-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSW-xmmreg.xmmrm128 (make-instance 'x64-VPABSW-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSD-xmmreg.xmmrm128 (make-instance 'x64-VPABSD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKSSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPACKSSWB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 63 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKSSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPACKSSDW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKUSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPACKUSWB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 67 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKUSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPACKUSDW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fe /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ec /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ed /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDUSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f dc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPADDUSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f dd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPALIGNR-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0f /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPAND-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f db /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPANDN-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPANDN-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f df /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAVGB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPAVGB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAVGW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPAVGW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPBLENDVB-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4c /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPBLENDW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0e /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPESTRI-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPESTRI-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 61 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPESTRM-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPESTRM-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 60 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPISTRI-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPISTRI-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 63 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPISTRM-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPISTRM-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 62 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPEQB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 74 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPEQW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 75 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPEQD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 76 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPEQQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPGTB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 64 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPGTW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 65 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPGTD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 66 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCMPGTQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 37 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VPERMILPD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 0d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VPERMILPD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 0d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPERMILPD-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a.w0 05 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERMILPD-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w0 05 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VPERMILPS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 0c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VPERMILPS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 0c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPERMILPS-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a.w0 04 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERMILPS-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w0 04 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERM2F128-instruction
:operands "ymmreg,ymmreg,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 06 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "mem8,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[rmi: vex.128.66.0f.w0 c5 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[rmi: vex.128.66.0f.w0 c5 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "mem16,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRD-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRD-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x64-VPEXTRD-instruction
:operands "rm32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x64-VPEXTRQ-instruction
:operands "rm64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w1 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPHADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHADDW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 01 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHADDD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 02 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHADDSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 03 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHMINPOSUW-xmmreg.xmmrm128 (make-instance 'x64-VPHMINPOSUW-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 41 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHSUBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 05 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHSUBD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 06 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPHSUBSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 07 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.mem8.imm8 (make-instance 'x64-VPINSRB-instruction
:operands "xmmreg,xmmreg*,mem8,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.rm8.imm8 (make-instance 'x64-VPINSRB-instruction
:operands "xmmreg,xmmreg*,rm8,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x64-VPINSRB-instruction
:operands "xmmreg,xmmreg*,reg32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.mem16.imm8 (make-instance 'x64-VPINSRW-instruction
:operands "xmmreg,xmmreg*,mem16,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.rm16.imm8 (make-instance 'x64-VPINSRW-instruction
:operands "xmmreg,xmmreg*,rm16,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x64-VPINSRW-instruction
:operands "xmmreg,xmmreg*,reg32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRD-xmmreg.xmmreg*.mem32.imm8 (make-instance 'x64-VPINSRD-instruction
:operands "xmmreg,xmmreg*,mem32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRD-xmmreg.xmmreg*.rm32.imm8 (make-instance 'x64-VPINSRD-instruction
:operands "xmmreg,xmmreg*,rm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRQ-xmmreg.xmmreg*.mem64.imm8 (make-instance 'x64-VPINSRQ-instruction
:operands "xmmreg,xmmreg*,mem64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPINSRQ-xmmreg.xmmreg*.rm64.imm8 (make-instance 'x64-VPINSRQ-instruction
:operands "xmmreg,xmmreg*,rm64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPMADDWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMADDWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMADDUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMADDUBSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 04 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ee /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXSD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXUB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f de /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXUW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMAXUD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 38 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ea /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINSD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 39 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINUB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f da /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINUW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMINUD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVMSKB-reg64.xmmreg (make-instance 'x64-VPMOVMSKB-instruction
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.66.0f d7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPMOVMSKB-reg32.xmmreg (make-instance 'x64-VPMOVMSKB-instruction
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.66.0f d7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBW-xmmreg.xmmrm64 (make-instance 'x64-VPMOVSXBW-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 20 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBD-xmmreg.xmmrm32 (make-instance 'x64-VPMOVSXBD-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 21 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBQ-xmmreg.xmmrm16 (make-instance 'x64-VPMOVSXBQ-instruction
:operands "xmmreg,xmmrm16"
:code-string "[rm: vex.128.66.0f38 22 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXWD-xmmreg.xmmrm64 (make-instance 'x64-VPMOVSXWD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 23 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXWQ-xmmreg.xmmrm32 (make-instance 'x64-VPMOVSXWQ-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 24 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXDQ-xmmreg.xmmrm64 (make-instance 'x64-VPMOVSXDQ-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 25 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBW-xmmreg.xmmrm64 (make-instance 'x64-VPMOVZXBW-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 30 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBD-xmmreg.xmmrm32 (make-instance 'x64-VPMOVZXBD-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 31 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBQ-xmmreg.xmmrm16 (make-instance 'x64-VPMOVZXBQ-instruction
:operands "xmmreg,xmmrm16"
:code-string "[rm: vex.128.66.0f38 32 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXWD-xmmreg.xmmrm64 (make-instance 'x64-VPMOVZXWD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 33 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXWQ-xmmreg.xmmrm32 (make-instance 'x64-VPMOVZXWQ-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 34 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXDQ-xmmreg.xmmrm64 (make-instance 'x64-VPMOVZXDQ-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 35 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULHUW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHRSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULHRSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 0b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULHW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULLW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULLD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 40 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULUDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULUDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPMULDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPOR-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f eb /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSADBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSADBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHUFB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 00 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFD-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPSHUFD-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFHW-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPSHUFHW-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.f3.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFLW-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPSHUFLW-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.f2.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGNB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSIGNB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 08 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGNW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSIGNW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 09 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSIGND-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 0a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSLLDQ-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /7 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRLDQ-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /3 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSLLW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLW-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSLLW-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSLLD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLD-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSLLD-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSLLQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSLLQ-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRAW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAW-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRAW-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /4 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRAD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAD-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRAD-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /4 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRLW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLW-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRLW-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRLD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLD-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRLD-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRLQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-VPSRLQ-instruction
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPTEST-xmmreg.xmmrm128 (make-instance 'x64-VPTEST-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPTEST-ymmreg.ymmrm256 (make-instance 'x64-VPTEST-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fa /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fb /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBUSB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSUBUSW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKHBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 68 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKHWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 69 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKHDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKHQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKLBW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 60 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKLWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 61 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKLDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 62 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPUNPCKLQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPXOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPXOR-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ef /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPPS-xmmreg.xmmrm128 (make-instance 'x64-VRCPPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPPS-ymmreg.ymmrm256 (make-instance 'x64-VRCPPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VRCPSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-VRSQRTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTPS-ymmreg.ymmrm256 (make-instance 'x64-VRSQRTPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VRSQRTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-VROUNDPD-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 09 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-VROUNDPD-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a 09 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-VROUNDPS-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 08 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPS-ymmreg.ymmrm256.imm8 (make-instance 'x64-VROUNDPS-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a 08 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-VROUNDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0b /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x64-VROUNDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0a /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VSHUFPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VSHUFPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VSHUFPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VSHUFPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPD-xmmreg.xmmrm128 (make-instance 'x64-VSQRTPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPD-ymmreg.ymmrm256 (make-instance 'x64-VSQRTPD-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-VSQRTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPS-ymmreg.ymmrm256 (make-instance 'x64-VSQRTPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VSQRTSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VSQRTSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSTMXCSR-mem32 (make-instance 'x64-VSTMXCSR-instruction
:operands "mem32"
:code-string "[m: vex.128.0f ae /3]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-VSUBSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-VSUBSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPS-xmmreg.xmmrm128 (make-instance 'x64-VTESTPS-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38.w0 0e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPS-ymmreg.ymmrm256 (make-instance 'x64-VTESTPS-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38.w0 0e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPD-xmmreg.xmmrm128 (make-instance 'x64-VTESTPD-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38.w0 0f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPD-ymmreg.ymmrm256 (make-instance 'x64-VTESTPD-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38.w0 0f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUCOMISD-xmmreg.xmmrm64 (make-instance 'x64-VUCOMISD-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.lig.66.0f 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUCOMISS-xmmreg.xmmrm32 (make-instance 'x64-VUCOMISS-instruction
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.lig.0f 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VUNPCKHPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VUNPCKHPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VUNPCKHPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VUNPCKHPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VUNPCKLPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VUNPCKLPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VUNPCKLPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VUNPCKLPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VXORPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VXORPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VXORPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VXORPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VZEROALL-void (make-instance 'x64-VZEROALL-instruction
:operands "void"
:code-string "[ vex.256.0f.w0 77]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VZEROUPPER-void (make-instance 'x64-VZEROUPPER-instruction
:operands "void"
:code-string "[ vex.128.0f.w0 77]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter PCLMULLQLQDQ-xmmreg.xmmrm128 (make-instance 'x64-PCLMULLQLQDQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 00]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULHQLQDQ-xmmreg.xmmrm128 (make-instance 'x64-PCLMULHQLQDQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 01]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULLQHQDQ-xmmreg.xmmrm128 (make-instance 'x64-PCLMULLQHQDQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 10]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULHQHQDQ-xmmreg.xmmrm128 (make-instance 'x64-PCLMULHQHQDQ-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 11]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULQDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-PCLMULQDQ-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f 3a 44 /r ib]"
:arch-flags (list "SSE" "WESTMERE")))

(defparameter VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCLMULLQLQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCLMULHQLQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCLMULLQHQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPCLMULHQHQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCLMULQDQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 44 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VFMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADD321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADD321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUB321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUB321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUB321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUB321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADD321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADD321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMADD321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMADD321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB132PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB132PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB132PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB132PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB312PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB312PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB312PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB312PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB213PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB213PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB213PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB213PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB123PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB123PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB123PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB123PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB231PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB231PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB231PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB231PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB321PS-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB321PS-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUB321PD-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUB321PD-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD132SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 99 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD132SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 99 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD312SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 99 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD312SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 99 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD213SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD213SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD123SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD123SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD231SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD231SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMADD321SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMADD321SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB132SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9b /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB132SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9b /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB312SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9b /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB312SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9b /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB213SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ab /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB213SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ab /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB123SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ab /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB123SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ab /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB231SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bb /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB231SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bb /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFMSUB321SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bb /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFMSUB321SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bb /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD132SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9d /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD132SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9d /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD312SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9d /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD312SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9d /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD213SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ad /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD213SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ad /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD123SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ad /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD123SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ad /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD231SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bd /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD231SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bd /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMADD321SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bd /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMADD321SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bd /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB132SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9f /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB132SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9f /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB312SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9f /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB312SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9f /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB213SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 af /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB213SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 af /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB123SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 af /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB123SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 af /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB231SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bf /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB231SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bf /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUB321SS-instruction
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bf /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUB321SD-instruction
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bf /r]"
:arch-flags (list "FMA" "FUTURE")))

(defparameter RDFSBASE-reg32 (make-instance 'x64-RDFSBASE-instruction
:operands "reg32"
:code-string "[m: norexw f3 0f ae /0]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDFSBASE-reg64 (make-instance 'x64-RDFSBASE-instruction
:operands "reg64"
:code-string "[m: o64 f3 0f ae /0]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDGSBASE-reg32 (make-instance 'x64-RDGSBASE-instruction
:operands "reg32"
:code-string "[m: norexw f3 0f ae /1]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDGSBASE-reg64 (make-instance 'x64-RDGSBASE-instruction
:operands "reg64"
:code-string "[m: o64 f3 0f ae /1]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDRAND-reg16 (make-instance 'x64-RDRAND-instruction
:operands "reg16"
:code-string "[m: o16 0f c7 /6]"
:arch-flags (list "FUTURE")))

(defparameter RDRAND-reg32 (make-instance 'x64-RDRAND-instruction
:operands "reg32"
:code-string "[m: o32 0f c7 /6]"
:arch-flags (list "FUTURE")))

(defparameter RDRAND-reg64 (make-instance 'x64-RDRAND-instruction
:operands "reg64"
:code-string "[m: o64 0f c7 /6]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRFSBASE-reg32 (make-instance 'x64-WRFSBASE-instruction
:operands "reg32"
:code-string "[m: norexw f3 0f ae /2]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRFSBASE-reg64 (make-instance 'x64-WRFSBASE-instruction
:operands "reg64"
:code-string "[m: o64 f3 0f ae /2]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRGSBASE-reg32 (make-instance 'x64-WRGSBASE-instruction
:operands "reg32"
:code-string "[m: norexw f3 0f ae /3]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRGSBASE-reg64 (make-instance 'x64-WRGSBASE-instruction
:operands "reg64"
:code-string "[m: o64 f3 0f ae /3]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter VCVTPH2PS-ymmreg.xmmrm128 (make-instance 'x64-VCVTPH2PS-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38.w0 13 /r]"
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPH2PS-xmmreg.xmmrm64 (make-instance 'x64-VCVTPH2PS-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38.w0 13 /r]"
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPS2PH-xmmrm128.ymmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 1d /r ib]"
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPS2PH-xmmrm64.xmmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "xmmrm64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 1d /r ib]"
:arch-flags (list "AVX" "FUTURE")))

(defparameter ADCX-reg32.rm32 (make-instance 'x64-ADCX-instruction
:operands "reg32,rm32"
:code-string "[rm: norexw 66 0f 38 f6 /r]"
:arch-flags (list "FUTURE")))

(defparameter ADCX-reg64.rm64 (make-instance 'x64-ADCX-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 66 0f 38 f6 /r]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter ADOX-reg32.rm32 (make-instance 'x64-ADOX-instruction
:operands "reg32,rm32"
:code-string "[rm: norexw f3 0f 38 f6 /r]"
:arch-flags (list "FUTURE")))

(defparameter ADOX-reg64.rm64 (make-instance 'x64-ADOX-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 f3 0f 38 f6 /r]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDSEED-reg16 (make-instance 'x64-RDSEED-instruction
:operands "reg16"
:code-string "[m: o16 0f c7 /7]"
:arch-flags (list "FUTURE")))

(defparameter RDSEED-reg32 (make-instance 'x64-RDSEED-instruction
:operands "reg32"
:code-string "[m: o32 0f c7 /7]"
:arch-flags (list "FUTURE")))

(defparameter RDSEED-reg64 (make-instance 'x64-RDSEED-instruction
:operands "reg64"
:code-string "[m: o64 0f c7 /7]"
:arch-flags (list "LONG" "FUTURE")))

(defparameter CLAC-void (make-instance 'x64-CLAC-instruction
:operands "void"
:code-string "[ 0f 01 ca]"
:arch-flags (list "PRIV" "FUTURE")))

(defparameter STAC-void (make-instance 'x64-STAC-instruction
:operands "void"
:code-string "[ 0f 01 cb]"
:arch-flags (list "PRIV" "FUTURE")))

(defparameter XSTORE-void (make-instance 'x64-XSTORE-instruction
:operands "void"
:code-string "[ 0f a7 c0]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTECB-void (make-instance 'x64-XCRYPTECB-instruction
:operands "void"
:code-string "[ mustrep 0f a7 c8]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCBC-void (make-instance 'x64-XCRYPTCBC-instruction
:operands "void"
:code-string "[ mustrep 0f a7 d0]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCTR-void (make-instance 'x64-XCRYPTCTR-instruction
:operands "void"
:code-string "[ mustrep 0f a7 d8]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCFB-void (make-instance 'x64-XCRYPTCFB-instruction
:operands "void"
:code-string "[ mustrep 0f a7 e0]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTOFB-void (make-instance 'x64-XCRYPTOFB-instruction
:operands "void"
:code-string "[ mustrep 0f a7 e8]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter MONTMUL-void (make-instance 'x64-MONTMUL-instruction
:operands "void"
:code-string "[ mustrep 0f a6 c0]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XSHA1-void (make-instance 'x64-XSHA1-instruction
:operands "void"
:code-string "[ mustrep 0f a6 c8]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter XSHA256-void (make-instance 'x64-XSHA256-instruction
:operands "void"
:code-string "[ mustrep 0f a6 d0]"
:arch-flags (list "PENT" "CYRIX")))

(defparameter LLWPCB-reg32 (make-instance 'x64-LLWPCB-instruction
:operands "reg32"
:code-string "[m: xop.m9.w0.l0.p0 12 /0]"
:arch-flags (list "AMD" "386")))

(defparameter LLWPCB-reg64 (make-instance 'x64-LLWPCB-instruction
:operands "reg64"
:code-string "[m: xop.m9.w1.l0.p0 12 /0]"
:arch-flags (list "AMD" "X64")))

(defparameter SLWPCB-reg32 (make-instance 'x64-SLWPCB-instruction
:operands "reg32"
:code-string "[m: xop.m9.w0.l0.p0 12 /1]"
:arch-flags (list "AMD" "386")))

(defparameter SLWPCB-reg64 (make-instance 'x64-SLWPCB-instruction
:operands "reg64"
:code-string "[m: xop.m9.w1.l0.p0 12 /1]"
:arch-flags (list "AMD" "X64")))

(defparameter LWPVAL-reg32.rm32.imm32 (make-instance 'x64-LWPVAL-instruction
:operands "reg32,rm32,imm32"
:code-string "[vmi: xop.m10.w0.ndd.l0.p0 12 /1 id]"
:arch-flags (list "AMD" "386")))

(defparameter LWPVAL-reg64.rm32.imm32 (make-instance 'x64-LWPVAL-instruction
:operands "reg64,rm32,imm32"
:code-string "[vmi: xop.m10.w1.ndd.l0.p0 12 /1 id]"
:arch-flags (list "AMD" "X64")))

(defparameter LWPINS-reg32.rm32.imm32 (make-instance 'x64-LWPINS-instruction
:operands "reg32,rm32,imm32"
:code-string "[vmi: xop.m10.w0.ndd.l0.p0 12 /0 id]"
:arch-flags (list "AMD" "386")))

(defparameter LWPINS-reg64.rm32.imm32 (make-instance 'x64-LWPINS-instruction
:operands "reg64,rm32,imm32"
:code-string "[vmi: xop.m10.w1.ndd.l0.p0 12 /0 id]"
:arch-flags (list "AMD" "X64")))

(defparameter VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMADDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMADDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMADDPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMADDPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMADDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMADDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMADDPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMADDPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-VFMADDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6b /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-VFMADDSD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6b /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-VFMADDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6a /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-VFMADDSS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6a /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMADDSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMADDSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMADDSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMADDSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMADDSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMADDSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMSUBADDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMSUBADDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADDPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADDPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMSUBADDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMSUBADDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBADDPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBADDPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFMSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFMSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFMSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFMSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-VFMSUBSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-VFMSUBSD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-VFMSUBSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-VFMSUBSS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFNMADDPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFNMADDPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFNMADDPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFNMADDPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFNMADDPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFNMADDPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFNMADDPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFNMADDPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-VFNMADDSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7b /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-VFNMADDSD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7b /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-VFNMADDSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7a /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-VFNMADDSS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7a /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFNMSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFNMSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUBPD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUBPD-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VFNMSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VFNMSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VFNMSUBPS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VFNMSUBPS-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-VFNMSUBSD-instruction
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-VFNMSUBSD-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-VFNMSUBSS-instruction
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-VFNMSUBSS-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPD-xmmreg.xmmrm128* (make-instance 'x64-VFRCZPD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 81 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPD-ymmreg.ymmrm256* (make-instance 'x64-VFRCZPD-instruction
:operands "ymmreg,ymmrm256*"
:code-string "[rm: xop.m9.w0.l1.p0 81 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPS-xmmreg.xmmrm128* (make-instance 'x64-VFRCZPS-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 80 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPS-ymmreg.ymmrm256* (make-instance 'x64-VFRCZPS-instruction
:operands "ymmreg,ymmrm256*"
:code-string "[rm: xop.m9.w0.l1.p0 80 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZSD-xmmreg.xmmrm64* (make-instance 'x64-VFRCZSD-instruction
:operands "xmmreg,xmmrm64*"
:code-string "[rm: xop.m9.w0.l0.p0 83 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZSS-xmmreg.xmmrm32* (make-instance 'x64-VFRCZSS-instruction
:operands "xmmreg,xmmrm32*"
:code-string "[rm: xop.m9.w0.l0.p0 82 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPCMOV-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VPCMOV-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: xop.m8.w0.nds.l1.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VPCMOV-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: xop.m8.w1.nds.l0.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-VPCMOV-instruction
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: xop.m8.w1.nds.l1.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMB-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cc /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ce /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cf /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMUB-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ec /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMUD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ee /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMUQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ef /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMUW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ed /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPCOMW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cd /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBD-xmmreg.xmmrm128* (make-instance 'x64-VPHADDBD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c2 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDBQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c3 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBW-xmmreg.xmmrm128* (make-instance 'x64-VPHADDBW-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c1 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDDQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDDQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 cb /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBD-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUBD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d2 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUBQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d3 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBW-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUBW-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d1 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUDQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUDQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 db /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUWD-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUWD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d6 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUWQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDUWQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d7 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDWD-xmmreg.xmmrm128* (make-instance 'x64-VPHADDWD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c6 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDWQ-xmmreg.xmmrm128* (make-instance 'x64-VPHADDWQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c7 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBBW-xmmreg.xmmrm128* (make-instance 'x64-VPHSUBBW-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e1 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBDQ-xmmreg.xmmrm128* (make-instance 'x64-VPHSUBDQ-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e3 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBWD-xmmreg.xmmrm128* (make-instance 'x64-VPHSUBWD-instruction
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e2 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSDD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 9e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSDQH-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 9f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSDQL-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 97 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSSDD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 8e /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSSDQH-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 8f /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSSDQL-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 87 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSSWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 86 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSSWW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 85 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 96 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMACSWW-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 95 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMADCSSWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a6 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPMADCSWD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 b6 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-VPPERM-instruction
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: xop.m8.w1.nds.l0.p0 a3 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-VPPERM-instruction
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a3 /r /is4]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPROTB-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 90 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPROTB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 90 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmrm128*.imm8 (make-instance 'x64-VPROTB-instruction
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c0 /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPROTD-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 92 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPROTD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 92 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmrm128*.imm8 (make-instance 'x64-VPROTD-instruction
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c2 /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPROTQ-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 93 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPROTQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 93 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmrm128*.imm8 (make-instance 'x64-VPROTQ-instruction
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c3 /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPROTW-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 91 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPROTW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 91 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmrm128*.imm8 (make-instance 'x64-VPROTW-instruction
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c1 /r ib]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHAB-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 98 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHAB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 98 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHAD-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 9a /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHAD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 9a /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHAQ-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 9b /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHAQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 9b /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHAW-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 99 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHAW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 99 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHLB-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 94 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHLB-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 94 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHLD-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 96 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHLD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 96 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHLQ-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 97 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHLQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 97 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-VPSHLW-instruction
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 95 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSHLW-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 95 /r]"
:arch-flags (list "AMD" "SSE5")))

(defparameter VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VMPSADBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 42 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSB-ymmreg.ymmrm256 (make-instance 'x64-VPABSB-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSW-ymmreg.ymmrm256 (make-instance 'x64-VPABSW-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1d /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSD-ymmreg.ymmrm256 (make-instance 'x64-VPABSD-instruction
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKSSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPACKSSWB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 63 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKSSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPACKSSDW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6b /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKUSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPACKUSDW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 2b /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKUSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPACKUSWB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 67 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fc /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fd /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fe /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d4 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ec /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ed /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDUSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f dc /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPADDUSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f dd /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VPALIGNR-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0f /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPAND-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f db /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPANDN-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPANDN-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f df /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAVGB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPAVGB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e0 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAVGW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPAVGW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e3 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-VPBLENDVB-instruction
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a 4c /r /is4]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VPBLENDW-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0e /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPEQB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 74 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPEQW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 75 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPEQD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 76 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPEQQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 29 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPGTB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 64 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPGTW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 65 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPGTD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 66 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPCMPGTQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 37 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHADDW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 01 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHADDD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 02 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHADDSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 03 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHSUBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 05 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHSUBD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 06 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPHSUBSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 07 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMADDUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMADDUBSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 04 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMADDWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMADDWD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f5 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ee /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXSD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3d /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXUB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f de /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXUW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMAXUD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3f /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 38 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ea /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINSD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 39 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINUB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f da /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINUW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3a /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMINUD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3b /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVMSKB-reg32.ymmreg (make-instance 'x64-VPMOVMSKB-instruction
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.66.0f d7 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVMSKB-reg64.ymmreg (make-instance 'x64-VPMOVMSKB-instruction
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.66.0f d7 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBW-ymmreg.xmmrm128 (make-instance 'x64-VPMOVSXBW-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 20 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBD-ymmreg.mem64 (make-instance 'x64-VPMOVSXBD-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 21 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBD-ymmreg.xmmreg (make-instance 'x64-VPMOVSXBD-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 21 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBQ-ymmreg.mem32 (make-instance 'x64-VPMOVSXBQ-instruction
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38 22 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBQ-ymmreg.xmmreg (make-instance 'x64-VPMOVSXBQ-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 22 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWD-ymmreg.xmmrm128 (make-instance 'x64-VPMOVSXWD-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 23 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWQ-ymmreg.mem64 (make-instance 'x64-VPMOVSXWQ-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 24 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWQ-ymmreg.xmmreg (make-instance 'x64-VPMOVSXWQ-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 24 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXDQ-ymmreg.xmmrm128 (make-instance 'x64-VPMOVSXDQ-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 25 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBW-ymmreg.xmmrm128 (make-instance 'x64-VPMOVZXBW-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 30 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBD-ymmreg.mem64 (make-instance 'x64-VPMOVZXBD-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 31 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBD-ymmreg.xmmreg (make-instance 'x64-VPMOVZXBD-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 31 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBQ-ymmreg.mem32 (make-instance 'x64-VPMOVZXBQ-instruction
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38 32 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBQ-ymmreg.xmmreg (make-instance 'x64-VPMOVZXBQ-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 32 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWD-ymmreg.xmmrm128 (make-instance 'x64-VPMOVZXWD-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 33 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWQ-ymmreg.mem64 (make-instance 'x64-VPMOVZXWQ-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 34 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWQ-ymmreg.xmmreg (make-instance 'x64-VPMOVZXWQ-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 34 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXDQ-ymmreg.xmmrm128 (make-instance 'x64-VPMOVZXDQ-instruction
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 35 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 28 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHRSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULHRSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 0b /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULHUW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e4 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULHW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e5 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULLW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULLW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d5 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULLD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULLD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 40 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULUDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPMULUDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f4 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPOR-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f eb /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSADBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSADBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f6 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSHUFB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 00 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFD-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPSHUFD-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFHW-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPSHUFHW-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.f3.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFLW-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPSHUFLW-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.f2.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGNB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSIGNB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 08 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGNW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSIGNW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 09 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSIGND-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 0a /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSLLDQ-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /7 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSLLW-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f1 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLW-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSLLW-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSLLD-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f2 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLD-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSLLD-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSLLQ-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f3 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSLLQ-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSRAW-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f e1 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAW-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRAW-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /4 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSRAD-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f e2 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAD-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRAD-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /4 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRLDQ-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /3 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSRLW-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d1 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLW-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRLW-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSRLD-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d2 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLD-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRLD-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-VPSRLQ-instruction
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d3 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-VPSRLQ-instruction
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f.wig 73 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f8 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f9 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fa /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fb /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e8 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e9 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBUSB-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d8 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSUBUSW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d9 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKHBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 68 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKHWD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 69 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKHDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6a /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKHQDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6d /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKLBW-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 60 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKLWD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 61 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKLDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 62 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPUNPCKLQDQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPXOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPXOR-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ef /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VMOVNTDQA-ymmreg.mem256 (make-instance 'x64-VMOVNTDQA-instruction
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.66.0f38 2a /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSS-xmmreg.xmmreg (make-instance 'x64-VBROADCASTSS-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 18 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSS-ymmreg.xmmreg (make-instance 'x64-VBROADCASTSS-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 18 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSD-ymmreg.xmmreg (make-instance 'x64-VBROADCASTSD-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 19 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTI128-ymmreg.mem128 (make-instance 'x64-VBROADCASTI128-instruction
:operands "ymmreg,mem128"
:code-string "[rm: vex.256.66.0f38.w0 5a /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-VPBLENDD-instruction
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 02 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-VPBLENDD-instruction
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 02 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-xmmreg.mem8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg,mem8"
:code-string "[rm: vex.128.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-xmmreg.xmmreg (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-ymmreg.mem8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg,mem8"
:code-string "[rm: vex.256.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-ymmreg.xmmreg (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-xmmreg.mem16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg,mem16"
:code-string "[rm: vex.128.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-xmmreg.xmmreg (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-ymmreg.mem16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg,mem16"
:code-string "[rm: vex.256.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-ymmreg.xmmreg (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-xmmreg.mem32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "xmmreg,mem32"
:code-string "[rm: vex.128.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-xmmreg.xmmreg (make-instance 'x64-VPBROADCASTD-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-ymmreg.mem32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-ymmreg.xmmreg (make-instance 'x64-VPBROADCASTD-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-xmmreg.mem64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "xmmreg,mem64"
:code-string "[rm: vex.128.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-xmmreg.xmmreg (make-instance 'x64-VPBROADCASTQ-instruction
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-ymmreg.mem64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-ymmreg.xmmreg (make-instance 'x64-VPBROADCASTQ-instruction
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPERMD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 36 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERMPD-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w1 01 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPERMPS-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 16 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERMQ-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w1 00 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPERM2I128-instruction
:operands "ymmreg,ymmreg,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 46 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VEXTRACTI128-xmmrm128.ymmreg.imm8 (make-instance 'x64-VEXTRACTI128-instruction
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 39 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8 (make-instance 'x64-VINSERTI128-instruction
:operands "ymmreg,ymmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 38 /r ib]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-xmmreg.xmmreg*.mem128 (make-instance 'x64-VPMASKMOVD-instruction
:operands "xmmreg,xmmreg*,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 8c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-ymmreg.ymmreg*.mem256 (make-instance 'x64-VPMASKMOVD-instruction
:operands "ymmreg,ymmreg*,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 8c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-xmmreg.xmmreg*.mem128 (make-instance 'x64-VPMASKMOVQ-instruction
:operands "xmmreg,xmmreg*,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 8c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-ymmreg.ymmreg*.mem256 (make-instance 'x64-VPMASKMOVQ-instruction
:operands "ymmreg,ymmreg*,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 8c /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-mem128.xmmreg*.xmmreg (make-instance 'x64-VPMASKMOVD-instruction
:operands "mem128,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 8e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-mem256.ymmreg*.ymmreg (make-instance 'x64-VPMASKMOVD-instruction
:operands "mem256,ymmreg*,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 8e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-mem128.xmmreg*.xmmreg (make-instance 'x64-VPMASKMOVQ-instruction
:operands "mem128,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w1 8e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-mem256.ymmreg*.ymmreg (make-instance 'x64-VPMASKMOVQ-instruction
:operands "mem256,ymmreg*,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w1 8e /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSLLVD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 47 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSLLVQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 47 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSLLVD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 47 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSLLVQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 47 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRAVD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 46 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSRAVD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 46 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRLVD-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 45 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-VPSRLVQ-instruction
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 45 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSRLVD-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 45 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-VPSRLVQ-instruction
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 45 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPD-xmmreg.xmem64.xmmreg (make-instance 'x64-VGATHERDPD-instruction
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w1 92 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPD-xmmreg.xmem64.xmmreg (make-instance 'x64-VGATHERQPD-instruction
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w1 93 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPD-ymmreg.xmem64.ymmreg (make-instance 'x64-VGATHERDPD-instruction
:operands "ymmreg,xmem64,ymmreg"
:code-string "[rmv: vm32x vex.dds.256.66.0f38.w1 92 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPD-ymmreg.ymem64.ymmreg (make-instance 'x64-VGATHERQPD-instruction
:operands "ymmreg,ymem64,ymmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w1 93 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPS-xmmreg.xmem32.xmmreg (make-instance 'x64-VGATHERDPS-instruction
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w0 92 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPS-xmmreg.xmem32.xmmreg (make-instance 'x64-VGATHERQPS-instruction
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w0 93 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPS-ymmreg.ymem32.ymmreg (make-instance 'x64-VGATHERDPS-instruction
:operands "ymmreg,ymem32,ymmreg"
:code-string "[rmv: vm32y vex.dds.256.66.0f38.w0 92 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPS-xmmreg.ymem32.xmmreg (make-instance 'x64-VGATHERQPS-instruction
:operands "xmmreg,ymem32,xmmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w0 93 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDD-xmmreg.xmem32.xmmreg (make-instance 'x64-VPGATHERDD-instruction
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w0 90 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQD-xmmreg.xmem32.xmmreg (make-instance 'x64-VPGATHERQD-instruction
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w0 91 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDD-ymmreg.ymem32.ymmreg (make-instance 'x64-VPGATHERDD-instruction
:operands "ymmreg,ymem32,ymmreg"
:code-string "[rmv: vm32y vex.dds.256.66.0f38.w0 90 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQD-xmmreg.ymem32.xmmreg (make-instance 'x64-VPGATHERQD-instruction
:operands "xmmreg,ymem32,xmmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w0 91 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDQ-xmmreg.xmem64.xmmreg (make-instance 'x64-VPGATHERDQ-instruction
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w1 90 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQQ-xmmreg.xmem64.xmmreg (make-instance 'x64-VPGATHERQQ-instruction
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w1 91 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDQ-ymmreg.xmem64.ymmreg (make-instance 'x64-VPGATHERDQ-instruction
:operands "ymmreg,xmem64,ymmreg"
:code-string "[rmv: vm32x vex.dds.256.66.0f38.w1 90 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQQ-ymmreg.ymem64.ymmreg (make-instance 'x64-VPGATHERQQ-instruction
:operands "ymmreg,ymem64,ymmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w1 91 /r]"
:arch-flags (list "FUTURE" "AVX2")))

(defparameter XABORT-imm (make-instance 'x64-XABORT-instruction
:operands "imm"
:code-string "[i: c6 f8 ib]"
:arch-flags (list "FUTURE" "RTM")))

(defparameter XABORT-imm8 (make-instance 'x64-XABORT-instruction
:operands "imm8"
:code-string "[i: c6 f8 ib]"
:arch-flags (list "FUTURE" "RTM")))

(defparameter XBEGIN-imm (make-instance 'x64-XBEGIN-instruction
:operands "imm"
:code-string "[i: odf c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM")))

(defparameter XBEGIN-imm-near (make-instance 'x64-XBEGIN-instruction
:operands "imm|near"
:code-string "[i: odf c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "ND")))

(defparameter XBEGIN-imm64 (make-instance 'x64-XBEGIN-instruction
:operands "imm64"
:code-string "[i: o64nw c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "LONG")))

(defparameter XBEGIN-imm64-near (make-instance 'x64-XBEGIN-instruction
:operands "imm64|near"
:code-string "[i: o64nw c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "LONG" "ND")))

(defparameter XEND-void (make-instance 'x64-XEND-instruction
:operands "void"
:code-string "[ 0f 01 d5]"
:arch-flags (list "FUTURE" "RTM")))

(defparameter XTEST-void (make-instance 'x64-XTEST-instruction
:operands "void"
:code-string "[ 0f 01 d6]"
:arch-flags (list "FUTURE" "HLE" "RTM")))

(defparameter ANDN-reg32.reg32.rm32 (make-instance 'x64-ANDN-instruction
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.0f38.w0 f2 /r]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter ANDN-reg64.reg64.rm64 (make-instance 'x64-ANDN-instruction
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.0f38.w1 f2 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BEXTR-reg32.rm32.reg32 (make-instance 'x64-BEXTR-instruction
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BEXTR-reg64.rm64.reg64 (make-instance 'x64-BEXTR-instruction
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BEXTR-reg32.rm32.imm32 (make-instance 'x64-BEXTR-instruction
:operands "reg32,rm32,imm32"
:code-string "[rmi: xop.m10.lz.w0 10 /r id]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BEXTR-reg64.rm64.imm32 (make-instance 'x64-BEXTR-instruction
:operands "reg64,rm64,imm32"
:code-string "[rmi: xop.m10.lz.w1 10 /r id]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCI-reg32.rm32 (make-instance 'x64-BLCI-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 02 /6]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCI-reg64.rm64 (make-instance 'x64-BLCI-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 02 /6]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCIC-reg32.rm32 (make-instance 'x64-BLCIC-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /5]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCIC-reg64.rm64 (make-instance 'x64-BLCIC-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /5]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSI-reg32.rm32 (make-instance 'x64-BLSI-instruction
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /3]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSI-reg64.rm64 (make-instance 'x64-BLSI-instruction
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /3]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLSIC-reg32.rm32 (make-instance 'x64-BLSIC-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /6]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLSIC-reg64.rm64 (make-instance 'x64-BLSIC-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /6]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCFILL-reg32.rm32 (make-instance 'x64-BLCFILL-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /1]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCFILL-reg64.rm64 (make-instance 'x64-BLCFILL-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /1]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSFILL-reg32.rm32 (make-instance 'x64-BLSFILL-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /2]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLSFILL-reg64.rm64 (make-instance 'x64-BLSFILL-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /2]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCMSK-reg32.rm32 (make-instance 'x64-BLCMSK-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 02 /1]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCMSK-reg64.rm64 (make-instance 'x64-BLCMSK-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 02 /1]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSMSK-reg32.rm32 (make-instance 'x64-BLSMSK-instruction
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /2]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSMSK-reg64.rm64 (make-instance 'x64-BLSMSK-instruction
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /2]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLSR-reg32.rm32 (make-instance 'x64-BLSR-instruction
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /1]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSR-reg64.rm64 (make-instance 'x64-BLSR-instruction
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /1]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLCS-reg32.rm32 (make-instance 'x64-BLCS-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /3]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCS-reg64.rm64 (make-instance 'x64-BLCS-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /3]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BZHI-reg32.rm32.reg32 (make-instance 'x64-BZHI-instruction
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter BZHI-reg64.rm64.reg64 (make-instance 'x64-BZHI-instruction
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter MULX-reg32.reg32.rm32 (make-instance 'x64-MULX-instruction
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.ndd.lz.f2.0f38.w0 f6 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter MULX-reg64.reg64.rm64 (make-instance 'x64-MULX-instruction
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.ndd.lz.f2.0f38.w1 f6 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter PDEP-reg32.reg32.rm32 (make-instance 'x64-PDEP-instruction
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.f2.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter PDEP-reg64.reg64.rm64 (make-instance 'x64-PDEP-instruction
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.f2.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter PEXT-reg32.reg32.rm32 (make-instance 'x64-PEXT-instruction
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.f3.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter PEXT-reg64.reg64.rm64 (make-instance 'x64-PEXT-instruction
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.f3.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter RORX-reg32.rm32.imm8 (make-instance 'x64-RORX-instruction
:operands "reg32,rm32,imm8"
:code-string "[rmi: vex.lz.f2.0f3a.w0 f0 /r ib]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter RORX-reg64.rm64.imm8 (make-instance 'x64-RORX-instruction
:operands "reg64,rm64,imm8"
:code-string "[rmi: vex.lz.f2.0f3a.w1 f0 /r ib]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SARX-reg32.rm32.reg32 (make-instance 'x64-SARX-instruction
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.f3.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SARX-reg64.rm64.reg64 (make-instance 'x64-SARX-instruction
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.f3.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SHLX-reg32.rm32.reg32 (make-instance 'x64-SHLX-instruction
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.66.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SHLX-reg64.rm64.reg64 (make-instance 'x64-SHLX-instruction
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.66.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SHRX-reg32.rm32.reg32 (make-instance 'x64-SHRX-instruction
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.f2.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SHRX-reg64.rm64.reg64 (make-instance 'x64-SHRX-instruction
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.f2.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter TZCNT-reg16.rm16 (make-instance 'x64-TZCNT-instruction
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f bc /r]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter TZCNT-reg32.rm32 (make-instance 'x64-TZCNT-instruction
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f bc /r]"
:arch-flags (list "FUTURE" "BMI1")))

(defparameter TZCNT-reg64.rm64 (make-instance 'x64-TZCNT-instruction
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f bc /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter TZMSK-reg32.rm32 (make-instance 'x64-TZMSK-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /4]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter TZMSK-reg64.rm64 (make-instance 'x64-TZMSK-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /4]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter T1MSKC-reg32.rm32 (make-instance 'x64-T1MSKC-instruction
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /7]"
:arch-flags (list "FUTURE" "TBM")))

(defparameter T1MSKC-reg64.rm64 (make-instance 'x64-T1MSKC-instruction
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /7]"
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter PREFETCHWT1-mem8 (make-instance 'x64-PREFETCHWT1-instruction
:operands "mem8"
:code-string "[m: 0f 0d /2 ]"
:arch-flags (list "PREFETCHWT1" "FUTURE")))

(defparameter BNDMK-bndreg.mem (make-instance 'x64-BNDMK-instruction
:operands "bndreg,mem"
:code-string "[rm: f3 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDCL-bndreg.mem (make-instance 'x64-BNDCL-instruction
:operands "bndreg,mem"
:code-string "[rm: f3 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCL-bndreg.reg64 (make-instance 'x64-BNDCL-instruction
:operands "bndreg,reg64"
:code-string "[rm: o64nw f3 0f 1a /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDCU-bndreg.mem (make-instance 'x64-BNDCU-instruction
:operands "bndreg,mem"
:code-string "[rm: f2 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCU-bndreg.reg64 (make-instance 'x64-BNDCU-instruction
:operands "bndreg,reg64"
:code-string "[rm: o64nw f2 0f 1a /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDCN-bndreg.mem (make-instance 'x64-BNDCN-instruction
:operands "bndreg,mem"
:code-string "[rm: f2 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCN-bndreg.reg64 (make-instance 'x64-BNDCN-instruction
:operands "bndreg,reg64"
:code-string "[rm: o64nw f2 0f 1b /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDMOV-bndreg.bndreg (make-instance 'x64-BNDMOV-instruction
:operands "bndreg,bndreg"
:code-string "[rm: 66 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-bndreg.mem (make-instance 'x64-BNDMOV-instruction
:operands "bndreg,mem"
:code-string "[rm: 66 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-bndreg.bndreg (make-instance 'x64-BNDMOV-instruction
:operands "bndreg,bndreg"
:code-string "[mr: 66 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-mem.bndreg (make-instance 'x64-BNDMOV-instruction
:operands "mem,bndreg"
:code-string "[mr: 66 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDLDX-bndreg.mem (make-instance 'x64-BNDLDX-instruction
:operands "bndreg,mem"
:code-string "[rm: 0f 1a /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDLDX-bndreg.mem.reg64 (make-instance 'x64-BNDLDX-instruction
:operands "bndreg,mem,reg64"
:code-string "[rmx: 0f 1a /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter BNDSTX-mem.bndreg (make-instance 'x64-BNDSTX-instruction
:operands "mem,bndreg"
:code-string "[mr: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDSTX-mem.reg64.bndreg (make-instance 'x64-BNDSTX-instruction
:operands "mem,reg64,bndreg"
:code-string "[mxr: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter BNDSTX-mem.bndreg.reg64 (make-instance 'x64-BNDSTX-instruction
:operands "mem,bndreg,reg64"
:code-string "[mrx: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter KADDB-kreg.kreg.kreg (make-instance 'x64-KADDB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 4a /r ]"
:arch-flags (list "FUTURE")))

(defparameter KADDD-kreg.kreg.kreg (make-instance 'x64-KADDD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 4a /r ]"
:arch-flags (list "FUTURE")))

(defparameter KADDQ-kreg.kreg.kreg (make-instance 'x64-KADDQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 4a /r ]"
:arch-flags (list "FUTURE")))

(defparameter KADDW-kreg.kreg.kreg (make-instance 'x64-KADDW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 4a /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDB-kreg.kreg.kreg (make-instance 'x64-KANDB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 41 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDD-kreg.kreg.kreg (make-instance 'x64-KANDD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 41 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDNB-kreg.kreg.kreg (make-instance 'x64-KANDNB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 42 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDND-kreg.kreg.kreg (make-instance 'x64-KANDND-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 42 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDNQ-kreg.kreg.kreg (make-instance 'x64-KANDNQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 42 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDNW-kreg.kreg.kreg (make-instance 'x64-KANDNW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 42 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDQ-kreg.kreg.kreg (make-instance 'x64-KANDQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 41 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KANDW-kreg.kreg.kreg (make-instance 'x64-KANDW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 41 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVB-kreg.krm8 (make-instance 'x64-KMOVB-instruction
:operands "kreg,krm8"
:code-string "[rm: vex.l0.66.0f.w0 90 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVB-mem8.kreg (make-instance 'x64-KMOVB-instruction
:operands "mem8,kreg"
:code-string "[mr: vex.l0.66.0f.w0 91 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVB-kreg.reg32 (make-instance 'x64-KMOVB-instruction
:operands "kreg,reg32"
:code-string "[rm: vex.l0.66.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVB-reg32.kreg (make-instance 'x64-KMOVB-instruction
:operands "reg32,kreg"
:code-string "[rm: vex.l0.66.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVD-kreg.krm32 (make-instance 'x64-KMOVD-instruction
:operands "kreg,krm32"
:code-string "[rm: vex.l0.66.0f.w1 90 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVD-mem32.kreg (make-instance 'x64-KMOVD-instruction
:operands "mem32,kreg"
:code-string "[mr: vex.l0.66.0f.w1 91 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVD-kreg.reg32 (make-instance 'x64-KMOVD-instruction
:operands "kreg,reg32"
:code-string "[rm: vex.l0.f2.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVD-reg32.kreg (make-instance 'x64-KMOVD-instruction
:operands "reg32,kreg"
:code-string "[rm: vex.l0.f2.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-kreg.krm64 (make-instance 'x64-KMOVQ-instruction
:operands "kreg,krm64"
:code-string "[rm: vex.l0.0f.w1 90 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-mem64.kreg (make-instance 'x64-KMOVQ-instruction
:operands "mem64,kreg"
:code-string "[mr: vex.l0.0f.w1 91 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-kreg.reg64 (make-instance 'x64-KMOVQ-instruction
:operands "kreg,reg64"
:code-string "[rm: vex.l0.f2.0f.w1 92 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-reg64.kreg (make-instance 'x64-KMOVQ-instruction
:operands "reg64,kreg"
:code-string "[rm: vex.l0.f2.0f.w1 93 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVW-kreg.krm16 (make-instance 'x64-KMOVW-instruction
:operands "kreg,krm16"
:code-string "[rm: vex.l0.0f.w0 90 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVW-mem16.kreg (make-instance 'x64-KMOVW-instruction
:operands "mem16,kreg"
:code-string "[mr: vex.l0.0f.w0 91 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVW-kreg.reg32 (make-instance 'x64-KMOVW-instruction
:operands "kreg,reg32"
:code-string "[rm: vex.l0.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KMOVW-reg32.kreg (make-instance 'x64-KMOVW-instruction
:operands "reg32,kreg"
:code-string "[rm: vex.l0.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KNOTB-kreg.kreg (make-instance 'x64-KNOTB-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 44 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KNOTD-kreg.kreg (make-instance 'x64-KNOTD-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 44 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KNOTQ-kreg.kreg (make-instance 'x64-KNOTQ-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 44 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KNOTW-kreg.kreg (make-instance 'x64-KNOTW-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 44 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORB-kreg.kreg.kreg (make-instance 'x64-KORB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 45 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORD-kreg.kreg.kreg (make-instance 'x64-KORD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 45 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORQ-kreg.kreg.kreg (make-instance 'x64-KORQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 45 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORTESTB-kreg.kreg (make-instance 'x64-KORTESTB-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 98 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORTESTD-kreg.kreg (make-instance 'x64-KORTESTD-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 98 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORTESTQ-kreg.kreg (make-instance 'x64-KORTESTQ-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 98 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORTESTW-kreg.kreg (make-instance 'x64-KORTESTW-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 98 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KORW-kreg.kreg.kreg (make-instance 'x64-KORW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 45 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLB-kreg.kreg.imm8 (make-instance 'x64-KSHIFTLB-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 32 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLD-kreg.kreg.imm8 (make-instance 'x64-KSHIFTLD-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 33 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLQ-kreg.kreg.imm8 (make-instance 'x64-KSHIFTLQ-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 33 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLW-kreg.kreg.imm8 (make-instance 'x64-KSHIFTLW-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 32 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRB-kreg.kreg.imm8 (make-instance 'x64-KSHIFTRB-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 30 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRD-kreg.kreg.imm8 (make-instance 'x64-KSHIFTRD-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 31 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRQ-kreg.kreg.imm8 (make-instance 'x64-KSHIFTRQ-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 31 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRW-kreg.kreg.imm8 (make-instance 'x64-KSHIFTRW-instruction
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 30 /r ib ]"
:arch-flags (list "FUTURE")))

(defparameter KTESTB-kreg.kreg (make-instance 'x64-KTESTB-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 99 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KTESTD-kreg.kreg (make-instance 'x64-KTESTD-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 99 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KTESTQ-kreg.kreg (make-instance 'x64-KTESTQ-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 99 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KTESTW-kreg.kreg (make-instance 'x64-KTESTW-instruction
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 99 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KUNPCKBW-kreg.kreg.kreg (make-instance 'x64-KUNPCKBW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 4b /r ]"
:arch-flags (list "FUTURE")))

(defparameter KUNPCKDQ-kreg.kreg.kreg (make-instance 'x64-KUNPCKDQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 4b /r ]"
:arch-flags (list "FUTURE")))

(defparameter KUNPCKWD-kreg.kreg.kreg (make-instance 'x64-KUNPCKWD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 4b /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXNORB-kreg.kreg.kreg (make-instance 'x64-KXNORB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 46 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXNORD-kreg.kreg.kreg (make-instance 'x64-KXNORD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 46 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXNORQ-kreg.kreg.kreg (make-instance 'x64-KXNORQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 46 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXNORW-kreg.kreg.kreg (make-instance 'x64-KXNORW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 46 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXORB-kreg.kreg.kreg (make-instance 'x64-KXORB-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 47 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXORD-kreg.kreg.kreg (make-instance 'x64-KXORD-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 47 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXORQ-kreg.kreg.kreg (make-instance 'x64-KXORQ-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 47 /r ]"
:arch-flags (list "FUTURE")))

(defparameter KXORW-kreg.kreg.kreg (make-instance 'x64-KXORW-instruction
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 47 /r ]"
:arch-flags (list "FUTURE")))

(defparameter SHA1MSG1-xmmreg.xmmrm128 (make-instance 'x64-SHA1MSG1-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 c9 /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1MSG2-xmmreg.xmmrm128 (make-instance 'x64-SHA1MSG2-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 ca /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1NEXTE-xmmreg.xmmrm128 (make-instance 'x64-SHA1NEXTE-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 c8 /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1RNDS4-xmmreg.xmmrm128.imm8 (make-instance 'x64-SHA1RNDS4-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 0f 3a cc /r ib ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256MSG1-xmmreg.xmmrm128 (make-instance 'x64-SHA256MSG1-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 cc /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256MSG2-xmmreg.xmmrm128 (make-instance 'x64-SHA256MSG2-instruction
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 cd /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256RNDS2-xmmreg.xmmrm128.xmm0 (make-instance 'x64-SHA256RNDS2-instruction
:operands "xmmreg,xmmrm128,xmm0"
:code-string "[rm-: 0f 38 cb /r ]"
:arch-flags (list "SHA" "FUTURE")))

(defparameter VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VADDPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VADDPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VADDPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VADDPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VADDPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VADDPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VADDSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VADDSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VALIGND-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VALIGND-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VALIGND-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VALIGNQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VALIGNQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VALIGNQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VANDNPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VANDNPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VANDNPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VANDNPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VANDNPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VANDNPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 55 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VANDPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VANDPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VANDPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VANDPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VANDPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VANDPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 54 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VBLENDMPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VBLENDMPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VBLENDMPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VBLENDMPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VBLENDMPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VBLENDMPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VBROADCASTF32X2-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.256.66.0f38.w0 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x64-VBROADCASTF32X2-instruction
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.512.66.0f38.w0 19 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF32X4-ymmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTF32X4-instruction
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t4: evex.256.66.0f38.w0 1a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X4-zmmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTF32X4-instruction
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t4: evex.512.66.0f38.w0 1a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X8-zmmreg-mask-z.mem256 (make-instance 'x64-VBROADCASTF32X8-instruction
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t8: evex.512.66.0f38.w0 1b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X2-ymmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTF64X2-instruction
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t2: evex.256.66.0f38.w1 1a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X2-zmmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTF64X2-instruction
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t2: evex.512.66.0f38.w1 1a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X4-zmmreg-mask-z.mem256 (make-instance 'x64-VBROADCASTF64X4-instruction
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t4: evex.512.66.0f38.w1 1b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X2-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VBROADCASTI32X2-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.128.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VBROADCASTI32X2-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.256.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x64-VBROADCASTI32X2-instruction
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.512.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X4-ymmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTI32X4-instruction
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t4: evex.256.66.0f38.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X4-zmmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTI32X4-instruction
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t4: evex.512.66.0f38.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X8-zmmreg-mask-z.mem256 (make-instance 'x64-VBROADCASTI32X8-instruction
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t8: evex.512.66.0f38.w0 5b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X2-ymmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTI64X2-instruction
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t2: evex.256.66.0f38.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X2-zmmreg-mask-z.mem128 (make-instance 'x64-VBROADCASTI64X2-instruction
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t2: evex.512.66.0f38.w1 5a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X4-zmmreg-mask-z.mem256 (make-instance 'x64-VBROADCASTI64X4-instruction
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t4: evex.512.66.0f38.w1 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-ymmreg-mask-z.mem64 (make-instance 'x64-VBROADCASTSD-instruction
:operands "ymmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.256.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-zmmreg-mask-z.mem64 (make-instance 'x64-VBROADCASTSD-instruction
:operands "zmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.512.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-ymmreg-mask-z.xmmreg (make-instance 'x64-VBROADCASTSD-instruction
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-zmmreg-mask-z.xmmreg (make-instance 'x64-VBROADCASTSD-instruction
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-xmmreg-mask-z.mem32 (make-instance 'x64-VBROADCASTSS-instruction
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-ymmreg-mask-z.mem32 (make-instance 'x64-VBROADCASTSS-instruction
:operands "ymmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.256.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-zmmreg-mask-z.mem32 (make-instance 'x64-VBROADCASTSS-instruction
:operands "zmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.512.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-xmmreg-mask-z.xmmreg (make-instance 'x64-VBROADCASTSS-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-ymmreg-mask-z.xmmreg (make-instance 'x64-VBROADCASTSS-instruction
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-zmmreg-mask-z.xmmreg (make-instance 'x64-VBROADCASTSS-instruction
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VCMPPD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VCMPPD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-VCMPPD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VCMPPS-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VCMPPS-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-VCMPPS-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VCMPSD-instruction
:operands "kreg|mask,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.f2.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VCMPSS-instruction
:operands "kreg|mask,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.f3.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMISD-xmmreg.xmmrm64-sae (make-instance 'x64-VCOMISD-instruction
:operands "xmmreg,xmmrm64|sae"
:code-string "[rm:t1s: evex.128.66.0f.w1 2f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMISS-xmmreg.xmmrm32-sae (make-instance 'x64-VCOMISS-instruction
:operands "xmmreg,xmmrm32|sae"
:code-string "[rm:t1s: evex.128.0f.w0 2f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem128-mask.xmmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem256-mask.ymmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem512-mask.zmmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-xmmreg-mask-z.xmmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-ymmreg-mask-z.ymmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-zmmreg-mask-z.zmmreg (make-instance 'x64-VCOMPRESSPD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem128-mask.xmmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem256-mask.ymmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem512-mask.zmmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-xmmreg-mask-z.xmmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-ymmreg-mask-z.ymmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-zmmreg-mask-z.zmmreg (make-instance 'x64-VCOMPRESSPS-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTDQ2PD-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTDQ2PD-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-VCVTDQ2PD-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTDQ2PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTDQ2PS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-VCVTDQ2PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTPD2DQ-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTPD2DQ-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTPD2PS-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTPD2PS-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTPD2QQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTPD2QQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTPD2QQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTPD2UDQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTPD2UDQ-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTPD2UDQ-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTPD2UQQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTPD2UQQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTPD2UQQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPH2PS-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VCVTPH2PS-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPH2PS-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VCVTPH2PS-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae (make-instance 'x64-VCVTPH2PS-instruction
:operands "zmmreg|mask|z,ymmrm256|sae"
:code-string "[rm:hvm: evex.512.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTPS2DQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTPS2DQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-VCVTPS2DQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTPS2PD-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.0f.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTPS2PD-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.0f.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-VCVTPS2PD-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.0f.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "xmmreg|mask|z,xmmreg,imm8"
:code-string "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "ymmreg|mask|z,zmmreg|sae,imm8"
:code-string "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem64-mask.xmmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "mem64|mask,xmmreg,imm8"
:code-string "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem128-mask.ymmreg.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem256-mask.zmmreg-sae.imm8 (make-instance 'x64-VCVTPS2PH-instruction
:operands "mem256|mask,zmmreg|sae,imm8"
:code-string "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTPS2QQ-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTPS2QQ-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-VCVTPS2QQ-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTPS2UDQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTPS2UDQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-VCVTPS2UDQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTPS2UQQ-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTPS2UQQ-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-VCVTPS2UQQ-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTQQ2PD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTQQ2PD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTQQ2PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTQQ2PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTQQ2PS-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTQQ2PS-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.0f.w1 5b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTSD2SI-reg32.xmmrm64-er (make-instance 'x64-VCVTSD2SI-instruction
:operands "reg32,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2SI-reg64.xmmrm64-er (make-instance 'x64-VCVTSD2SI-instruction
:operands "reg64,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VCVTSD2SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2USI-reg32.xmmrm64-er (make-instance 'x64-VCVTSD2USI-instruction
:operands "reg32,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2USI-reg64.xmmrm64-er (make-instance 'x64-VCVTSD2USI-instruction
:operands "reg64,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x64-VCVTSI2SD-instruction
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x64-VCVTSI2SD-instruction
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x64-VCVTSI2SS-instruction
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x64-VCVTSI2SS-instruction
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w1 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VCVTSS2SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SI-reg32.xmmrm32-er (make-instance 'x64-VCVTSS2SI-instruction
:operands "reg32,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SI-reg64.xmmrm32-er (make-instance 'x64-VCVTSS2SI-instruction
:operands "reg64,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2USI-reg32.xmmrm32-er (make-instance 'x64-VCVTSS2USI-instruction
:operands "reg32,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2USI-reg64.xmmrm32-er (make-instance 'x64-VCVTSS2USI-instruction
:operands "reg64,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VCVTTPD2DQ-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTTPD2QQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTTPD2QQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VCVTTPD2QQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTTPD2UDQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTTPD2UDQ-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VCVTTPD2UDQ-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTTPD2UQQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTTPD2UQQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VCVTTPD2UQQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTTPS2DQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTTPS2DQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VCVTTPS2DQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTTPS2QQ-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTTPS2QQ-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-VCVTTPS2QQ-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTTPS2UDQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTTPS2UDQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VCVTTPS2UDQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTTPS2UQQ-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTTPS2UQQ-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-VCVTTPS2UQQ-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTSD2SI-reg32.xmmrm64-sae (make-instance 'x64-VCVTTSD2SI-instruction
:operands "reg32,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2SI-reg64.xmmrm64-sae (make-instance 'x64-VCVTTSD2SI-instruction
:operands "reg64,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2USI-reg32.xmmrm64-sae (make-instance 'x64-VCVTTSD2USI-instruction
:operands "reg32,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2USI-reg64.xmmrm64-sae (make-instance 'x64-VCVTTSD2USI-instruction
:operands "reg64,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2SI-reg32.xmmrm32-sae (make-instance 'x64-VCVTTSS2SI-instruction
:operands "reg32,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2SI-reg64.xmmrm32-sae (make-instance 'x64-VCVTTSS2SI-instruction
:operands "reg64,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2USI-reg32.xmmrm32-sae (make-instance 'x64-VCVTTSS2USI-instruction
:operands "reg32,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2USI-reg64.xmmrm32-sae (make-instance 'x64-VCVTTSS2USI-instruction
:operands "reg64,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-VCVTUDQ2PD-instruction
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTUDQ2PD-instruction
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-VCVTUDQ2PD-instruction
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VCVTUDQ2PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VCVTUDQ2PS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-VCVTUDQ2PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTUQQ2PD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTUQQ2PD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTUQQ2PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VCVTUQQ2PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VCVTUQQ2PS-instruction
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VCVTUQQ2PS-instruction
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTUSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x64-VCVTUSI2SD-instruction
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w0 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x64-VCVTUSI2SD-instruction
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x64-VCVTUSI2SS-instruction
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x64-VCVTUSI2SS-instruction
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w1 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x64-VDBPSADBW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x64-VDBPSADBW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x64-VDBPSADBW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VDIVPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VDIVPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VDIVPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VDIVPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VDIVPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VDIVPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VDIVSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VDIVSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VEXP2PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 c8 /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VEXP2PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 c8 /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VEXPANDPD-xmmreg-mask-z.mem128 (make-instance 'x64-VEXPANDPD-instruction
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-ymmreg-mask-z.mem256 (make-instance 'x64-VEXPANDPD-instruction
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-zmmreg-mask-z.mem512 (make-instance 'x64-VEXPANDPD-instruction
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPD-xmmreg-mask-z.xmmreg (make-instance 'x64-VEXPANDPD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-ymmreg-mask-z.ymmreg (make-instance 'x64-VEXPANDPD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-zmmreg-mask-z.zmmreg (make-instance 'x64-VEXPANDPD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPS-xmmreg-mask-z.mem128 (make-instance 'x64-VEXPANDPS-instruction
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-ymmreg-mask-z.mem256 (make-instance 'x64-VEXPANDPS-instruction
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-zmmreg-mask-z.mem512 (make-instance 'x64-VEXPANDPS-instruction
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPS-xmmreg-mask-z.xmmreg (make-instance 'x64-VEXPANDPS-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-ymmreg-mask-z.ymmreg (make-instance 'x64-VEXPANDPS-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-zmmreg-mask-z.zmmreg (make-instance 'x64-VEXPANDPS-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-VEXTRACTF32X4-instruction
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTF32X4-instruction
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-mem128-mask.ymmreg.imm8 (make-instance 'x64-VEXTRACTF32X4-instruction
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t4: evex.256.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-mem128-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTF32X4-instruction
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTF32X8-instruction
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 1b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF32X8-mem256-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTF32X8-instruction
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t8: evex.512.66.0f3a.w0 1b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-VEXTRACTF64X2-instruction
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTF64X2-instruction
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-mem128-mask.ymmreg.imm8 (make-instance 'x64-VEXTRACTF64X2-instruction
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t2: evex.256.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-mem128-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTF64X2-instruction
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t2: evex.512.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTF64X4-instruction
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 1b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF64X4-mem256-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTF64X4-instruction
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w1 1b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-VEXTRACTI32X4-instruction
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTI32X4-instruction
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-mem128-mask.ymmreg.imm8 (make-instance 'x64-VEXTRACTI32X4-instruction
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t4: evex.256.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-mem128-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTI32X4-instruction
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTI32X8-instruction
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 3b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI32X8-mem256-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTI32X8-instruction
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t8: evex.512.66.0f3a.w0 3b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-VEXTRACTI64X2-instruction
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTI64X2-instruction
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-mem128-mask.ymmreg.imm8 (make-instance 'x64-VEXTRACTI64X2-instruction
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t2: evex.256.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-mem128-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTI64X2-instruction
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t2: evex.512.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-VEXTRACTI64X4-instruction
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 3b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI64X4-mem256-mask.zmmreg.imm8 (make-instance 'x64-VEXTRACTI64X4-instruction
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w1 3b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-reg32.xmmreg.imm8 (make-instance 'x64-VEXTRACTPS-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-reg64.xmmreg.imm8 (make-instance 'x64-VEXTRACTPS-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-mem32.xmmreg.imm8 (make-instance 'x64-VEXTRACTPS-instruction
:operands "mem32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VFIXUPIMMPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VFIXUPIMMPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-VFIXUPIMMPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VFIXUPIMMPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VFIXUPIMMPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-VFIXUPIMMPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VFIXUPIMMSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 55 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VFIXUPIMMSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 55 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADD132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADD132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADD132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADD132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADD132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADD132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMADD132SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 99 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMADD132SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 99 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADD213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADD213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADD213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADD213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADD213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADD213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMADD213SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 a9 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMADD213SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 a9 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADD231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADD231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADD231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADD231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADD231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADD231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMADD231SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 b9 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMADD231SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 b9 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADDSUB132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADDSUB132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADDSUB132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADDSUB132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADDSUB132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADDSUB132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADDSUB213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADDSUB213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADDSUB213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADDSUB213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADDSUB213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADDSUB213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMADDSUB231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMADDSUB231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMADDSUB231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMADDSUB231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMADDSUB231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMADDSUB231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUB132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUB132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUB132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUB132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUB132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUB132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMSUB132SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMSUB132SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUB213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUB213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUB213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUB213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUB213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUB213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMSUB213SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 ab /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMSUB213SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 ab /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUB231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUB231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUB231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUB231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUB231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUB231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFMSUB231SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bb /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFMSUB231SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bb /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUBADD132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUBADD132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUBADD132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUBADD132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUBADD132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUBADD132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUBADD213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUBADD213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUBADD213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUBADD213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUBADD213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUBADD213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFMSUBADD231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFMSUBADD231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFMSUBADD231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFMSUBADD231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFMSUBADD231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFMSUBADD231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMADD132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMADD132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMADD132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMADD132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMADD132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMADD132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMADD132SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMADD132SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMADD213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMADD213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMADD213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMADD213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMADD213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMADD213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMADD213SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 ad /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMADD213SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 ad /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMADD231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMADD231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMADD231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMADD231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMADD231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMADD231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMADD231SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bd /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMADD231SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bd /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMSUB132PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMSUB132PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMSUB132PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMSUB132PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMSUB132PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMSUB132PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMSUB132SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMSUB132SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMSUB213PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMSUB213PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMSUB213PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMSUB213PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMSUB213PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMSUB213PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMSUB213SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 af /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMSUB213SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 af /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VFNMSUB231PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VFNMSUB231PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VFNMSUB231PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VFNMSUB231PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VFNMSUB231PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VFNMSUB231PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VFNMSUB231SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bf /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VFNMSUB231SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bf /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8 (make-instance 'x64-VFPCLASSPD-instruction
:operands "kreg|mask,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8 (make-instance 'x64-VFPCLASSPD-instruction
:operands "kreg|mask,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8 (make-instance 'x64-VFPCLASSPD-instruction
:operands "kreg|mask,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8 (make-instance 'x64-VFPCLASSPS-instruction
:operands "kreg|mask,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8 (make-instance 'x64-VFPCLASSPS-instruction
:operands "kreg|mask,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8 (make-instance 'x64-VFPCLASSPS-instruction
:operands "kreg|mask,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSSD-kreg-mask.xmmrm64.imm8 (make-instance 'x64-VFPCLASSSD-instruction
:operands "kreg|mask,xmmrm64,imm8"
:code-string "[rmi:t1s: evex.128.66.0f3a.w1 67 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSSS-kreg-mask.xmmrm32.imm8 (make-instance 'x64-VFPCLASSSS-instruction
:operands "kreg|mask,xmmrm32,imm8"
:code-string "[rmi:t1s: evex.128.66.0f3a.w0 67 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VGATHERDPD-xmmreg-mask.xmem64 (make-instance 'x64-VGATHERDPD-instruction
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPD-ymmreg-mask.xmem64 (make-instance 'x64-VGATHERDPD-instruction
:operands "ymmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.256.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPD-zmmreg-mask.ymem64 (make-instance 'x64-VGATHERDPD-instruction
:operands "zmmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.512.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERDPS-xmmreg-mask.xmem32 (make-instance 'x64-VGATHERDPS-instruction
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPS-ymmreg-mask.ymem32 (make-instance 'x64-VGATHERDPS-instruction
:operands "ymmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPS-zmmreg-mask.zmem32 (make-instance 'x64-VGATHERDPS-instruction
:operands "zmmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERPF0DPD-ymem64-mask (make-instance 'x64-VGATHERPF0DPD-instruction
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0DPS-zmem32-mask (make-instance 'x64-VGATHERPF0DPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0QPD-zmem64-mask (make-instance 'x64-VGATHERPF0QPD-instruction
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0QPS-zmem32-mask (make-instance 'x64-VGATHERPF0QPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1DPD-ymem64-mask (make-instance 'x64-VGATHERPF1DPD-instruction
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1DPS-zmem32-mask (make-instance 'x64-VGATHERPF1DPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1QPD-zmem64-mask (make-instance 'x64-VGATHERPF1QPD-instruction
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1QPS-zmem32-mask (make-instance 'x64-VGATHERPF1QPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERQPD-xmmreg-mask.xmem64 (make-instance 'x64-VGATHERQPD-instruction
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPD-ymmreg-mask.ymem64 (make-instance 'x64-VGATHERQPD-instruction
:operands "ymmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPD-zmmreg-mask.zmem64 (make-instance 'x64-VGATHERQPD-instruction
:operands "zmmreg|mask,zmem64"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERQPS-xmmreg-mask.xmem32 (make-instance 'x64-VGATHERQPS-instruction
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPS-xmmreg-mask.ymem32 (make-instance 'x64-VGATHERQPS-instruction
:operands "xmmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPS-ymmreg-mask.zmem32 (make-instance 'x64-VGATHERQPS-instruction
:operands "ymmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VGETEXPPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VGETEXPPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VGETEXPPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VGETEXPPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VGETEXPPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VGETEXPPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-VGETEXPSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 43 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VGETEXPSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 43 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VGETMANTPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VGETMANTPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-VGETMANTPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VGETMANTPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VGETMANTPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-VGETMANTPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VGETMANTSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 27 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VGETMANTSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 27 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTF32X4-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.256.66.0f3a.w0 18 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTF32X4-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w0 18 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-VINSERTF32X8-instruction
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t8: evex.nds.512.66.0f3a.w0 1a /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTF64X2-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.256.66.0f3a.w1 18 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTF64X2-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.512.66.0f3a.w1 18 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-VINSERTF64X4-instruction
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w1 1a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTI32X4-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.256.66.0f3a.w0 38 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTI32X4-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w0 38 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-VINSERTI32X8-instruction
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t8: evex.nds.512.66.0f3a.w0 3a /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTI64X2-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.256.66.0f3a.w1 38 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-VINSERTI64X2-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.512.66.0f3a.w1 38 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-VINSERTI64X4-instruction
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w1 3a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8 (make-instance 'x64-VINSERTPS-instruction
:operands "xmmreg,xmmreg,xmmrm32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 21 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VMAXPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VMAXPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x64-VMAXPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VMAXPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VMAXPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x64-VMAXPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-VMAXSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VMAXSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VMINPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VMINPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x64-VMINPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VMINPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VMINPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x64-VMINPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-VMINSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VMINSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVAPD-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVAPD-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVAPD-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVAPD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVAPD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVAPD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem128-mask.xmmreg (make-instance 'x64-VMOVAPD-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem256-mask.ymmreg (make-instance 'x64-VMOVAPD-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem512-mask.zmmreg (make-instance 'x64-VMOVAPD-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVAPS-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.0f.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVAPS-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.0f.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVAPS-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.0f.w0 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVAPS-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVAPS-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVAPS-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.0f.w0 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem128-mask.xmmreg (make-instance 'x64-VMOVAPS-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem256-mask.ymmreg (make-instance 'x64-VMOVAPS-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem512-mask.zmmreg (make-instance 'x64-VMOVAPS-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVD-xmmreg.rm32 (make-instance 'x64-VMOVD-instruction
:operands "xmmreg,rm32"
:code-string "[rm:t1s: evex.128.66.0f.w0 6e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVD-rm32.xmmreg (make-instance 'x64-VMOVD-instruction
:operands "rm32,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w0 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDDUP-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VMOVDDUP-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:dup: evex.128.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDDUP-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:dup: evex.256.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDDUP-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:dup: evex.512.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQA32-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQA32-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQA32-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem128-mask.xmmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem256-mask.ymmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem512-mask.zmmreg (make-instance 'x64-VMOVDQA32-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQA64-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQA64-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQA64-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem128-mask.xmmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem256-mask.ymmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem512-mask.zmmreg (make-instance 'x64-VMOVDQA64-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU16-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQU16-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQU16-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQU16-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem128-mask.xmmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem256-mask.ymmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem512-mask.zmmreg (make-instance 'x64-VMOVDQU16-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU32-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQU32-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQU32-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQU32-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU32-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem128-mask.xmmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem256-mask.ymmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem512-mask.zmmreg (make-instance 'x64-VMOVDQU32-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQU64-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQU64-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQU64-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem128-mask.xmmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem256-mask.ymmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem512-mask.zmmreg (make-instance 'x64-VMOVDQU64-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU8-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVDQU8-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVDQU8-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVDQU8-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem128-mask.xmmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem256-mask.ymmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem512-mask.zmmreg (make-instance 'x64-VMOVDQU8-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVHLPS-xmmreg.xmmreg.xmmreg (make-instance 'x64-VMOVHLPS-instruction
:operands "xmmreg,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPD-xmmreg.xmmreg.mem64 (make-instance 'x64-VMOVHPD-instruction
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t1s: evex.nds.128.66.0f.w1 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPD-mem64.xmmreg (make-instance 'x64-VMOVHPD-instruction
:operands "mem64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 17 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPS-xmmreg.xmmreg.mem64 (make-instance 'x64-VMOVHPS-instruction
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t2: evex.nds.128.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPS-mem64.xmmreg (make-instance 'x64-VMOVHPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr:t2: evex.128.0f.w0 17 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLHPS-xmmreg.xmmreg.xmmreg (make-instance 'x64-VMOVLHPS-instruction
:operands "xmmreg,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPD-xmmreg.xmmreg.mem64 (make-instance 'x64-VMOVLPD-instruction
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t1s: evex.nds.128.66.0f.w1 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPD-mem64.xmmreg (make-instance 'x64-VMOVLPD-instruction
:operands "mem64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPS-xmmreg.xmmreg.mem64 (make-instance 'x64-VMOVLPS-instruction
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t2: evex.nds.128.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPS-mem64.xmmreg (make-instance 'x64-VMOVLPS-instruction
:operands "mem64,xmmreg"
:code-string "[mr:t2: evex.128.0f.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem128.xmmreg (make-instance 'x64-VMOVNTDQ-instruction
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem256.ymmreg (make-instance 'x64-VMOVNTDQ-instruction
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem512.zmmreg (make-instance 'x64-VMOVNTDQ-instruction
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-xmmreg.mem128 (make-instance 'x64-VMOVNTDQA-instruction
:operands "xmmreg,mem128"
:code-string "[rm:fvm: evex.128.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-ymmreg.mem256 (make-instance 'x64-VMOVNTDQA-instruction
:operands "ymmreg,mem256"
:code-string "[rm:fvm: evex.256.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-zmmreg.mem512 (make-instance 'x64-VMOVNTDQA-instruction
:operands "zmmreg,mem512"
:code-string "[rm:fvm: evex.512.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem128.xmmreg (make-instance 'x64-VMOVNTPD-instruction
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem256.ymmreg (make-instance 'x64-VMOVNTPD-instruction
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem512.zmmreg (make-instance 'x64-VMOVNTPD-instruction
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem128.xmmreg (make-instance 'x64-VMOVNTPS-instruction
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem256.ymmreg (make-instance 'x64-VMOVNTPS-instruction
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem512.zmmreg (make-instance 'x64-VMOVNTPS-instruction
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 2b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmreg.rm64 (make-instance 'x64-VMOVQ-instruction
:operands "xmmreg,rm64"
:code-string "[rm:t1s: evex.128.66.0f.w1 6e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-rm64.xmmreg (make-instance 'x64-VMOVQ-instruction
:operands "rm64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmreg.xmmrm64 (make-instance 'x64-VMOVQ-instruction
:operands "xmmreg,xmmrm64"
:code-string "[rm:t1s: evex.128.f3.0f.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmrm64.xmmreg (make-instance 'x64-VMOVQ-instruction
:operands "xmmrm64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 d6 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.mem64 (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.128.f2.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-mem64-mask.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:t1s: evex.128.f2.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.f2.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-VMOVSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[mvr: evex.nds.128.f2.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVSHDUP-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVSHDUP-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVSHDUP-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVSLDUP-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVSLDUP-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVSLDUP-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.mem32 (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.f3.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-mem32-mask.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:t1s: evex.128.f3.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.f3.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-VMOVSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[mvr: evex.nds.128.f3.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVUPD-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVUPD-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVUPD-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVUPD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVUPD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVUPD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem128-mask.xmmreg (make-instance 'x64-VMOVUPD-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem256-mask.ymmreg (make-instance 'x64-VMOVUPD-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem512-mask.zmmreg (make-instance 'x64-VMOVUPD-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VMOVUPS-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.0f.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VMOVUPS-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.0f.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VMOVUPS-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-xmmreg-mask-z.xmmreg (make-instance 'x64-VMOVUPS-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-ymmreg-mask-z.ymmreg (make-instance 'x64-VMOVUPS-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-zmmreg-mask-z.zmmreg (make-instance 'x64-VMOVUPS-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem128-mask.xmmreg (make-instance 'x64-VMOVUPS-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem256-mask.ymmreg (make-instance 'x64-VMOVUPS-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem512-mask.zmmreg (make-instance 'x64-VMOVUPS-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VMULPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VMULPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VMULPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VMULPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VMULPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VMULPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VMULSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VMULSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VORPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VORPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VORPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VORPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VORPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VORPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 56 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPABSB-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VPABSB-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSB-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VPABSB-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSB-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VPABSB-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPABSD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VPABSD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VPABSD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-VPABSD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPABSQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VPABSQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VPABSQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-VPABSQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPABSW-xmmreg-mask-z.xmmrm128 (make-instance 'x64-VPABSW-instruction
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSW-ymmreg-mask-z.ymmrm256 (make-instance 'x64-VPABSW-instruction
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSW-zmmreg-mask-z.zmmrm512 (make-instance 'x64-VPABSW-instruction
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPACKSSDW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPACKSSDW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPACKSSDW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPACKSSWB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPACKSSWB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPACKSSWB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPACKUSDW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPACKUSDW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPACKUSDW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPACKUSWB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPACKUSWB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPACKUSWB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig fc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig fc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig fc /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPADDD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPADDD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPADDD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPADDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPADDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPADDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ec /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ec /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ec /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ed /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ed /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ed /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDUSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig dc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDUSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig dc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDUSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig dc /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDUSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig dd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDUSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig dd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDUSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig dd /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPADDW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig fd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPADDW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig fd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPADDW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig fd /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x64-VPALIGNR-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPALIGNR-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x64-VPALIGNR-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPANDD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPANDD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPANDD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 db /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPANDND-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPANDND-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPANDND-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 df /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPANDNQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPANDNQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPANDNQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 df /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPANDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPANDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPANDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 db /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPAVGB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPAVGB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPAVGB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPAVGW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPAVGW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPAVGW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPBLENDMB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPBLENDMB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPBLENDMB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPBLENDMD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPBLENDMD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPBLENDMD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPBLENDMQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPBLENDMQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPBLENDMQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPBLENDMW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPBLENDMW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPBLENDMW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.xmmrm8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.128.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.xmmrm8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.256.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.xmmrm8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "zmmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.512.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg|mask|z,reg8"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg|mask|z,reg16"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTB-instruction
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg|mask|z,reg8"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg|mask|z,reg16"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTB-instruction
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg8 (make-instance 'x64-VPBROADCASTB-instruction
:operands "zmmreg|mask|z,reg8"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTB-instruction
:operands "zmmreg|mask|z,reg16"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTB-instruction
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTB-instruction
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.mem32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.mem32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "ymmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.256.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.mem32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "zmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.512.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTD-instruction
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTD-instruction
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTD-instruction
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTMB2Q-xmmreg.kreg (make-instance 'x64-VPBROADCASTMB2Q-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMB2Q-ymmreg.kreg (make-instance 'x64-VPBROADCASTMB2Q-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMB2Q-zmmreg.kreg (make-instance 'x64-VPBROADCASTMB2Q-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-xmmreg.kreg (make-instance 'x64-VPBROADCASTMW2D-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-ymmreg.kreg (make-instance 'x64-VPBROADCASTMW2D-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-zmmreg.kreg (make-instance 'x64-VPBROADCASTMW2D-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.mem64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "xmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.128.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.mem64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "ymmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.256.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.mem64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "zmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.512.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTQ-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTQ-instruction
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.xmmreg (make-instance 'x64-VPBROADCASTQ-instruction
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTQ-instruction
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.xmmrm16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.128.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.xmmrm16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.256.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.xmmrm16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "zmmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.512.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg|mask|z,reg16"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTW-instruction
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg|mask|z,reg16"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTW-instruction
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg16 (make-instance 'x64-VPBROADCASTW-instruction
:operands "zmmreg|mask|z,reg16"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg32 (make-instance 'x64-VPBROADCASTW-instruction
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg64 (make-instance 'x64-VPBROADCASTW-instruction
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPB-instruction
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPCMPB-instruction
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-VPCMPB-instruction
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VPCMPD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VPCMPD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VPCMPD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPCMPEQB-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPCMPEQB-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPCMPEQB-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-VPCMPEQD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-VPCMPEQD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-VPCMPEQD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-VPCMPEQQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-VPCMPEQQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-VPCMPEQQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPCMPEQW-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPCMPEQW-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPCMPEQW-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPCMPGTB-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPCMPGTB-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPCMPGTB-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-VPCMPGTD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-VPCMPGTD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-VPCMPGTD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-VPCMPGTQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-VPCMPGTQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-VPCMPGTQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPCMPGTW-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPCMPGTW-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPCMPGTW-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VPCMPQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VPCMPQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VPCMPQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPUB-instruction
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPCMPUB-instruction
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-VPCMPUB-instruction
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VPCMPUD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VPCMPUD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VPCMPUD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VPCMPUQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VPCMPUQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VPCMPUQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPUW-instruction
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPCMPUW-instruction
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-VPCMPUW-instruction
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-VPCMPW-instruction
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-VPCMPW-instruction
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-VPCMPW-instruction
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCOMPRESSD-mem128-mask.xmmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-mem256-mask.ymmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-mem512-mask.zmmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-ymmreg-mask-z.ymmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-zmmreg-mask-z.zmmreg (make-instance 'x64-VPCOMPRESSD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem128-mask.xmmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem256-mask.ymmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem512-mask.zmmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-xmmreg-mask-z.xmmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-ymmreg-mask-z.ymmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-zmmreg-mask-z.zmmreg (make-instance 'x64-VPCOMPRESSQ-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VPCONFLICTD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VPCONFLICTD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-VPCONFLICTD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VPCONFLICTQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VPCONFLICTQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-VPCONFLICTQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPERMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 36 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 36 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMI2B-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMI2B-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMI2B-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPERMI2D-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMI2D-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMI2D-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPERMI2PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMI2PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMI2PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPERMI2PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMI2PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMI2PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPERMI2Q-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMI2Q-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMI2Q-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMI2W-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMI2W-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMI2W-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPERMILPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPERMILPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPERMILPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPERMILPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMILPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMILPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPERMILPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPERMILPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPERMILPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPERMILPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMILPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMILPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPERMPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 01 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPERMPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 01 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPERMQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 00 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPERMQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 00 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 36 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 36 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMT2B-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMT2B-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMT2B-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPERMT2D-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMT2D-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMT2D-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPERMT2PD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMT2PD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMT2PD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPERMT2PS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPERMT2PS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPERMT2PS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPERMT2Q-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPERMT2Q-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPERMT2Q-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMT2W-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMT2W-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMT2W-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPERMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPERMW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPERMW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPERMW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXPANDD-xmmreg-mask-z.mem128 (make-instance 'x64-VPEXPANDD-instruction
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-ymmreg-mask-z.mem256 (make-instance 'x64-VPEXPANDD-instruction
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-zmmreg-mask-z.mem512 (make-instance 'x64-VPEXPANDD-instruction
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPEXPANDD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-ymmreg-mask-z.ymmreg (make-instance 'x64-VPEXPANDD-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-zmmreg-mask-z.zmmreg (make-instance 'x64-VPEXPANDD-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-xmmreg-mask-z.mem128 (make-instance 'x64-VPEXPANDQ-instruction
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-ymmreg-mask-z.mem256 (make-instance 'x64-VPEXPANDQ-instruction
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-zmmreg-mask-z.mem512 (make-instance 'x64-VPEXPANDQ-instruction
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-xmmreg-mask-z.xmmreg (make-instance 'x64-VPEXPANDQ-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-ymmreg-mask-z.ymmreg (make-instance 'x64-VPEXPANDQ-instruction
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-zmmreg-mask-z.zmmreg (make-instance 'x64-VPEXPANDQ-instruction
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXTRB-reg8.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg8,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg16.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x64-VPEXTRB-instruction
:operands "mem8,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x64-VPEXTRD-instruction
:operands "rm32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.w0 16 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x64-VPEXTRQ-instruction
:operands "rm64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.w1 16 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "mem16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg16,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg32,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-VPEXTRW-instruction
:operands "reg64,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPGATHERDD-xmmreg-mask.xmem32 (make-instance 'x64-VPGATHERDD-instruction
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDD-ymmreg-mask.ymem32 (make-instance 'x64-VPGATHERDD-instruction
:operands "ymmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDD-zmmreg-mask.zmem32 (make-instance 'x64-VPGATHERDD-instruction
:operands "zmmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-xmmreg-mask.xmem64 (make-instance 'x64-VPGATHERDQ-instruction
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-ymmreg-mask.xmem64 (make-instance 'x64-VPGATHERDQ-instruction
:operands "ymmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.256.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-zmmreg-mask.ymem64 (make-instance 'x64-VPGATHERDQ-instruction
:operands "zmmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.512.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERQD-xmmreg-mask.xmem32 (make-instance 'x64-VPGATHERQD-instruction
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQD-xmmreg-mask.ymem32 (make-instance 'x64-VPGATHERQD-instruction
:operands "xmmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQD-ymmreg-mask.zmem32 (make-instance 'x64-VPGATHERQD-instruction
:operands "ymmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-xmmreg-mask.xmem64 (make-instance 'x64-VPGATHERQQ-instruction
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-ymmreg-mask.ymem64 (make-instance 'x64-VPGATHERQQ-instruction
:operands "ymmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-zmmreg-mask.zmem64 (make-instance 'x64-VPGATHERQQ-instruction
:operands "zmmreg|mask,zmem64"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPINSRB-xmmreg.xmmreg.reg32.imm8 (make-instance 'x64-VPINSRB-instruction
:operands "xmmreg,xmmreg,reg32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRB-xmmreg.xmmreg.mem8.imm8 (make-instance 'x64-VPINSRB-instruction
:operands "xmmreg,xmmreg,mem8,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRD-xmmreg.xmmreg.rm32.imm8 (make-instance 'x64-VPINSRD-instruction
:operands "xmmreg,xmmreg,rm32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 22 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPINSRQ-xmmreg.xmmreg.rm64.imm8 (make-instance 'x64-VPINSRQ-instruction
:operands "xmmreg,xmmreg,rm64,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 22 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPINSRW-xmmreg.xmmreg.reg32.imm8 (make-instance 'x64-VPINSRW-instruction
:operands "xmmreg,xmmreg,reg32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRW-xmmreg.xmmreg.mem16.imm8 (make-instance 'x64-VPINSRW-instruction
:operands "xmmreg,xmmreg,mem16,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPLZCNTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VPLZCNTD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VPLZCNTD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-VPLZCNTD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VPLZCNTQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VPLZCNTQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-VPLZCNTQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMADD52HUQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMADD52HUQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMADD52HUQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMADD52LUQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMADD52LUQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMADD52LUQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512IFMA" "FUTURE")))

(defparameter VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMADDUBSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMADDUBSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMADDUBSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMADDWD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMADDWD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMADDWD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMAXSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMAXSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMAXSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPMAXSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPMAXSD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPMAXSD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMAXSQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMAXSQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMAXSQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMAXSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ee /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMAXSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ee /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMAXSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ee /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMAXUB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig de /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMAXUB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig de /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMAXUB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig de /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPMAXUD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPMAXUD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPMAXUD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMAXUQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMAXUQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMAXUQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMAXUW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMAXUW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMAXUW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMINSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMINSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMINSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPMINSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPMINSD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPMINSD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMINSQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMINSQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMINSQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMINSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ea /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMINSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ea /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMINSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ea /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMINUB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig da /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMINUB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig da /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMINUB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig da /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPMINUD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPMINUD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPMINUD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMINUQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMINUQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMINUQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMINUW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMINUW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMINUW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.xmmreg (make-instance 'x64-VPMOVB2M-instruction
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.ymmreg (make-instance 'x64-VPMOVB2M-instruction
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.zmmreg (make-instance 'x64-VPMOVB2M-instruction
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVD2M-kreg.xmmreg (make-instance 'x64-VPMOVD2M-instruction
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVD2M-kreg.ymmreg (make-instance 'x64-VPMOVD2M-instruction
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVD2M-kreg.zmmreg (make-instance 'x64-VPMOVD2M-instruction
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVDB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVDB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVDB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem32-mask.xmmreg (make-instance 'x64-VPMOVDB-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem64-mask.ymmreg (make-instance 'x64-VPMOVDB-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem128-mask.zmmreg (make-instance 'x64-VPMOVDB-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVDW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVDW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVDW-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem64-mask.xmmreg (make-instance 'x64-VPMOVDW-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem128-mask.ymmreg (make-instance 'x64-VPMOVDW-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem256-mask.zmmreg (make-instance 'x64-VPMOVDW-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVM2B-xmmreg.kreg (make-instance 'x64-VPMOVM2B-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2B-ymmreg.kreg (make-instance 'x64-VPMOVM2B-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2B-zmmreg.kreg (make-instance 'x64-VPMOVM2B-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVM2D-xmmreg.kreg (make-instance 'x64-VPMOVM2D-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2D-ymmreg.kreg (make-instance 'x64-VPMOVM2D-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2D-zmmreg.kreg (make-instance 'x64-VPMOVM2D-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-xmmreg.kreg (make-instance 'x64-VPMOVM2Q-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-ymmreg.kreg (make-instance 'x64-VPMOVM2Q-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-zmmreg.kreg (make-instance 'x64-VPMOVM2Q-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2W-xmmreg.kreg (make-instance 'x64-VPMOVM2W-instruction
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2W-ymmreg.kreg (make-instance 'x64-VPMOVM2W-instruction
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2W-zmmreg.kreg (make-instance 'x64-VPMOVM2W-instruction
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVQ2M-kreg.xmmreg (make-instance 'x64-VPMOVQ2M-instruction
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVQ2M-kreg.ymmreg (make-instance 'x64-VPMOVQ2M-instruction
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVQ2M-kreg.zmmreg (make-instance 'x64-VPMOVQ2M-instruction
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVQB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVQB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVQB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem16-mask.xmmreg (make-instance 'x64-VPMOVQB-instruction
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem32-mask.ymmreg (make-instance 'x64-VPMOVQB-instruction
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem64-mask.zmmreg (make-instance 'x64-VPMOVQB-instruction
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVQD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVQD-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVQD-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem64-mask.xmmreg (make-instance 'x64-VPMOVQD-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem128-mask.ymmreg (make-instance 'x64-VPMOVQD-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem256-mask.zmmreg (make-instance 'x64-VPMOVQD-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVQW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVQW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVQW-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem32-mask.xmmreg (make-instance 'x64-VPMOVQW-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem64-mask.ymmreg (make-instance 'x64-VPMOVQW-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem128-mask.zmmreg (make-instance 'x64-VPMOVQW-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem32-mask.xmmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem64-mask.ymmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem128-mask.zmmreg (make-instance 'x64-VPMOVSDB-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem64-mask.xmmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem128-mask.ymmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem256-mask.zmmreg (make-instance 'x64-VPMOVSDW-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem16-mask.xmmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem32-mask.ymmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem64-mask.zmmreg (make-instance 'x64-VPMOVSQB-instruction
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem64-mask.xmmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem128-mask.ymmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem256-mask.zmmreg (make-instance 'x64-VPMOVSQD-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem32-mask.xmmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem64-mask.ymmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem128-mask.zmmreg (make-instance 'x64-VPMOVSQW-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSWB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem64-mask.xmmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem128-mask.ymmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem256-mask.zmmreg (make-instance 'x64-VPMOVSWB-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVSXBD-instruction
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXBD-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVSXBD-instruction
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x64-VPMOVSXBQ-instruction
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:ovm: evex.128.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVSXBQ-instruction
:operands "ymmreg|mask|z,xmmrm32"
:code-string "[rm:ovm: evex.256.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXBQ-instruction
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:ovm: evex.512.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXBW-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVSXBW-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVSXBW-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXDQ-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVSXDQ-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVSXDQ-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXWD-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVSXWD-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVSXWD-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVSXWQ-instruction
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVSXWQ-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVSXWQ-instruction
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem32-mask.xmmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem64-mask.ymmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem128-mask.zmmreg (make-instance 'x64-VPMOVUSDB-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem64-mask.xmmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem128-mask.ymmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem256-mask.zmmreg (make-instance 'x64-VPMOVUSDW-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem16-mask.xmmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem32-mask.ymmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem64-mask.zmmreg (make-instance 'x64-VPMOVUSQB-instruction
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem64-mask.xmmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem128-mask.ymmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem256-mask.zmmreg (make-instance 'x64-VPMOVUSQD-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem32-mask.xmmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem64-mask.ymmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem128-mask.zmmreg (make-instance 'x64-VPMOVUSQW-instruction
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSWB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem64-mask.xmmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem128-mask.ymmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem256-mask.zmmreg (make-instance 'x64-VPMOVUSWB-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.xmmreg (make-instance 'x64-VPMOVW2M-instruction
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.ymmreg (make-instance 'x64-VPMOVW2M-instruction
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.zmmreg (make-instance 'x64-VPMOVW2M-instruction
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-xmmreg-mask-z.xmmreg (make-instance 'x64-VPMOVWB-instruction
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-xmmreg-mask-z.ymmreg (make-instance 'x64-VPMOVWB-instruction
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-ymmreg-mask-z.zmmreg (make-instance 'x64-VPMOVWB-instruction
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem64-mask.xmmreg (make-instance 'x64-VPMOVWB-instruction
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem128-mask.ymmreg (make-instance 'x64-VPMOVWB-instruction
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem256-mask.zmmreg (make-instance 'x64-VPMOVWB-instruction
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVZXBD-instruction
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXBD-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVZXBD-instruction
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x64-VPMOVZXBQ-instruction
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:ovm: evex.128.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVZXBQ-instruction
:operands "ymmreg|mask|z,xmmrm32"
:code-string "[rm:ovm: evex.256.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXBQ-instruction
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:ovm: evex.512.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXBW-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVZXBW-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVZXBW-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVZXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXDQ-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVZXDQ-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVZXDQ-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXWD-instruction
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVZXWD-instruction
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x64-VPMOVZXWD-instruction
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x64-VPMOVZXWQ-instruction
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x64-VPMOVZXWQ-instruction
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x64-VPMOVZXWQ-instruction
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMULDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMULDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMULDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMULHRSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMULHRSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMULHRSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMULHUW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMULHUW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMULHUW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMULHW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMULHW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMULHW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPMULLD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPMULLD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPMULLD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMULLQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMULLQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMULLQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPMULLW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPMULLW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPMULLW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMULTISHIFTQB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMULTISHIFTQB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMULTISHIFTQB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPMULUDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPMULUDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPMULUDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPORD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPORD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPORD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPORQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPORQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPORQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPROLD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPROLD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPROLD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPROLQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPROLQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPROLQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPROLVD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPROLVD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPROLVD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPROLVQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPROLVQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPROLVQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPRORD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPRORD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPRORD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPRORQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPRORQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPRORQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPRORVD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPRORVD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPRORVD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPRORVQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPRORVQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPRORVQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSADBW-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-VPSADBW-instruction
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSADBW-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-VPSADBW-instruction
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSADBW-zmmreg.zmmreg.zmmrm512 (make-instance 'x64-VPSADBW-instruction
:operands "zmmreg,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSCATTERDD-xmem32-mask.xmmreg (make-instance 'x64-VPSCATTERDD-instruction
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDD-ymem32-mask.ymmreg (make-instance 'x64-VPSCATTERDD-instruction
:operands "ymem32|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDD-zmem32-mask.zmmreg (make-instance 'x64-VPSCATTERDD-instruction
:operands "zmem32|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-xmem64-mask.xmmreg (make-instance 'x64-VPSCATTERDQ-instruction
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-xmem64-mask.ymmreg (make-instance 'x64-VPSCATTERDQ-instruction
:operands "xmem64|mask,ymmreg"
:code-string "[mr:t1s: vsibx evex.256.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-ymem64-mask.zmmreg (make-instance 'x64-VPSCATTERDQ-instruction
:operands "ymem64|mask,zmmreg"
:code-string "[mr:t1s: vsiby evex.512.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-xmem32-mask.xmmreg (make-instance 'x64-VPSCATTERQD-instruction
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-ymem32-mask.xmmreg (make-instance 'x64-VPSCATTERQD-instruction
:operands "ymem32|mask,xmmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-zmem32-mask.ymmreg (make-instance 'x64-VPSCATTERQD-instruction
:operands "zmem32|mask,ymmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-xmem64-mask.xmmreg (make-instance 'x64-VPSCATTERQQ-instruction
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-ymem64-mask.ymmreg (make-instance 'x64-VPSCATTERQQ-instruction
:operands "ymem64|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-zmem64-mask.zmmreg (make-instance 'x64-VPSCATTERQQ-instruction
:operands "zmem64|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSHUFB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSHUFB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSHUFB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPSHUFD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPSHUFD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPSHUFD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-VPSHUFHW-instruction
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[rmi:fvm: evex.128.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-VPSHUFHW-instruction
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[rmi:fvm: evex.256.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-VPSHUFHW-instruction
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[rmi:fvm: evex.512.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-VPSHUFLW-instruction
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[rmi:fvm: evex.128.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-VPSHUFLW-instruction
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[rmi:fvm: evex.256.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-VPSHUFLW-instruction
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[rmi:fvm: evex.512.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSLLD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSLLD-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSLLD-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPSLLD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPSLLD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPSLLD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPSLLDQ-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPSLLDQ-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x64-VPSLLDQ-instruction
:operands "zmmreg,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSLLQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSLLQ-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSLLQ-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPSLLQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPSLLQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPSLLQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPSLLVD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPSLLVD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPSLLVD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPSLLVQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPSLLVQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPSLLVQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSLLVW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSLLVW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSLLVW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSLLW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSLLW-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSLLW-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-VPSLLW-instruction
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-VPSLLW-instruction
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-VPSLLW-instruction
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRAD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRAD-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRAD-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPSRAD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPSRAD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPSRAD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRAQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRAQ-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRAQ-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPSRAQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPSRAQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPSRAQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPSRAVD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPSRAVD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPSRAVD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPSRAVQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPSRAVQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPSRAVQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRAVW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSRAVW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSRAVW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRAW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRAW-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRAW-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-VPSRAW-instruction
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-VPSRAW-instruction
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-VPSRAW-instruction
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRLD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRLD-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRLD-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VPSRLD-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VPSRLD-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-VPSRLD-instruction
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-VPSRLDQ-instruction
:operands "xmmreg,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-VPSRLDQ-instruction
:operands "ymmreg,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x64-VPSRLDQ-instruction
:operands "zmmreg,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRLQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRLQ-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRLQ-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VPSRLQ-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VPSRLQ-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-VPSRLQ-instruction
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPSRLVD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPSRLVD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPSRLVD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPSRLVQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPSRLVQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPSRLVQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRLVW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSRLVW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSRLVW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSRLW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-VPSRLW-instruction
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-VPSRLW-instruction
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-VPSRLW-instruction
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-VPSRLW-instruction
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-VPSRLW-instruction
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPSUBD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPSUBD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPSUBD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPSUBQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPSUBQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPSUBQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBUSB-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBUSB-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBUSB-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBUSW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBUSW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBUSW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPSUBW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPSUBW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPSUBW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VPTERNLOGD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VPTERNLOGD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VPTERNLOGD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VPTERNLOGQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VPTERNLOGQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VPTERNLOGQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPTESTMB-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPTESTMB-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPTESTMB-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-VPTESTMD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-VPTESTMD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-VPTESTMD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-VPTESTMQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-VPTESTMQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-VPTESTMQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPTESTMW-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPTESTMW-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPTESTMW-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPTESTNMB-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPTESTNMB-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPTESTNMB-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-VPTESTNMD-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-VPTESTNMD-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-VPTESTNMD-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-VPTESTNMQ-instruction
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-VPTESTNMQ-instruction
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-VPTESTNMQ-instruction
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-VPTESTNMW-instruction
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-VPTESTNMW-instruction
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-VPTESTNMW-instruction
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPUNPCKHBW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPUNPCKHBW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPUNPCKHBW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPUNPCKHDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPUNPCKHDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPUNPCKHDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPUNPCKHQDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPUNPCKHQDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPUNPCKHQDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPUNPCKHWD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPUNPCKHWD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPUNPCKHWD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPUNPCKLBW-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPUNPCKLBW-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPUNPCKLBW-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPUNPCKLDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPUNPCKLDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPUNPCKLDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPUNPCKLQDQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPUNPCKLQDQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPUNPCKLQDQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-VPUNPCKLWD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-VPUNPCKLWD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-VPUNPCKLWD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VPXORD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VPXORD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VPXORD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VPXORQ-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VPXORQ-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VPXORQ-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VRANGEPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VRANGEPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-VRANGEPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VRANGEPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VRANGEPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-VRANGEPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VRANGESD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 51 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VRANGESS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 51 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRCP14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VRCP14PD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VRCP14PD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-VRCP14PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VRCP14PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VRCP14PS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-VRCP14PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x64-VRCP14SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 4d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x64-VRCP14SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 4d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VRCP28PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 ca /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VRCP28PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 ca /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-VRCP28SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 cb /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VRCP28SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 cb /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VREDUCEPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VREDUCEPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-VREDUCEPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VREDUCEPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VREDUCEPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-VREDUCEPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VREDUCESD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 57 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VREDUCESS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 57 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-VRNDSCALEPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-VRNDSCALEPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-VRNDSCALEPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-VRNDSCALEPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-VRNDSCALEPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-VRNDSCALEPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-VRNDSCALESD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 0b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-VRNDSCALESS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 0a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VRSQRT14PD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VRSQRT14PD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-VRSQRT14PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VRSQRT14PS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VRSQRT14PS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-VRSQRT14PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x64-VRSQRT14SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 4f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x64-VRSQRT14SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 4f /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-VRSQRT28PD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 cc /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-VRSQRT28PS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 cc /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-VRSQRT28SD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 cd /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-VRSQRT28SS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 cd /r ]"
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VSCALEFPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VSCALEFPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VSCALEFPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VSCALEFPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VSCALEFPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VSCALEFPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VSCALEFSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VSCALEFSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-xmem64-mask.xmmreg (make-instance 'x64-VSCATTERDPD-instruction
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-xmem64-mask.ymmreg (make-instance 'x64-VSCATTERDPD-instruction
:operands "xmem64|mask,ymmreg"
:code-string "[mr:t1s: vsibx evex.256.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-ymem64-mask.zmmreg (make-instance 'x64-VSCATTERDPD-instruction
:operands "ymem64|mask,zmmreg"
:code-string "[mr:t1s: vsiby evex.512.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-xmem32-mask.xmmreg (make-instance 'x64-VSCATTERDPS-instruction
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-ymem32-mask.ymmreg (make-instance 'x64-VSCATTERDPS-instruction
:operands "ymem32|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-zmem32-mask.zmmreg (make-instance 'x64-VSCATTERDPS-instruction
:operands "zmem32|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERPF0DPD-ymem64-mask (make-instance 'x64-VSCATTERPF0DPD-instruction
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0DPS-zmem32-mask (make-instance 'x64-VSCATTERPF0DPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0QPD-zmem64-mask (make-instance 'x64-VSCATTERPF0QPD-instruction
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0QPS-zmem32-mask (make-instance 'x64-VSCATTERPF0QPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1DPD-ymem64-mask (make-instance 'x64-VSCATTERPF1DPD-instruction
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1DPS-zmem32-mask (make-instance 'x64-VSCATTERPF1DPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1QPD-zmem64-mask (make-instance 'x64-VSCATTERPF1QPD-instruction
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1QPS-zmem32-mask (make-instance 'x64-VSCATTERPF1QPS-instruction
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERQPD-xmem64-mask.xmmreg (make-instance 'x64-VSCATTERQPD-instruction
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPD-ymem64-mask.ymmreg (make-instance 'x64-VSCATTERQPD-instruction
:operands "ymem64|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPD-zmem64-mask.zmmreg (make-instance 'x64-VSCATTERQPD-instruction
:operands "zmem64|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-xmem32-mask.xmmreg (make-instance 'x64-VSCATTERQPS-instruction
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-ymem32-mask.xmmreg (make-instance 'x64-VSCATTERQPS-instruction
:operands "ymem32|mask,xmmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-zmem32-mask.ymmreg (make-instance 'x64-VSCATTERQPS-instruction
:operands "zmem32|mask,ymmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VSHUFF32X4-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 23 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VSHUFF32X4-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 23 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VSHUFF64X2-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 23 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VSHUFF64X2-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 23 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VSHUFI32X4-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 43 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VSHUFI32X4-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 43 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VSHUFI64X2-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 43 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VSHUFI64X2-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 43 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-VSHUFPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-VSHUFPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-VSHUFPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-VSHUFPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-VSHUFPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-VSHUFPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-VSQRTPD-instruction
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-VSQRTPD-instruction
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-VSQRTPD-instruction
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-VSQRTPS-instruction
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-VSQRTPS-instruction
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-VSQRTPS-instruction
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VSQRTSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VSQRTSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VSUBPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VSUBPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-VSUBPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VSUBPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VSUBPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-VSUBPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-VSUBSD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-VSUBSS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUCOMISD-xmmreg.xmmrm64-sae (make-instance 'x64-VUCOMISD-instruction
:operands "xmmreg,xmmrm64|sae"
:code-string "[rm:t1s: evex.128.66.0f.w1 2e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUCOMISS-xmmreg.xmmrm32-sae (make-instance 'x64-VUCOMISS-instruction
:operands "xmmreg,xmmrm32|sae"
:code-string "[rm:t1s: evex.128.0f.w0 2e /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VUNPCKHPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VUNPCKHPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VUNPCKHPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VUNPCKHPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VUNPCKHPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VUNPCKHPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VUNPCKLPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VUNPCKLPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VUNPCKLPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VUNPCKLPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VUNPCKLPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VUNPCKLPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-VXORPD-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-VXORPD-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-VXORPD-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-VXORPS-instruction
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-VXORPS-instruction
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-VXORPS-instruction
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 57 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter CLFLUSHOPT-mem (make-instance 'x64-CLFLUSHOPT-instruction
:operands "mem"
:code-string "[m: 66 0f ae /7]"
:arch-flags (list "FUTURE")))

(defparameter HINT_NOP0-rm16 (make-instance 'x64-HINT_NOP0-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP0-rm32 (make-instance 'x64-HINT_NOP0-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP0-rm64 (make-instance 'x64-HINT_NOP0-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP1-rm16 (make-instance 'x64-HINT_NOP1-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP1-rm32 (make-instance 'x64-HINT_NOP1-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP1-rm64 (make-instance 'x64-HINT_NOP1-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP2-rm16 (make-instance 'x64-HINT_NOP2-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP2-rm32 (make-instance 'x64-HINT_NOP2-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP2-rm64 (make-instance 'x64-HINT_NOP2-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP3-rm16 (make-instance 'x64-HINT_NOP3-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP3-rm32 (make-instance 'x64-HINT_NOP3-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP3-rm64 (make-instance 'x64-HINT_NOP3-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP4-rm16 (make-instance 'x64-HINT_NOP4-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP4-rm32 (make-instance 'x64-HINT_NOP4-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP4-rm64 (make-instance 'x64-HINT_NOP4-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP5-rm16 (make-instance 'x64-HINT_NOP5-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP5-rm32 (make-instance 'x64-HINT_NOP5-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP5-rm64 (make-instance 'x64-HINT_NOP5-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP6-rm16 (make-instance 'x64-HINT_NOP6-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP6-rm32 (make-instance 'x64-HINT_NOP6-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP6-rm64 (make-instance 'x64-HINT_NOP6-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP7-rm16 (make-instance 'x64-HINT_NOP7-instruction
:operands "rm16"
:code-string "[m: o16 0f 18 /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP7-rm32 (make-instance 'x64-HINT_NOP7-instruction
:operands "rm32"
:code-string "[m: o32 0f 18 /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP7-rm64 (make-instance 'x64-HINT_NOP7-instruction
:operands "rm64"
:code-string "[m: o64 0f 18 /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP8-rm16 (make-instance 'x64-HINT_NOP8-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP8-rm32 (make-instance 'x64-HINT_NOP8-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP8-rm64 (make-instance 'x64-HINT_NOP8-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP9-rm16 (make-instance 'x64-HINT_NOP9-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP9-rm32 (make-instance 'x64-HINT_NOP9-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP9-rm64 (make-instance 'x64-HINT_NOP9-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP10-rm16 (make-instance 'x64-HINT_NOP10-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP10-rm32 (make-instance 'x64-HINT_NOP10-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP10-rm64 (make-instance 'x64-HINT_NOP10-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP11-rm16 (make-instance 'x64-HINT_NOP11-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP11-rm32 (make-instance 'x64-HINT_NOP11-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP11-rm64 (make-instance 'x64-HINT_NOP11-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP12-rm16 (make-instance 'x64-HINT_NOP12-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP12-rm32 (make-instance 'x64-HINT_NOP12-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP12-rm64 (make-instance 'x64-HINT_NOP12-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP13-rm16 (make-instance 'x64-HINT_NOP13-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP13-rm32 (make-instance 'x64-HINT_NOP13-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP13-rm64 (make-instance 'x64-HINT_NOP13-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP14-rm16 (make-instance 'x64-HINT_NOP14-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP14-rm32 (make-instance 'x64-HINT_NOP14-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP14-rm64 (make-instance 'x64-HINT_NOP14-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP15-rm16 (make-instance 'x64-HINT_NOP15-instruction
:operands "rm16"
:code-string "[m: o16 0f 19 /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP15-rm32 (make-instance 'x64-HINT_NOP15-instruction
:operands "rm32"
:code-string "[m: o32 0f 19 /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP15-rm64 (make-instance 'x64-HINT_NOP15-instruction
:operands "rm64"
:code-string "[m: o64 0f 19 /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP16-rm16 (make-instance 'x64-HINT_NOP16-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP16-rm32 (make-instance 'x64-HINT_NOP16-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP16-rm64 (make-instance 'x64-HINT_NOP16-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP17-rm16 (make-instance 'x64-HINT_NOP17-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP17-rm32 (make-instance 'x64-HINT_NOP17-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP17-rm64 (make-instance 'x64-HINT_NOP17-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP18-rm16 (make-instance 'x64-HINT_NOP18-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP18-rm32 (make-instance 'x64-HINT_NOP18-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP18-rm64 (make-instance 'x64-HINT_NOP18-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP19-rm16 (make-instance 'x64-HINT_NOP19-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP19-rm32 (make-instance 'x64-HINT_NOP19-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP19-rm64 (make-instance 'x64-HINT_NOP19-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP20-rm16 (make-instance 'x64-HINT_NOP20-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP20-rm32 (make-instance 'x64-HINT_NOP20-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP20-rm64 (make-instance 'x64-HINT_NOP20-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP21-rm16 (make-instance 'x64-HINT_NOP21-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP21-rm32 (make-instance 'x64-HINT_NOP21-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP21-rm64 (make-instance 'x64-HINT_NOP21-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP22-rm16 (make-instance 'x64-HINT_NOP22-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP22-rm32 (make-instance 'x64-HINT_NOP22-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP22-rm64 (make-instance 'x64-HINT_NOP22-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP23-rm16 (make-instance 'x64-HINT_NOP23-instruction
:operands "rm16"
:code-string "[m: o16 0f 1a /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP23-rm32 (make-instance 'x64-HINT_NOP23-instruction
:operands "rm32"
:code-string "[m: o32 0f 1a /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP23-rm64 (make-instance 'x64-HINT_NOP23-instruction
:operands "rm64"
:code-string "[m: o64 0f 1a /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP24-rm16 (make-instance 'x64-HINT_NOP24-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP24-rm32 (make-instance 'x64-HINT_NOP24-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP24-rm64 (make-instance 'x64-HINT_NOP24-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP25-rm16 (make-instance 'x64-HINT_NOP25-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP25-rm32 (make-instance 'x64-HINT_NOP25-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP25-rm64 (make-instance 'x64-HINT_NOP25-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP26-rm16 (make-instance 'x64-HINT_NOP26-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP26-rm32 (make-instance 'x64-HINT_NOP26-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP26-rm64 (make-instance 'x64-HINT_NOP26-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP27-rm16 (make-instance 'x64-HINT_NOP27-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP27-rm32 (make-instance 'x64-HINT_NOP27-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP27-rm64 (make-instance 'x64-HINT_NOP27-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP28-rm16 (make-instance 'x64-HINT_NOP28-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP28-rm32 (make-instance 'x64-HINT_NOP28-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP28-rm64 (make-instance 'x64-HINT_NOP28-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP29-rm16 (make-instance 'x64-HINT_NOP29-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP29-rm32 (make-instance 'x64-HINT_NOP29-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP29-rm64 (make-instance 'x64-HINT_NOP29-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP30-rm16 (make-instance 'x64-HINT_NOP30-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP30-rm32 (make-instance 'x64-HINT_NOP30-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP30-rm64 (make-instance 'x64-HINT_NOP30-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP31-rm16 (make-instance 'x64-HINT_NOP31-instruction
:operands "rm16"
:code-string "[m: o16 0f 1b /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP31-rm32 (make-instance 'x64-HINT_NOP31-instruction
:operands "rm32"
:code-string "[m: o32 0f 1b /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP31-rm64 (make-instance 'x64-HINT_NOP31-instruction
:operands "rm64"
:code-string "[m: o64 0f 1b /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP32-rm16 (make-instance 'x64-HINT_NOP32-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP32-rm32 (make-instance 'x64-HINT_NOP32-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP32-rm64 (make-instance 'x64-HINT_NOP32-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP33-rm16 (make-instance 'x64-HINT_NOP33-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP33-rm32 (make-instance 'x64-HINT_NOP33-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP33-rm64 (make-instance 'x64-HINT_NOP33-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP34-rm16 (make-instance 'x64-HINT_NOP34-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP34-rm32 (make-instance 'x64-HINT_NOP34-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP34-rm64 (make-instance 'x64-HINT_NOP34-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP35-rm16 (make-instance 'x64-HINT_NOP35-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP35-rm32 (make-instance 'x64-HINT_NOP35-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP35-rm64 (make-instance 'x64-HINT_NOP35-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP36-rm16 (make-instance 'x64-HINT_NOP36-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP36-rm32 (make-instance 'x64-HINT_NOP36-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP36-rm64 (make-instance 'x64-HINT_NOP36-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP37-rm16 (make-instance 'x64-HINT_NOP37-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP37-rm32 (make-instance 'x64-HINT_NOP37-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP37-rm64 (make-instance 'x64-HINT_NOP37-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP38-rm16 (make-instance 'x64-HINT_NOP38-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP38-rm32 (make-instance 'x64-HINT_NOP38-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP38-rm64 (make-instance 'x64-HINT_NOP38-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP39-rm16 (make-instance 'x64-HINT_NOP39-instruction
:operands "rm16"
:code-string "[m: o16 0f 1c /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP39-rm32 (make-instance 'x64-HINT_NOP39-instruction
:operands "rm32"
:code-string "[m: o32 0f 1c /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP39-rm64 (make-instance 'x64-HINT_NOP39-instruction
:operands "rm64"
:code-string "[m: o64 0f 1c /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP40-rm16 (make-instance 'x64-HINT_NOP40-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP40-rm32 (make-instance 'x64-HINT_NOP40-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP40-rm64 (make-instance 'x64-HINT_NOP40-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP41-rm16 (make-instance 'x64-HINT_NOP41-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP41-rm32 (make-instance 'x64-HINT_NOP41-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP41-rm64 (make-instance 'x64-HINT_NOP41-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP42-rm16 (make-instance 'x64-HINT_NOP42-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP42-rm32 (make-instance 'x64-HINT_NOP42-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP42-rm64 (make-instance 'x64-HINT_NOP42-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP43-rm16 (make-instance 'x64-HINT_NOP43-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP43-rm32 (make-instance 'x64-HINT_NOP43-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP43-rm64 (make-instance 'x64-HINT_NOP43-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP44-rm16 (make-instance 'x64-HINT_NOP44-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP44-rm32 (make-instance 'x64-HINT_NOP44-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP44-rm64 (make-instance 'x64-HINT_NOP44-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP45-rm16 (make-instance 'x64-HINT_NOP45-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP45-rm32 (make-instance 'x64-HINT_NOP45-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP45-rm64 (make-instance 'x64-HINT_NOP45-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP46-rm16 (make-instance 'x64-HINT_NOP46-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP46-rm32 (make-instance 'x64-HINT_NOP46-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP46-rm64 (make-instance 'x64-HINT_NOP46-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP47-rm16 (make-instance 'x64-HINT_NOP47-instruction
:operands "rm16"
:code-string "[m: o16 0f 1d /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP47-rm32 (make-instance 'x64-HINT_NOP47-instruction
:operands "rm32"
:code-string "[m: o32 0f 1d /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP47-rm64 (make-instance 'x64-HINT_NOP47-instruction
:operands "rm64"
:code-string "[m: o64 0f 1d /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP48-rm16 (make-instance 'x64-HINT_NOP48-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP48-rm32 (make-instance 'x64-HINT_NOP48-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP48-rm64 (make-instance 'x64-HINT_NOP48-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP49-rm16 (make-instance 'x64-HINT_NOP49-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP49-rm32 (make-instance 'x64-HINT_NOP49-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP49-rm64 (make-instance 'x64-HINT_NOP49-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP50-rm16 (make-instance 'x64-HINT_NOP50-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP50-rm32 (make-instance 'x64-HINT_NOP50-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP50-rm64 (make-instance 'x64-HINT_NOP50-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP51-rm16 (make-instance 'x64-HINT_NOP51-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP51-rm32 (make-instance 'x64-HINT_NOP51-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP51-rm64 (make-instance 'x64-HINT_NOP51-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP52-rm16 (make-instance 'x64-HINT_NOP52-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP52-rm32 (make-instance 'x64-HINT_NOP52-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP52-rm64 (make-instance 'x64-HINT_NOP52-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP53-rm16 (make-instance 'x64-HINT_NOP53-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP53-rm32 (make-instance 'x64-HINT_NOP53-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP53-rm64 (make-instance 'x64-HINT_NOP53-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP54-rm16 (make-instance 'x64-HINT_NOP54-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP54-rm32 (make-instance 'x64-HINT_NOP54-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP54-rm64 (make-instance 'x64-HINT_NOP54-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP55-rm16 (make-instance 'x64-HINT_NOP55-instruction
:operands "rm16"
:code-string "[m: o16 0f 1e /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP55-rm32 (make-instance 'x64-HINT_NOP55-instruction
:operands "rm32"
:code-string "[m: o32 0f 1e /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP55-rm64 (make-instance 'x64-HINT_NOP55-instruction
:operands "rm64"
:code-string "[m: o64 0f 1e /7]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP56-rm16 (make-instance 'x64-HINT_NOP56-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP56-rm32 (make-instance 'x64-HINT_NOP56-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /0]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP56-rm64 (make-instance 'x64-HINT_NOP56-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /0]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP57-rm16 (make-instance 'x64-HINT_NOP57-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP57-rm32 (make-instance 'x64-HINT_NOP57-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /1]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP57-rm64 (make-instance 'x64-HINT_NOP57-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /1]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP58-rm16 (make-instance 'x64-HINT_NOP58-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP58-rm32 (make-instance 'x64-HINT_NOP58-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /2]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP58-rm64 (make-instance 'x64-HINT_NOP58-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /2]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP59-rm16 (make-instance 'x64-HINT_NOP59-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP59-rm32 (make-instance 'x64-HINT_NOP59-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /3]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP59-rm64 (make-instance 'x64-HINT_NOP59-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /3]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP60-rm16 (make-instance 'x64-HINT_NOP60-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP60-rm32 (make-instance 'x64-HINT_NOP60-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /4]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP60-rm64 (make-instance 'x64-HINT_NOP60-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /4]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP61-rm16 (make-instance 'x64-HINT_NOP61-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP61-rm32 (make-instance 'x64-HINT_NOP61-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /5]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP61-rm64 (make-instance 'x64-HINT_NOP61-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /5]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP62-rm16 (make-instance 'x64-HINT_NOP62-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP62-rm32 (make-instance 'x64-HINT_NOP62-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /6]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP62-rm64 (make-instance 'x64-HINT_NOP62-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /6]"
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP63-rm16 (make-instance 'x64-HINT_NOP63-instruction
:operands "rm16"
:code-string "[m: o16 0f 1f /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP63-rm32 (make-instance 'x64-HINT_NOP63-instruction
:operands "rm32"
:code-string "[m: o32 0f 1f /7]"
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP63-rm64 (make-instance 'x64-HINT_NOP63-instruction
:operands "rm64"
:code-string "[m: o64 0f 1f /7]"
:arch-flags (list "X64" "UNDOC")))