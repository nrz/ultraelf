;;;; ultraELF 0.0.1
;;;
;;; ultraELF x86-64 assembler, disassembler and metamorphic engine.
;;; ultraELF packs and reconstructs ELF executables, maintaining original functionality.

(in-package :ultraelf)

(defparameter x64-instruction-variant-DB-ignore (make-instance 'x86-asm-instruction
:name "DB"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DW-ignore (make-instance 'x86-asm-instruction
:name "DW"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DD-ignore (make-instance 'x86-asm-instruction
:name "DD"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DQ-ignore (make-instance 'x86-asm-instruction
:name "DQ"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DT-ignore (make-instance 'x86-asm-instruction
:name "DT"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DO-ignore (make-instance 'x86-asm-instruction
:name "DO"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DY-ignore (make-instance 'x86-asm-instruction
:name "DY"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-DZ-ignore (make-instance 'x86-asm-instruction
:name "DZ"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESB-imm (make-instance 'x86-asm-instruction
:name "RESB"
:operands "imm"
:code-string "[ resb]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RESW-ignore (make-instance 'x86-asm-instruction
:name "RESW"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESD-ignore (make-instance 'x86-asm-instruction
:name "RESD"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESQ-ignore (make-instance 'x86-asm-instruction
:name "RESQ"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-REST-ignore (make-instance 'x86-asm-instruction
:name "REST"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESO-ignore (make-instance 'x86-asm-instruction
:name "RESO"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESY-ignore (make-instance 'x86-asm-instruction
:name "RESY"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-RESZ-ignore (make-instance 'x86-asm-instruction
:name "RESZ"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.reg8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,reg8"
:code-string "[mr: hle 10 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg8.reg8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg8,reg8"
:code-string "[mr: 10 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.reg16 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,reg16"
:code-string "[mr: hle o16 11 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg16.reg16 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg16,reg16"
:code-string "[mr: o16 11 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.reg32 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,reg32"
:code-string "[mr: hle o32 11 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg32.reg32 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg32,reg32"
:code-string "[mr: o32 11 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.reg64 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,reg64"
:code-string "[mr: hle o64 11 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg64.reg64 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg64,reg64"
:code-string "[mr: o64 11 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg8.mem (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg8,mem"
:code-string "[rm: 12 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg8.reg8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg8,reg8"
:code-string "[rm: 12 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg16.mem (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg16,mem"
:code-string "[rm: o16 13 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg16.reg16 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg16,reg16"
:code-string "[rm: o16 13 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg32.mem (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg32,mem"
:code-string "[rm: o32 13 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg32.reg32 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg32,reg32"
:code-string "[rm: o32 13 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg64.mem (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg64,mem"
:code-string "[rm: o64 13 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg64.reg64 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg64,reg64"
:code-string "[rm: o64 13 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm16.imm8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm32.imm8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm64.imm8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /2 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_al.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_al,imm"
:code-string "[-i: 14 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_ax.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_ax,imm"
:code-string "[-i: o16 15 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_eax.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_eax,imm"
:code-string "[-i: o32 15 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /2 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-reg_rax.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "reg_rax,imm"
:code-string "[-i: o64 15 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm8.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm8,imm"
:code-string "[mi: hle 80 /2 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm16.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /2 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm32.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /2 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /2 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-rm64.imm (make-instance 'x86-asm-instruction
:name "ADC"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /2 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.imm8 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,imm8"
:code-string "[mi: hle 80 /2 ib]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /2 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.imm16 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /2 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /2 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADC-mem.imm32 (make-instance 'x86-asm-instruction
:name "ADC"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /2 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.reg8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,reg8"
:code-string "[mr: hle 00 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg8.reg8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg8,reg8"
:code-string "[mr: 00 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.reg16 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,reg16"
:code-string "[mr: hle o16 01 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg16.reg16 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg16,reg16"
:code-string "[mr: o16 01 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.reg32 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,reg32"
:code-string "[mr: hle o32 01 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg32.reg32 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg32,reg32"
:code-string "[mr: o32 01 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.reg64 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,reg64"
:code-string "[mr: hle o64 01 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg64.reg64 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg64,reg64"
:code-string "[mr: o64 01 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg8.mem (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg8,mem"
:code-string "[rm: 02 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg8.reg8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg8,reg8"
:code-string "[rm: 02 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg16.mem (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg16,mem"
:code-string "[rm: o16 03 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg16.reg16 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg16,reg16"
:code-string "[rm: o16 03 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg32.mem (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg32,mem"
:code-string "[rm: o32 03 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg32.reg32 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg32,reg32"
:code-string "[rm: o32 03 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg64.mem (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg64,mem"
:code-string "[rm: o64 03 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg64.reg64 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg64,reg64"
:code-string "[rm: o64 03 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm16.imm8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm32.imm8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm64.imm8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /0 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_al.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_al,imm"
:code-string "[-i: 04 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_ax.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_ax,imm"
:code-string "[-i: o16 05 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_eax.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_eax,imm"
:code-string "[-i: o32 05 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /0 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-reg_rax.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "reg_rax,imm"
:code-string "[-i: o64 05 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm8.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm8,imm"
:code-string "[mi: hle 80 /0 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm16.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /0 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm32.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /0 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /0 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-rm64.imm (make-instance 'x86-asm-instruction
:name "ADD"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /0 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.imm8 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,imm8"
:code-string "[mi: hle 80 /0 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /0 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.imm16 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /0 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /0 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ADD-mem.imm32 (make-instance 'x86-asm-instruction
:name "ADD"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /0 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.reg8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,reg8"
:code-string "[mr: hle 20 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg8.reg8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg8,reg8"
:code-string "[mr: 20 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.reg16 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,reg16"
:code-string "[mr: hle o16 21 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg16.reg16 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg16,reg16"
:code-string "[mr: o16 21 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.reg32 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,reg32"
:code-string "[mr: hle o32 21 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg32.reg32 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg32,reg32"
:code-string "[mr: o32 21 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.reg64 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,reg64"
:code-string "[mr: hle o64 21 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg64.reg64 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg64,reg64"
:code-string "[mr: o64 21 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg8.mem (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg8,mem"
:code-string "[rm: 22 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg8.reg8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg8,reg8"
:code-string "[rm: 22 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg16.mem (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg16,mem"
:code-string "[rm: o16 23 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg16.reg16 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg16,reg16"
:code-string "[rm: o16 23 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg32.mem (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg32,mem"
:code-string "[rm: o32 23 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg32.reg32 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg32,reg32"
:code-string "[rm: o32 23 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg64.mem (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg64,mem"
:code-string "[rm: o64 23 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg64.reg64 (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg64,reg64"
:code-string "[rm: o64 23 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm16.imm8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm32.imm8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm64.imm8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /4 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_al.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_al,imm"
:code-string "[-i: 24 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_ax.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_ax,imm"
:code-string "[-i: o16 25 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_eax.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_eax,imm"
:code-string "[-i: o32 25 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /4 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-reg_rax.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "reg_rax,imm"
:code-string "[-i: o64 25 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm8.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm8,imm"
:code-string "[mi: hle 80 /4 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm16.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /4 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm32.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /4 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /4 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-rm64.imm (make-instance 'x86-asm-instruction
:name "AND"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /4 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.imm8 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,imm8"
:code-string "[mi: hle 80 /4 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /4 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.imm16 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /4 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /4 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-AND-mem.imm32 (make-instance 'x86-asm-instruction
:name "AND"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /4 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BB0_RESET-void (make-instance 'x86-asm-instruction
:name "BB0_RESET"
:operands "void"
:code-string "[ 0f 3a]"
:arch-flags (list "PENT" "CYRIX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-BB1_RESET-void (make-instance 'x86-asm-instruction
:name "BB1_RESET"
:operands "void"
:code-string "[ 0f 3b]"
:arch-flags (list "PENT" "CYRIX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg16.mem (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg16,mem"
:code-string "[rm: o16 nof3 0f bc /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg16,reg16"
:code-string "[rm: o16 nof3 0f bc /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg32.mem (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg32,mem"
:code-string "[rm: o32 nof3 0f bc /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg32,reg32"
:code-string "[rm: o32 nof3 0f bc /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg64.mem (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg64,mem"
:code-string "[rm: o64 nof3 0f bc /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSF-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BSF"
:operands "reg64,reg64"
:code-string "[rm: o64 nof3 0f bc /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg16.mem (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg16,mem"
:code-string "[rm: o16 nof3 0f bd /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg16,reg16"
:code-string "[rm: o16 nof3 0f bd /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg32.mem (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg32,mem"
:code-string "[rm: o32 nof3 0f bd /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg32,reg32"
:code-string "[rm: o32 nof3 0f bd /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg64.mem (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg64,mem"
:code-string "[rm: o64 nof3 0f bd /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BSR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BSR"
:operands "reg64,reg64"
:code-string "[rm: o64 nof3 0f bd /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BSWAP-reg32 (make-instance 'x86-asm-instruction
:name "BSWAP"
:operands "reg32"
:code-string "[r: o32 0f c8+r]"
:arch-flags (list "486")
:is-variant t))

(defparameter x64-instruction-variant-BSWAP-reg64 (make-instance 'x86-asm-instruction
:name "BSWAP"
:operands "reg64"
:code-string "[r: o64 0f c8+r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BT-mem.reg16 (make-instance 'x86-asm-instruction
:name "BT"
:operands "mem,reg16"
:code-string "[mr: o16 0f a3 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BT-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BT"
:operands "reg16,reg16"
:code-string "[mr: o16 0f a3 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BT-mem.reg32 (make-instance 'x86-asm-instruction
:name "BT"
:operands "mem,reg32"
:code-string "[mr: o32 0f a3 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BT-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BT"
:operands "reg32,reg32"
:code-string "[mr: o32 0f a3 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BT-mem.reg64 (make-instance 'x86-asm-instruction
:name "BT"
:operands "mem,reg64"
:code-string "[mr: o64 0f a3 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-BT-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BT"
:operands "reg64,reg64"
:code-string "[mr: o64 0f a3 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BT-rm16.imm (make-instance 'x86-asm-instruction
:name "BT"
:operands "rm16,imm"
:code-string "[mi: o16 0f ba /4 ib,u]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-BT-rm32.imm (make-instance 'x86-asm-instruction
:name "BT"
:operands "rm32,imm"
:code-string "[mi: o32 0f ba /4 ib,u]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-BT-rm64.imm (make-instance 'x86-asm-instruction
:name "BT"
:operands "rm64,imm"
:code-string "[mi: o64 0f ba /4 ib,u]"
:arch-flags (list "X64" "SB")
:is-variant t))

(defparameter x64-instruction-variant-BTC-mem.reg16 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "mem,reg16"
:code-string "[mr: hle o16 0f bb /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTC-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "reg16,reg16"
:code-string "[mr: o16 0f bb /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTC-mem.reg32 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "mem,reg32"
:code-string "[mr: hle o32 0f bb /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTC-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "reg32,reg32"
:code-string "[mr: o32 0f bb /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTC-mem.reg64 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "mem,reg64"
:code-string "[mr: hle o64 0f bb /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTC-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BTC"
:operands "reg64,reg64"
:code-string "[mr: o64 0f bb /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BTC-rm16.imm (make-instance 'x86-asm-instruction
:name "BTC"
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /7 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTC-rm32.imm (make-instance 'x86-asm-instruction
:name "BTC"
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /7 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTC-rm64.imm (make-instance 'x86-asm-instruction
:name "BTC"
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /7 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-mem.reg16 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "mem,reg16"
:code-string "[mr: hle o16 0f b3 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "reg16,reg16"
:code-string "[mr: o16 0f b3 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTR-mem.reg32 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "mem,reg32"
:code-string "[mr: hle o32 0f b3 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "reg32,reg32"
:code-string "[mr: o32 0f b3 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTR-mem.reg64 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "mem,reg64"
:code-string "[mr: hle o64 0f b3 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BTR"
:operands "reg64,reg64"
:code-string "[mr: o64 0f b3 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BTR-rm16.imm (make-instance 'x86-asm-instruction
:name "BTR"
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /6 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-rm32.imm (make-instance 'x86-asm-instruction
:name "BTR"
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /6 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTR-rm64.imm (make-instance 'x86-asm-instruction
:name "BTR"
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /6 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-mem.reg16 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "mem,reg16"
:code-string "[mr: hle o16 0f ab /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-reg16.reg16 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "reg16,reg16"
:code-string "[mr: o16 0f ab /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTS-mem.reg32 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "mem,reg32"
:code-string "[mr: hle o32 0f ab /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-reg32.reg32 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "reg32,reg32"
:code-string "[mr: o32 0f ab /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-BTS-mem.reg64 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "mem,reg64"
:code-string "[mr: hle o64 0f ab /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-reg64.reg64 (make-instance 'x86-asm-instruction
:name "BTS"
:operands "reg64,reg64"
:code-string "[mr: o64 0f ab /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-BTS-rm16.imm (make-instance 'x86-asm-instruction
:name "BTS"
:operands "rm16,imm"
:code-string "[mi: hle o16 0f ba /5 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-rm32.imm (make-instance 'x86-asm-instruction
:name "BTS"
:operands "rm32,imm"
:code-string "[mi: hle o32 0f ba /5 ib,u]"
:arch-flags (list "386" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-BTS-rm64.imm (make-instance 'x86-asm-instruction
:name "BTS"
:operands "rm64,imm"
:code-string "[mi: hle o64 0f ba /5 ib,u]"
:arch-flags (list "X64" "SB" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CALL-imm (make-instance 'x86-asm-instruction
:name "CALL"
:operands "imm"
:code-string "[i: odf e8 rel]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-imm-near (make-instance 'x86-asm-instruction
:name "CALL"
:operands "imm|near"
:code-string "[i: odf e8 rel]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-imm64 (make-instance 'x86-asm-instruction
:name "CALL"
:operands "imm64"
:code-string "[i: o64nw e8 rel]"
:arch-flags (list "X64" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-imm64-near (make-instance 'x86-asm-instruction
:name "CALL"
:operands "imm64|near"
:code-string "[i: o64nw e8 rel]"
:arch-flags (list "X64" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem-far (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem|far"
:code-string "[m: o64 ff /3]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem16-far (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem16|far"
:code-string "[m: o16 ff /3]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem32-far (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem32|far"
:code-string "[m: o32 ff /3]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem64-far (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem64|far"
:code-string "[m: o64 ff /3]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem-near (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem|near"
:code-string "[m: odf ff /2]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-rm64-near (make-instance 'x86-asm-instruction
:name "CALL"
:operands "rm64|near"
:code-string "[m: o64nw ff /2]"
:arch-flags (list "X64" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-mem (make-instance 'x86-asm-instruction
:name "CALL"
:operands "mem"
:code-string "[m: odf ff /2]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CALL-rm64 (make-instance 'x86-asm-instruction
:name "CALL"
:operands "rm64"
:code-string "[m: o64nw ff /2]"
:arch-flags (list "X64" "BND")
:is-variant t))

(defparameter x64-instruction-variant-CBW-void (make-instance 'x86-asm-instruction
:name "CBW"
:operands "void"
:code-string "[ o16 98]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CDQ-void (make-instance 'x86-asm-instruction
:name "CDQ"
:operands "void"
:code-string "[ o32 99]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CDQE-void (make-instance 'x86-asm-instruction
:name "CDQE"
:operands "void"
:code-string "[ o64 98]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CLC-void (make-instance 'x86-asm-instruction
:name "CLC"
:operands "void"
:code-string "[ f8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CLD-void (make-instance 'x86-asm-instruction
:name "CLD"
:operands "void"
:code-string "[ fc]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CLI-void (make-instance 'x86-asm-instruction
:name "CLI"
:operands "void"
:code-string "[ fa]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CLTS-void (make-instance 'x86-asm-instruction
:name "CLTS"
:operands "void"
:code-string "[ 0f 06]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-CMC-void (make-instance 'x86-asm-instruction
:name "CMC"
:operands "void"
:code-string "[ f5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.reg8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,reg8"
:code-string "[mr: 38 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg8.reg8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg8,reg8"
:code-string "[mr: 38 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.reg16 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,reg16"
:code-string "[mr: o16 39 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg16.reg16 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg16,reg16"
:code-string "[mr: o16 39 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.reg32 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,reg32"
:code-string "[mr: o32 39 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg32.reg32 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg32,reg32"
:code-string "[mr: o32 39 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.reg64 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,reg64"
:code-string "[mr: o64 39 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg64.reg64 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg64,reg64"
:code-string "[mr: o64 39 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg8.mem (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg8,mem"
:code-string "[rm: 3a /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg8.reg8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg8,reg8"
:code-string "[rm: 3a /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg16.mem (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg16,mem"
:code-string "[rm: o16 3b /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg16.reg16 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg16,reg16"
:code-string "[rm: o16 3b /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg32.mem (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg32,mem"
:code-string "[rm: o32 3b /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg32.reg32 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg32,reg32"
:code-string "[rm: o32 3b /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg64.mem (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg64,mem"
:code-string "[rm: o64 3b /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg64.reg64 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg64,reg64"
:code-string "[rm: o64 3b /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm16.imm8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm16,imm8"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm32.imm8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm32,imm8"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm64.imm8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm64,imm8"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_al.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_al,imm"
:code-string "[-i: 3c ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_ax.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_ax,imm"
:code-string "[-i: o16 3d iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_eax.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_eax,imm"
:code-string "[-i: o32 3d id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-reg_rax.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "reg_rax,imm"
:code-string "[-i: o64 3d id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm8.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm8,imm"
:code-string "[mi: 80 /7 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm16,sbyteword"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm16.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm16,imm"
:code-string "[mi: o16 81 /7 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm32,sbytedword"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm32.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm32,imm"
:code-string "[mi: o32 81 /7 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm64,sbytedword"
:code-string "[mi: o64 83 /7 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-rm64.imm (make-instance 'x86-asm-instruction
:name "CMP"
:operands "rm64,imm"
:code-string "[mi: o64 81 /7 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.imm8 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,imm8"
:code-string "[mi: 80 /7 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,sbyteword16"
:code-string "[mi: o16 83 /7 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.imm16 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,imm16"
:code-string "[mi: o16 81 /7 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,sbytedword32"
:code-string "[mi: o32 83 /7 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMP-mem.imm32 (make-instance 'x86-asm-instruction
:name "CMP"
:operands "mem,imm32"
:code-string "[mi: o32 81 /7 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMPSB-void (make-instance 'x86-asm-instruction
:name "CMPSB"
:operands "void"
:code-string "[ repe a6]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMPSD-void (make-instance 'x86-asm-instruction
:name "CMPSD"
:operands "void"
:code-string "[ repe o32 a7]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-CMPSQ-void (make-instance 'x86-asm-instruction
:name "CMPSQ"
:operands "void"
:code-string "[ repe o64 a7]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CMPSW-void (make-instance 'x86-asm-instruction
:name "CMPSW"
:operands "void"
:code-string "[ repe o16 a7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-mem.reg8 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "mem,reg8"
:code-string "[mr: hle 0f b0 /r]"
:arch-flags (list "PENT" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-reg8.reg8 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "reg8,reg8"
:code-string "[mr: 0f b0 /r]"
:arch-flags (list "PENT")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-mem.reg16 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "mem,reg16"
:code-string "[mr: hle o16 0f b1 /r]"
:arch-flags (list "PENT" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-reg16.reg16 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "reg16,reg16"
:code-string "[mr: o16 0f b1 /r]"
:arch-flags (list "PENT")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-mem.reg32 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "mem,reg32"
:code-string "[mr: hle o32 0f b1 /r]"
:arch-flags (list "PENT" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-reg32.reg32 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "reg32,reg32"
:code-string "[mr: o32 0f b1 /r]"
:arch-flags (list "PENT")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-mem.reg64 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "mem,reg64"
:code-string "[mr: hle o64 0f b1 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG-reg64.reg64 (make-instance 'x86-asm-instruction
:name "CMPXCHG"
:operands "reg64,reg64"
:code-string "[mr: o64 0f b1 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-mem.reg8 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "mem,reg8"
:code-string "[mr: 0f a6 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-reg8.reg8 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "reg8,reg8"
:code-string "[mr: 0f a6 /r]"
:arch-flags (list "486" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-mem.reg16 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "mem,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-reg16.reg16 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "reg16,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "486" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-mem.reg32 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "mem,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG486-reg32.reg32 (make-instance 'x86-asm-instruction
:name "CMPXCHG486"
:operands "reg32,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "486" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG8B-mem (make-instance 'x86-asm-instruction
:name "CMPXCHG8B"
:operands "mem"
:code-string "[m: hle norexw 0f c7 /1]"
:arch-flags (list "PENT" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMPXCHG16B-mem (make-instance 'x86-asm-instruction
:name "CMPXCHG16B"
:operands "mem"
:code-string "[m: o64 0f c7 /1]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CPUID-void (make-instance 'x86-asm-instruction
:name "CPUID"
:operands "void"
:code-string "[ 0f a2]"
:arch-flags (list "PENT")
:is-variant t))

(defparameter x64-instruction-variant-CPU_READ-void (make-instance 'x86-asm-instruction
:name "CPU_READ"
:operands "void"
:code-string "[ 0f 3d]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-CPU_WRITE-void (make-instance 'x86-asm-instruction
:name "CPU_WRITE"
:operands "void"
:code-string "[ 0f 3c]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-CQO-void (make-instance 'x86-asm-instruction
:name "CQO"
:operands "void"
:code-string "[ o64 99]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-CWD-void (make-instance 'x86-asm-instruction
:name "CWD"
:operands "void"
:code-string "[ o16 99]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-CWDE-void (make-instance 'x86-asm-instruction
:name "CWDE"
:operands "void"
:code-string "[ o32 98]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-DEC-rm8 (make-instance 'x86-asm-instruction
:name "DEC"
:operands "rm8"
:code-string "[m: hle fe /1]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-DEC-rm16 (make-instance 'x86-asm-instruction
:name "DEC"
:operands "rm16"
:code-string "[m: hle o16 ff /1]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-DEC-rm32 (make-instance 'x86-asm-instruction
:name "DEC"
:operands "rm32"
:code-string "[m: hle o32 ff /1]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-DEC-rm64 (make-instance 'x86-asm-instruction
:name "DEC"
:operands "rm64"
:code-string "[m: hle o64 ff /1]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-DIV-rm8 (make-instance 'x86-asm-instruction
:name "DIV"
:operands "rm8"
:code-string "[m: f6 /6]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-DIV-rm16 (make-instance 'x86-asm-instruction
:name "DIV"
:operands "rm16"
:code-string "[m: o16 f7 /6]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-DIV-rm32 (make-instance 'x86-asm-instruction
:name "DIV"
:operands "rm32"
:code-string "[m: o32 f7 /6]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-DIV-rm64 (make-instance 'x86-asm-instruction
:name "DIV"
:operands "rm64"
:code-string "[m: o64 f7 /6]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-DMINT-void (make-instance 'x86-asm-instruction
:name "DMINT"
:operands "void"
:code-string "[ 0f 39]"
:arch-flags (list "P6" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-EMMS-void (make-instance 'x86-asm-instruction
:name "EMMS"
:operands "void"
:code-string "[ 0f 77]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-ENTER-imm.imm (make-instance 'x86-asm-instruction
:name "ENTER"
:operands "imm,imm"
:code-string "[ij: c8 iw ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-EQU-imm (make-instance 'x86-asm-instruction
:name "EQU"
:operands "imm"
:code-string "ignore"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-EQU-imm.imm (make-instance 'x86-asm-instruction
:name "EQU"
:operands "imm:imm"
:code-string "ignore"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-F2XM1-void (make-instance 'x86-asm-instruction
:name "F2XM1"
:operands "void"
:code-string "[ d9 f0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FABS-void (make-instance 'x86-asm-instruction
:name "FABS"
:operands "void"
:code-string "[ d9 e1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-mem32 (make-instance 'x86-asm-instruction
:name "FADD"
:operands "mem32"
:code-string "[m: d8 /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-mem64 (make-instance 'x86-asm-instruction
:name "FADD"
:operands "mem64"
:code-string "[m: dc /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-fpureg-to (make-instance 'x86-asm-instruction
:name "FADD"
:operands "fpureg|to"
:code-string "[r: dc c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-fpureg (make-instance 'x86-asm-instruction
:name "FADD"
:operands "fpureg"
:code-string "[r: d8 c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FADD"
:operands "fpureg,fpu0"
:code-string "[r-: dc c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FADD"
:operands "fpu0,fpureg"
:code-string "[-r: d8 c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADD-void (make-instance 'x86-asm-instruction
:name "FADD"
:operands "void"
:code-string "[ de c1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FADDP-fpureg (make-instance 'x86-asm-instruction
:name "FADDP"
:operands "fpureg"
:code-string "[r: de c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADDP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FADDP"
:operands "fpureg,fpu0"
:code-string "[r-: de c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FADDP-void (make-instance 'x86-asm-instruction
:name "FADDP"
:operands "void"
:code-string "[ de c1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FBLD-mem80 (make-instance 'x86-asm-instruction
:name "FBLD"
:operands "mem80"
:code-string "[m: df /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FBLD-mem (make-instance 'x86-asm-instruction
:name "FBLD"
:operands "mem"
:code-string "[m: df /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FBSTP-mem80 (make-instance 'x86-asm-instruction
:name "FBSTP"
:operands "mem80"
:code-string "[m: df /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FBSTP-mem (make-instance 'x86-asm-instruction
:name "FBSTP"
:operands "mem"
:code-string "[m: df /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCHS-void (make-instance 'x86-asm-instruction
:name "FCHS"
:operands "void"
:code-string "[ d9 e0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCLEX-void (make-instance 'x86-asm-instruction
:name "FCLEX"
:operands "void"
:code-string "[ wait db e2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVB-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVB"
:operands "fpureg"
:code-string "[r: da c0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVB-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVB"
:operands "fpu0,fpureg"
:code-string "[-r: da c0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVB-void (make-instance 'x86-asm-instruction
:name "FCMOVB"
:operands "void"
:code-string "[ da c1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVBE-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVBE"
:operands "fpureg"
:code-string "[r: da d0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVBE-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVBE"
:operands "fpu0,fpureg"
:code-string "[-r: da d0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVBE-void (make-instance 'x86-asm-instruction
:name "FCMOVBE"
:operands "void"
:code-string "[ da d1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVE-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVE"
:operands "fpureg"
:code-string "[r: da c8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVE-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVE"
:operands "fpu0,fpureg"
:code-string "[-r: da c8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVE-void (make-instance 'x86-asm-instruction
:name "FCMOVE"
:operands "void"
:code-string "[ da c9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNB-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNB"
:operands "fpureg"
:code-string "[r: db c0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNB-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNB"
:operands "fpu0,fpureg"
:code-string "[-r: db c0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNB-void (make-instance 'x86-asm-instruction
:name "FCMOVNB"
:operands "void"
:code-string "[ db c1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNBE-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNBE"
:operands "fpureg"
:code-string "[r: db d0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNBE-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNBE"
:operands "fpu0,fpureg"
:code-string "[-r: db d0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNBE-void (make-instance 'x86-asm-instruction
:name "FCMOVNBE"
:operands "void"
:code-string "[ db d1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNE-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNE"
:operands "fpureg"
:code-string "[r: db c8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNE-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNE"
:operands "fpu0,fpureg"
:code-string "[-r: db c8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNE-void (make-instance 'x86-asm-instruction
:name "FCMOVNE"
:operands "void"
:code-string "[ db c9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNU-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNU"
:operands "fpureg"
:code-string "[r: db d8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNU-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVNU"
:operands "fpu0,fpureg"
:code-string "[-r: db d8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVNU-void (make-instance 'x86-asm-instruction
:name "FCMOVNU"
:operands "void"
:code-string "[ db d9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVU-fpureg (make-instance 'x86-asm-instruction
:name "FCMOVU"
:operands "fpureg"
:code-string "[r: da d8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVU-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCMOVU"
:operands "fpu0,fpureg"
:code-string "[-r: da d8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCMOVU-void (make-instance 'x86-asm-instruction
:name "FCMOVU"
:operands "void"
:code-string "[ da d9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCOM-mem32 (make-instance 'x86-asm-instruction
:name "FCOM"
:operands "mem32"
:code-string "[m: d8 /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOM-mem64 (make-instance 'x86-asm-instruction
:name "FCOM"
:operands "mem64"
:code-string "[m: dc /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOM-fpureg (make-instance 'x86-asm-instruction
:name "FCOM"
:operands "fpureg"
:code-string "[r: d8 d0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOM-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCOM"
:operands "fpu0,fpureg"
:code-string "[-r: d8 d0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOM-void (make-instance 'x86-asm-instruction
:name "FCOM"
:operands "void"
:code-string "[ d8 d1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCOMI-fpureg (make-instance 'x86-asm-instruction
:name "FCOMI"
:operands "fpureg"
:code-string "[r: db f0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMI-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCOMI"
:operands "fpu0,fpureg"
:code-string "[-r: db f0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMI-void (make-instance 'x86-asm-instruction
:name "FCOMI"
:operands "void"
:code-string "[ db f1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCOMIP-fpureg (make-instance 'x86-asm-instruction
:name "FCOMIP"
:operands "fpureg"
:code-string "[r: df f0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMIP-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCOMIP"
:operands "fpu0,fpureg"
:code-string "[-r: df f0+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMIP-void (make-instance 'x86-asm-instruction
:name "FCOMIP"
:operands "void"
:code-string "[ df f1]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCOMP-mem32 (make-instance 'x86-asm-instruction
:name "FCOMP"
:operands "mem32"
:code-string "[m: d8 /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMP-mem64 (make-instance 'x86-asm-instruction
:name "FCOMP"
:operands "mem64"
:code-string "[m: dc /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMP-fpureg (make-instance 'x86-asm-instruction
:name "FCOMP"
:operands "fpureg"
:code-string "[r: d8 d8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMP-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FCOMP"
:operands "fpu0,fpureg"
:code-string "[-r: d8 d8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOMP-void (make-instance 'x86-asm-instruction
:name "FCOMP"
:operands "void"
:code-string "[ d8 d9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FCOMPP-void (make-instance 'x86-asm-instruction
:name "FCOMPP"
:operands "void"
:code-string "[ de d9]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FCOS-void (make-instance 'x86-asm-instruction
:name "FCOS"
:operands "void"
:code-string "[ d9 ff]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDECSTP-void (make-instance 'x86-asm-instruction
:name "FDECSTP"
:operands "void"
:code-string "[ d9 f6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDISI-void (make-instance 'x86-asm-instruction
:name "FDISI"
:operands "void"
:code-string "[ wait db e1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-mem32 (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "mem32"
:code-string "[m: d8 /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-mem64 (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "mem64"
:code-string "[m: dc /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-fpureg-to (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "fpureg|to"
:code-string "[r: dc f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-fpureg (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "fpureg"
:code-string "[r: d8 f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "fpureg,fpu0"
:code-string "[r-: dc f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "fpu0,fpureg"
:code-string "[-r: d8 f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIV-void (make-instance 'x86-asm-instruction
:name "FDIV"
:operands "void"
:code-string "[ de f9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FDIVP-fpureg (make-instance 'x86-asm-instruction
:name "FDIVP"
:operands "fpureg"
:code-string "[r: de f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FDIVP"
:operands "fpureg,fpu0"
:code-string "[r-: de f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVP-void (make-instance 'x86-asm-instruction
:name "FDIVP"
:operands "void"
:code-string "[ de f9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-mem32 (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "mem32"
:code-string "[m: d8 /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-mem64 (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "mem64"
:code-string "[m: dc /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-fpureg-to (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "fpureg|to"
:code-string "[r: dc f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "fpureg,fpu0"
:code-string "[r-: dc f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-fpureg (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "fpureg"
:code-string "[r: d8 f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "fpu0,fpureg"
:code-string "[-r: d8 f8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVR-void (make-instance 'x86-asm-instruction
:name "FDIVR"
:operands "void"
:code-string "[ de f1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FDIVRP-fpureg (make-instance 'x86-asm-instruction
:name "FDIVRP"
:operands "fpureg"
:code-string "[r: de f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVRP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FDIVRP"
:operands "fpureg,fpu0"
:code-string "[r-: de f0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FDIVRP-void (make-instance 'x86-asm-instruction
:name "FDIVRP"
:operands "void"
:code-string "[ de f1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FEMMS-void (make-instance 'x86-asm-instruction
:name "FEMMS"
:operands "void"
:code-string "[ 0f 0e]"
:arch-flags (list "PENT" "3DNOW")
:is-variant t))

(defparameter x64-instruction-variant-FENI-void (make-instance 'x86-asm-instruction
:name "FENI"
:operands "void"
:code-string "[ wait db e0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FFREE-fpureg (make-instance 'x86-asm-instruction
:name "FFREE"
:operands "fpureg"
:code-string "[r: dd c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FFREE-void (make-instance 'x86-asm-instruction
:name "FFREE"
:operands "void"
:code-string "[ dd c1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FFREEP-fpureg (make-instance 'x86-asm-instruction
:name "FFREEP"
:operands "fpureg"
:code-string "[r: df c0+r]"
:arch-flags (list "286" "FPU" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-FFREEP-void (make-instance 'x86-asm-instruction
:name "FFREEP"
:operands "void"
:code-string "[ df c1]"
:arch-flags (list "286" "FPU" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-FIADD-mem32 (make-instance 'x86-asm-instruction
:name "FIADD"
:operands "mem32"
:code-string "[m: da /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIADD-mem16 (make-instance 'x86-asm-instruction
:name "FIADD"
:operands "mem16"
:code-string "[m: de /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FICOM-mem32 (make-instance 'x86-asm-instruction
:name "FICOM"
:operands "mem32"
:code-string "[m: da /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FICOM-mem16 (make-instance 'x86-asm-instruction
:name "FICOM"
:operands "mem16"
:code-string "[m: de /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FICOMP-mem32 (make-instance 'x86-asm-instruction
:name "FICOMP"
:operands "mem32"
:code-string "[m: da /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FICOMP-mem16 (make-instance 'x86-asm-instruction
:name "FICOMP"
:operands "mem16"
:code-string "[m: de /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIDIV-mem32 (make-instance 'x86-asm-instruction
:name "FIDIV"
:operands "mem32"
:code-string "[m: da /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIDIV-mem16 (make-instance 'x86-asm-instruction
:name "FIDIV"
:operands "mem16"
:code-string "[m: de /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIDIVR-mem32 (make-instance 'x86-asm-instruction
:name "FIDIVR"
:operands "mem32"
:code-string "[m: da /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIDIVR-mem16 (make-instance 'x86-asm-instruction
:name "FIDIVR"
:operands "mem16"
:code-string "[m: de /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FILD-mem32 (make-instance 'x86-asm-instruction
:name "FILD"
:operands "mem32"
:code-string "[m: db /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FILD-mem16 (make-instance 'x86-asm-instruction
:name "FILD"
:operands "mem16"
:code-string "[m: df /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FILD-mem64 (make-instance 'x86-asm-instruction
:name "FILD"
:operands "mem64"
:code-string "[m: df /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIMUL-mem32 (make-instance 'x86-asm-instruction
:name "FIMUL"
:operands "mem32"
:code-string "[m: da /1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIMUL-mem16 (make-instance 'x86-asm-instruction
:name "FIMUL"
:operands "mem16"
:code-string "[m: de /1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FINCSTP-void (make-instance 'x86-asm-instruction
:name "FINCSTP"
:operands "void"
:code-string "[ d9 f7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FINIT-void (make-instance 'x86-asm-instruction
:name "FINIT"
:operands "void"
:code-string "[ wait db e3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIST-mem32 (make-instance 'x86-asm-instruction
:name "FIST"
:operands "mem32"
:code-string "[m: db /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FIST-mem16 (make-instance 'x86-asm-instruction
:name "FIST"
:operands "mem16"
:code-string "[m: df /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTP-mem32 (make-instance 'x86-asm-instruction
:name "FISTP"
:operands "mem32"
:code-string "[m: db /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTP-mem16 (make-instance 'x86-asm-instruction
:name "FISTP"
:operands "mem16"
:code-string "[m: df /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTP-mem64 (make-instance 'x86-asm-instruction
:name "FISTP"
:operands "mem64"
:code-string "[m: df /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTTP-mem16 (make-instance 'x86-asm-instruction
:name "FISTTP"
:operands "mem16"
:code-string "[m: df /1]"
:arch-flags (list "PRESCOTT" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTTP-mem32 (make-instance 'x86-asm-instruction
:name "FISTTP"
:operands "mem32"
:code-string "[m: db /1]"
:arch-flags (list "PRESCOTT" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISTTP-mem64 (make-instance 'x86-asm-instruction
:name "FISTTP"
:operands "mem64"
:code-string "[m: dd /1]"
:arch-flags (list "PRESCOTT" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISUB-mem32 (make-instance 'x86-asm-instruction
:name "FISUB"
:operands "mem32"
:code-string "[m: da /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISUB-mem16 (make-instance 'x86-asm-instruction
:name "FISUB"
:operands "mem16"
:code-string "[m: de /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISUBR-mem32 (make-instance 'x86-asm-instruction
:name "FISUBR"
:operands "mem32"
:code-string "[m: da /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FISUBR-mem16 (make-instance 'x86-asm-instruction
:name "FISUBR"
:operands "mem16"
:code-string "[m: de /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLD-mem32 (make-instance 'x86-asm-instruction
:name "FLD"
:operands "mem32"
:code-string "[m: d9 /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLD-mem64 (make-instance 'x86-asm-instruction
:name "FLD"
:operands "mem64"
:code-string "[m: dd /0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLD-mem80 (make-instance 'x86-asm-instruction
:name "FLD"
:operands "mem80"
:code-string "[m: db /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLD-fpureg (make-instance 'x86-asm-instruction
:name "FLD"
:operands "fpureg"
:code-string "[r: d9 c0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLD-void (make-instance 'x86-asm-instruction
:name "FLD"
:operands "void"
:code-string "[ d9 c1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FLD1-void (make-instance 'x86-asm-instruction
:name "FLD1"
:operands "void"
:code-string "[ d9 e8]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDCW-mem (make-instance 'x86-asm-instruction
:name "FLDCW"
:operands "mem"
:code-string "[m: d9 /5]"
:arch-flags (list "8086" "FPU" "SW")
:is-variant t))

(defparameter x64-instruction-variant-FLDENV-mem (make-instance 'x86-asm-instruction
:name "FLDENV"
:operands "mem"
:code-string "[m: d9 /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDL2E-void (make-instance 'x86-asm-instruction
:name "FLDL2E"
:operands "void"
:code-string "[ d9 ea]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDL2T-void (make-instance 'x86-asm-instruction
:name "FLDL2T"
:operands "void"
:code-string "[ d9 e9]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDLG2-void (make-instance 'x86-asm-instruction
:name "FLDLG2"
:operands "void"
:code-string "[ d9 ec]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDLN2-void (make-instance 'x86-asm-instruction
:name "FLDLN2"
:operands "void"
:code-string "[ d9 ed]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDPI-void (make-instance 'x86-asm-instruction
:name "FLDPI"
:operands "void"
:code-string "[ d9 eb]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FLDZ-void (make-instance 'x86-asm-instruction
:name "FLDZ"
:operands "void"
:code-string "[ d9 ee]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-mem32 (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "mem32"
:code-string "[m: d8 /1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-mem64 (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "mem64"
:code-string "[m: dc /1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-fpureg-to (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "fpureg|to"
:code-string "[r: dc c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "fpureg,fpu0"
:code-string "[r-: dc c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-fpureg (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "fpureg"
:code-string "[r: d8 c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "fpu0,fpureg"
:code-string "[-r: d8 c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMUL-void (make-instance 'x86-asm-instruction
:name "FMUL"
:operands "void"
:code-string "[ de c9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FMULP-fpureg (make-instance 'x86-asm-instruction
:name "FMULP"
:operands "fpureg"
:code-string "[r: de c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMULP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FMULP"
:operands "fpureg,fpu0"
:code-string "[r-: de c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FMULP-void (make-instance 'x86-asm-instruction
:name "FMULP"
:operands "void"
:code-string "[ de c9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FNCLEX-void (make-instance 'x86-asm-instruction
:name "FNCLEX"
:operands "void"
:code-string "[ db e2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNDISI-void (make-instance 'x86-asm-instruction
:name "FNDISI"
:operands "void"
:code-string "[ db e1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNENI-void (make-instance 'x86-asm-instruction
:name "FNENI"
:operands "void"
:code-string "[ db e0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNINIT-void (make-instance 'x86-asm-instruction
:name "FNINIT"
:operands "void"
:code-string "[ db e3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNOP-void (make-instance 'x86-asm-instruction
:name "FNOP"
:operands "void"
:code-string "[ d9 d0]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNSAVE-mem (make-instance 'x86-asm-instruction
:name "FNSAVE"
:operands "mem"
:code-string "[m: dd /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNSTCW-mem (make-instance 'x86-asm-instruction
:name "FNSTCW"
:operands "mem"
:code-string "[m: d9 /7]"
:arch-flags (list "8086" "FPU" "SW")
:is-variant t))

(defparameter x64-instruction-variant-FNSTENV-mem (make-instance 'x86-asm-instruction
:name "FNSTENV"
:operands "mem"
:code-string "[m: d9 /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FNSTSW-mem (make-instance 'x86-asm-instruction
:name "FNSTSW"
:operands "mem"
:code-string "[m: dd /7]"
:arch-flags (list "8086" "FPU" "SW")
:is-variant t))

(defparameter x64-instruction-variant-FNSTSW-reg_ax (make-instance 'x86-asm-instruction
:name "FNSTSW"
:operands "reg_ax"
:code-string "[-: df e0]"
:arch-flags (list "286" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FPATAN-void (make-instance 'x86-asm-instruction
:name "FPATAN"
:operands "void"
:code-string "[ d9 f3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FPREM-void (make-instance 'x86-asm-instruction
:name "FPREM"
:operands "void"
:code-string "[ d9 f8]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FPREM1-void (make-instance 'x86-asm-instruction
:name "FPREM1"
:operands "void"
:code-string "[ d9 f5]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FPTAN-void (make-instance 'x86-asm-instruction
:name "FPTAN"
:operands "void"
:code-string "[ d9 f2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FRNDINT-void (make-instance 'x86-asm-instruction
:name "FRNDINT"
:operands "void"
:code-string "[ d9 fc]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FRSTOR-mem (make-instance 'x86-asm-instruction
:name "FRSTOR"
:operands "mem"
:code-string "[m: dd /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSAVE-mem (make-instance 'x86-asm-instruction
:name "FSAVE"
:operands "mem"
:code-string "[m: wait dd /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSCALE-void (make-instance 'x86-asm-instruction
:name "FSCALE"
:operands "void"
:code-string "[ d9 fd]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSETPM-void (make-instance 'x86-asm-instruction
:name "FSETPM"
:operands "void"
:code-string "[ db e4]"
:arch-flags (list "286" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSIN-void (make-instance 'x86-asm-instruction
:name "FSIN"
:operands "void"
:code-string "[ d9 fe]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSINCOS-void (make-instance 'x86-asm-instruction
:name "FSINCOS"
:operands "void"
:code-string "[ d9 fb]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSQRT-void (make-instance 'x86-asm-instruction
:name "FSQRT"
:operands "void"
:code-string "[ d9 fa]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FST-mem32 (make-instance 'x86-asm-instruction
:name "FST"
:operands "mem32"
:code-string "[m: d9 /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FST-mem64 (make-instance 'x86-asm-instruction
:name "FST"
:operands "mem64"
:code-string "[m: dd /2]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FST-fpureg (make-instance 'x86-asm-instruction
:name "FST"
:operands "fpureg"
:code-string "[r: dd d0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FST-void (make-instance 'x86-asm-instruction
:name "FST"
:operands "void"
:code-string "[ dd d1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FSTCW-mem (make-instance 'x86-asm-instruction
:name "FSTCW"
:operands "mem"
:code-string "[m: wait d9 /7]"
:arch-flags (list "8086" "FPU" "SW")
:is-variant t))

(defparameter x64-instruction-variant-FSTENV-mem (make-instance 'x86-asm-instruction
:name "FSTENV"
:operands "mem"
:code-string "[m: wait d9 /6]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSTP-mem32 (make-instance 'x86-asm-instruction
:name "FSTP"
:operands "mem32"
:code-string "[m: d9 /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSTP-mem64 (make-instance 'x86-asm-instruction
:name "FSTP"
:operands "mem64"
:code-string "[m: dd /3]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSTP-mem80 (make-instance 'x86-asm-instruction
:name "FSTP"
:operands "mem80"
:code-string "[m: db /7]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSTP-fpureg (make-instance 'x86-asm-instruction
:name "FSTP"
:operands "fpureg"
:code-string "[r: dd d8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSTP-void (make-instance 'x86-asm-instruction
:name "FSTP"
:operands "void"
:code-string "[ dd d9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FSTSW-mem (make-instance 'x86-asm-instruction
:name "FSTSW"
:operands "mem"
:code-string "[m: wait dd /7]"
:arch-flags (list "8086" "FPU" "SW")
:is-variant t))

(defparameter x64-instruction-variant-FSTSW-reg_ax (make-instance 'x86-asm-instruction
:name "FSTSW"
:operands "reg_ax"
:code-string "[-: wait df e0]"
:arch-flags (list "286" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-mem32 (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "mem32"
:code-string "[m: d8 /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-mem64 (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "mem64"
:code-string "[m: dc /4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-fpureg-to (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "fpureg|to"
:code-string "[r: dc e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "fpureg,fpu0"
:code-string "[r-: dc e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-fpureg (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "fpureg"
:code-string "[r: d8 e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "fpu0,fpureg"
:code-string "[-r: d8 e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUB-void (make-instance 'x86-asm-instruction
:name "FSUB"
:operands "void"
:code-string "[ de e9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FSUBP-fpureg (make-instance 'x86-asm-instruction
:name "FSUBP"
:operands "fpureg"
:code-string "[r: de e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FSUBP"
:operands "fpureg,fpu0"
:code-string "[r-: de e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBP-void (make-instance 'x86-asm-instruction
:name "FSUBP"
:operands "void"
:code-string "[ de e9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-mem32 (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "mem32"
:code-string "[m: d8 /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-mem64 (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "mem64"
:code-string "[m: dc /5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-fpureg-to (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "fpureg|to"
:code-string "[r: dc e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "fpureg,fpu0"
:code-string "[r-: dc e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-fpureg (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "fpureg"
:code-string "[r: d8 e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "fpu0,fpureg"
:code-string "[-r: d8 e8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBR-void (make-instance 'x86-asm-instruction
:name "FSUBR"
:operands "void"
:code-string "[ de e1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FSUBRP-fpureg (make-instance 'x86-asm-instruction
:name "FSUBRP"
:operands "fpureg"
:code-string "[r: de e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBRP-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FSUBRP"
:operands "fpureg,fpu0"
:code-string "[r-: de e0+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FSUBRP-void (make-instance 'x86-asm-instruction
:name "FSUBRP"
:operands "void"
:code-string "[ de e1]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FTST-void (make-instance 'x86-asm-instruction
:name "FTST"
:operands "void"
:code-string "[ d9 e4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOM-fpureg (make-instance 'x86-asm-instruction
:name "FUCOM"
:operands "fpureg"
:code-string "[r: dd e0+r]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOM-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FUCOM"
:operands "fpu0,fpureg"
:code-string "[-r: dd e0+r]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOM-void (make-instance 'x86-asm-instruction
:name "FUCOM"
:operands "void"
:code-string "[ dd e1]"
:arch-flags (list "386" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMI-fpureg (make-instance 'x86-asm-instruction
:name "FUCOMI"
:operands "fpureg"
:code-string "[r: db e8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMI-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FUCOMI"
:operands "fpu0,fpureg"
:code-string "[-r: db e8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMI-void (make-instance 'x86-asm-instruction
:name "FUCOMI"
:operands "void"
:code-string "[ db e9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMIP-fpureg (make-instance 'x86-asm-instruction
:name "FUCOMIP"
:operands "fpureg"
:code-string "[r: df e8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMIP-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FUCOMIP"
:operands "fpu0,fpureg"
:code-string "[-r: df e8+r]"
:arch-flags (list "P6" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMIP-void (make-instance 'x86-asm-instruction
:name "FUCOMIP"
:operands "void"
:code-string "[ df e9]"
:arch-flags (list "P6" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMP-fpureg (make-instance 'x86-asm-instruction
:name "FUCOMP"
:operands "fpureg"
:code-string "[r: dd e8+r]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMP-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FUCOMP"
:operands "fpu0,fpureg"
:code-string "[-r: dd e8+r]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMP-void (make-instance 'x86-asm-instruction
:name "FUCOMP"
:operands "void"
:code-string "[ dd e9]"
:arch-flags (list "386" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FUCOMPP-void (make-instance 'x86-asm-instruction
:name "FUCOMPP"
:operands "void"
:code-string "[ da e9]"
:arch-flags (list "386" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXAM-void (make-instance 'x86-asm-instruction
:name "FXAM"
:operands "void"
:code-string "[ d9 e5]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXCH-fpureg (make-instance 'x86-asm-instruction
:name "FXCH"
:operands "fpureg"
:code-string "[r: d9 c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXCH-fpureg.fpu0 (make-instance 'x86-asm-instruction
:name "FXCH"
:operands "fpureg,fpu0"
:code-string "[r-: d9 c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXCH-fpu0.fpureg (make-instance 'x86-asm-instruction
:name "FXCH"
:operands "fpu0,fpureg"
:code-string "[-r: d9 c8+r]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXCH-void (make-instance 'x86-asm-instruction
:name "FXCH"
:operands "void"
:code-string "[ d9 c9]"
:arch-flags (list "8086" "FPU" "ND")
:is-variant t))

(defparameter x64-instruction-variant-FXTRACT-void (make-instance 'x86-asm-instruction
:name "FXTRACT"
:operands "void"
:code-string "[ d9 f4]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FYL2X-void (make-instance 'x86-asm-instruction
:name "FYL2X"
:operands "void"
:code-string "[ d9 f1]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FYL2XP1-void (make-instance 'x86-asm-instruction
:name "FYL2XP1"
:operands "void"
:code-string "[ d9 f9]"
:arch-flags (list "8086" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-HLT-void (make-instance 'x86-asm-instruction
:name "HLT"
:operands "void"
:code-string "[ f4]"
:arch-flags (list "8086" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-IBTS-mem.reg16 (make-instance 'x86-asm-instruction
:name "IBTS"
:operands "mem,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "386" "SW" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IBTS-reg16.reg16 (make-instance 'x86-asm-instruction
:name "IBTS"
:operands "reg16,reg16"
:code-string "[mr: o16 0f a7 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IBTS-mem.reg32 (make-instance 'x86-asm-instruction
:name "IBTS"
:operands "mem,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "386" "SD" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IBTS-reg32.reg32 (make-instance 'x86-asm-instruction
:name "IBTS"
:operands "reg32,reg32"
:code-string "[mr: o32 0f a7 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-ICEBP-void (make-instance 'x86-asm-instruction
:name "ICEBP"
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IDIV-rm8 (make-instance 'x86-asm-instruction
:name "IDIV"
:operands "rm8"
:code-string "[m: f6 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IDIV-rm16 (make-instance 'x86-asm-instruction
:name "IDIV"
:operands "rm16"
:code-string "[m: o16 f7 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IDIV-rm32 (make-instance 'x86-asm-instruction
:name "IDIV"
:operands "rm32"
:code-string "[m: o32 f7 /7]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IDIV-rm64 (make-instance 'x86-asm-instruction
:name "IDIV"
:operands "rm64"
:code-string "[m: o64 f7 /7]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-rm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "rm8"
:code-string "[m: f6 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-rm16 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "rm16"
:code-string "[m: o16 f7 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-rm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "rm32"
:code-string "[m: o32 f7 /5]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-rm64 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "rm64"
:code-string "[m: o64 f7 /5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.mem (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,mem"
:code-string "[rm: o16 0f af /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.reg16 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,reg16"
:code-string "[rm: o16 0f af /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.mem (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,mem"
:code-string "[rm: o32 0f af /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.reg32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,reg32"
:code-string "[rm: o32 0f af /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.mem (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,mem"
:code-string "[rm: o64 0f af /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.reg64 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,reg64"
:code-string "[rm: o64 0f af /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.mem.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,mem,imm8"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.mem.sbyteword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,mem,sbyteword"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.mem.imm16 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,mem,imm16"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.mem.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,mem,imm"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.reg16.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,reg16,imm8"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.reg16.sbyteword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,reg16,sbyteword"
:code-string "[rmi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.reg16.imm16 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,reg16,imm16"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.reg16.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,reg16,imm"
:code-string "[rmi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.mem.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,mem,imm8"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.mem.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,mem,sbytedword"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.mem.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,mem,imm32"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.mem.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,mem,imm"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.reg32.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,reg32,imm8"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.reg32.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,reg32,sbytedword"
:code-string "[rmi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.reg32.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,reg32,imm32"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.reg32.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,reg32,imm"
:code-string "[rmi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.mem.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,mem,imm8"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.mem.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,mem,sbytedword"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.mem.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,mem,imm32"
:code-string "[rmi: o64 69 /r id]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.mem.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,mem,imm"
:code-string "[rmi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.reg64.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,reg64,imm8"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.reg64.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,reg64,sbytedword"
:code-string "[rmi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.reg64.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,reg64,imm32"
:code-string "[rmi: o64 69 /r id]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.reg64.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,reg64,imm"
:code-string "[rmi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,imm8"
:code-string "[r+mi: o16 6b /r ib,s]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.sbyteword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,sbyteword"
:code-string "[r+mi: o16 6b /r ib,s]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.imm16 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,imm16"
:code-string "[r+mi: o16 69 /r iw]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg16.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg16,imm"
:code-string "[r+mi: o16 69 /r iw]"
:arch-flags (list "186" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,imm8"
:code-string "[r+mi: o32 6b /r ib,s]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,sbytedword"
:code-string "[r+mi: o32 6b /r ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,imm32"
:code-string "[r+mi: o32 69 /r id]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg32.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg32,imm"
:code-string "[r+mi: o32 69 /r id]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.imm8 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,imm8"
:code-string "[r+mi: o64 6b /r ib,s]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.sbytedword (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,sbytedword"
:code-string "[r+mi: o64 6b /r ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.imm32 (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,imm32"
:code-string "[r+mi: o64 69 /r id,s]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IMUL-reg64.imm (make-instance 'x86-asm-instruction
:name "IMUL"
:operands "reg64,imm"
:code-string "[r+mi: o64 69 /r id,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_al.imm (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_al,imm"
:code-string "[-i: e4 ib,u]"
:arch-flags (list "8086" "SB")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_ax.imm (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_ax,imm"
:code-string "[-i: o16 e5 ib,u]"
:arch-flags (list "8086" "SB")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_eax.imm (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_eax,imm"
:code-string "[-i: o32 e5 ib,u]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_al.reg_dx (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_al,reg_dx"
:code-string "[--: ec]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_ax.reg_dx (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_ax,reg_dx"
:code-string "[--: o16 ed]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IN-reg_eax.reg_dx (make-instance 'x86-asm-instruction
:name "IN"
:operands "reg_eax,reg_dx"
:code-string "[--: o32 ed]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-INC-rm8 (make-instance 'x86-asm-instruction
:name "INC"
:operands "rm8"
:code-string "[m: hle fe /0]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-INC-rm16 (make-instance 'x86-asm-instruction
:name "INC"
:operands "rm16"
:code-string "[m: hle o16 ff /0]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-INC-rm32 (make-instance 'x86-asm-instruction
:name "INC"
:operands "rm32"
:code-string "[m: hle o32 ff /0]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-INC-rm64 (make-instance 'x86-asm-instruction
:name "INC"
:operands "rm64"
:code-string "[m: hle o64 ff /0]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-INCBIN-ignore (make-instance 'x86-asm-instruction
:name "INCBIN"
:operands "ignore"
:code-string "ignore"
:arch-flags (list "ignore")
:is-variant t))

(defparameter x64-instruction-variant-INSB-void (make-instance 'x86-asm-instruction
:name "INSB"
:operands "void"
:code-string "[ 6c]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-INSD-void (make-instance 'x86-asm-instruction
:name "INSD"
:operands "void"
:code-string "[ o32 6d]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-INSW-void (make-instance 'x86-asm-instruction
:name "INSW"
:operands "void"
:code-string "[ o16 6d]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-INT-imm (make-instance 'x86-asm-instruction
:name "INT"
:operands "imm"
:code-string "[i: cd ib,u]"
:arch-flags (list "8086" "SB")
:is-variant t))

(defparameter x64-instruction-variant-INT01-void (make-instance 'x86-asm-instruction
:name "INT01"
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "ND")
:is-variant t))

(defparameter x64-instruction-variant-INT1-void (make-instance 'x86-asm-instruction
:name "INT1"
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-INT03-void (make-instance 'x86-asm-instruction
:name "INT03"
:operands "void"
:code-string "[ cc]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-INT3-void (make-instance 'x86-asm-instruction
:name "INT3"
:operands "void"
:code-string "[ cc]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-INVD-void (make-instance 'x86-asm-instruction
:name "INVD"
:operands "void"
:code-string "[ 0f 08]"
:arch-flags (list "486" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-INVPCID-reg64.mem128 (make-instance 'x86-asm-instruction
:name "INVPCID"
:operands "reg64,mem128"
:code-string "[rm: 66 0f 38 82 /r]"
:arch-flags (list "FUTURE" "INVPCID" "PRIV" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-INVLPG-mem (make-instance 'x86-asm-instruction
:name "INVLPG"
:operands "mem"
:code-string "[m: 0f 01 /7]"
:arch-flags (list "486" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-INVLPGA-reg_eax.reg_ecx (make-instance 'x86-asm-instruction
:name "INVLPGA"
:operands "reg_eax,reg_ecx"
:code-string "[--: a32 0f 01 df]"
:arch-flags (list "X86_64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-INVLPGA-reg_rax.reg_ecx (make-instance 'x86-asm-instruction
:name "INVLPGA"
:operands "reg_rax,reg_ecx"
:code-string "[--: o64nw a64 0f 01 df]"
:arch-flags (list "X64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-INVLPGA-void (make-instance 'x86-asm-instruction
:name "INVLPGA"
:operands "void"
:code-string "[ 0f 01 df]"
:arch-flags (list "X86_64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-IRET-void (make-instance 'x86-asm-instruction
:name "IRET"
:operands "void"
:code-string "[ odf cf]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-IRETD-void (make-instance 'x86-asm-instruction
:name "IRETD"
:operands "void"
:code-string "[ o32 cf]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-IRETQ-void (make-instance 'x86-asm-instruction
:name "IRETQ"
:operands "void"
:code-string "[ o64 cf]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-IRETW-void (make-instance 'x86-asm-instruction
:name "IRETW"
:operands "void"
:code-string "[ o16 cf]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-JECXZ-imm (make-instance 'x86-asm-instruction
:name "JECXZ"
:operands "imm"
:code-string "[i: a32 e3 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-JRCXZ-imm (make-instance 'x86-asm-instruction
:name "JRCXZ"
:operands "imm"
:code-string "[i: a64 e3 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm-short (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm|short"
:code-string "[i: eb rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm"
:code-string "[i: jmp8 eb rel8]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm"
:code-string "[i: odf e9 rel]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm-near (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm|near"
:code-string "[i: odf e9 rel]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm64 (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm64"
:code-string "[i: o64nw e9 rel]"
:arch-flags (list "X64" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-imm64-near (make-instance 'x86-asm-instruction
:name "JMP"
:operands "imm64|near"
:code-string "[i: o64nw e9 rel]"
:arch-flags (list "X64" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem-far (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem|far"
:code-string "[m: o64 ff /5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem16-far (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem16|far"
:code-string "[m: o16 ff /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem32-far (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem32|far"
:code-string "[m: o32 ff /5]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem64-far (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem64|far"
:code-string "[m: o64 ff /5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem-near (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem|near"
:code-string "[m: odf ff /4]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-rm64-near (make-instance 'x86-asm-instruction
:name "JMP"
:operands "rm64|near"
:code-string "[m: o64nw ff /4]"
:arch-flags (list "X64" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-mem (make-instance 'x86-asm-instruction
:name "JMP"
:operands "mem"
:code-string "[m: odf ff /4]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMP-rm64 (make-instance 'x86-asm-instruction
:name "JMP"
:operands "rm64"
:code-string "[m: o64nw ff /4]"
:arch-flags (list "X64" "BND")
:is-variant t))

(defparameter x64-instruction-variant-JMPE-imm (make-instance 'x86-asm-instruction
:name "JMPE"
:operands "imm"
:code-string "[i: odf 0f b8 rel]"
:arch-flags (list "IA64")
:is-variant t))

(defparameter x64-instruction-variant-JMPE-imm16 (make-instance 'x86-asm-instruction
:name "JMPE"
:operands "imm16"
:code-string "[i: o16 0f b8 rel]"
:arch-flags (list "IA64")
:is-variant t))

(defparameter x64-instruction-variant-JMPE-imm32 (make-instance 'x86-asm-instruction
:name "JMPE"
:operands "imm32"
:code-string "[i: o32 0f b8 rel]"
:arch-flags (list "IA64")
:is-variant t))

(defparameter x64-instruction-variant-JMPE-rm16 (make-instance 'x86-asm-instruction
:name "JMPE"
:operands "rm16"
:code-string "[m: o16 0f 00 /6]"
:arch-flags (list "IA64")
:is-variant t))

(defparameter x64-instruction-variant-JMPE-rm32 (make-instance 'x86-asm-instruction
:name "JMPE"
:operands "rm32"
:code-string "[m: o32 0f 00 /6]"
:arch-flags (list "IA64")
:is-variant t))

(defparameter x64-instruction-variant-LAHF-void (make-instance 'x86-asm-instruction
:name "LAHF"
:operands "void"
:code-string "[ 9f]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg16.mem (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg16,mem"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "286" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg16,reg16"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg16.reg32 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg16,reg32"
:code-string "[rm: o16 0f 02 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg16.reg64 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg16,reg64"
:code-string "[rm: o16 o64nw 0f 02 /r]"
:arch-flags (list "X64" "PROT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg32.mem (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg32,mem"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg32.reg16 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg32,reg16"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg32,reg32"
:code-string "[rm: o32 0f 02 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg32.reg64 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg32,reg64"
:code-string "[rm: o32 o64nw 0f 02 /r]"
:arch-flags (list "X64" "PROT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg64.mem (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg64,mem"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg64.reg16 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg64,reg16"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg64.reg32 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg64,reg32"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LAR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "LAR"
:operands "reg64,reg64"
:code-string "[rm: o64 0f 02 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LEA-reg16.mem (make-instance 'x86-asm-instruction
:name "LEA"
:operands "reg16,mem"
:code-string "[rm: o16 8d /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LEA-reg32.mem (make-instance 'x86-asm-instruction
:name "LEA"
:operands "reg32,mem"
:code-string "[rm: o32 8d /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LEA-reg64.mem (make-instance 'x86-asm-instruction
:name "LEA"
:operands "reg64,mem"
:code-string "[rm: o64 8d /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LEAVE-void (make-instance 'x86-asm-instruction
:name "LEAVE"
:operands "void"
:code-string "[ c9]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-LFENCE-void (make-instance 'x86-asm-instruction
:name "LFENCE"
:operands "void"
:code-string "[ np 0f ae e8]"
:arch-flags (list "X64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-LFS-reg16.mem (make-instance 'x86-asm-instruction
:name "LFS"
:operands "reg16,mem"
:code-string "[rm: o16 0f b4 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LFS-reg32.mem (make-instance 'x86-asm-instruction
:name "LFS"
:operands "reg32,mem"
:code-string "[rm: o32 0f b4 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LFS-reg64.mem (make-instance 'x86-asm-instruction
:name "LFS"
:operands "reg64,mem"
:code-string "[rm: o64 0f b4 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LGDT-mem (make-instance 'x86-asm-instruction
:name "LGDT"
:operands "mem"
:code-string "[m: 0f 01 /2]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LGS-reg16.mem (make-instance 'x86-asm-instruction
:name "LGS"
:operands "reg16,mem"
:code-string "[rm: o16 0f b5 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LGS-reg32.mem (make-instance 'x86-asm-instruction
:name "LGS"
:operands "reg32,mem"
:code-string "[rm: o32 0f b5 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LGS-reg64.mem (make-instance 'x86-asm-instruction
:name "LGS"
:operands "reg64,mem"
:code-string "[rm: o64 0f b5 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LIDT-mem (make-instance 'x86-asm-instruction
:name "LIDT"
:operands "mem"
:code-string "[m: 0f 01 /3]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LLDT-mem (make-instance 'x86-asm-instruction
:name "LLDT"
:operands "mem"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LLDT-mem16 (make-instance 'x86-asm-instruction
:name "LLDT"
:operands "mem16"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LLDT-reg16 (make-instance 'x86-asm-instruction
:name "LLDT"
:operands "reg16"
:code-string "[m: 0f 00 /2]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LMSW-mem (make-instance 'x86-asm-instruction
:name "LMSW"
:operands "mem"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LMSW-mem16 (make-instance 'x86-asm-instruction
:name "LMSW"
:operands "mem16"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LMSW-reg16 (make-instance 'x86-asm-instruction
:name "LMSW"
:operands "reg16"
:code-string "[m: 0f 01 /6]"
:arch-flags (list "286" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LOADALL-void (make-instance 'x86-asm-instruction
:name "LOADALL"
:operands "void"
:code-string "[ 0f 07]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LOADALL286-void (make-instance 'x86-asm-instruction
:name "LOADALL286"
:operands "void"
:code-string "[ 0f 05]"
:arch-flags (list "286" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LODSB-void (make-instance 'x86-asm-instruction
:name "LODSB"
:operands "void"
:code-string "[ ac]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LODSD-void (make-instance 'x86-asm-instruction
:name "LODSD"
:operands "void"
:code-string "[ o32 ad]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LODSQ-void (make-instance 'x86-asm-instruction
:name "LODSQ"
:operands "void"
:code-string "[ o64 ad]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LODSW-void (make-instance 'x86-asm-instruction
:name "LODSW"
:operands "void"
:code-string "[ o16 ad]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOP-imm (make-instance 'x86-asm-instruction
:name "LOOP"
:operands "imm"
:code-string "[i: adf e2 rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOP-imm.reg_ecx (make-instance 'x86-asm-instruction
:name "LOOP"
:operands "imm,reg_ecx"
:code-string "[i-: a32 e2 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LOOP-imm.reg_rcx (make-instance 'x86-asm-instruction
:name "LOOP"
:operands "imm,reg_rcx"
:code-string "[i-: a64 e2 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LOOPE-imm (make-instance 'x86-asm-instruction
:name "LOOPE"
:operands "imm"
:code-string "[i: adf e1 rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOPE-imm.reg_ecx (make-instance 'x86-asm-instruction
:name "LOOPE"
:operands "imm,reg_ecx"
:code-string "[i-: a32 e1 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LOOPE-imm.reg_rcx (make-instance 'x86-asm-instruction
:name "LOOPE"
:operands "imm,reg_rcx"
:code-string "[i-: a64 e1 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNE-imm (make-instance 'x86-asm-instruction
:name "LOOPNE"
:operands "imm"
:code-string "[i: adf e0 rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNE-imm.reg_ecx (make-instance 'x86-asm-instruction
:name "LOOPNE"
:operands "imm,reg_ecx"
:code-string "[i-: a32 e0 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNE-imm.reg_rcx (make-instance 'x86-asm-instruction
:name "LOOPNE"
:operands "imm,reg_rcx"
:code-string "[i-: a64 e0 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNZ-imm (make-instance 'x86-asm-instruction
:name "LOOPNZ"
:operands "imm"
:code-string "[i: adf e0 rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNZ-imm.reg_ecx (make-instance 'x86-asm-instruction
:name "LOOPNZ"
:operands "imm,reg_ecx"
:code-string "[i-: a32 e0 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LOOPNZ-imm.reg_rcx (make-instance 'x86-asm-instruction
:name "LOOPNZ"
:operands "imm,reg_rcx"
:code-string "[i-: a64 e0 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LOOPZ-imm (make-instance 'x86-asm-instruction
:name "LOOPZ"
:operands "imm"
:code-string "[i: adf e1 rel8]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-LOOPZ-imm.reg_ecx (make-instance 'x86-asm-instruction
:name "LOOPZ"
:operands "imm,reg_ecx"
:code-string "[i-: a32 e1 rel8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LOOPZ-imm.reg_rcx (make-instance 'x86-asm-instruction
:name "LOOPZ"
:operands "imm,reg_rcx"
:code-string "[i-: a64 e1 rel8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg16.mem (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg16,mem"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "286" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg16.reg16 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg16,reg16"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg16.reg32 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg16,reg32"
:code-string "[rm: o16 0f 03 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg16.reg64 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg16,reg64"
:code-string "[rm: o16 o64nw 0f 03 /r]"
:arch-flags (list "X64" "PROT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg32.mem (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg32,mem"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg32.reg16 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg32,reg16"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg32.reg32 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg32,reg32"
:code-string "[rm: o32 0f 03 /r]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg32.reg64 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg32,reg64"
:code-string "[rm: o32 o64nw 0f 03 /r]"
:arch-flags (list "X64" "PROT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg64.mem (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg64,mem"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT" "SW")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg64.reg16 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg64,reg16"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg64.reg32 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg64,reg32"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSL-reg64.reg64 (make-instance 'x86-asm-instruction
:name "LSL"
:operands "reg64,reg64"
:code-string "[rm: o64 0f 03 /r]"
:arch-flags (list "X64" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-LSS-reg16.mem (make-instance 'x86-asm-instruction
:name "LSS"
:operands "reg16,mem"
:code-string "[rm: o16 0f b2 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LSS-reg32.mem (make-instance 'x86-asm-instruction
:name "LSS"
:operands "reg32,mem"
:code-string "[rm: o32 0f b2 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-LSS-reg64.mem (make-instance 'x86-asm-instruction
:name "LSS"
:operands "reg64,mem"
:code-string "[rm: o64 0f b2 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-LTR-mem (make-instance 'x86-asm-instruction
:name "LTR"
:operands "mem"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LTR-mem16 (make-instance 'x86-asm-instruction
:name "LTR"
:operands "mem16"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-LTR-reg16 (make-instance 'x86-asm-instruction
:name "LTR"
:operands "reg16"
:code-string "[m: 0f 00 /3]"
:arch-flags (list "286" "PROT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-MFENCE-void (make-instance 'x86-asm-instruction
:name "MFENCE"
:operands "void"
:code-string "[ np 0f ae f0]"
:arch-flags (list "X64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-MONITOR-void (make-instance 'x86-asm-instruction
:name "MONITOR"
:operands "void"
:code-string "[ 0f 01 c8]"
:arch-flags (list "PRESCOTT")
:is-variant t))

(defparameter x64-instruction-variant-MONITOR-reg_rax.reg_ecx.reg_edx (make-instance 'x86-asm-instruction
:name "MONITOR"
:operands "reg_rax,reg_ecx,reg_edx"
:code-string "[---: 0f 01 c8]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.reg_sreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,reg_sreg"
:code-string "[mr: 8c /r]"
:arch-flags (list "8086" "SW")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg16.reg_sreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg16,reg_sreg"
:code-string "[mr: o16 8c /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg32.reg_sreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg32,reg_sreg"
:code-string "[mr: o32 8c /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.reg_sreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,reg_sreg"
:code-string "[mr: o64nw 8c /r]"
:arch-flags (list "X64" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm64.reg_sreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm64,reg_sreg"
:code-string "[mr: o64 8c /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.mem (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,mem"
:code-string "[rm: 8e /r]"
:arch-flags (list "8086" "SW")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.reg16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,reg16"
:code-string "[rm: 8e /r]"
:arch-flags (list "8086" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.reg32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,reg32"
:code-string "[rm: 8e /r]"
:arch-flags (list "386" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,reg64"
:code-string "[rm: o64nw 8e /r]"
:arch-flags (list "X64" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.reg16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,reg16"
:code-string "[rm: o16 8e /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.reg32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,reg32"
:code-string "[rm: o32 8e /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_sreg.rm64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_sreg,rm64"
:code-string "[rm: o64 8e /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_al.mem_offs (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_al,mem_offs"
:code-string "[-i: a0 iwdq]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_ax.mem_offs (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_ax,mem_offs"
:code-string "[-i: o16 a1 iwdq]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_eax.mem_offs (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_eax,mem_offs"
:code-string "[-i: o32 a1 iwdq]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_rax.mem_offs (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_rax,mem_offs"
:code-string "[-i: o64 a1 iwdq]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem_offs.reg_al (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem_offs,reg_al"
:code-string "[i-: a2 iwdq]"
:arch-flags (list "8086" "SM" "NOHLE")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem_offs.reg_ax (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem_offs,reg_ax"
:code-string "[i-: o16 a3 iwdq]"
:arch-flags (list "8086" "SM" "NOHLE")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem_offs.reg_eax (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem_offs,reg_eax"
:code-string "[i-: o32 a3 iwdq]"
:arch-flags (list "386" "SM" "NOHLE")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem_offs.reg_rax (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem_offs,reg_rax"
:code-string "[i-: o64 a3 iwdq]"
:arch-flags (list "X64" "SM" "NOHLE")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.reg_creg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,reg_creg"
:code-string "[mr: o64nw 0f 20 /r]"
:arch-flags (list "X64" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_creg.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_creg,reg64"
:code-string "[rm: o64nw 0f 22 /r]"
:arch-flags (list "X64" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.reg_dreg (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,reg_dreg"
:code-string "[mr: o64nw 0f 21 /r]"
:arch-flags (list "X64" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg_dreg.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg_dreg,reg64"
:code-string "[rm: o64nw 0f 23 /r]"
:arch-flags (list "X64" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.reg8 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,reg8"
:code-string "[mr: hlexr 88 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg8.reg8 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg8,reg8"
:code-string "[mr: 88 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.reg16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,reg16"
:code-string "[mr: hlexr o16 89 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg16.reg16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg16,reg16"
:code-string "[mr: o16 89 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.reg32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,reg32"
:code-string "[mr: hlexr o32 89 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg32.reg32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg32,reg32"
:code-string "[mr: o32 89 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,reg64"
:code-string "[mr: hlexr o64 89 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,reg64"
:code-string "[mr: o64 89 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg8.mem (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg8,mem"
:code-string "[rm: 8a /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg8.reg8 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg8,reg8"
:code-string "[rm: 8a /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg16.mem (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg16,mem"
:code-string "[rm: o16 8b /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg16.reg16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg16,reg16"
:code-string "[rm: o16 8b /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg32.mem (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg32,mem"
:code-string "[rm: o32 8b /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg32.reg32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg32,reg32"
:code-string "[rm: o32 8b /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.mem (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,mem"
:code-string "[rm: o64 8b /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.reg64 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,reg64"
:code-string "[rm: o64 8b /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg8.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg8,imm"
:code-string "[ri: b0+r ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg16.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg16,imm"
:code-string "[ri: o16 b8+r iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg32.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg32,imm"
:code-string "[ri: o32 b8+r id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.udword (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,udword"
:code-string "[ri: o64nw b8+r id]"
:arch-flags (list "X64" "SM" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.sdword (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,sdword"
:code-string "[mi: o64 c7 /0 id,s]"
:arch-flags (list "X64" "SM" "OPT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOV-reg64.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "reg64,imm"
:code-string "[ri: o64 b8+r iq]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm8.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm8,imm"
:code-string "[mi: hlexr c6 /0 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm16.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm16,imm"
:code-string "[mi: hlexr o16 c7 /0 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm32.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm32,imm"
:code-string "[mi: hlexr o32 c7 /0 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm64.imm (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm64,imm"
:code-string "[mi: hlexr o64 c7 /0 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-rm64.imm32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "rm64,imm32"
:code-string "[mi: hlexr o64 c7 /0 id,s]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.imm8 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,imm8"
:code-string "[mi: hlexr c6 /0 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.imm16 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,imm16"
:code-string "[mi: hlexr o16 c7 /0 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOV-mem.imm32 (make-instance 'x86-asm-instruction
:name "MOV"
:operands "mem,imm32"
:code-string "[mi: hlexr o32 c7 /0 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-mmxreg.rm32 (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "mmxreg,rm32"
:code-string "[rm: np 0f 6e /r]"
:arch-flags (list "PENT" "MMX" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-rm32.mmxreg (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "rm32,mmxreg"
:code-string "[mr: np 0f 7e /r]"
:arch-flags (list "PENT" "MMX" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-mmxreg.rm64 (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "mmxreg,rm64"
:code-string "[rm: np o64 0f 6e /r]"
:arch-flags (list "X64" "MMX" "SX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-rm64.mmxreg (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "rm64,mmxreg"
:code-string "[mr: np o64 0f 7e /r]"
:arch-flags (list "X64" "MMX" "SX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 6f /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-mmxrm.mmxreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "mmxrm,mmxreg"
:code-string "[mr: np 0f 7f /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-mmxreg.rm64 (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "mmxreg,rm64"
:code-string "[rm: np o64 0f 6e /r]"
:arch-flags (list "X64" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-rm64.mmxreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "rm64,mmxreg"
:code-string "[mr: np o64 0f 7e /r]"
:arch-flags (list "X64" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-MOVSB-void (make-instance 'x86-asm-instruction
:name "MOVSB"
:operands "void"
:code-string "[ a4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOVSD-void (make-instance 'x86-asm-instruction
:name "MOVSD"
:operands "void"
:code-string "[ o32 a5]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVSQ-void (make-instance 'x86-asm-instruction
:name "MOVSQ"
:operands "void"
:code-string "[ o64 a5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOVSW-void (make-instance 'x86-asm-instruction
:name "MOVSW"
:operands "void"
:code-string "[ o16 a5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg16.mem (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg16,mem"
:code-string "[rm: o16 0f be /r]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg16.reg8 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg16,reg8"
:code-string "[rm: o16 0f be /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg32.rm8 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg32,rm8"
:code-string "[rm: o32 0f be /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg32.rm16 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg32,rm16"
:code-string "[rm: o32 0f bf /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg64.rm8 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg64,rm8"
:code-string "[rm: o64 0f be /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg64.rm16 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg64,rm16"
:code-string "[rm: o64 0f bf /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOVSXD-reg64.rm32 (make-instance 'x86-asm-instruction
:name "MOVSXD"
:operands "reg64,rm32"
:code-string "[rm: o64 63 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOVSX-reg64.rm32 (make-instance 'x86-asm-instruction
:name "MOVSX"
:operands "reg64,rm32"
:code-string "[rm: o64 63 /r]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg16.mem (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg16,mem"
:code-string "[rm: o16 0f b6 /r]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg16.reg8 (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg16,reg8"
:code-string "[rm: o16 0f b6 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg32.rm8 (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg32,rm8"
:code-string "[rm: o32 0f b6 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg32.rm16 (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg32,rm16"
:code-string "[rm: o32 0f b7 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg64.rm8 (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg64,rm8"
:code-string "[rm: o64 0f b6 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MOVZX-reg64.rm16 (make-instance 'x86-asm-instruction
:name "MOVZX"
:operands "reg64,rm16"
:code-string "[rm: o64 0f b7 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MUL-rm8 (make-instance 'x86-asm-instruction
:name "MUL"
:operands "rm8"
:code-string "[m: f6 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MUL-rm16 (make-instance 'x86-asm-instruction
:name "MUL"
:operands "rm16"
:code-string "[m: o16 f7 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-MUL-rm32 (make-instance 'x86-asm-instruction
:name "MUL"
:operands "rm32"
:code-string "[m: o32 f7 /4]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-MUL-rm64 (make-instance 'x86-asm-instruction
:name "MUL"
:operands "rm64"
:code-string "[m: o64 f7 /4]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-MWAIT-void (make-instance 'x86-asm-instruction
:name "MWAIT"
:operands "void"
:code-string "[ 0f 01 c9]"
:arch-flags (list "PRESCOTT")
:is-variant t))

(defparameter x64-instruction-variant-MWAIT-reg_eax.reg_ecx (make-instance 'x86-asm-instruction
:name "MWAIT"
:operands "reg_eax,reg_ecx"
:code-string "[--: 0f 01 c9]"
:arch-flags (list "PRESCOTT" "ND")
:is-variant t))

(defparameter x64-instruction-variant-NEG-rm8 (make-instance 'x86-asm-instruction
:name "NEG"
:operands "rm8"
:code-string "[m: hle f6 /3]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NEG-rm16 (make-instance 'x86-asm-instruction
:name "NEG"
:operands "rm16"
:code-string "[m: hle o16 f7 /3]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NEG-rm32 (make-instance 'x86-asm-instruction
:name "NEG"
:operands "rm32"
:code-string "[m: hle o32 f7 /3]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NEG-rm64 (make-instance 'x86-asm-instruction
:name "NEG"
:operands "rm64"
:code-string "[m: hle o64 f7 /3]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NOP-void (make-instance 'x86-asm-instruction
:name "NOP"
:operands "void"
:code-string "[ norexb nof3 90]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-NOP-rm16 (make-instance 'x86-asm-instruction
:name "NOP"
:operands "rm16"
:code-string "[m: o16 0f 1f /0]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-NOP-rm32 (make-instance 'x86-asm-instruction
:name "NOP"
:operands "rm32"
:code-string "[m: o32 0f 1f /0]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-NOP-rm64 (make-instance 'x86-asm-instruction
:name "NOP"
:operands "rm64"
:code-string "[m: o64 0f 1f /0]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-NOT-rm8 (make-instance 'x86-asm-instruction
:name "NOT"
:operands "rm8"
:code-string "[m: hle f6 /2]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NOT-rm16 (make-instance 'x86-asm-instruction
:name "NOT"
:operands "rm16"
:code-string "[m: hle o16 f7 /2]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NOT-rm32 (make-instance 'x86-asm-instruction
:name "NOT"
:operands "rm32"
:code-string "[m: hle o32 f7 /2]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-NOT-rm64 (make-instance 'x86-asm-instruction
:name "NOT"
:operands "rm64"
:code-string "[m: hle o64 f7 /2]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.reg8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,reg8"
:code-string "[mr: hle 08 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg8.reg8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg8,reg8"
:code-string "[mr: 08 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.reg16 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,reg16"
:code-string "[mr: hle o16 09 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg16,reg16"
:code-string "[mr: o16 09 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.reg32 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,reg32"
:code-string "[mr: hle o32 09 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg32,reg32"
:code-string "[mr: o32 09 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.reg64 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,reg64"
:code-string "[mr: hle o64 09 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg64,reg64"
:code-string "[mr: o64 09 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg8.mem (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg8,mem"
:code-string "[rm: 0a /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg8.reg8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg8,reg8"
:code-string "[rm: 0a /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg16.mem (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg16,mem"
:code-string "[rm: o16 0b /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg16,reg16"
:code-string "[rm: o16 0b /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg32.mem (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg32,mem"
:code-string "[rm: o32 0b /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg32,reg32"
:code-string "[rm: o32 0b /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg64.mem (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg64,mem"
:code-string "[rm: o64 0b /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg64,reg64"
:code-string "[rm: o64 0b /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /1 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_al.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_al,imm"
:code-string "[-i: 0c ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_ax.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_ax,imm"
:code-string "[-i: o16 0d iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_eax.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_eax,imm"
:code-string "[-i: o32 0d id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /1 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-reg_rax.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "reg_rax,imm"
:code-string "[-i: o64 0d id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm8.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm8,imm"
:code-string "[mi: hle 80 /1 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm16.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /1 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm32.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /1 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /1 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-rm64.imm (make-instance 'x86-asm-instruction
:name "OR"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /1 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.imm8 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,imm8"
:code-string "[mi: hle 80 /1 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /1 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.imm16 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /1 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /1 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-OR-mem.imm32 (make-instance 'x86-asm-instruction
:name "OR"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /1 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-OUT-imm.reg_al (make-instance 'x86-asm-instruction
:name "OUT"
:operands "imm,reg_al"
:code-string "[i-: e6 ib,u]"
:arch-flags (list "8086" "SB")
:is-variant t))

(defparameter x64-instruction-variant-OUT-imm.reg_ax (make-instance 'x86-asm-instruction
:name "OUT"
:operands "imm,reg_ax"
:code-string "[i-: o16 e7 ib,u]"
:arch-flags (list "8086" "SB")
:is-variant t))

(defparameter x64-instruction-variant-OUT-imm.reg_eax (make-instance 'x86-asm-instruction
:name "OUT"
:operands "imm,reg_eax"
:code-string "[i-: o32 e7 ib,u]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-OUT-reg_dx.reg_al (make-instance 'x86-asm-instruction
:name "OUT"
:operands "reg_dx,reg_al"
:code-string "[--: ee]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OUT-reg_dx.reg_ax (make-instance 'x86-asm-instruction
:name "OUT"
:operands "reg_dx,reg_ax"
:code-string "[--: o16 ef]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-OUT-reg_dx.reg_eax (make-instance 'x86-asm-instruction
:name "OUT"
:operands "reg_dx,reg_eax"
:code-string "[--: o32 ef]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-OUTSB-void (make-instance 'x86-asm-instruction
:name "OUTSB"
:operands "void"
:code-string "[ 6e]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-OUTSD-void (make-instance 'x86-asm-instruction
:name "OUTSD"
:operands "void"
:code-string "[ o32 6f]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-OUTSW-void (make-instance 'x86-asm-instruction
:name "OUTSW"
:operands "void"
:code-string "[ o16 6f]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-PACKSSDW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PACKSSDW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 6b /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PACKSSWB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PACKSSWB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 63 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PACKUSWB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PACKUSWB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 67 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fc /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fe /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ec /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDSIW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDSIW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 51 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PADDSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ed /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDUSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDUSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f dc /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDUSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDUSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f dd /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fd /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PAND-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PAND"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f db /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PANDN-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PANDN"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f df /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PAUSE-void (make-instance 'x86-asm-instruction
:name "PAUSE"
:operands "void"
:code-string "[ f3i 90]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-PAVEB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PAVEB"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 50 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PAVGUSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PAVGUSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r bf]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPEQB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 74 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPEQD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 76 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPEQW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 75 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPGTB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 64 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPGTD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 66 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PCMPGTW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 65 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PDISTIB-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PDISTIB"
:operands "mmxreg,mem"
:code-string "[rm: 0f 54 /r]"
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PF2ID-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PF2ID"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 1d]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFACC-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFACC"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r ae]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFADD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFADD"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 9e]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFCMPEQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFCMPEQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b0]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFCMPGE-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFCMPGE"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 90]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFCMPGT-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFCMPGT"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a0]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFMAX-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFMAX"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a4]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFMIN-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFMIN"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 94]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFMUL-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFMUL"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b4]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFRCP-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRCP"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 96]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFRCPIT1-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRCPIT1"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a6]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFRCPIT2-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRCPIT2"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b6]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFRSQIT1-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRSQIT1"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r a7]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFRSQRT-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRSQRT"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 97]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFSUB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFSUB"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 9a]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFSUBR-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFSUBR"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r aa]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PI2FD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PI2FD"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 0d]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMACHRIW-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PMACHRIW"
:operands "mmxreg,mem"
:code-string "[rm: 0f 5e /r]"
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMADDWD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMADDWD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMAGW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMAGW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 52 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMULHRIW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHRIW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 5d /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMULHRWA-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHRWA"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r b7]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMULHRWC-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHRWC"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 59 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMULHW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMULLW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULLW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d5 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMVGEZB-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PMVGEZB"
:operands "mmxreg,mem"
:code-string "[rm: 0f 5c /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMVLZB-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PMVLZB"
:operands "mmxreg,mem"
:code-string "[rm: 0f 5b /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMVNZB-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PMVNZB"
:operands "mmxreg,mem"
:code-string "[rm: 0f 5a /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PMVZB-mmxreg.mem (make-instance 'x86-asm-instruction
:name "PMVZB"
:operands "mmxreg,mem"
:code-string "[rm: 0f 58 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-POP-reg16 (make-instance 'x86-asm-instruction
:name "POP"
:operands "reg16"
:code-string "[r: o16 58+r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-POP-reg64 (make-instance 'x86-asm-instruction
:name "POP"
:operands "reg64"
:code-string "[r: o64nw 58+r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-POP-rm16 (make-instance 'x86-asm-instruction
:name "POP"
:operands "rm16"
:code-string "[m: o16 8f /0]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-POP-rm64 (make-instance 'x86-asm-instruction
:name "POP"
:operands "rm64"
:code-string "[m: o64nw 8f /0]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-POP-reg_cs (make-instance 'x86-asm-instruction
:name "POP"
:operands "reg_cs"
:code-string "[-: 0f]"
:arch-flags (list "8086" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-POP-reg_fs (make-instance 'x86-asm-instruction
:name "POP"
:operands "reg_fs"
:code-string "[-: 0f a1]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-POP-reg_gs (make-instance 'x86-asm-instruction
:name "POP"
:operands "reg_gs"
:code-string "[-: 0f a9]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-POPF-void (make-instance 'x86-asm-instruction
:name "POPF"
:operands "void"
:code-string "[ odf 9d]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-POPFQ-void (make-instance 'x86-asm-instruction
:name "POPFQ"
:operands "void"
:code-string "[ o32 9d]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-POPFW-void (make-instance 'x86-asm-instruction
:name "POPFW"
:operands "void"
:code-string "[ o16 9d]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-POR-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "POR"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f eb /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCH-mem (make-instance 'x86-asm-instruction
:name "PREFETCH"
:operands "mem"
:code-string "[m: 0f 0d /0]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHW-mem (make-instance 'x86-asm-instruction
:name "PREFETCHW"
:operands "mem"
:code-string "[m: 0f 0d /1]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSLLD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSLLD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSLLD-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSLLD"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /6 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSLLQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSLLQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f3 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSLLQ-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSLLQ"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 73 /6 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSLLW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSLLW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSLLW-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSLLW"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /6 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSRAD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSRAD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSRAD-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSRAD"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /4 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSRAW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSRAW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSRAW-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSRAW"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /4 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSRLD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSRLD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d2 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSRLD-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSRLD"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 72 /2 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSRLQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSRLQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d3 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSRLQ-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSRLQ"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 73 /2 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSRLW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSRLW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d1 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSRLW-mmxreg.imm (make-instance 'x86-asm-instruction
:name "PSRLW"
:operands "mmxreg,imm"
:code-string "[mi: np 0f 71 /2 ib,u]"
:arch-flags (list "PENT" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PSUBB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fa /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBSIW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBSIW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 55 /r]"
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PSUBSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBUSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBUSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d8 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBUSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBUSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f d9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSUBW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f9 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHBW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKHBW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 68 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHDQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKHDQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 6a /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHWD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKHWD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 69 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLBW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKLBW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 60 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLDQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKLDQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 62 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLWD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PUNPCKLWD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f 61 /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-reg16 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "reg16"
:code-string "[r: o16 50+r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-reg64 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "reg64"
:code-string "[r: o64nw 50+r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-rm16 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "rm16"
:code-string "[m: o16 ff /6]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-rm64 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "rm64"
:code-string "[m: o64nw ff /6]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-reg_fs (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "reg_fs"
:code-string "[-: 0f a0]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-reg_gs (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "reg_gs"
:code-string "[-: 0f a8]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-imm8 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "imm8"
:code-string "[i: 6a ib,s]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-sbyteword16 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "sbyteword16"
:code-string "[i: o16 6a ib,s]"
:arch-flags (list "186" "AR0" "SIZE" "ND")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-imm16 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "imm16"
:code-string "[i: o16 68 iw]"
:arch-flags (list "186" "AR0" "SIZE")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-sbytedword64 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "sbytedword64"
:code-string "[i: o64nw 6a ib,s]"
:arch-flags (list "X64" "AR0" "SIZE" "ND")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-imm64 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "imm64"
:code-string "[i: o64nw 68 id,s]"
:arch-flags (list "X64" "AR0" "SIZE")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-sbytedword32 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "sbytedword32"
:code-string "[i: o64nw 6a ib,s]"
:arch-flags (list "X64" "AR0" "SIZE" "ND")
:is-variant t))

(defparameter x64-instruction-variant-PUSH-imm32 (make-instance 'x86-asm-instruction
:name "PUSH"
:operands "imm32"
:code-string "[i: o64nw 68 id,s]"
:arch-flags (list "X64" "AR0" "SIZE")
:is-variant t))

(defparameter x64-instruction-variant-PUSHF-void (make-instance 'x86-asm-instruction
:name "PUSHF"
:operands "void"
:code-string "[ odf 9c]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-PUSHFQ-void (make-instance 'x86-asm-instruction
:name "PUSHFQ"
:operands "void"
:code-string "[ o32 9c]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-PUSHFW-void (make-instance 'x86-asm-instruction
:name "PUSHFW"
:operands "void"
:code-string "[ o16 9c]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-PXOR-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PXOR"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ef /r]"
:arch-flags (list "PENT" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm8.unity (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm8,unity"
:code-string "[m-: d0 /2]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /2]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm8.imm8 (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm8,imm8"
:code-string "[mi: c0 /2 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm16.unity (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /2]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /2]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm16.imm8 (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /2 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm32.unity (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /2]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /2]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm32.imm8 (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /2 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm64.unity (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /2]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /2]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RCL-rm64.imm8 (make-instance 'x86-asm-instruction
:name "RCL"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /2 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm8.unity (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm8,unity"
:code-string "[m-: d0 /3]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /3]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm8.imm8 (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm8,imm8"
:code-string "[mi: c0 /3 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm16.unity (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /3]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /3]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /3 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm32.unity (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /3]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /3]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /3 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm64.unity (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /3]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /3]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RCR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "RCR"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /3 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RDSHR-rm32 (make-instance 'x86-asm-instruction
:name "RDSHR"
:operands "rm32"
:code-string "[m: o32 0f 36 /0]"
:arch-flags (list "P6" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-RDMSR-void (make-instance 'x86-asm-instruction
:name "RDMSR"
:operands "void"
:code-string "[ 0f 32]"
:arch-flags (list "PENT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-RDPMC-void (make-instance 'x86-asm-instruction
:name "RDPMC"
:operands "void"
:code-string "[ 0f 33]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-RDTSC-void (make-instance 'x86-asm-instruction
:name "RDTSC"
:operands "void"
:code-string "[ 0f 31]"
:arch-flags (list "PENT")
:is-variant t))

(defparameter x64-instruction-variant-RDTSCP-void (make-instance 'x86-asm-instruction
:name "RDTSCP"
:operands "void"
:code-string "[ 0f 01 f9]"
:arch-flags (list "X86_64")
:is-variant t))

(defparameter x64-instruction-variant-RET-void (make-instance 'x86-asm-instruction
:name "RET"
:operands "void"
:code-string "[ c3]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-RET-imm (make-instance 'x86-asm-instruction
:name "RET"
:operands "imm"
:code-string "[i: c2 iw]"
:arch-flags (list "8086" "SW" "BND")
:is-variant t))

(defparameter x64-instruction-variant-RETF-void (make-instance 'x86-asm-instruction
:name "RETF"
:operands "void"
:code-string "[ cb]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-RETF-imm (make-instance 'x86-asm-instruction
:name "RETF"
:operands "imm"
:code-string "[i: ca iw]"
:arch-flags (list "8086" "SW")
:is-variant t))

(defparameter x64-instruction-variant-RETN-void (make-instance 'x86-asm-instruction
:name "RETN"
:operands "void"
:code-string "[ c3]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-RETN-imm (make-instance 'x86-asm-instruction
:name "RETN"
:operands "imm"
:code-string "[i: c2 iw]"
:arch-flags (list "8086" "SW" "BND")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm8.unity (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm8,unity"
:code-string "[m-: d0 /0]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /0]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm8.imm8 (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm8,imm8"
:code-string "[mi: c0 /0 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm16.unity (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /0]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /0]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm16.imm8 (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /0 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm32.unity (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /0]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /0]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm32.imm8 (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /0 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm64.unity (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /0]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /0]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ROL-rm64.imm8 (make-instance 'x86-asm-instruction
:name "ROL"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /0 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm8.unity (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm8,unity"
:code-string "[m-: d0 /1]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /1]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm8.imm8 (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm8,imm8"
:code-string "[mi: c0 /1 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm16.unity (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /1]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /1]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /1 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm32.unity (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /1]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /1]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /1 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm64.unity (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /1]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /1]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-ROR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "ROR"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /1 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-RDM-void (make-instance 'x86-asm-instruction
:name "RDM"
:operands "void"
:code-string "[ 0f 3a]"
:arch-flags (list "P6" "CYRIX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-RSDC-reg_sreg.mem80 (make-instance 'x86-asm-instruction
:name "RSDC"
:operands "reg_sreg,mem80"
:code-string "[rm: 0f 79 /r]"
:arch-flags (list "486" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-RSLDT-mem80 (make-instance 'x86-asm-instruction
:name "RSLDT"
:operands "mem80"
:code-string "[m: 0f 7b /0]"
:arch-flags (list "486" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-RSM-void (make-instance 'x86-asm-instruction
:name "RSM"
:operands "void"
:code-string "[ 0f aa]"
:arch-flags (list "PENT" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-RSTS-mem80 (make-instance 'x86-asm-instruction
:name "RSTS"
:operands "mem80"
:code-string "[m: 0f 7d /0]"
:arch-flags (list "486" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-SAHF-void (make-instance 'x86-asm-instruction
:name "SAHF"
:operands "void"
:code-string "[ 9e]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm8.unity (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm8,unity"
:code-string "[m-: d0 /4]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /4]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm8.imm8 (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm8,imm8"
:code-string "[mi: c0 /4 ib,u]"
:arch-flags (list "186" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm16.unity (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /4]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /4]"
:arch-flags (list "8086" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /4 ib,u]"
:arch-flags (list "186" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm32.unity (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /4]"
:arch-flags (list "386" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /4]"
:arch-flags (list "386" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /4 ib,u]"
:arch-flags (list "386" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm64.unity (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /4]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /4]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SAL-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SAL"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /4 ib,u]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SALC-void (make-instance 'x86-asm-instruction
:name "SALC"
:operands "void"
:code-string "[ d6]"
:arch-flags (list "8086" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm8.unity (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm8,unity"
:code-string "[m-: d0 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm8.imm8 (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm8,imm8"
:code-string "[mi: c0 /7 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm16.unity (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /7 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm32.unity (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /7]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /7]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /7 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm64.unity (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /7]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /7]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SAR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SAR"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /7 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.reg8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,reg8"
:code-string "[mr: hle 18 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg8.reg8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg8,reg8"
:code-string "[mr: 18 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.reg16 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,reg16"
:code-string "[mr: hle o16 19 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg16.reg16 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg16,reg16"
:code-string "[mr: o16 19 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.reg32 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,reg32"
:code-string "[mr: hle o32 19 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg32.reg32 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg32,reg32"
:code-string "[mr: o32 19 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.reg64 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,reg64"
:code-string "[mr: hle o64 19 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg64.reg64 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg64,reg64"
:code-string "[mr: o64 19 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg8.mem (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg8,mem"
:code-string "[rm: 1a /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg8.reg8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg8,reg8"
:code-string "[rm: 1a /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg16.mem (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg16,mem"
:code-string "[rm: o16 1b /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg16.reg16 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg16,reg16"
:code-string "[rm: o16 1b /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg32.mem (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg32,mem"
:code-string "[rm: o32 1b /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg32.reg32 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg32,reg32"
:code-string "[rm: o32 1b /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg64.mem (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg64,mem"
:code-string "[rm: o64 1b /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg64.reg64 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg64,reg64"
:code-string "[rm: o64 1b /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /3 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_al.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_al,imm"
:code-string "[-i: 1c ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_ax.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_ax,imm"
:code-string "[-i: o16 1d iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_eax.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_eax,imm"
:code-string "[-i: o32 1d id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /3 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-reg_rax.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "reg_rax,imm"
:code-string "[-i: o64 1d id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm8.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm8,imm"
:code-string "[mi: hle 80 /3 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm16.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /3 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm32.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /3 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /3 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-rm64.imm (make-instance 'x86-asm-instruction
:name "SBB"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /3 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.imm8 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,imm8"
:code-string "[mi: hle 80 /3 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /3 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.imm16 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /3 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /3 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SBB-mem.imm32 (make-instance 'x86-asm-instruction
:name "SBB"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /3 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SCASB-void (make-instance 'x86-asm-instruction
:name "SCASB"
:operands "void"
:code-string "[ repe ae]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SCASD-void (make-instance 'x86-asm-instruction
:name "SCASD"
:operands "void"
:code-string "[ repe o32 af]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SCASQ-void (make-instance 'x86-asm-instruction
:name "SCASQ"
:operands "void"
:code-string "[ repe o64 af]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SCASW-void (make-instance 'x86-asm-instruction
:name "SCASW"
:operands "void"
:code-string "[ repe o16 af]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SFENCE-void (make-instance 'x86-asm-instruction
:name "SFENCE"
:operands "void"
:code-string "[ np 0f ae f8]"
:arch-flags (list "X64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-SGDT-mem (make-instance 'x86-asm-instruction
:name "SGDT"
:operands "mem"
:code-string "[m: 0f 01 /0]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm8.unity (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm8,unity"
:code-string "[m-: d0 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm8.imm8 (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm8,imm8"
:code-string "[mi: c0 /4 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm16.unity (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /4]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /4 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm32.unity (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /4]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /4]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /4 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm64.unity (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /4]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /4]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHL-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SHL"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /4 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg16.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg16,imm"
:code-string "[mri: o16 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg16.reg16.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg16,reg16,imm"
:code-string "[mri: o16 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg32.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg32,imm"
:code-string "[mri: o32 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg32.reg32.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg32,reg32,imm"
:code-string "[mri: o32 0f a4 /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg64.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg64,imm"
:code-string "[mri: o64 0f a4 /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg64.reg64.imm (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg64,reg64,imm"
:code-string "[mri: o64 0f a4 /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg16.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg16,reg_cl"
:code-string "[mr-: o16 0f a5 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg16.reg16.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg16,reg16,reg_cl"
:code-string "[mr-: o16 0f a5 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg32.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg32,reg_cl"
:code-string "[mr-: o32 0f a5 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg32.reg32.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg32,reg32,reg_cl"
:code-string "[mr-: o32 0f a5 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-mem.reg64.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "mem,reg64,reg_cl"
:code-string "[mr-: o64 0f a5 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHLD-reg64.reg64.reg_cl (make-instance 'x86-asm-instruction
:name "SHLD"
:operands "reg64,reg64,reg_cl"
:code-string "[mr-: o64 0f a5 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm8.unity (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm8,unity"
:code-string "[m-: d0 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm8.reg_cl (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm8,reg_cl"
:code-string "[m-: d2 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm8.imm8 (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm8,imm8"
:code-string "[mi: c0 /5 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm16.unity (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm16,unity"
:code-string "[m-: o16 d1 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm16.reg_cl (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm16,reg_cl"
:code-string "[m-: o16 d3 /5]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm16,imm8"
:code-string "[mi: o16 c1 /5 ib,u]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm32.unity (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm32,unity"
:code-string "[m-: o32 d1 /5]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm32.reg_cl (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm32,reg_cl"
:code-string "[m-: o32 d3 /5]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm32,imm8"
:code-string "[mi: o32 c1 /5 ib,u]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm64.unity (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm64,unity"
:code-string "[m-: o64 d1 /5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm64.reg_cl (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm64,reg_cl"
:code-string "[m-: o64 d3 /5]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SHR"
:operands "rm64,imm8"
:code-string "[mi: o64 c1 /5 ib,u]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg16.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg16,imm"
:code-string "[mri: o16 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg16.reg16.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg16,reg16,imm"
:code-string "[mri: o16 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg32.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg32,imm"
:code-string "[mri: o32 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg32.reg32.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg32,reg32,imm"
:code-string "[mri: o32 0f ac /r ib,u]"
:arch-flags (list "386" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg64.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg64,imm"
:code-string "[mri: o64 0f ac /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg64.reg64.imm (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg64,reg64,imm"
:code-string "[mri: o64 0f ac /r ib,u]"
:arch-flags (list "X64" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg16.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg16,reg_cl"
:code-string "[mr-: o16 0f ad /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg16.reg16.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg16,reg16,reg_cl"
:code-string "[mr-: o16 0f ad /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg32.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg32,reg_cl"
:code-string "[mr-: o32 0f ad /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg32.reg32.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg32,reg32,reg_cl"
:code-string "[mr-: o32 0f ad /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-mem.reg64.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "mem,reg64,reg_cl"
:code-string "[mr-: o64 0f ad /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SHRD-reg64.reg64.reg_cl (make-instance 'x86-asm-instruction
:name "SHRD"
:operands "reg64,reg64,reg_cl"
:code-string "[mr-: o64 0f ad /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SIDT-mem (make-instance 'x86-asm-instruction
:name "SIDT"
:operands "mem"
:code-string "[m: 0f 01 /1]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-mem (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "mem"
:code-string "[m: 0f 00 /0]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-mem16 (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "mem16"
:code-string "[m: 0f 00 /0]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-reg16 (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "reg16"
:code-string "[m: o16 0f 00 /0]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-reg32 (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "reg32"
:code-string "[m: o32 0f 00 /0]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-reg64 (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "reg64"
:code-string "[m: o64nw 0f 00 /0]"
:arch-flags (list "X64" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SLDT-reg64 (make-instance 'x86-asm-instruction
:name "SLDT"
:operands "reg64"
:code-string "[m: o64 0f 00 /0]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SKINIT-void (make-instance 'x86-asm-instruction
:name "SKINIT"
:operands "void"
:code-string "[ 0f 01 de]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SMI-void (make-instance 'x86-asm-instruction
:name "SMI"
:operands "void"
:code-string "[ f1]"
:arch-flags (list "386" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-SMINT-void (make-instance 'x86-asm-instruction
:name "SMINT"
:operands "void"
:code-string "[ 0f 38]"
:arch-flags (list "P6" "CYRIX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SMINTOLD-void (make-instance 'x86-asm-instruction
:name "SMINTOLD"
:operands "void"
:code-string "[ 0f 7e]"
:arch-flags (list "486" "CYRIX" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SMSW-mem (make-instance 'x86-asm-instruction
:name "SMSW"
:operands "mem"
:code-string "[m: 0f 01 /4]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SMSW-mem16 (make-instance 'x86-asm-instruction
:name "SMSW"
:operands "mem16"
:code-string "[m: 0f 01 /4]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SMSW-reg16 (make-instance 'x86-asm-instruction
:name "SMSW"
:operands "reg16"
:code-string "[m: o16 0f 01 /4]"
:arch-flags (list "286")
:is-variant t))

(defparameter x64-instruction-variant-SMSW-reg32 (make-instance 'x86-asm-instruction
:name "SMSW"
:operands "reg32"
:code-string "[m: o32 0f 01 /4]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-STC-void (make-instance 'x86-asm-instruction
:name "STC"
:operands "void"
:code-string "[ f9]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-STD-void (make-instance 'x86-asm-instruction
:name "STD"
:operands "void"
:code-string "[ fd]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-STI-void (make-instance 'x86-asm-instruction
:name "STI"
:operands "void"
:code-string "[ fb]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-STOSB-void (make-instance 'x86-asm-instruction
:name "STOSB"
:operands "void"
:code-string "[ aa]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-STOSD-void (make-instance 'x86-asm-instruction
:name "STOSD"
:operands "void"
:code-string "[ o32 ab]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-STOSQ-void (make-instance 'x86-asm-instruction
:name "STOSQ"
:operands "void"
:code-string "[ o64 ab]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-STOSW-void (make-instance 'x86-asm-instruction
:name "STOSW"
:operands "void"
:code-string "[ o16 ab]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-STR-mem (make-instance 'x86-asm-instruction
:name "STR"
:operands "mem"
:code-string "[m: 0f 00 /1]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-STR-mem16 (make-instance 'x86-asm-instruction
:name "STR"
:operands "mem16"
:code-string "[m: 0f 00 /1]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-STR-reg16 (make-instance 'x86-asm-instruction
:name "STR"
:operands "reg16"
:code-string "[m: o16 0f 00 /1]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-STR-reg32 (make-instance 'x86-asm-instruction
:name "STR"
:operands "reg32"
:code-string "[m: o32 0f 00 /1]"
:arch-flags (list "386" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-STR-reg64 (make-instance 'x86-asm-instruction
:name "STR"
:operands "reg64"
:code-string "[m: o64 0f 00 /1]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.reg8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,reg8"
:code-string "[mr: hle 28 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg8.reg8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg8,reg8"
:code-string "[mr: 28 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.reg16 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,reg16"
:code-string "[mr: hle o16 29 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg16.reg16 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg16,reg16"
:code-string "[mr: o16 29 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.reg32 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,reg32"
:code-string "[mr: hle o32 29 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg32.reg32 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg32,reg32"
:code-string "[mr: o32 29 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.reg64 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,reg64"
:code-string "[mr: hle o64 29 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg64.reg64 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg64,reg64"
:code-string "[mr: o64 29 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg8.mem (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg8,mem"
:code-string "[rm: 2a /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg8.reg8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg8,reg8"
:code-string "[rm: 2a /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg16.mem (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg16,mem"
:code-string "[rm: o16 2b /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg16.reg16 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg16,reg16"
:code-string "[rm: o16 2b /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg32.mem (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg32,mem"
:code-string "[rm: o32 2b /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg32.reg32 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg32,reg32"
:code-string "[rm: o32 2b /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg64.mem (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg64,mem"
:code-string "[rm: o64 2b /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg64.reg64 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg64,reg64"
:code-string "[rm: o64 2b /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm16.imm8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm32.imm8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm64.imm8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /5 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_al.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_al,imm"
:code-string "[-i: 2c ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_ax.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_ax,imm"
:code-string "[-i: o16 2d iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_eax.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_eax,imm"
:code-string "[-i: o32 2d id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /5 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-reg_rax.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "reg_rax,imm"
:code-string "[-i: o64 2d id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm8.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm8,imm"
:code-string "[mi: hle 80 /5 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm16.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /5 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm32.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /5 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /5 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-rm64.imm (make-instance 'x86-asm-instruction
:name "SUB"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /5 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.imm8 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,imm8"
:code-string "[mi: hle 80 /5 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /5 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.imm16 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /5 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /5 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SUB-mem.imm32 (make-instance 'x86-asm-instruction
:name "SUB"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /5 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-SVDC-mem80.reg_sreg (make-instance 'x86-asm-instruction
:name "SVDC"
:operands "mem80,reg_sreg"
:code-string "[mr: 0f 78 /r]"
:arch-flags (list "486" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-SVLDT-mem80 (make-instance 'x86-asm-instruction
:name "SVLDT"
:operands "mem80"
:code-string "[m: 0f 7a /0]"
:arch-flags (list "486" "CYRIX" "SMM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-SVTS-mem80 (make-instance 'x86-asm-instruction
:name "SVTS"
:operands "mem80"
:code-string "[m: 0f 7c /0]"
:arch-flags (list "486" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-SWAPGS-void (make-instance 'x86-asm-instruction
:name "SWAPGS"
:operands "void"
:code-string "[ 0f 01 f8]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-SYSCALL-void (make-instance 'x86-asm-instruction
:name "SYSCALL"
:operands "void"
:code-string "[ 0f 05]"
:arch-flags (list "P6" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-SYSENTER-void (make-instance 'x86-asm-instruction
:name "SYSENTER"
:operands "void"
:code-string "[ 0f 34]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-SYSEXIT-void (make-instance 'x86-asm-instruction
:name "SYSEXIT"
:operands "void"
:code-string "[ 0f 35]"
:arch-flags (list "P6" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-SYSRET-void (make-instance 'x86-asm-instruction
:name "SYSRET"
:operands "void"
:code-string "[ 0f 07]"
:arch-flags (list "P6" "PRIV" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.reg8 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,reg8"
:code-string "[mr: 84 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg8.reg8 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg8,reg8"
:code-string "[mr: 84 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.reg16 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,reg16"
:code-string "[mr: o16 85 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg16.reg16 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg16,reg16"
:code-string "[mr: o16 85 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.reg32 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,reg32"
:code-string "[mr: o32 85 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg32.reg32 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg32,reg32"
:code-string "[mr: o32 85 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.reg64 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,reg64"
:code-string "[mr: o64 85 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg64.reg64 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg64,reg64"
:code-string "[mr: o64 85 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg8.mem (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg8,mem"
:code-string "[rm: 84 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg16.mem (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg16,mem"
:code-string "[rm: o16 85 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg32.mem (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg32,mem"
:code-string "[rm: o32 85 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg64.mem (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg64,mem"
:code-string "[rm: o64 85 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg_al.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg_al,imm"
:code-string "[-i: a8 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg_ax.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg_ax,imm"
:code-string "[-i: o16 a9 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg_eax.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg_eax,imm"
:code-string "[-i: o32 a9 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-reg_rax.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "reg_rax,imm"
:code-string "[-i: o64 a9 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-rm8.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "rm8,imm"
:code-string "[mi: f6 /0 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-rm16.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "rm16,imm"
:code-string "[mi: o16 f7 /0 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-rm32.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "rm32,imm"
:code-string "[mi: o32 f7 /0 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-rm64.imm (make-instance 'x86-asm-instruction
:name "TEST"
:operands "rm64,imm"
:code-string "[mi: o64 f7 /0 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.imm8 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,imm8"
:code-string "[mi: f6 /0 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.imm16 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,imm16"
:code-string "[mi: o16 f7 /0 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-TEST-mem.imm32 (make-instance 'x86-asm-instruction
:name "TEST"
:operands "mem,imm32"
:code-string "[mi: o32 f7 /0 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-UD0-void (make-instance 'x86-asm-instruction
:name "UD0"
:operands "void"
:code-string "[ 0f ff]"
:arch-flags (list "186" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-UD1-void (make-instance 'x86-asm-instruction
:name "UD1"
:operands "void"
:code-string "[ 0f b9]"
:arch-flags (list "186" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-UD2B-void (make-instance 'x86-asm-instruction
:name "UD2B"
:operands "void"
:code-string "[ 0f b9]"
:arch-flags (list "186" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UD2-void (make-instance 'x86-asm-instruction
:name "UD2"
:operands "void"
:code-string "[ 0f 0b]"
:arch-flags (list "186")
:is-variant t))

(defparameter x64-instruction-variant-UD2A-void (make-instance 'x86-asm-instruction
:name "UD2A"
:operands "void"
:code-string "[ 0f 0b]"
:arch-flags (list "186" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-mem.reg8 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "mem,reg8"
:code-string "[mr: np 0f 10 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg8.reg8 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg8,reg8"
:code-string "[mr: np 0f 10 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-mem.reg16 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "mem,reg16"
:code-string "[mr: np o16 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg16.reg16 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg16,reg16"
:code-string "[mr: np o16 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-mem.reg32 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "mem,reg32"
:code-string "[mr: np o32 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg32.reg32 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg32,reg32"
:code-string "[mr: np o32 0f 11 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg8.mem (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg8,mem"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg8.reg8 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg8,reg8"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg16.mem (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg16,mem"
:code-string "[rm: np o16 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg16.reg16 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg16,reg16"
:code-string "[rm: np o16 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg32.mem (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg32,mem"
:code-string "[rm: np o32 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-UMOV-reg32.reg32 (make-instance 'x86-asm-instruction
:name "UMOV"
:operands "reg32,reg32"
:code-string "[rm: np o32 0f 13 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-VERR-mem (make-instance 'x86-asm-instruction
:name "VERR"
:operands "mem"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-VERR-mem16 (make-instance 'x86-asm-instruction
:name "VERR"
:operands "mem16"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-VERR-reg16 (make-instance 'x86-asm-instruction
:name "VERR"
:operands "reg16"
:code-string "[m: 0f 00 /4]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-VERW-mem (make-instance 'x86-asm-instruction
:name "VERW"
:operands "mem"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-VERW-mem16 (make-instance 'x86-asm-instruction
:name "VERW"
:operands "mem16"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-VERW-reg16 (make-instance 'x86-asm-instruction
:name "VERW"
:operands "reg16"
:code-string "[m: 0f 00 /5]"
:arch-flags (list "286" "PROT")
:is-variant t))

(defparameter x64-instruction-variant-FWAIT-void (make-instance 'x86-asm-instruction
:name "FWAIT"
:operands "void"
:code-string "[ wait]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-WBINVD-void (make-instance 'x86-asm-instruction
:name "WBINVD"
:operands "void"
:code-string "[ 0f 09]"
:arch-flags (list "486" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-WRSHR-rm32 (make-instance 'x86-asm-instruction
:name "WRSHR"
:operands "rm32"
:code-string "[m: o32 0f 37 /0]"
:arch-flags (list "P6" "CYRIX" "SMM")
:is-variant t))

(defparameter x64-instruction-variant-WRMSR-void (make-instance 'x86-asm-instruction
:name "WRMSR"
:operands "void"
:code-string "[ 0f 30]"
:arch-flags (list "PENT" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-XADD-mem.reg8 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "mem,reg8"
:code-string "[mr: hle 0f c0 /r]"
:arch-flags (list "486" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XADD-reg8.reg8 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "reg8,reg8"
:code-string "[mr: 0f c0 /r]"
:arch-flags (list "486")
:is-variant t))

(defparameter x64-instruction-variant-XADD-mem.reg16 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "mem,reg16"
:code-string "[mr: hle o16 0f c1 /r]"
:arch-flags (list "486" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XADD-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "reg16,reg16"
:code-string "[mr: o16 0f c1 /r]"
:arch-flags (list "486")
:is-variant t))

(defparameter x64-instruction-variant-XADD-mem.reg32 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "mem,reg32"
:code-string "[mr: hle o32 0f c1 /r]"
:arch-flags (list "486" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XADD-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "reg32,reg32"
:code-string "[mr: o32 0f c1 /r]"
:arch-flags (list "486")
:is-variant t))

(defparameter x64-instruction-variant-XADD-mem.reg64 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "mem,reg64"
:code-string "[mr: hle o64 0f c1 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XADD-reg64.reg64 (make-instance 'x86-asm-instruction
:name "XADD"
:operands "reg64,reg64"
:code-string "[mr: o64 0f c1 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XBTS-reg16.mem (make-instance 'x86-asm-instruction
:name "XBTS"
:operands "reg16,mem"
:code-string "[rm: o16 0f a6 /r]"
:arch-flags (list "386" "SW" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XBTS-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XBTS"
:operands "reg16,reg16"
:code-string "[rm: o16 0f a6 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XBTS-reg32.mem (make-instance 'x86-asm-instruction
:name "XBTS"
:operands "reg32,mem"
:code-string "[rm: o32 0f a6 /r]"
:arch-flags (list "386" "SD" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XBTS-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XBTS"
:operands "reg32,reg32"
:code-string "[rm: o32 0f a6 /r]"
:arch-flags (list "386" "UNDOC" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg_ax.reg16 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg_ax,reg16"
:code-string "[-r: o16 90+r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg_eax.reg32na (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg_eax,reg32na"
:code-string "[-r: o32 90+r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg_rax.reg64 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg_rax,reg64"
:code-string "[-r: o64 90+r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg16.reg_ax (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg16,reg_ax"
:code-string "[r-: o16 90+r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg32na.reg_eax (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg32na,reg_eax"
:code-string "[r-: o32 90+r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg64.reg_rax (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg64,reg_rax"
:code-string "[r-: o64 90+r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg8.mem (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg8,mem"
:code-string "[rm: hlenl 86 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg8.reg8 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg8,reg8"
:code-string "[rm: 86 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg16.mem (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg16,mem"
:code-string "[rm: hlenl o16 87 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg16,reg16"
:code-string "[rm: o16 87 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg32.mem (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg32,mem"
:code-string "[rm: hlenl o32 87 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg32,reg32"
:code-string "[rm: o32 87 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg64.mem (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg64,mem"
:code-string "[rm: hlenl o64 87 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg64.reg64 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg64,reg64"
:code-string "[rm: o64 87 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-mem.reg8 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "mem,reg8"
:code-string "[mr: hlenl 86 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg8.reg8 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg8,reg8"
:code-string "[mr: 86 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-mem.reg16 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "mem,reg16"
:code-string "[mr: hlenl o16 87 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg16,reg16"
:code-string "[mr: o16 87 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-mem.reg32 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "mem,reg32"
:code-string "[mr: hlenl o32 87 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg32,reg32"
:code-string "[mr: o32 87 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-mem.reg64 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "mem,reg64"
:code-string "[mr: hlenl o64 87 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XCHG-reg64.reg64 (make-instance 'x86-asm-instruction
:name "XCHG"
:operands "reg64,reg64"
:code-string "[mr: o64 87 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XLATB-void (make-instance 'x86-asm-instruction
:name "XLATB"
:operands "void"
:code-string "[ d7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XLAT-void (make-instance 'x86-asm-instruction
:name "XLAT"
:operands "void"
:code-string "[ d7]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.reg8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,reg8"
:code-string "[mr: hle 30 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg8.reg8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg8,reg8"
:code-string "[mr: 30 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.reg16 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,reg16"
:code-string "[mr: hle o16 31 /r]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg16,reg16"
:code-string "[mr: o16 31 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.reg32 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,reg32"
:code-string "[mr: hle o32 31 /r]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg32,reg32"
:code-string "[mr: o32 31 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.reg64 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,reg64"
:code-string "[mr: hle o64 31 /r]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg64,reg64"
:code-string "[mr: o64 31 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg8.mem (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg8,mem"
:code-string "[rm: 32 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg8.reg8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg8,reg8"
:code-string "[rm: 32 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg16.mem (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg16,mem"
:code-string "[rm: o16 33 /r]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg16.reg16 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg16,reg16"
:code-string "[rm: o16 33 /r]"
:arch-flags (list "8086")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg32.mem (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg32,mem"
:code-string "[rm: o32 33 /r]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg32.reg32 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg32,reg32"
:code-string "[rm: o32 33 /r]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg64.mem (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg64,mem"
:code-string "[rm: o64 33 /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg64.reg64 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg64,reg64"
:code-string "[rm: o64 33 /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm16.imm8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm16,imm8"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm32.imm8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm32,imm8"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm64.imm8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm64,imm8"
:code-string "[mi: hle o64 83 /6 ib,s]"
:arch-flags (list "X64" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_al.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_al,imm"
:code-string "[-i: 34 ib]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_ax.sbyteword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_ax,sbyteword"
:code-string "[mi: o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_ax.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_ax,imm"
:code-string "[-i: o16 35 iw]"
:arch-flags (list "8086" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_eax.sbytedword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_eax,sbytedword"
:code-string "[mi: o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_eax.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_eax,imm"
:code-string "[-i: o32 35 id]"
:arch-flags (list "386" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_rax.sbytedword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_rax,sbytedword"
:code-string "[mi: o64 83 /6 ib,s]"
:arch-flags (list "X64" "SM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-reg_rax.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "reg_rax,imm"
:code-string "[-i: o64 35 id,s]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm8.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm8,imm"
:code-string "[mi: hle 80 /6 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm16.sbyteword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm16,sbyteword"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm16.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm16,imm"
:code-string "[mi: hle o16 81 /6 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm32.sbytedword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm32,sbytedword"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm32.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm32,imm"
:code-string "[mi: hle o32 81 /6 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm64.sbytedword (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm64,sbytedword"
:code-string "[mi: hle o64 83 /6 ib,s]"
:arch-flags (list "X64" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-rm64.imm (make-instance 'x86-asm-instruction
:name "XOR"
:operands "rm64,imm"
:code-string "[mi: hle o64 81 /6 id,s]"
:arch-flags (list "X64" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.imm8 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,imm8"
:code-string "[mi: hle 80 /6 ib]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.sbyteword16 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,sbyteword16"
:code-string "[mi: hle o16 83 /6 ib,s]"
:arch-flags (list "8086" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.imm16 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,imm16"
:code-string "[mi: hle o16 81 /6 iw]"
:arch-flags (list "8086" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.sbytedword32 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,sbytedword32"
:code-string "[mi: hle o32 83 /6 ib,s]"
:arch-flags (list "386" "SM" "LOCK" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XOR-mem.imm32 (make-instance 'x86-asm-instruction
:name "XOR"
:operands "mem,imm32"
:code-string "[mi: hle o32 81 /6 id]"
:arch-flags (list "386" "SM" "LOCK")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg16.mem (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg16,mem"
:code-string "[rm: o16 0f 40+c /r]"
:arch-flags (list "P6" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg16.reg16 (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg16,reg16"
:code-string "[rm: o16 0f 40+c /r]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg32.mem (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg32,mem"
:code-string "[rm: o32 0f 40+c /r]"
:arch-flags (list "P6" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg32.reg32 (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg32,reg32"
:code-string "[rm: o32 0f 40+c /r]"
:arch-flags (list "P6")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg64.mem (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg64,mem"
:code-string "[rm: o64 0f 40+c /r]"
:arch-flags (list "X64" "SM")
:is-variant t))

(defparameter x64-instruction-variant-CMOVcc-reg64.reg64 (make-instance 'x86-asm-instruction
:name "CMOVcc"
:operands "reg64,reg64"
:code-string "[rm: o64 0f 40+c /r]"
:arch-flags (list "X64")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm-near (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm|near"
:code-string "[i: odf 0f 80+c rel]"
:arch-flags (list "386" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm64-near (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm64|near"
:code-string "[i: o64nw 0f 80+c rel]"
:arch-flags (list "X64" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm-short (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm|short"
:code-string "[i: 70+c rel8]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm"
:code-string "[i: jcc8 70+c rel8]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm"
:code-string "[i: 0f 80+c rel]"
:arch-flags (list "386" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm"
:code-string "[i: 71+c jlen e9 rel]"
:arch-flags (list "8086" "ND" "BND")
:is-variant t))

(defparameter x64-instruction-variant-Jcc-imm (make-instance 'x86-asm-instruction
:name "Jcc"
:operands "imm"
:code-string "[i: 70+c rel8]"
:arch-flags (list "8086" "BND")
:is-variant t))

(defparameter x64-instruction-variant-SETcc-mem (make-instance 'x86-asm-instruction
:name "SETcc"
:operands "mem"
:code-string "[m: 0f 90+c /0]"
:arch-flags (list "386" "SB")
:is-variant t))

(defparameter x64-instruction-variant-SETcc-reg8 (make-instance 'x86-asm-instruction
:name "SETcc"
:operands "reg8"
:code-string "[m: 0f 90+c /0]"
:arch-flags (list "386")
:is-variant t))

(defparameter x64-instruction-variant-ADDPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "ADDPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 58 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-ADDSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "ADDSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 58 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-ANDNPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "ANDNPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 55 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-ANDPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "ANDPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 54 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPEQPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPEQPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 00]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPEQSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPEQSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 00]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPLEPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPLEPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 02]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPLESS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPLESS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 02]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPLTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPLTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 01]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPLTSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPLTSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 01]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNEQPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPNEQPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 04]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNEQSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPNEQSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 04]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLEPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPNLEPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 06]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLESS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPNLESS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 06]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPNLTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 05]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLTSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPNLTSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 05]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPORDPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPORDPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 07]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPORDSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPORDSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 07]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPUNORDPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "CMPUNORDPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f c2 /r 03]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPUNORDSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "CMPUNORDSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f c2 /r 03]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CMPPS-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "CMPPS"
:operands "xmmreg,mem,imm"
:code-string "[rmi: np 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-CMPPS-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "CMPPS"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: np 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-CMPSS-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "CMPSS"
:operands "xmmreg,mem,imm"
:code-string "[rmi: f3 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-CMPSS-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "CMPSS"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f3 0f c2 /r ib,u]"
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-COMISS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "COMISS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: np 0f 2f /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-CVTPI2PS-xmmreg.mmxrm64 (make-instance 'x86-asm-instruction
:name "CVTPI2PS"
:operands "xmmreg,mmxrm64"
:code-string "[rm: np 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-CVTPS2PI-mmxreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "CVTPS2PI"
:operands "mmxreg,xmmrm64"
:code-string "[rm: np 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SS-xmmreg.mem (make-instance 'x86-asm-instruction
:name "CVTSI2SS"
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SS-xmmreg.rm32 (make-instance 'x86-asm-instruction
:name "CVTSI2SS"
:operands "xmmreg,rm32"
:code-string "[rm: f3 0f 2a /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SS-xmmreg.rm64 (make-instance 'x86-asm-instruction
:name "CVTSI2SS"
:operands "xmmreg,rm64"
:code-string "[rm: o64 f3 0f 2a /r]"
:arch-flags (list "X64" "SSE" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSS2SI-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "CVTSS2SI"
:operands "reg32,xmmreg"
:code-string "[rm: f3 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSS2SI-reg32.mem (make-instance 'x86-asm-instruction
:name "CVTSS2SI"
:operands "reg32,mem"
:code-string "[rm: f3 0f 2d /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSS2SI-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "CVTSS2SI"
:operands "reg64,xmmreg"
:code-string "[rm: o64 f3 0f 2d /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSS2SI-reg64.mem (make-instance 'x86-asm-instruction
:name "CVTSS2SI"
:operands "reg64,mem"
:code-string "[rm: o64 f3 0f 2d /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTTPS2PI-mmxreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTPS2PI"
:operands "mmxreg,xmmrm"
:code-string "[rm: np 0f 2c /r]"
:arch-flags (list "KATMAI" "SSE" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSS2SI-reg32.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTSS2SI"
:operands "reg32,xmmrm"
:code-string "[rm: f3 0f 2c /r]"
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSS2SI-reg64.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTSS2SI"
:operands "reg64,xmmrm"
:code-string "[rm: o64 f3 0f 2c /r]"
:arch-flags (list "X64" "SSE" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-DIVPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "DIVPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5e /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-DIVSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "DIVSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5e /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-LDMXCSR-mem32 (make-instance 'x86-asm-instruction
:name "LDMXCSR"
:operands "mem32"
:code-string "[m: np 0f ae /2]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MAXPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "MAXPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5f /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MAXSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "MAXSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5f /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MINPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "MINPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5d /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MINSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "MINSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5d /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "MOVAPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 28 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPS-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "MOVAPS"
:operands "xmmrm128,xmmreg"
:code-string "[mr: np 0f 29 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVHPS-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "MOVHPS"
:operands "xmmreg,mem64"
:code-string "[rm: np 0f 16 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVHPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVHPS"
:operands "mem64,xmmreg"
:code-string "[mr: np 0f 17 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVLHPS-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVLHPS"
:operands "xmmreg,xmmreg"
:code-string "[rm: np 0f 16 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVLPS-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "MOVLPS"
:operands "xmmreg,mem64"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVLPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVLPS"
:operands "mem64,xmmreg"
:code-string "[mr: np 0f 13 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVHLPS-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVHLPS"
:operands "xmmreg,xmmreg"
:code-string "[rm: np 0f 12 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVMSKPS-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "MOVMSKPS"
:operands "reg32,xmmreg"
:code-string "[rm: np 0f 50 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVMSKPS-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVMSKPS"
:operands "reg64,xmmreg"
:code-string "[rm: np o64 0f 50 /r]"
:arch-flags (list "X64" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTPS-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "MOVNTPS"
:operands "mem128,xmmreg"
:code-string "[mr: np 0f 2b /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "MOVSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVSS-mem32.xmmreg (make-instance 'x86-asm-instruction
:name "MOVSS"
:operands "mem32,xmmreg"
:code-string "[mr: f3 0f 11 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVSS-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVSS"
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "MOVUPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 10 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPS-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "MOVUPS"
:operands "xmmrm128,xmmreg"
:code-string "[mr: np 0f 11 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MULPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "MULPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 59 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-MULSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "MULSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 59 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-ORPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "ORPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 56 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-RCPPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "RCPPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 53 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-RCPSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "RCPSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 53 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-RSQRTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "RSQRTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 52 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-RSQRTSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "RSQRTSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 52 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-SHUFPS-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "SHUFPS"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: np 0f c6 /r ib,u]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-SQRTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SQRTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 51 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-SQRTSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "SQRTSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 51 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-STMXCSR-mem32 (make-instance 'x86-asm-instruction
:name "STMXCSR"
:operands "mem32"
:code-string "[m: np 0f ae /3]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-SUBPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SUBPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 5c /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-SUBSS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "SUBSS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: f3 0f 5c /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-UCOMISS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "UCOMISS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: np 0f 2e /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-UNPCKHPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "UNPCKHPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 15 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-UNPCKLPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "UNPCKLPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 14 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-XORPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "XORPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: np 0f 57 /r]"
:arch-flags (list "KATMAI" "SSE")
:is-variant t))

(defparameter x64-instruction-variant-FXRSTOR-mem (make-instance 'x86-asm-instruction
:name "FXRSTOR"
:operands "mem"
:code-string "[m: np 0f ae /1]"
:arch-flags (list "P6" "SSE" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXRSTOR64-mem (make-instance 'x86-asm-instruction
:name "FXRSTOR64"
:operands "mem"
:code-string "[m: o64 np 0f ae /1]"
:arch-flags (list "X64" "SSE" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXSAVE-mem (make-instance 'x86-asm-instruction
:name "FXSAVE"
:operands "mem"
:code-string "[m: np 0f ae /0]"
:arch-flags (list "P6" "SSE" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-FXSAVE64-mem (make-instance 'x86-asm-instruction
:name "FXSAVE64"
:operands "mem"
:code-string "[m: o64 np 0f ae /0]"
:arch-flags (list "X64" "SSE" "FPU")
:is-variant t))

(defparameter x64-instruction-variant-XGETBV-void (make-instance 'x86-asm-instruction
:name "XGETBV"
:operands "void"
:code-string "[ 0f 01 d0]"
:arch-flags (list "NEHALEM")
:is-variant t))

(defparameter x64-instruction-variant-XSETBV-void (make-instance 'x86-asm-instruction
:name "XSETBV"
:operands "void"
:code-string "[ 0f 01 d1]"
:arch-flags (list "NEHALEM" "PRIV")
:is-variant t))

(defparameter x64-instruction-variant-XSAVE-mem (make-instance 'x86-asm-instruction
:name "XSAVE"
:operands "mem"
:code-string "[m: np 0f ae /4]"
:arch-flags (list "NEHALEM")
:is-variant t))

(defparameter x64-instruction-variant-XSAVE64-mem (make-instance 'x86-asm-instruction
:name "XSAVE64"
:operands "mem"
:code-string "[m: o64 np 0f ae /4]"
:arch-flags (list "LONG" "NEHALEM")
:is-variant t))

(defparameter x64-instruction-variant-XSAVEC-mem (make-instance 'x86-asm-instruction
:name "XSAVEC"
:operands "mem"
:code-string "[m: np 0f c7 /4]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSAVEC64-mem (make-instance 'x86-asm-instruction
:name "XSAVEC64"
:operands "mem"
:code-string "[m: o64 np 0f c7 /4]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSAVEOPT-mem (make-instance 'x86-asm-instruction
:name "XSAVEOPT"
:operands "mem"
:code-string "[m: np 0f ae /6]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSAVEOPT64-mem (make-instance 'x86-asm-instruction
:name "XSAVEOPT64"
:operands "mem"
:code-string "[m: o64 np 0f ae /6]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSAVES-mem (make-instance 'x86-asm-instruction
:name "XSAVES"
:operands "mem"
:code-string "[m: np 0f c7 /5]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSAVES64-mem (make-instance 'x86-asm-instruction
:name "XSAVES64"
:operands "mem"
:code-string "[m: o64 np 0f c7 /5]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XRSTOR-mem (make-instance 'x86-asm-instruction
:name "XRSTOR"
:operands "mem"
:code-string "[m: np 0f ae /5]"
:arch-flags (list "NEHALEM")
:is-variant t))

(defparameter x64-instruction-variant-XRSTOR64-mem (make-instance 'x86-asm-instruction
:name "XRSTOR64"
:operands "mem"
:code-string "[m: o64 np 0f ae /5]"
:arch-flags (list "LONG" "NEHALEM")
:is-variant t))

(defparameter x64-instruction-variant-XRSTORS-mem (make-instance 'x86-asm-instruction
:name "XRSTORS"
:operands "mem"
:code-string "[m: np 0f c7 /3]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XRSTORS64-mem (make-instance 'x86-asm-instruction
:name "XRSTORS64"
:operands "mem"
:code-string "[m: o64 np 0f c7 /3]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHNTA-mem8 (make-instance 'x86-asm-instruction
:name "PREFETCHNTA"
:operands "mem8"
:code-string "[m: 0f 18 /0]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHT0-mem8 (make-instance 'x86-asm-instruction
:name "PREFETCHT0"
:operands "mem8"
:code-string "[m: 0f 18 /1]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHT1-mem8 (make-instance 'x86-asm-instruction
:name "PREFETCHT1"
:operands "mem8"
:code-string "[m: 0f 18 /2]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHT2-mem8 (make-instance 'x86-asm-instruction
:name "PREFETCHT2"
:operands "mem8"
:code-string "[m: 0f 18 /3]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-SFENCE-void (make-instance 'x86-asm-instruction
:name "SFENCE"
:operands "void"
:code-string "[ np 0f ae f8]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-MASKMOVQ-mmxreg.mmxreg (make-instance 'x86-asm-instruction
:name "MASKMOVQ"
:operands "mmxreg,mmxreg"
:code-string "[rm: np 0f f7 /r]"
:arch-flags (list "KATMAI" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTQ-mem.mmxreg (make-instance 'x86-asm-instruction
:name "MOVNTQ"
:operands "mem,mmxreg"
:code-string "[mr: np 0f e7 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PAVGB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PAVGB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e0 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PAVGW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PAVGW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e3 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRW-reg32.mmxreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRW"
:operands "reg32,mmxreg,imm"
:code-string "[rmi: np 0f c5 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-mmxreg.mem.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "mmxreg,mem,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-mmxreg.rm16.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "mmxreg,rm16,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-mmxreg.reg32.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "mmxreg,reg32,imm"
:code-string "[rmi: np 0f c4 /r ib,u]"
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PMAXSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMAXSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ee /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMAXUB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMAXUB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f de /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMINSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMINSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f ea /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMINUB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMINUB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f da /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVMSKB-reg32.mmxreg (make-instance 'x86-asm-instruction
:name "PMOVMSKB"
:operands "reg32,mmxreg"
:code-string "[rm: np 0f d7 /r]"
:arch-flags (list "KATMAI" "MMX")
:is-variant t))

(defparameter x64-instruction-variant-PMULHUW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHUW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f e4 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSADBW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSADBW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f6 /r]"
:arch-flags (list "KATMAI" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFW-mmxreg.mmxrm.imm (make-instance 'x86-asm-instruction
:name "PSHUFW"
:operands "mmxreg,mmxrm,imm"
:code-string "[rmi: np o64nw 0f 70 /r ib]"
:arch-flags (list "KATMAI" "MMX" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PF2IW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PF2IW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 1c]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFNACC-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFNACC"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 8a]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PFPNACC-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFPNACC"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 8e]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PI2FW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PI2FW"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 0c]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSWAPD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSWAPD"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r bb]"
:arch-flags (list "PENT" "3DNOW" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MASKMOVDQU-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MASKMOVDQU"
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f f7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CLFLUSH-mem (make-instance 'x86-asm-instruction
:name "CLFLUSH"
:operands "mem"
:code-string "[m: np 0f ae /7]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTDQ-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVNTDQ"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f e7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTI-mem.reg32 (make-instance 'x86-asm-instruction
:name "MOVNTI"
:operands "mem,reg32"
:code-string "[mr: np 0f c3 /r]"
:arch-flags (list "WILLAMETTE" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTI-mem.reg64 (make-instance 'x86-asm-instruction
:name "MOVNTI"
:operands "mem,reg64"
:code-string "[mr: o64 np 0f c3 /r]"
:arch-flags (list "X64" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTPD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVNTPD"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 2b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-LFENCE-void (make-instance 'x86-asm-instruction
:name "LFENCE"
:operands "void"
:code-string "[ np 0f ae e8]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MFENCE-void (make-instance 'x86-asm-instruction
:name "MFENCE"
:operands "void"
:code-string "[ np 0f ae f0]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "mem,xmmreg"
:code-string "[mr: 66 norexw 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "xmmreg,mem"
:code-string "[rm: 66 norexw 0f 6e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-xmmreg.rm32 (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "xmmreg,rm32"
:code-string "[rm: 66 norexw 0f 6e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVD-rm32.xmmreg (make-instance 'x86-asm-instruction
:name "MOVD"
:operands "rm32,xmmreg"
:code-string "[mr: 66 norexw 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQA-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQA"
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQA-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQA"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQA-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVDQA"
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQA-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQA"
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQU-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQU"
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQU-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQU"
:operands "mem,xmmreg"
:code-string "[mr: f3 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQU-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVDQU"
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 6f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQU-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQU"
:operands "xmmreg,xmmreg"
:code-string "[mr: f3 0f 7f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVDQ2Q-mmxreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVDQ2Q"
:operands "mmxreg,xmmreg"
:code-string "[rm: f2 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: f3 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "xmmreg,mem"
:code-string "[rm: f3 0f 7e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-xmmreg.rm64 (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "xmmreg,rm64"
:code-string "[rm: 66 o64 0f 6e /r]"
:arch-flags (list "X64" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ-rm64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVQ"
:operands "rm64,xmmreg"
:code-string "[mr: 66 o64 0f 7e /r]"
:arch-flags (list "X64" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVQ2DQ-xmmreg.mmxreg (make-instance 'x86-asm-instruction
:name "MOVQ2DQ"
:operands "xmmreg,mmxreg"
:code-string "[rm: f3 0f d6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-PACKSSWB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PACKSSWB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 63 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PACKSSDW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PACKSSDW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PACKUSWB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PACKUSWB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 67 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fc /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fd /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fe /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PADDQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f d4 /r]"
:arch-flags (list "WILLAMETTE" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PADDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ec /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ed /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDUSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDUSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f dc /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PADDUSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PADDUSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f dd /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PAND-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PAND"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f db /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PANDN-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PANDN"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f df /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PAVGB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PAVGB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e0 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PAVGW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PAVGW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPEQB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 74 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPEQW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 75 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPEQD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 76 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPGTB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 64 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPGTW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 65 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPGTD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 66 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRW-reg32.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRW"
:operands "reg32,xmmreg,imm"
:code-string "[rmi: 66 0f c5 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-xmmreg.reg16.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "xmmreg,reg16,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-xmmreg.reg32.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "xmmreg,reg32,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2" "ND")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRW-xmmreg.mem16.imm (make-instance 'x86-asm-instruction
:name "PINSRW"
:operands "xmmreg,mem16,imm"
:code-string "[rmi: 66 0f c4 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PMADDWD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMADDWD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMAXSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ee /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMAXUB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXUB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f de /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMINSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ea /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMINUB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINUB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f da /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMOVMSKB-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "PMOVMSKB"
:operands "reg32,xmmreg"
:code-string "[rm: 66 0f d7 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-PMULHUW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULHUW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMULHW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULHW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMULLW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULLW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d5 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMULUDQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULUDQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f f4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PMULUDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULUDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f4 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-POR-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "POR"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f eb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSADBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSADBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFD-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSHUFD"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: 66 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFD-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PSHUFD"
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFHW-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSHUFHW"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f3 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFHW-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PSHUFHW"
:operands "xmmreg,mem,imm"
:code-string "[rmi: f3 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFLW-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSHUFLW"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: f2 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFLW-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PSHUFLW"
:operands "xmmreg,mem,imm"
:code-string "[rmi: f2 0f 70 /r ib]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PSLLDQ-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSLLDQ"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /7 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSLLW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSLLW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSLLW-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSLLW"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSLLD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSLLD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSLLD-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSLLD"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSLLQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSLLQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSLLQ-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSLLQ"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /6 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRAW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSRAW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSRAW-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRAW"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /4 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRAD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSRAD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSRAD-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRAD"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /4 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRLDQ-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRLDQ"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /3 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRLW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSRLW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d1 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSRLW-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRLW"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 71 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRLD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSRLD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d2 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSRLD-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRLD"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 72 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSRLQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSRLQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d3 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSRLQ-xmmreg.imm (make-instance 'x86-asm-instruction
:name "PSRLQ"
:operands "xmmreg,imm"
:code-string "[mi: 66 0f 73 /2 ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-PSUBB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f f9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fa /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBQ-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSUBQ"
:operands "mmxreg,mmxrm"
:code-string "[rm: np o64nw 0f fb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f fb /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBUSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBUSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d8 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PSUBUSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSUBUSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d9 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKHBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 68 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHWD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKHWD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 69 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKHDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKHQDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKHQDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKLBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 60 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLWD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKLWD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 61 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKLDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 62 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PUNPCKLQDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PUNPCKLQDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 6c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-PXOR-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PXOR"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f ef /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-ADDPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ADDPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 58 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-ADDSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ADDSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 58 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-ANDNPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ANDNPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 55 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-ANDPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ANDPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 54 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPEQPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPEQPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 00]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPEQSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPEQSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 00]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPLEPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPLEPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 02]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPLESD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPLESD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 02]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPLTPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPLTPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 01]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPLTSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPLTSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 01]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPNEQPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNEQPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 04]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPNEQSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNEQSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 04]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLEPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNLEPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 06]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLESD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNLESD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 06]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLTPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNLTPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 05]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPNLTSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPNLTSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 05]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPORDPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPORDPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 07]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPORDSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPORDSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 07]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPUNORDPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPUNORDPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f c2 /r 03]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CMPUNORDSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CMPUNORDSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f c2 /r 03]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPPD-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "CMPPD"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f c2 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CMPSD-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "CMPSD"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: f2 0f c2 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-COMISD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "COMISD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 2f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-CVTDQ2PD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTDQ2PD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-CVTDQ2PS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTDQ2PS"
:operands "xmmreg,xmmrm"
:code-string "[rm: np 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTPD2DQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTPD2DQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTPD2PI-mmxreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTPD2PI"
:operands "mmxreg,xmmrm"
:code-string "[rm: 66 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTPD2PS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTPD2PS"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTPI2PD-xmmreg.mmxrm (make-instance 'x86-asm-instruction
:name "CVTPI2PD"
:operands "xmmreg,mmxrm"
:code-string "[rm: 66 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-CVTPS2DQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTPS2DQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTPS2PD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTPS2PD"
:operands "xmmreg,xmmrm"
:code-string "[rm: np 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-CVTSD2SI-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "CVTSD2SI"
:operands "reg32,xmmreg"
:code-string "[rm: norexw f2 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSD2SI-reg32.mem (make-instance 'x86-asm-instruction
:name "CVTSD2SI"
:operands "reg32,mem"
:code-string "[rm: norexw f2 0f 2d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSD2SI-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "CVTSD2SI"
:operands "reg64,xmmreg"
:code-string "[rm: o64 f2 0f 2d /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSD2SI-reg64.mem (make-instance 'x86-asm-instruction
:name "CVTSD2SI"
:operands "reg64,mem"
:code-string "[rm: o64 f2 0f 2d /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSD2SS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTSD2SS"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SD-xmmreg.mem (make-instance 'x86-asm-instruction
:name "CVTSI2SD"
:operands "xmmreg,mem"
:code-string "[rm: f2 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1" "ND")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SD-xmmreg.rm32 (make-instance 'x86-asm-instruction
:name "CVTSI2SD"
:operands "xmmreg,rm32"
:code-string "[rm: norexw f2 0f 2a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSI2SD-xmmreg.rm64 (make-instance 'x86-asm-instruction
:name "CVTSI2SD"
:operands "xmmreg,rm64"
:code-string "[rm: o64 f2 0f 2a /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTSS2SD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTSS2SD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 5a /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SD")
:is-variant t))

(defparameter x64-instruction-variant-CVTTPD2PI-mmxreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTPD2PI"
:operands "mmxreg,xmmrm"
:code-string "[rm: 66 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTTPD2DQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTPD2DQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f e6 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTTPS2DQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "CVTTPS2DQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 5b /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSD2SI-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "CVTTSD2SI"
:operands "reg32,xmmreg"
:code-string "[rm: norexw f2 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSD2SI-reg32.mem (make-instance 'x86-asm-instruction
:name "CVTTSD2SI"
:operands "reg32,mem"
:code-string "[rm: norexw f2 0f 2c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSD2SI-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "CVTTSD2SI"
:operands "reg64,xmmreg"
:code-string "[rm: o64 f2 0f 2c /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-CVTTSD2SI-reg64.mem (make-instance 'x86-asm-instruction
:name "CVTTSD2SI"
:operands "reg64,mem"
:code-string "[rm: o64 f2 0f 2c /r]"
:arch-flags (list "X64" "SSE2" "SQ" "AR1")
:is-variant t))

(defparameter x64-instruction-variant-DIVPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "DIVPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5e /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-DIVSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "DIVSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MAXPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MAXPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5f /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MAXSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MAXSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5f /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MINPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MINPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5d /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MINSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MINSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5d /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVAPD"
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 28 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVAPD"
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 29 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVAPD"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 29 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVAPD-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVAPD"
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 28 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVHPD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVHPD"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 17 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVHPD-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVHPD"
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 16 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVLPD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVLPD"
:operands "mem64,xmmreg"
:code-string "[mr: 66 0f 13 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVLPD-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "MOVLPD"
:operands "xmmreg,mem64"
:code-string "[rm: 66 0f 12 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVMSKPD-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "MOVMSKPD"
:operands "reg32,xmmreg"
:code-string "[rm: 66 0f 50 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVMSKPD-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVMSKPD"
:operands "reg64,xmmreg"
:code-string "[rm: 66 o64 0f 50 /r]"
:arch-flags (list "X64" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVSD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVSD"
:operands "xmmreg,xmmreg"
:code-string "[rm: f2 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVSD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVSD"
:operands "xmmreg,xmmreg"
:code-string "[mr: f2 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVSD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "MOVSD"
:operands "mem64,xmmreg"
:code-string "[mr: f2 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVSD-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "MOVSD"
:operands "xmmreg,mem64"
:code-string "[rm: f2 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVUPD"
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "MOVUPD"
:operands "xmmreg,xmmreg"
:code-string "[mr: 66 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVUPD"
:operands "mem,xmmreg"
:code-string "[mr: 66 0f 11 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVUPD-xmmreg.mem (make-instance 'x86-asm-instruction
:name "MOVUPD"
:operands "xmmreg,mem"
:code-string "[rm: 66 0f 10 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MULPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MULPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 59 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MULSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MULSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 59 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-ORPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ORPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 56 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-SHUFPD-xmmreg.xmmreg.imm (make-instance 'x86-asm-instruction
:name "SHUFPD"
:operands "xmmreg,xmmreg,imm"
:code-string "[rmi: 66 0f c6 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SHUFPD-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "SHUFPD"
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f c6 /r ib,u]"
:arch-flags (list "WILLAMETTE" "SSE2" "SM" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-SQRTPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "SQRTPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 51 /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-SQRTSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "SQRTSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 51 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-SUBPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "SUBPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 5c /r]"
:arch-flags (list "WILLAMETTE" "SSE2" "SO")
:is-variant t))

(defparameter x64-instruction-variant-SUBSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "SUBSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 5c /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-UCOMISD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "UCOMISD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 2e /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-UNPCKHPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "UNPCKHPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 15 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-UNPCKLPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "UNPCKLPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 14 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-XORPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "XORPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 57 /r]"
:arch-flags (list "WILLAMETTE" "SSE2")
:is-variant t))

(defparameter x64-instruction-variant-ADDSUBPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ADDSUBPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f d0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-ADDSUBPS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "ADDSUBPS"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f d0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-HADDPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "HADDPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 7c /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-HADDPS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "HADDPS"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 7c /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-HSUBPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "HSUBPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 7d /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-HSUBPS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "HSUBPS"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 7d /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-LDDQU-xmmreg.mem (make-instance 'x86-asm-instruction
:name "LDDQU"
:operands "xmmreg,mem"
:code-string "[rm: f2 0f f0 /r]"
:arch-flags (list "PRESCOTT" "SSE3" "SO")
:is-variant t))

(defparameter x64-instruction-variant-MOVDDUP-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MOVDDUP"
:operands "xmmreg,xmmrm"
:code-string "[rm: f2 0f 12 /r]"
:arch-flags (list "PRESCOTT" "SSE3")
:is-variant t))

(defparameter x64-instruction-variant-MOVSHDUP-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MOVSHDUP"
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 16 /r]"
:arch-flags (list "PRESCOTT" "SSE3")
:is-variant t))

(defparameter x64-instruction-variant-MOVSLDUP-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "MOVSLDUP"
:operands "xmmreg,xmmrm"
:code-string "[rm: f3 0f 12 /r]"
:arch-flags (list "PRESCOTT" "SSE3")
:is-variant t))

(defparameter x64-instruction-variant-CLGI-void (make-instance 'x86-asm-instruction
:name "CLGI"
:operands "void"
:code-string "[ 0f 01 dd]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-STGI-void (make-instance 'x86-asm-instruction
:name "STGI"
:operands "void"
:code-string "[ 0f 01 dc]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-VMCALL-void (make-instance 'x86-asm-instruction
:name "VMCALL"
:operands "void"
:code-string "[ 0f 01 c1]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMCLEAR-mem (make-instance 'x86-asm-instruction
:name "VMCLEAR"
:operands "mem"
:code-string "[m: 66 0f c7 /6]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMFUNC-void (make-instance 'x86-asm-instruction
:name "VMFUNC"
:operands "void"
:code-string "[ 0f 01 d4]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMLAUNCH-void (make-instance 'x86-asm-instruction
:name "VMLAUNCH"
:operands "void"
:code-string "[ 0f 01 c2]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMLOAD-void (make-instance 'x86-asm-instruction
:name "VMLOAD"
:operands "void"
:code-string "[ 0f 01 da]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-VMMCALL-void (make-instance 'x86-asm-instruction
:name "VMMCALL"
:operands "void"
:code-string "[ 0f 01 d9]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-VMPTRLD-mem (make-instance 'x86-asm-instruction
:name "VMPTRLD"
:operands "mem"
:code-string "[m: np 0f c7 /6]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMPTRST-mem (make-instance 'x86-asm-instruction
:name "VMPTRST"
:operands "mem"
:code-string "[m: np 0f c7 /7]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMREAD-rm64.reg64 (make-instance 'x86-asm-instruction
:name "VMREAD"
:operands "rm64,reg64"
:code-string "[mr: o64nw np 0f 78 /r]"
:arch-flags (list "X64" "VMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMRESUME-void (make-instance 'x86-asm-instruction
:name "VMRESUME"
:operands "void"
:code-string "[ 0f 01 c3]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMRUN-void (make-instance 'x86-asm-instruction
:name "VMRUN"
:operands "void"
:code-string "[ 0f 01 d8]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-VMSAVE-void (make-instance 'x86-asm-instruction
:name "VMSAVE"
:operands "void"
:code-string "[ 0f 01 db]"
:arch-flags (list "VMX" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-VMWRITE-reg64.rm64 (make-instance 'x86-asm-instruction
:name "VMWRITE"
:operands "reg64,rm64"
:code-string "[rm: o64nw np 0f 79 /r]"
:arch-flags (list "X64" "VMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMXOFF-void (make-instance 'x86-asm-instruction
:name "VMXOFF"
:operands "void"
:code-string "[ 0f 01 c4]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-VMXON-mem (make-instance 'x86-asm-instruction
:name "VMXON"
:operands "mem"
:code-string "[m: f3 0f c7 /6]"
:arch-flags (list "VMX")
:is-variant t))

(defparameter x64-instruction-variant-INVEPT-reg64.mem (make-instance 'x86-asm-instruction
:name "INVEPT"
:operands "reg64,mem"
:code-string "[rm: o64nw 66 0f 38 80 /r]"
:arch-flags (list "VMX" "SO" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-INVVPID-reg64.mem (make-instance 'x86-asm-instruction
:name "INVVPID"
:operands "reg64,mem"
:code-string "[rm: o64nw 66 0f 38 81 /r]"
:arch-flags (list "VMX" "SO" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-PABSB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PABSB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1c /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PABSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PABSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1c /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PABSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PABSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1d /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PABSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PABSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1d /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PABSD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PABSD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 1e /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PABSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PABSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 1e /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PALIGNR-mmxreg.mmxrm.imm (make-instance 'x86-asm-instruction
:name "PALIGNR"
:operands "mmxreg,mmxrm,imm"
:code-string "[rmi: np 0f 3a 0f /r ib,u]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PALIGNR-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PALIGNR"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0f /r ib,u]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHADDW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHADDW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 01 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHADDW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHADDW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 01 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHADDD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHADDD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 02 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHADDD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHADDD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 02 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHADDSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHADDSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 03 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHADDSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHADDSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 03 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHSUBW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 05 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHSUBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 05 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBD-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHSUBD"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 06 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHSUBD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 06 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PHSUBSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 07 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PHSUBSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHSUBSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 07 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PMADDUBSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMADDUBSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 04 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMADDUBSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMADDUBSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 04 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PMULHRSW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PMULHRSW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 0b /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMULHRSW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULHRSW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 0b /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSHUFB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 00 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSHUFB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSHUFB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 00 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PSIGNB-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSIGNB"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 08 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSIGNB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSIGNB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 08 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PSIGNW-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSIGNW"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 09 /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSIGNW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSIGNW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 09 /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-PSIGND-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PSIGND"
:operands "mmxreg,mmxrm"
:code-string "[rm: np 0f 38 0a /r]"
:arch-flags (list "SSSE3" "MMX" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PSIGND-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PSIGND"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 0a /r]"
:arch-flags (list "SSSE3")
:is-variant t))

(defparameter x64-instruction-variant-EXTRQ-xmmreg.imm.imm (make-instance 'x86-asm-instruction
:name "EXTRQ"
:operands "xmmreg,imm,imm"
:code-string "[mij: 66 0f 78 /0 ib,u ib,u]"
:arch-flags (list "SSE4A" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-EXTRQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "EXTRQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: 66 0f 79 /r]"
:arch-flags (list "SSE4A" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-INSERTQ-xmmreg.xmmreg.imm.imm (make-instance 'x86-asm-instruction
:name "INSERTQ"
:operands "xmmreg,xmmreg,imm,imm"
:code-string "[rmij: f2 0f 78 /r ib,u ib,u]"
:arch-flags (list "SSE4A" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-INSERTQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "INSERTQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: f2 0f 79 /r]"
:arch-flags (list "SSE4A" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTSD-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVNTSD"
:operands "mem,xmmreg"
:code-string "[mr: f2 0f 2b /r]"
:arch-flags (list "SSE4A" "AMD" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTSS-mem.xmmreg (make-instance 'x86-asm-instruction
:name "MOVNTSS"
:operands "mem,xmmreg"
:code-string "[mr: f3 0f 2b /r]"
:arch-flags (list "SSE4A" "AMD" "SD")
:is-variant t))

(defparameter x64-instruction-variant-LZCNT-reg16.rm16 (make-instance 'x86-asm-instruction
:name "LZCNT"
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f bd /r]"
:arch-flags (list "P6" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-LZCNT-reg32.rm32 (make-instance 'x86-asm-instruction
:name "LZCNT"
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f bd /r]"
:arch-flags (list "P6" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-LZCNT-reg64.rm64 (make-instance 'x86-asm-instruction
:name "LZCNT"
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f bd /r]"
:arch-flags (list "X64" "AMD")
:is-variant t))

(defparameter x64-instruction-variant-BLENDPD-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "BLENDPD"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0d /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-BLENDPS-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "BLENDPS"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0c /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-BLENDVPD-xmmreg.xmmrm.xmm0 (make-instance 'x86-asm-instruction
:name "BLENDVPD"
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 15 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-BLENDVPD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "BLENDVPD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 15 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-BLENDVPS-xmmreg.xmmrm.xmm0 (make-instance 'x86-asm-instruction
:name "BLENDVPS"
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 14 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-BLENDVPS-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "BLENDVPS"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 14 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-DPPD-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "DPPD"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 41 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-DPPS-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "DPPS"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 40 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-EXTRACTPS-rm32.xmmreg.imm (make-instance 'x86-asm-instruction
:name "EXTRACTPS"
:operands "rm32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 17 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-EXTRACTPS-reg64.xmmreg.imm (make-instance 'x86-asm-instruction
:name "EXTRACTPS"
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 17 /r ib,u]"
:arch-flags (list "SSE41" "X64")
:is-variant t))

(defparameter x64-instruction-variant-INSERTPS-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "INSERTPS"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 21 /r ib,u]"
:arch-flags (list "SSE41" "SD")
:is-variant t))

(defparameter x64-instruction-variant-MOVNTDQA-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "MOVNTDQA"
:operands "xmmreg,mem128"
:code-string "[rm: 66 0f 38 2a /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-MPSADBW-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "MPSADBW"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 42 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PACKUSDW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PACKUSDW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 2b /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PBLENDVB-xmmreg.xmmrm.xmm0 (make-instance 'x86-asm-instruction
:name "PBLENDVB"
:operands "xmmreg,xmmrm,xmm0"
:code-string "[rm-: 66 0f 38 10 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PBLENDVB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PBLENDVB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 10 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PBLENDW-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PBLENDW"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0e /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PCMPEQQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPEQQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 29 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRB-reg32.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRB"
:operands "reg32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRB-mem8.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRB"
:operands "mem8,xmmreg,imm"
:code-string "[mri: 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRB-reg64.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRB"
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 14 /r ib,u]"
:arch-flags (list "SSE41" "X64")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRD-rm32.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRD"
:operands "rm32,xmmreg,imm"
:code-string "[mri: norexw 66 0f 3a 16 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRQ-rm64.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRQ"
:operands "rm64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 16 /r ib,u]"
:arch-flags (list "SSE41" "X64")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRW-reg32.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRW"
:operands "reg32,xmmreg,imm"
:code-string "[mri: 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRW-mem16.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRW"
:operands "mem16,xmmreg,imm"
:code-string "[mri: 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PEXTRW-reg64.xmmreg.imm (make-instance 'x86-asm-instruction
:name "PEXTRW"
:operands "reg64,xmmreg,imm"
:code-string "[mri: o64 66 0f 3a 15 /r ib,u]"
:arch-flags (list "SSE41" "X64")
:is-variant t))

(defparameter x64-instruction-variant-PHMINPOSUW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PHMINPOSUW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 41 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PINSRB-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PINSRB"
:operands "xmmreg,mem,imm"
:code-string "[rmi: 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRB-xmmreg.rm8.imm (make-instance 'x86-asm-instruction
:name "PINSRB"
:operands "xmmreg,rm8,imm"
:code-string "[rmi: nohi 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRB-xmmreg.reg32.imm (make-instance 'x86-asm-instruction
:name "PINSRB"
:operands "xmmreg,reg32,imm"
:code-string "[rmi: 66 0f 3a 20 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRD-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PINSRD"
:operands "xmmreg,mem,imm"
:code-string "[rmi: norexw 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRD-xmmreg.rm32.imm (make-instance 'x86-asm-instruction
:name "PINSRD"
:operands "xmmreg,rm32,imm"
:code-string "[rmi: norexw 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRQ-xmmreg.mem.imm (make-instance 'x86-asm-instruction
:name "PINSRQ"
:operands "xmmreg,mem,imm"
:code-string "[rmi: o64 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "X64" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PINSRQ-xmmreg.rm64.imm (make-instance 'x86-asm-instruction
:name "PINSRQ"
:operands "xmmreg,rm64,imm"
:code-string "[rmi: o64 66 0f 3a 22 /r ib,u]"
:arch-flags (list "SSE41" "X64" "SB" "AR2")
:is-variant t))

(defparameter x64-instruction-variant-PMAXSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3c /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMAXSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3d /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMAXUD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXUD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3f /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMAXUW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMAXUW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3e /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMINSB-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINSB"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 38 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMINSD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINSD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 39 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMINUD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINUD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3b /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMINUW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMINUW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 3a /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 20 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXBD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXBD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 21 /r]"
:arch-flags (list "SSE41" "SD")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXBQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXBQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 22 /r]"
:arch-flags (list "SSE41" "SW")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXWD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXWD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 23 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXWQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXWQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 24 /r]"
:arch-flags (list "SSE41" "SD")
:is-variant t))

(defparameter x64-instruction-variant-PMOVSXDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVSXDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 25 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXBW-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXBW"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 30 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXBD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXBD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 31 /r]"
:arch-flags (list "SSE41" "SD")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXBQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXBQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 32 /r]"
:arch-flags (list "SSE41" "SW")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXWD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXWD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 33 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXWQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXWQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 34 /r]"
:arch-flags (list "SSE41" "SD")
:is-variant t))

(defparameter x64-instruction-variant-PMOVZXDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMOVZXDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 35 /r]"
:arch-flags (list "SSE41" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-PMULDQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULDQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 28 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PMULLD-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PMULLD"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 40 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-PTEST-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PTEST"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 17 /r]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-ROUNDPD-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "ROUNDPD"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 09 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-ROUNDPS-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "ROUNDPS"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 08 /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-ROUNDSD-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "ROUNDSD"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0b /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-ROUNDSS-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "ROUNDSS"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 0a /r ib,u]"
:arch-flags (list "SSE41")
:is-variant t))

(defparameter x64-instruction-variant-CRC32-reg32.rm8 (make-instance 'x86-asm-instruction
:name "CRC32"
:operands "reg32,rm8"
:code-string "[rm: f2i 0f 38 f0 /r]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-CRC32-reg32.rm16 (make-instance 'x86-asm-instruction
:name "CRC32"
:operands "reg32,rm16"
:code-string "[rm: o16 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-CRC32-reg32.rm32 (make-instance 'x86-asm-instruction
:name "CRC32"
:operands "reg32,rm32"
:code-string "[rm: o32 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-CRC32-reg64.rm8 (make-instance 'x86-asm-instruction
:name "CRC32"
:operands "reg64,rm8"
:code-string "[rm: o64 f2i 0f 38 f0 /r]"
:arch-flags (list "SSE42" "X64")
:is-variant t))

(defparameter x64-instruction-variant-CRC32-reg64.rm64 (make-instance 'x86-asm-instruction
:name "CRC32"
:operands "reg64,rm64"
:code-string "[rm: o64 f2i 0f 38 f1 /r]"
:arch-flags (list "SSE42" "X64")
:is-variant t))

(defparameter x64-instruction-variant-PCMPESTRI-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PCMPESTRI"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 61 /r ib,u]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-PCMPESTRM-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PCMPESTRM"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 60 /r ib,u]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-PCMPISTRI-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PCMPISTRI"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 63 /r ib,u]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-PCMPISTRM-xmmreg.xmmrm.imm (make-instance 'x86-asm-instruction
:name "PCMPISTRM"
:operands "xmmreg,xmmrm,imm"
:code-string "[rmi: 66 0f 3a 62 /r ib,u]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-PCMPGTQ-xmmreg.xmmrm (make-instance 'x86-asm-instruction
:name "PCMPGTQ"
:operands "xmmreg,xmmrm"
:code-string "[rm: 66 0f 38 37 /r]"
:arch-flags (list "SSE42")
:is-variant t))

(defparameter x64-instruction-variant-POPCNT-reg16.rm16 (make-instance 'x86-asm-instruction
:name "POPCNT"
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SW")
:is-variant t))

(defparameter x64-instruction-variant-POPCNT-reg32.rm32 (make-instance 'x86-asm-instruction
:name "POPCNT"
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SD")
:is-variant t))

(defparameter x64-instruction-variant-POPCNT-reg64.rm64 (make-instance 'x86-asm-instruction
:name "POPCNT"
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f b8 /r]"
:arch-flags (list "NEHALEM" "SQ" "X64")
:is-variant t))

(defparameter x64-instruction-variant-GETSEC-void (make-instance 'x86-asm-instruction
:name "GETSEC"
:operands "void"
:code-string "[ 0f 37]"
:arch-flags (list "KATMAI")
:is-variant t))

(defparameter x64-instruction-variant-PFRCPV-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRCPV"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 86]"
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-PFRSQRTV-mmxreg.mmxrm (make-instance 'x86-asm-instruction
:name "PFRSQRTV"
:operands "mmxreg,mmxrm"
:code-string "[rm: o64nw 0f 0f /r 87]"
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-reg16.mem16 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "reg16,mem16"
:code-string "[rm: o16 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-reg32.mem32 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "reg32,mem32"
:code-string "[rm: o32 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-reg64.mem64 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "reg64,mem64"
:code-string "[rm: o64 norep 0f 38 f0 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-mem16.reg16 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "mem16,reg16"
:code-string "[mr: o16 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-mem32.reg32 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "mem32,reg32"
:code-string "[mr: o32 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-MOVBE-mem64.reg64 (make-instance 'x86-asm-instruction
:name "MOVBE"
:operands "mem64,reg64"
:code-string "[mr: o64 norep 0f 38 f1 /r]"
:arch-flags (list "NEHALEM" "SM")
:is-variant t))

(defparameter x64-instruction-variant-AESENC-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "AESENC"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 dc /r]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-AESENCLAST-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "AESENCLAST"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 dd /r]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-AESDEC-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "AESDEC"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 de /r]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-AESDECLAST-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "AESDECLAST"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 df /r]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-AESIMC-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "AESIMC"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 38 db /r]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-AESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "AESKEYGENASSIST"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f 3a df /r ib]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-VAESENC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VAESENC"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 dc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VAESENCLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VAESENCLAST"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 dd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VAESDEC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VAESDEC"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 de /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VAESDECLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VAESDECLAST"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 df /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VAESIMC-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VAESIMC"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 db /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VAESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VAESKEYGENASSIST"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a df /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VADDPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VADDPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VADDPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VADDPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VADDSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VADDSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 58 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VADDSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VADDSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VADDSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VADDSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f d0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VANDPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VANDPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VANDPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VANDPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 54 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VANDNPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VANDNPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VANDNPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VANDNPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 55 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VBLENDPD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0d /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VBLENDPD"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0d /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VBLENDPS"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0c /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VBLENDPS"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0c /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VBLENDVPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4b /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VBLENDVPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a.w0 4b /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VBLENDVPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4a /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VBLENDVPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a.w0 4a /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-xmmreg.mem32 (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "xmmreg,mem32"
:code-string "[rm: vex.128.66.0f38.w0 18 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-ymmreg.mem32 (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38.w0 18 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38.w0 19 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF128-ymmreg.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTF128"
:operands "ymmreg,mem128"
:code-string "[rm: vex.256.66.0f38.w0 1a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLTPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLTPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORDPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORDPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLTPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLTPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORD_QPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORD_QPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORDPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORDPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGTPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGTPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGTPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGTPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUEPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUEPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORD_SPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORD_SPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPD"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLTPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLTPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORDPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORDPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLTPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLTPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORD_QPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORD_QPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORDPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORDPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGTPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGTPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGTPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGTPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUEPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUEPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPORD_SPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPORD_SPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPS"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPS"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLTSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORDSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLTSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORD_QSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORDSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGTSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGTSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUESD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORD_SSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x86-asm-instruction
:name "VCMPSD"
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.lig.f2.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLT_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLTSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLE_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 02]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_QSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORDSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 03]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 04]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLT_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLTSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 05]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLE_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 06]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORD_QSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORDSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 07]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 08]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGE_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 09]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGT_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGTSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGE_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGT_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGTSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUESS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLT_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPLE_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 12]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPUNORD_SSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 13]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 14]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLT_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 15]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNLE_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 16]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPORD_SSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 17]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPEQ_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 18]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGE_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 19]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNGT_UQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1a]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPFALSE_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1b]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPNEQ_OSSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1c]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGE_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1d]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPGT_OQSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1e]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCMPTRUE_USSS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f3.0f c2 /r 1f]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x86-asm-instruction
:name "VCMPSS"
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.lig.f3.0f c2 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMISD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCOMISD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.lig.66.0f 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMISS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCOMISS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.lig.0f 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f3.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PD-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PD"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.f3.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg.ymmreg (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg.mem256 (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.f2.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg.ymmreg (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg.mem256 (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.66.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2DQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTPS2DQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2DQ-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCVTPS2DQ"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTPS2PD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PD-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTPS2PD"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SI-reg32.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTSD2SI"
:operands "reg32,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SI-reg64.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTSD2SI"
:operands "reg64,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w1 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTSD2SS"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.rm32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SD"
:operands "xmmreg,xmmreg*,rm32"
:code-string "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.mem32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SD"
:operands "xmmreg,xmmreg*,mem32"
:code-string "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.rm64 (make-instance 'x86-asm-instruction
:name "VCVTSI2SD"
:operands "xmmreg,xmmreg*,rm64"
:code-string "[rvm: vex.nds.lig.f2.0f.w1 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.rm32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SS"
:operands "xmmreg,xmmreg*,rm32"
:code-string "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.mem32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SS"
:operands "xmmreg,xmmreg*,mem32"
:code-string "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.rm64 (make-instance 'x86-asm-instruction
:name "VCVTSI2SS"
:operands "xmmreg,xmmreg*,rm64"
:code-string "[rvm: vex.nds.lig.f3.0f.w1 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SD-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCVTSS2SD"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SI-reg32.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCVTSS2SI"
:operands "reg32,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SI-reg64.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCVTSS2SI"
:operands "reg64,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w1 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg.ymmreg (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg,ymmreg"
:code-string "[rm: vex.256.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg.mem256 (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg,mem256"
:code-string "[rm: vex.256.66.0f e6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2DQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTTPS2DQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2DQ-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VCVTTPS2DQ"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 5b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2SI-reg32.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTTSD2SI"
:operands "reg32,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2SI-reg64.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTTSD2SI"
:operands "reg64,xmmrm64"
:code-string "[rm: vex.lig.f2.0f.w1 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2SI-reg32.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCVTTSS2SI"
:operands "reg32,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2SI-reg64.xmmrm32 (make-instance 'x86-asm-instruction
:name "VCVTTSS2SI"
:operands "reg64,xmmrm32"
:code-string "[rm: vex.lig.f3.0f.w1 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VDIVPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VDIVPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VDIVPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VDIVPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VDIVSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VDIVSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VDPPD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 41 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VDPPS"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 40 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VDPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VDPPS"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 40 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF128-xmmrm128.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF128"
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 19 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTPS-rm32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTPS"
:operands "rm32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a 17 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VHADDPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VHADDPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VHADDPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VHADDPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f 7c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VHSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VHSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VHSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.f2.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VHSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VHSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.f2.0f 7d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF128"
:operands "ymmreg,ymmreg,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 18 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTPS"
:operands "xmmreg,xmmreg*,xmmrm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 21 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VLDDQU-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VLDDQU"
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VLDQQU-ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VLDQQU"
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VLDDQU-ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VLDDQU"
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.f2.0f f0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VLDMXCSR-mem32 (make-instance 'x86-asm-instruction
:name "VLDMXCSR"
:operands "mem32"
:code-string "[m: vex.lz.0f ae /2]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVDQU-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMASKMOVDQU"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f f7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPS-xmmreg.xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VMASKMOVPS"
:operands "xmmreg,xmmreg,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPS-ymmreg.ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VMASKMOVPS"
:operands "ymmreg,ymmreg,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 2c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPS-mem128.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMASKMOVPS"
:operands "mem128,xmmreg,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPS-mem256.ymmreg.ymmreg (make-instance 'x86-asm-instruction
:name "VMASKMOVPS"
:operands "mem256,ymmreg,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPD-xmmreg.xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VMASKMOVPD"
:operands "xmmreg,xmmreg,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPD-ymmreg.ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VMASKMOVPD"
:operands "ymmreg,ymmreg,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 2d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPD-mem128.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMASKMOVPD"
:operands "mem128,xmmreg,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMASKMOVPD-mem256.ymmreg.ymmreg (make-instance 'x86-asm-instruction
:name "VMASKMOVPD"
:operands "mem256,ymmreg,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 2f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMAXPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMAXPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMAXPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMAXPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMAXSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VMAXSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMINPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMINPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMINPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMINPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMINSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMINSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VMINSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.0f 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVD-xmmreg.rm32 (make-instance 'x86-asm-instruction
:name "VMOVD"
:operands "xmmreg,rm32"
:code-string "[rm: vex.128.66.0f.w0 6e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVD-rm32.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVD"
:operands "rm32,xmmreg"
:code-string "[mr: vex.128.66.0f.w0 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f3.0f 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmrm64,xmmreg"
:code-string "[mr: vex.128.66.0f d6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmreg.rm64 (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmreg,rm64"
:code-string "[rm: vex.128.66.0f.w1 6e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-rm64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "rm64,xmmreg"
:code-string "[mr: vex.128.66.0f.w1 7e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDDUP-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMOVDDUP"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.f2.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDDUP-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDDUP"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f2.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQA"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQQA-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVQQA"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQQA-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVQQA"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA-ymmreg.ymmrm (make-instance 'x86-asm-instruction
:name "VMOVDQA"
:operands "ymmreg,ymmrm"
:code-string "[rm: vex.256.66.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQU"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQQU-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVQQU"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQQU-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVQQU"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQU"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 6f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.f3.0f 7f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHLPS-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHLPS"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.128.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPD-xmmreg.xmmreg*.mem64 (make-instance 'x86-asm-instruction
:name "VMOVHPD"
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.66.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHPD"
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.66.0f 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPS-xmmreg.xmmreg*.mem64 (make-instance 'x86-asm-instruction
:name "VMOVHPS"
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHPS"
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.0f 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLHPS-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLHPS"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.128.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPD-xmmreg.xmmreg*.mem64 (make-instance 'x86-asm-instruction
:name "VMOVLPD"
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.66.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLPD"
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.66.0f 13 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPS-xmmreg.xmmreg*.mem64 (make-instance 'x86-asm-instruction
:name "VMOVLPS"
:operands "xmmreg,xmmreg*,mem64"
:code-string "[rvm: vex.nds.128.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLPS"
:operands "mem64,xmmreg"
:code-string "[mr: vex.128.0f 13 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPD-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPD"
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPD-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPD"
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPD-reg64.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPD"
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPD-reg32.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPD"
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.66.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPS-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPS"
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPS-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPS"
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPS-reg64.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPS"
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VMOVMSKPS-reg32.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVMSKPS"
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.0f 50 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQ-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTDQ"
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTQQ-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTQQ"
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQ-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTDQ"
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f e7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQA-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VMOVNTDQA"
:operands "xmmreg,mem128"
:code-string "[rm: vex.128.66.0f38 2a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPD-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPD"
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.66.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPD-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPD"
:operands "mem256,ymmreg"
:code-string "[mr: vex.256.66.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPS-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPS"
:operands "mem128,xmmreg"
:code-string "[mr: vex.128.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPS-mem128.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPS"
:operands "mem128,ymmreg"
:code-string "[mr: vex.256.0f 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.lig.f2.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg,mem64"
:code-string "[rm: vex.lig.f2.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.lig.f2.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "mem64,xmmreg"
:code-string "[mr: vex.lig.f2.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSHDUP-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVSHDUP"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSHDUP-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVSHDUP"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 16 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSLDUP-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVSLDUP"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.f3.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSLDUP-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVSLDUP"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.f3.0f 12 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[rvm: vex.nds.lig.f3.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg.mem32 (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg,mem32"
:code-string "[rm: vex.lig.f3.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.lig.f3.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-mem32.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "mem32,xmmreg"
:code-string "[mr: vex.lig.f3.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.66.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.66.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "xmmrm128,xmmreg"
:code-string "[mr: vex.128.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 10 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "ymmrm256,ymmreg"
:code-string "[mr: vex.256.0f 11 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VMPSADBW"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 42 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMULPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMULPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMULPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMULPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMULSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VMULSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VMULSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 59 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VORPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VORPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VORPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VORPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 56 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSB-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPABSB"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSW-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPABSW"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPABSD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 1e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKSSWB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 63 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKSSDW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKUSWB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 67 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKUSDW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 2b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fe /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ec /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ed /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDUSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f dc /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDUSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f dd /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPALIGNR"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0f /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPAND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPAND"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f db /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDN-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPANDN"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f df /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPAVGB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e0 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPAVGW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPBLENDVB"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.nds.128.66.0f3a.w0 4c /r /is4]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPBLENDW"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0e /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPESTRI-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPESTRI"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 61 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPESTRM-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPESTRM"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 60 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPISTRI-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPISTRI"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 63 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPISTRM-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPISTRM"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 62 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 74 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 75 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 76 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 29 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 64 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 65 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 66 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 37 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 0d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 0d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a.w0 05 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w0 05 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 0c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 0c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a.w0 04 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w0 04 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERM2F128"
:operands "ymmreg,ymmreg,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 06 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "mem8,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 14 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg64,xmmreg,imm8"
:code-string "[rmi: vex.128.66.0f.w0 c5 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg32,xmmreg,imm8"
:code-string "[rmi: vex.128.66.0f.w0 c5 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "mem16,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 15 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRD-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRD"
:operands "reg64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRD"
:operands "rm32,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRQ"
:operands "rm64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w1 16 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHADDW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 01 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHADDD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 02 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHADDSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 03 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHMINPOSUW-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHMINPOSUW"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 41 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHSUBW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 05 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHSUBD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 06 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPHSUBSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 07 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.mem8.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRB"
:operands "xmmreg,xmmreg*,mem8,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.rm8.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRB"
:operands "xmmreg,xmmreg*,rm8,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRB"
:operands "xmmreg,xmmreg*,reg32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.mem16.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRW"
:operands "xmmreg,xmmreg*,mem16,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.rm16.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRW"
:operands "xmmreg,xmmreg*,rm16,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRW"
:operands "xmmreg,xmmreg*,reg32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c4 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRD-xmmreg.xmmreg*.mem32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRD"
:operands "xmmreg,xmmreg*,mem32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRD-xmmreg.xmmreg*.rm32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRD"
:operands "xmmreg,xmmreg*,rm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRQ-xmmreg.xmmreg*.mem64.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRQ"
:operands "xmmreg,xmmreg*,mem64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRQ-xmmreg.xmmreg*.rm64.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRQ"
:operands "xmmreg,xmmreg*,rm64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMADDWD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMADDUBSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 04 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ee /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXSD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXUB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f de /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXUW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXUD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 38 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ea /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINSD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 39 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINUB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f da /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINUW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINUD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 3b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVMSKB-reg64.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVMSKB"
:operands "reg64,xmmreg"
:code-string "[rm: vex.128.66.0f d7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVMSKB-reg32.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVMSKB"
:operands "reg32,xmmreg"
:code-string "[rm: vex.128.66.0f d7 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBW-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXBW"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 20 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 21 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-xmmreg.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "xmmreg,xmmrm16"
:code-string "[rm: vex.128.66.0f38 22 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXWD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 23 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 24 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXDQ-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXDQ"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 25 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBW-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXBW"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 30 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 31 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-xmmreg.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "xmmreg,xmmrm16"
:code-string "[rm: vex.128.66.0f38 32 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXWD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 33 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.128.66.0f38 34 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXDQ-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXDQ"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38 35 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHUW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHRSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHRSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 0b /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULLW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d5 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULLD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 40 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULUDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULUDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f4 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 28 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPOR"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f eb /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSADBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSADBW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f6 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHUFB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 00 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFD-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFD"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFHW-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFHW"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.f3.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFLW-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFLW"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.f2.0f 70 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGNB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSIGNB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 08 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGNW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSIGNW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 09 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSIGND"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38 0a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLDQ"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /7 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLDQ"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /3 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /6 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /4 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /4 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d1 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 71 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d2 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 72 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d3 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-xmmreg.xmmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "xmmreg,xmmreg*,imm8"
:code-string "[vmi: vex.ndd.128.66.0f 73 /2 ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPTEST-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPTEST"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPTEST-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPTEST"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 17 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f f9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fa /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f fb /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f e9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBUSB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d8 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBUSW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f d9 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHBW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 68 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHWD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 69 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6a /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6d /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLBW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 60 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLWD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 61 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 62 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 6c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPXOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPXOR"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f ef /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRCPPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VRCPPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRCPPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VRCPPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRCPSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VRCPSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 53 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VRSQRTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRTPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VRSQRTPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VRSQRTSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 52 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDPD-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDPD"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 09 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDPD-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDPD"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a 09 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDPS-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDPS"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: vex.128.66.0f3a 08 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDPS-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDPS"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a 08 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDSD"
:operands "xmmreg,xmmreg*,xmmrm64,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0b /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x86-asm-instruction
:name "VROUNDSS"
:operands "xmmreg,xmmreg*,xmmrm32,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 0a /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPD"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPS"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPS"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.0f c6 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VSQRTPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPD-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VSQRTPD"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VSQRTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VSQRTPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VSQRTSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VSQRTSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 51 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSTMXCSR-mem32 (make-instance 'x86-asm-instruction
:name "VSTMXCSR"
:operands "mem32"
:code-string "[m: vex.128.0f ae /3]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x86-asm-instruction
:name "VSUBSD"
:operands "xmmreg,xmmreg*,xmmrm64"
:code-string "[rvm: vex.nds.lig.f2.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x86-asm-instruction
:name "VSUBSS"
:operands "xmmreg,xmmreg*,xmmrm32"
:code-string "[rvm: vex.nds.lig.f3.0f 5c /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VTESTPS-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VTESTPS"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38.w0 0e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VTESTPS-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VTESTPS"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38.w0 0e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VTESTPD-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VTESTPD"
:operands "xmmreg,xmmrm128"
:code-string "[rm: vex.128.66.0f38.w0 0f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VTESTPD-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VTESTPD"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38.w0 0f /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUCOMISD-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VUCOMISD"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.lig.66.0f 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUCOMISS-xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VUCOMISS"
:operands "xmmreg,xmmrm32"
:code-string "[rm: vex.lig.0f 2e /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VUNPCKHPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VUNPCKHPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VUNPCKHPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VUNPCKHPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 15 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VUNPCKLPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VUNPCKLPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VUNPCKLPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VUNPCKLPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 14 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VXORPD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VXORPD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VXORPS"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VXORPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.0f 57 /r]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VZEROALL-void (make-instance 'x86-asm-instruction
:name "VZEROALL"
:operands "void"
:code-string "[ vex.256.0f.w0 77]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VZEROUPPER-void (make-instance 'x86-asm-instruction
:name "VZEROUPPER"
:operands "void"
:code-string "[ vex.128.0f.w0 77]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-PCLMULLQLQDQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "PCLMULLQLQDQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 00]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-PCLMULHQLQDQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "PCLMULHQLQDQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 01]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-PCLMULLQHQDQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "PCLMULLQHQDQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 10]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-PCLMULHQHQDQ-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "PCLMULHQHQDQ"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 66 0f 3a 44 /r 11]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-PCLMULQDQ-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "PCLMULQDQ"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 66 0f 3a 44 /r ib]"
:arch-flags (list "SSE" "WESTMERE")
:is-variant t))

(defparameter x64-instruction-variant-VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCLMULLQLQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 00]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCLMULHQLQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 01]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCLMULLQHQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 10]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCLMULHQHQDQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f3a 44 /r 11]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCLMULQDQ"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a 44 /r ib]"
:arch-flags (list "AVX" "SANDYBRIDGE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 98 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADD321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADD321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 96 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUB321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUB321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9a /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 aa /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUB321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUB321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ba /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 97 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADD321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADD321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9c /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ac /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADD321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADD321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 bc /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB312PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB312PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB312PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB312PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 9e /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB123PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB123PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB123PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB123PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 ae /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB321PS"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB321PS"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w0 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUB321PD"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm: vex.dds.128.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUB321PD"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm: vex.dds.256.66.0f38.w1 be /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD132SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 99 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD132SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 99 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD312SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 99 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD312SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 99 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD213SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD213SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD123SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD123SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD231SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD231SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADD321SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADD321SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB132SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9b /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB132SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9b /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB312SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9b /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB312SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9b /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB213SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ab /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB213SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ab /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB123SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ab /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB123SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ab /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB231SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bb /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB231SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bb /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUB321SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bb /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUB321SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bb /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD132SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9d /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD132SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9d /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD312SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9d /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD312SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9d /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD213SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ad /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD213SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ad /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD123SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 ad /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD123SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 ad /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD231SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bd /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD231SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bd /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADD321SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bd /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADD321SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bd /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB132SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9f /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB132SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9f /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB312SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 9f /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB312SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 9f /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB213SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 af /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB213SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 af /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB123SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 af /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB123SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 af /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB231SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bf /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB231SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bf /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUB321SS"
:operands "xmmreg,xmmreg,xmmrm32"
:code-string "[rvm: vex.dds.128.66.0f38.w0 bf /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUB321SD"
:operands "xmmreg,xmmreg,xmmrm64"
:code-string "[rvm: vex.dds.128.66.0f38.w1 bf /r]"
:arch-flags (list "FMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDFSBASE-reg32 (make-instance 'x86-asm-instruction
:name "RDFSBASE"
:operands "reg32"
:code-string "[m: norexw f3 0f ae /0]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDFSBASE-reg64 (make-instance 'x86-asm-instruction
:name "RDFSBASE"
:operands "reg64"
:code-string "[m: o64 f3 0f ae /0]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDGSBASE-reg32 (make-instance 'x86-asm-instruction
:name "RDGSBASE"
:operands "reg32"
:code-string "[m: norexw f3 0f ae /1]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDGSBASE-reg64 (make-instance 'x86-asm-instruction
:name "RDGSBASE"
:operands "reg64"
:code-string "[m: o64 f3 0f ae /1]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDRAND-reg16 (make-instance 'x86-asm-instruction
:name "RDRAND"
:operands "reg16"
:code-string "[m: o16 0f c7 /6]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDRAND-reg32 (make-instance 'x86-asm-instruction
:name "RDRAND"
:operands "reg32"
:code-string "[m: o32 0f c7 /6]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDRAND-reg64 (make-instance 'x86-asm-instruction
:name "RDRAND"
:operands "reg64"
:code-string "[m: o64 0f c7 /6]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-WRFSBASE-reg32 (make-instance 'x86-asm-instruction
:name "WRFSBASE"
:operands "reg32"
:code-string "[m: norexw f3 0f ae /2]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-WRFSBASE-reg64 (make-instance 'x86-asm-instruction
:name "WRFSBASE"
:operands "reg64"
:code-string "[m: o64 f3 0f ae /2]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-WRGSBASE-reg32 (make-instance 'x86-asm-instruction
:name "WRGSBASE"
:operands "reg32"
:code-string "[m: norexw f3 0f ae /3]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-WRGSBASE-reg64 (make-instance 'x86-asm-instruction
:name "WRGSBASE"
:operands "reg64"
:code-string "[m: o64 f3 0f ae /3]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPH2PS-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTPH2PS"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38.w0 13 /r]"
:arch-flags (list "AVX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPH2PS-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTPH2PS"
:operands "xmmreg,xmmrm64"
:code-string "[rm: vex.128.66.0f38.w0 13 /r]"
:arch-flags (list "AVX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-xmmrm128.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 1d /r ib]"
:arch-flags (list "AVX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-xmmrm64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "xmmrm64,xmmreg,imm8"
:code-string "[mri: vex.128.66.0f3a.w0 1d /r ib]"
:arch-flags (list "AVX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-ADCX-reg32.rm32 (make-instance 'x86-asm-instruction
:name "ADCX"
:operands "reg32,rm32"
:code-string "[rm: norexw 66 0f 38 f6 /r]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-ADCX-reg64.rm64 (make-instance 'x86-asm-instruction
:name "ADCX"
:operands "reg64,rm64"
:code-string "[rm: o64 66 0f 38 f6 /r]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-ADOX-reg32.rm32 (make-instance 'x86-asm-instruction
:name "ADOX"
:operands "reg32,rm32"
:code-string "[rm: norexw f3 0f 38 f6 /r]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-ADOX-reg64.rm64 (make-instance 'x86-asm-instruction
:name "ADOX"
:operands "reg64,rm64"
:code-string "[rm: o64 f3 0f 38 f6 /r]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDSEED-reg16 (make-instance 'x86-asm-instruction
:name "RDSEED"
:operands "reg16"
:code-string "[m: o16 0f c7 /7]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDSEED-reg32 (make-instance 'x86-asm-instruction
:name "RDSEED"
:operands "reg32"
:code-string "[m: o32 0f c7 /7]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-RDSEED-reg64 (make-instance 'x86-asm-instruction
:name "RDSEED"
:operands "reg64"
:code-string "[m: o64 0f c7 /7]"
:arch-flags (list "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-CLAC-void (make-instance 'x86-asm-instruction
:name "CLAC"
:operands "void"
:code-string "[ 0f 01 ca]"
:arch-flags (list "PRIV" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-STAC-void (make-instance 'x86-asm-instruction
:name "STAC"
:operands "void"
:code-string "[ 0f 01 cb]"
:arch-flags (list "PRIV" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-XSTORE-void (make-instance 'x86-asm-instruction
:name "XSTORE"
:operands "void"
:code-string "[ 0f a7 c0]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XCRYPTECB-void (make-instance 'x86-asm-instruction
:name "XCRYPTECB"
:operands "void"
:code-string "[ mustrep 0f a7 c8]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XCRYPTCBC-void (make-instance 'x86-asm-instruction
:name "XCRYPTCBC"
:operands "void"
:code-string "[ mustrep 0f a7 d0]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XCRYPTCTR-void (make-instance 'x86-asm-instruction
:name "XCRYPTCTR"
:operands "void"
:code-string "[ mustrep 0f a7 d8]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XCRYPTCFB-void (make-instance 'x86-asm-instruction
:name "XCRYPTCFB"
:operands "void"
:code-string "[ mustrep 0f a7 e0]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XCRYPTOFB-void (make-instance 'x86-asm-instruction
:name "XCRYPTOFB"
:operands "void"
:code-string "[ mustrep 0f a7 e8]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-MONTMUL-void (make-instance 'x86-asm-instruction
:name "MONTMUL"
:operands "void"
:code-string "[ mustrep 0f a6 c0]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XSHA1-void (make-instance 'x86-asm-instruction
:name "XSHA1"
:operands "void"
:code-string "[ mustrep 0f a6 c8]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-XSHA256-void (make-instance 'x86-asm-instruction
:name "XSHA256"
:operands "void"
:code-string "[ mustrep 0f a6 d0]"
:arch-flags (list "PENT" "CYRIX")
:is-variant t))

(defparameter x64-instruction-variant-LLWPCB-reg32 (make-instance 'x86-asm-instruction
:name "LLWPCB"
:operands "reg32"
:code-string "[m: xop.m9.w0.l0.p0 12 /0]"
:arch-flags (list "AMD" "386")
:is-variant t))

(defparameter x64-instruction-variant-LLWPCB-reg64 (make-instance 'x86-asm-instruction
:name "LLWPCB"
:operands "reg64"
:code-string "[m: xop.m9.w1.l0.p0 12 /0]"
:arch-flags (list "AMD" "X64")
:is-variant t))

(defparameter x64-instruction-variant-SLWPCB-reg32 (make-instance 'x86-asm-instruction
:name "SLWPCB"
:operands "reg32"
:code-string "[m: xop.m9.w0.l0.p0 12 /1]"
:arch-flags (list "AMD" "386")
:is-variant t))

(defparameter x64-instruction-variant-SLWPCB-reg64 (make-instance 'x86-asm-instruction
:name "SLWPCB"
:operands "reg64"
:code-string "[m: xop.m9.w1.l0.p0 12 /1]"
:arch-flags (list "AMD" "X64")
:is-variant t))

(defparameter x64-instruction-variant-LWPVAL-reg32.rm32.imm32 (make-instance 'x86-asm-instruction
:name "LWPVAL"
:operands "reg32,rm32,imm32"
:code-string "[vmi: xop.m10.w0.ndd.l0.p0 12 /1 id]"
:arch-flags (list "AMD" "386")
:is-variant t))

(defparameter x64-instruction-variant-LWPVAL-reg64.rm32.imm32 (make-instance 'x86-asm-instruction
:name "LWPVAL"
:operands "reg64,rm32,imm32"
:code-string "[vmi: xop.m10.w1.ndd.l0.p0 12 /1 id]"
:arch-flags (list "AMD" "X64")
:is-variant t))

(defparameter x64-instruction-variant-LWPINS-reg32.rm32.imm32 (make-instance 'x86-asm-instruction
:name "LWPINS"
:operands "reg32,rm32,imm32"
:code-string "[vmi: xop.m10.w0.ndd.l0.p0 12 /0 id]"
:arch-flags (list "AMD" "386")
:is-variant t))

(defparameter x64-instruction-variant-LWPINS-reg64.rm32.imm32 (make-instance 'x86-asm-instruction
:name "LWPINS"
:operands "reg64,rm32,imm32"
:code-string "[vmi: xop.m10.w1.ndd.l0.p0 12 /0 id]"
:arch-flags (list "AMD" "X64")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMADDPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 69 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMADDPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 68 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDSD"
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6b /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMADDSD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6b /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDSS"
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6a /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMADDSS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6a /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMADDSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUBPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUBPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMADDSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMADDSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMADDSUBPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMADDSUBPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBADDPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMSUBADDPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADDPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADDPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBADDPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMSUBADDPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBADDPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBADDPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 5e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 6d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFMSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFMSUBPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFMSUBPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 6c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBSD"
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFMSUBSD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x86-asm-instruction
:name "VFMSUBSS"
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 6e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFMSUBSS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 6e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMADDPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFNMADDPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADDPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADDPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 79 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMADDPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFNMADDPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMADDPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMADDPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 78 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMADDSD"
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7b /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMADDSD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7b /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMADDSS"
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7a /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMADDSS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7a /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBPD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBPD"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUBPD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUBPD"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 7d /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBPS"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBPS"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.m3.w0.nds.l1.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VFNMSUBPS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VFNMSUBPS"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: vex.m3.w1.nds.l1.p1 7c /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBSD"
:operands "xmmreg,xmmreg*,xmmrm64,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VFNMSUBSD"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm64"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x86-asm-instruction
:name "VFNMSUBSS"
:operands "xmmreg,xmmreg*,xmmrm32,xmmreg"
:code-string "[rvms: vex.m3.w0.nds.l0.p1 7e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VFNMSUBSS"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm32"
:code-string "[rvsm: vex.m3.w1.nds.l0.p1 7e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZPD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VFRCZPD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 81 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZPD-ymmreg.ymmrm256* (make-instance 'x86-asm-instruction
:name "VFRCZPD"
:operands "ymmreg,ymmrm256*"
:code-string "[rm: xop.m9.w0.l1.p0 81 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZPS-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VFRCZPS"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 80 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZPS-ymmreg.ymmrm256* (make-instance 'x86-asm-instruction
:name "VFRCZPS"
:operands "ymmreg,ymmrm256*"
:code-string "[rm: xop.m9.w0.l1.p0 80 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZSD-xmmreg.xmmrm64* (make-instance 'x86-asm-instruction
:name "VFRCZSD"
:operands "xmmreg,xmmrm64*"
:code-string "[rm: xop.m9.w0.l0.p0 83 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VFRCZSS-xmmreg.xmmrm32* (make-instance 'x86-asm-instruction
:name "VFRCZSS"
:operands "xmmreg,xmmrm32*"
:code-string "[rm: xop.m9.w0.l0.p0 82 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPCMOV"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VPCMOV"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: xop.m8.w0.nds.l1.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMOV"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: xop.m8.w1.nds.l0.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMOV"
:operands "ymmreg,ymmreg*,ymmreg,ymmrm256"
:code-string "[rvsm: xop.m8.w1.nds.l1.p0 a2 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMB"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cc /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ce /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMQ"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cf /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMUB"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ec /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMUD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ee /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMUQ"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ef /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMUW"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 ed /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCOMW"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: xop.m8.w0.nds.l0.p0 cd /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDBD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDBD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c2 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDBQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDBQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c3 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDBW-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDBW"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c1 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDDQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDDQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 cb /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUBD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUBD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d2 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUBQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUBQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d3 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUBW-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUBW"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d1 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUDQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUDQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 db /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUWD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUWD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d6 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDUWQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDUWQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 d7 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDWD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDWD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c6 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDWQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHADDWQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 c7 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBBW-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHSUBBW"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e1 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBDQ-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHSUBDQ"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e3 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBWD-xmmreg.xmmrm128* (make-instance 'x86-asm-instruction
:name "VPHSUBWD"
:operands "xmmreg,xmmrm128*"
:code-string "[rm: xop.m9.w0.l0.p0 e2 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSDD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 9e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSDQH"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 9f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSDQL"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 97 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSSDD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 8e /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSSDQH"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 8f /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSSDQL"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 87 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSSWD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 86 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSSWW"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 85 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSWD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 96 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMACSWW"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 95 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMADCSSWD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a6 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPMADCSWD"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 b6 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPPERM"
:operands "xmmreg,xmmreg*,xmmreg,xmmrm128"
:code-string "[rvsm: xop.m8.w1.nds.l0.p0 a3 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x86-asm-instruction
:name "VPPERM"
:operands "xmmreg,xmmreg*,xmmrm128,xmmreg"
:code-string "[rvms: xop.m8.w0.nds.l0.p0 a3 /r /is4]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTB-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPROTB"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 90 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPROTB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 90 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTB-xmmreg.xmmrm128*.imm8 (make-instance 'x86-asm-instruction
:name "VPROTB"
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c0 /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTD-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPROTD"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 92 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPROTD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 92 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTD-xmmreg.xmmrm128*.imm8 (make-instance 'x86-asm-instruction
:name "VPROTD"
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c2 /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPROTQ"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 93 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPROTQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 93 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTQ-xmmreg.xmmrm128*.imm8 (make-instance 'x86-asm-instruction
:name "VPROTQ"
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c3 /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTW-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPROTW"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 91 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPROTW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 91 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPROTW-xmmreg.xmmrm128*.imm8 (make-instance 'x86-asm-instruction
:name "VPROTW"
:operands "xmmreg,xmmrm128*,imm8"
:code-string "[rmi: xop.m8.w0.l0.p0 c1 /r ib]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAB-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHAB"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 98 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHAB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 98 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAD-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHAD"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 9a /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHAD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 9a /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHAQ"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 9b /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHAQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 9b /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAW-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHAW"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 99 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHAW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 99 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLB-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHLB"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 94 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHLB"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 94 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLD-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHLD"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 96 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHLD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 96 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHLQ"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 97 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHLQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 97 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLW-xmmreg.xmmrm128*.xmmreg (make-instance 'x86-asm-instruction
:name "VPSHLW"
:operands "xmmreg,xmmrm128*,xmmreg"
:code-string "[rmv: xop.m9.w0.nds.l0.p0 95 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VPSHLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHLW"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: xop.m9.w1.nds.l0.p0 95 /r]"
:arch-flags (list "AMD" "SSE5")
:is-variant t))

(defparameter x64-instruction-variant-VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VMPSADBW"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 42 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPABSB-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPABSB"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPABSW-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPABSW"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1d /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPABSD-ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPABSD"
:operands "ymmreg,ymmrm256"
:code-string "[rm: vex.256.66.0f38 1e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKSSWB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 63 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKSSDW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6b /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKUSDW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 2b /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKUSWB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 67 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fc /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fd /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fe /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d4 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ec /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ed /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDUSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f dc /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDUSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f dd /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPALIGNR"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0f /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPAND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPAND"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f db /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPANDN-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPANDN"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f df /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPAVGB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e0 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPAVGW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e3 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x86-asm-instruction
:name "VPBLENDVB"
:operands "ymmreg,ymmreg*,ymmrm256,ymmreg"
:code-string "[rvms: vex.nds.256.66.0f3a 4c /r /is4]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPBLENDW"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a 0e /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 74 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 75 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 76 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 29 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 64 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 65 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 66 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 37 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHADDW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 01 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHADDD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 02 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHADDSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 03 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHSUBW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 05 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHSUBD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 06 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPHSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPHSUBSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 07 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMADDUBSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 04 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMADDWD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f5 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ee /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXSD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3d /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXUB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f de /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXUW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXUD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3f /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 38 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ea /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINSD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 39 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINUB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f da /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINUW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3a /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINUD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 3b /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVMSKB-reg32.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVMSKB"
:operands "reg32,ymmreg"
:code-string "[rm: vex.256.66.0f d7 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVMSKB-reg64.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVMSKB"
:operands "reg64,ymmreg"
:code-string "[rm: vex.256.66.0f d7 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBW-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXBW"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 20 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 21 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 21 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-ymmreg.mem32 (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38 22 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 22 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWD-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXWD"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 23 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 24 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 24 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXDQ-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXDQ"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 25 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBW-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXBW"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 30 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 31 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 31 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-ymmreg.mem32 (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38 32 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 32 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWD-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXWD"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 33 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38 34 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38 34 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXDQ-ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXDQ"
:operands "ymmreg,xmmrm128"
:code-string "[rm: vex.256.66.0f38 35 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 28 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHRSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHRSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 0b /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHUW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e4 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e5 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULLW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d5 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULLD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 40 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMULUDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULUDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f4 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPOR"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f eb /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSADBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSADBW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f6 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSHUFB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 00 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFD-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFD"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFHW-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFHW"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.f3.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFLW-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFLW"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.f2.0f 70 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGNB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSIGNB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 08 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGNW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSIGNW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 09 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSIGND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSIGND"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38 0a /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLDQ"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /7 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f1 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f2 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f f3 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /6 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f e1 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /4 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f e2 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /4 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLDQ"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 73 /3 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d1 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 71 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d2 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f 72 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "ymmreg,ymmreg*,xmmrm128"
:code-string "[rvm: vex.nds.256.66.0f d3 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-ymmreg.ymmreg*.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "ymmreg,ymmreg*,imm8"
:code-string "[vmi: vex.ndd.256.66.0f.wig 73 /2 ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f8 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f f9 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fa /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f fb /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e8 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f e9 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBUSB"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d8 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBUSW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f d9 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHBW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 68 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHWD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 69 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6a /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHQDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6d /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLBW"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 60 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLWD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 61 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 62 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLQDQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f 6c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPXOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPXOR"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f ef /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQA-ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VMOVNTDQA"
:operands "ymmreg,mem256"
:code-string "[rm: vex.256.66.0f38 2a /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 18 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 18 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 19 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI128-ymmreg.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTI128"
:operands "ymmreg,mem128"
:code-string "[rm: vex.256.66.0f38.w0 5a /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPBLENDD"
:operands "xmmreg,xmmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.128.66.0f3a.w0 02 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPBLENDD"
:operands "ymmreg,ymmreg*,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 02 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg.mem8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg,mem8"
:code-string "[rm: vex.128.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg.mem8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg,mem8"
:code-string "[rm: vex.256.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 78 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg.mem16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg,mem16"
:code-string "[rm: vex.128.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg.mem16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg,mem16"
:code-string "[rm: vex.256.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 79 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-xmmreg.mem32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "xmmreg,mem32"
:code-string "[rm: vex.128.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-ymmreg.mem32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "ymmreg,mem32"
:code-string "[rm: vex.256.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 58 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "xmmreg,mem64"
:code-string "[rm: vex.128.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "xmmreg,xmmreg"
:code-string "[rm: vex.128.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-ymmreg.mem64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "ymmreg,mem64"
:code-string "[rm: vex.256.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-ymmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "ymmreg,xmmreg"
:code-string "[rm: vex.256.66.0f38.w0 59 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPERMD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 36 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPD-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERMPD"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w1 01 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMPS"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 16 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPERMQ-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERMQ"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[rmi: vex.256.66.0f3a.w1 00 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPERM2I128"
:operands "ymmreg,ymmreg,ymmrm256,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 46 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI128-xmmrm128.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI128"
:operands "xmmrm128,ymmreg,imm8"
:code-string "[mri: vex.256.66.0f3a.w0 39 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI128"
:operands "ymmreg,ymmreg*,xmmrm128,imm8"
:code-string "[rvmi: vex.nds.256.66.0f3a.w0 38 /r ib]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVD-xmmreg.xmmreg*.mem128 (make-instance 'x86-asm-instruction
:name "VPMASKMOVD"
:operands "xmmreg,xmmreg*,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 8c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVD-ymmreg.ymmreg*.mem256 (make-instance 'x86-asm-instruction
:name "VPMASKMOVD"
:operands "ymmreg,ymmreg*,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 8c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVQ-xmmreg.xmmreg*.mem128 (make-instance 'x86-asm-instruction
:name "VPMASKMOVQ"
:operands "xmmreg,xmmreg*,mem128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 8c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVQ-ymmreg.ymmreg*.mem256 (make-instance 'x86-asm-instruction
:name "VPMASKMOVQ"
:operands "ymmreg,ymmreg*,mem256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 8c /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVD-mem128.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VPMASKMOVD"
:operands "mem128,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w0 8e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVD-mem256.ymmreg*.ymmreg (make-instance 'x86-asm-instruction
:name "VPMASKMOVD"
:operands "mem256,ymmreg*,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w0 8e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVQ-mem128.xmmreg*.xmmreg (make-instance 'x86-asm-instruction
:name "VPMASKMOVQ"
:operands "mem128,xmmreg*,xmmreg"
:code-string "[mvr: vex.nds.128.66.0f38.w1 8e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPMASKMOVQ-mem256.ymmreg*.ymmreg (make-instance 'x86-asm-instruction
:name "VPMASKMOVQ"
:operands "mem256,ymmreg*,ymmreg"
:code-string "[mvr: vex.nds.256.66.0f38.w1 8e /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLVD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 47 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLVQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 47 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSLLVD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 47 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSLLVQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 47 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAVD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 46 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSRAVD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 46 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLVD"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w0 45 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLVQ"
:operands "xmmreg,xmmreg*,xmmrm128"
:code-string "[rvm: vex.nds.128.66.0f38.w1 45 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSRLVD"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w0 45 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSRLVQ"
:operands "ymmreg,ymmreg*,ymmrm256"
:code-string "[rvm: vex.nds.256.66.0f38.w1 45 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPD-xmmreg.xmem64.xmmreg (make-instance 'x86-asm-instruction
:name "VGATHERDPD"
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w1 92 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPD-xmmreg.xmem64.xmmreg (make-instance 'x86-asm-instruction
:name "VGATHERQPD"
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w1 93 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPD-ymmreg.xmem64.ymmreg (make-instance 'x86-asm-instruction
:name "VGATHERDPD"
:operands "ymmreg,xmem64,ymmreg"
:code-string "[rmv: vm32x vex.dds.256.66.0f38.w1 92 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPD-ymmreg.ymem64.ymmreg (make-instance 'x86-asm-instruction
:name "VGATHERQPD"
:operands "ymmreg,ymem64,ymmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w1 93 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPS-xmmreg.xmem32.xmmreg (make-instance 'x86-asm-instruction
:name "VGATHERDPS"
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w0 92 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPS-xmmreg.xmem32.xmmreg (make-instance 'x86-asm-instruction
:name "VGATHERQPS"
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w0 93 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPS-ymmreg.ymem32.ymmreg (make-instance 'x86-asm-instruction
:name "VGATHERDPS"
:operands "ymmreg,ymem32,ymmreg"
:code-string "[rmv: vm32y vex.dds.256.66.0f38.w0 92 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPS-xmmreg.ymem32.xmmreg (make-instance 'x86-asm-instruction
:name "VGATHERQPS"
:operands "xmmreg,ymem32,xmmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w0 93 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDD-xmmreg.xmem32.xmmreg (make-instance 'x86-asm-instruction
:name "VPGATHERDD"
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w0 90 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQD-xmmreg.xmem32.xmmreg (make-instance 'x86-asm-instruction
:name "VPGATHERQD"
:operands "xmmreg,xmem32,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w0 91 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDD-ymmreg.ymem32.ymmreg (make-instance 'x86-asm-instruction
:name "VPGATHERDD"
:operands "ymmreg,ymem32,ymmreg"
:code-string "[rmv: vm32y vex.dds.256.66.0f38.w0 90 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQD-xmmreg.ymem32.xmmreg (make-instance 'x86-asm-instruction
:name "VPGATHERQD"
:operands "xmmreg,ymem32,xmmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w0 91 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDQ-xmmreg.xmem64.xmmreg (make-instance 'x86-asm-instruction
:name "VPGATHERDQ"
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm32x vex.dds.128.66.0f38.w1 90 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQQ-xmmreg.xmem64.xmmreg (make-instance 'x86-asm-instruction
:name "VPGATHERQQ"
:operands "xmmreg,xmem64,xmmreg"
:code-string "[rmv: vm64x vex.dds.128.66.0f38.w1 91 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDQ-ymmreg.xmem64.ymmreg (make-instance 'x86-asm-instruction
:name "VPGATHERDQ"
:operands "ymmreg,xmem64,ymmreg"
:code-string "[rmv: vm32x vex.dds.256.66.0f38.w1 90 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQQ-ymmreg.ymem64.ymmreg (make-instance 'x86-asm-instruction
:name "VPGATHERQQ"
:operands "ymmreg,ymem64,ymmreg"
:code-string "[rmv: vm64y vex.dds.256.66.0f38.w1 91 /r]"
:arch-flags (list "FUTURE" "AVX2")
:is-variant t))

(defparameter x64-instruction-variant-XABORT-imm (make-instance 'x86-asm-instruction
:name "XABORT"
:operands "imm"
:code-string "[i: c6 f8 ib]"
:arch-flags (list "FUTURE" "RTM")
:is-variant t))

(defparameter x64-instruction-variant-XABORT-imm8 (make-instance 'x86-asm-instruction
:name "XABORT"
:operands "imm8"
:code-string "[i: c6 f8 ib]"
:arch-flags (list "FUTURE" "RTM")
:is-variant t))

(defparameter x64-instruction-variant-XBEGIN-imm (make-instance 'x86-asm-instruction
:name "XBEGIN"
:operands "imm"
:code-string "[i: odf c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM")
:is-variant t))

(defparameter x64-instruction-variant-XBEGIN-imm-near (make-instance 'x86-asm-instruction
:name "XBEGIN"
:operands "imm|near"
:code-string "[i: odf c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XBEGIN-imm64 (make-instance 'x86-asm-instruction
:name "XBEGIN"
:operands "imm64"
:code-string "[i: o64nw c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "LONG")
:is-variant t))

(defparameter x64-instruction-variant-XBEGIN-imm64-near (make-instance 'x86-asm-instruction
:name "XBEGIN"
:operands "imm64|near"
:code-string "[i: o64nw c7 f8 rel]"
:arch-flags (list "FUTURE" "RTM" "LONG" "ND")
:is-variant t))

(defparameter x64-instruction-variant-XEND-void (make-instance 'x86-asm-instruction
:name "XEND"
:operands "void"
:code-string "[ 0f 01 d5]"
:arch-flags (list "FUTURE" "RTM")
:is-variant t))

(defparameter x64-instruction-variant-XTEST-void (make-instance 'x86-asm-instruction
:name "XTEST"
:operands "void"
:code-string "[ 0f 01 d6]"
:arch-flags (list "FUTURE" "HLE" "RTM")
:is-variant t))

(defparameter x64-instruction-variant-ANDN-reg32.reg32.rm32 (make-instance 'x86-asm-instruction
:name "ANDN"
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.0f38.w0 f2 /r]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-ANDN-reg64.reg64.rm64 (make-instance 'x86-asm-instruction
:name "ANDN"
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.0f38.w1 f2 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BEXTR-reg32.rm32.reg32 (make-instance 'x86-asm-instruction
:name "BEXTR"
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BEXTR-reg64.rm64.reg64 (make-instance 'x86-asm-instruction
:name "BEXTR"
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BEXTR-reg32.rm32.imm32 (make-instance 'x86-asm-instruction
:name "BEXTR"
:operands "reg32,rm32,imm32"
:code-string "[rmi: xop.m10.lz.w0 10 /r id]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BEXTR-reg64.rm64.imm32 (make-instance 'x86-asm-instruction
:name "BEXTR"
:operands "reg64,rm64,imm32"
:code-string "[rmi: xop.m10.lz.w1 10 /r id]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCI-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLCI"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 02 /6]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCI-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLCI"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 02 /6]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCIC-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLCIC"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /5]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCIC-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLCIC"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /5]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLSI-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLSI"
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /3]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLSI-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLSI"
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /3]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLSIC-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLSIC"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /6]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLSIC-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLSIC"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /6]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCFILL-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLCFILL"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /1]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCFILL-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLCFILL"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /1]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLSFILL-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLSFILL"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /2]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLSFILL-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLSFILL"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /2]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCMSK-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLCMSK"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 02 /1]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCMSK-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLCMSK"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 02 /1]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLSMSK-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLSMSK"
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /2]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLSMSK-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLSMSK"
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /2]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLSR-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLSR"
:operands "reg32,rm32"
:code-string "[vm: vex.ndd.lz.0f38.w0 f3 /1]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLSR-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLSR"
:operands "reg64,rm64"
:code-string "[vm: vex.ndd.lz.0f38.w1 f3 /1]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-BLCS-reg32.rm32 (make-instance 'x86-asm-instruction
:name "BLCS"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /3]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BLCS-reg64.rm64 (make-instance 'x86-asm-instruction
:name "BLCS"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /3]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-BZHI-reg32.rm32.reg32 (make-instance 'x86-asm-instruction
:name "BZHI"
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-BZHI-reg64.rm64.reg64 (make-instance 'x86-asm-instruction
:name "BZHI"
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-MULX-reg32.reg32.rm32 (make-instance 'x86-asm-instruction
:name "MULX"
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.ndd.lz.f2.0f38.w0 f6 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-MULX-reg64.reg64.rm64 (make-instance 'x86-asm-instruction
:name "MULX"
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.ndd.lz.f2.0f38.w1 f6 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-PDEP-reg32.reg32.rm32 (make-instance 'x86-asm-instruction
:name "PDEP"
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.f2.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-PDEP-reg64.reg64.rm64 (make-instance 'x86-asm-instruction
:name "PDEP"
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.f2.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-PEXT-reg32.reg32.rm32 (make-instance 'x86-asm-instruction
:name "PEXT"
:operands "reg32,reg32,rm32"
:code-string "[rvm: vex.nds.lz.f3.0f38.w0 f5 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-PEXT-reg64.reg64.rm64 (make-instance 'x86-asm-instruction
:name "PEXT"
:operands "reg64,reg64,rm64"
:code-string "[rvm: vex.nds.lz.f3.0f38.w1 f5 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-RORX-reg32.rm32.imm8 (make-instance 'x86-asm-instruction
:name "RORX"
:operands "reg32,rm32,imm8"
:code-string "[rmi: vex.lz.f2.0f3a.w0 f0 /r ib]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-RORX-reg64.rm64.imm8 (make-instance 'x86-asm-instruction
:name "RORX"
:operands "reg64,rm64,imm8"
:code-string "[rmi: vex.lz.f2.0f3a.w1 f0 /r ib]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SARX-reg32.rm32.reg32 (make-instance 'x86-asm-instruction
:name "SARX"
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.f3.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SARX-reg64.rm64.reg64 (make-instance 'x86-asm-instruction
:name "SARX"
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.f3.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SHLX-reg32.rm32.reg32 (make-instance 'x86-asm-instruction
:name "SHLX"
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.66.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SHLX-reg64.rm64.reg64 (make-instance 'x86-asm-instruction
:name "SHLX"
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.66.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SHRX-reg32.rm32.reg32 (make-instance 'x86-asm-instruction
:name "SHRX"
:operands "reg32,rm32,reg32"
:code-string "[rmv: vex.nds.lz.f2.0f38.w0 f7 /r]"
:arch-flags (list "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-SHRX-reg64.rm64.reg64 (make-instance 'x86-asm-instruction
:name "SHRX"
:operands "reg64,rm64,reg64"
:code-string "[rmv: vex.nds.lz.f2.0f38.w1 f7 /r]"
:arch-flags (list "LONG" "FUTURE" "BMI2")
:is-variant t))

(defparameter x64-instruction-variant-TZCNT-reg16.rm16 (make-instance 'x86-asm-instruction
:name "TZCNT"
:operands "reg16,rm16"
:code-string "[rm: o16 f3i 0f bc /r]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-TZCNT-reg32.rm32 (make-instance 'x86-asm-instruction
:name "TZCNT"
:operands "reg32,rm32"
:code-string "[rm: o32 f3i 0f bc /r]"
:arch-flags (list "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-TZCNT-reg64.rm64 (make-instance 'x86-asm-instruction
:name "TZCNT"
:operands "reg64,rm64"
:code-string "[rm: o64 f3i 0f bc /r]"
:arch-flags (list "LONG" "FUTURE" "BMI1")
:is-variant t))

(defparameter x64-instruction-variant-TZMSK-reg32.rm32 (make-instance 'x86-asm-instruction
:name "TZMSK"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /4]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-TZMSK-reg64.rm64 (make-instance 'x86-asm-instruction
:name "TZMSK"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /4]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-T1MSKC-reg32.rm32 (make-instance 'x86-asm-instruction
:name "T1MSKC"
:operands "reg32,rm32"
:code-string "[vm: xop.ndd.lz.m9.w0 01 /7]"
:arch-flags (list "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-T1MSKC-reg64.rm64 (make-instance 'x86-asm-instruction
:name "T1MSKC"
:operands "reg64,rm64"
:code-string "[vm: xop.ndd.lz.m9.w1 01 /7]"
:arch-flags (list "LONG" "FUTURE" "TBM")
:is-variant t))

(defparameter x64-instruction-variant-PREFETCHWT1-mem8 (make-instance 'x86-asm-instruction
:name "PREFETCHWT1"
:operands "mem8"
:code-string "[m: 0f 0d /2 ]"
:arch-flags (list "PREFETCHWT1" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDMK-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDMK"
:operands "bndreg,mem"
:code-string "[rm: f3 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCL-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDCL"
:operands "bndreg,mem"
:code-string "[rm: f3 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCL-bndreg.reg64 (make-instance 'x86-asm-instruction
:name "BNDCL"
:operands "bndreg,reg64"
:code-string "[rm: o64nw f3 0f 1a /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCU-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDCU"
:operands "bndreg,mem"
:code-string "[rm: f2 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCU-bndreg.reg64 (make-instance 'x86-asm-instruction
:name "BNDCU"
:operands "bndreg,reg64"
:code-string "[rm: o64nw f2 0f 1a /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCN-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDCN"
:operands "bndreg,mem"
:code-string "[rm: f2 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDCN-bndreg.reg64 (make-instance 'x86-asm-instruction
:name "BNDCN"
:operands "bndreg,reg64"
:code-string "[rm: o64nw f2 0f 1b /r ]"
:arch-flags (list "MPX" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDMOV-bndreg.bndreg (make-instance 'x86-asm-instruction
:name "BNDMOV"
:operands "bndreg,bndreg"
:code-string "[rm: 66 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDMOV-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDMOV"
:operands "bndreg,mem"
:code-string "[rm: 66 0f 1a /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDMOV-bndreg.bndreg (make-instance 'x86-asm-instruction
:name "BNDMOV"
:operands "bndreg,bndreg"
:code-string "[mr: 66 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDMOV-mem.bndreg (make-instance 'x86-asm-instruction
:name "BNDMOV"
:operands "mem,bndreg"
:code-string "[mr: 66 0f 1b /r ]"
:arch-flags (list "MPX" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDLDX-bndreg.mem (make-instance 'x86-asm-instruction
:name "BNDLDX"
:operands "bndreg,mem"
:code-string "[rm: 0f 1a /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDLDX-bndreg.mem.reg64 (make-instance 'x86-asm-instruction
:name "BNDLDX"
:operands "bndreg,mem,reg64"
:code-string "[rmx: 0f 1a /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDSTX-mem.bndreg (make-instance 'x86-asm-instruction
:name "BNDSTX"
:operands "mem,bndreg"
:code-string "[mr: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDSTX-mem.reg64.bndreg (make-instance 'x86-asm-instruction
:name "BNDSTX"
:operands "mem,reg64,bndreg"
:code-string "[mxr: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-BNDSTX-mem.bndreg.reg64 (make-instance 'x86-asm-instruction
:name "BNDSTX"
:operands "mem,bndreg,reg64"
:code-string "[mrx: 0f 1b /r ]"
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KADDB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KADDB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 4a /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KADDD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KADDD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 4a /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KADDQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KADDQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 4a /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KADDW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KADDW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 4a /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 41 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 41 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDNB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDNB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 42 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDND-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDND"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 42 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDNQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDNQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 42 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDNW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDNW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 42 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 41 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KANDW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KANDW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 41 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVB-kreg.krm8 (make-instance 'x86-asm-instruction
:name "KMOVB"
:operands "kreg,krm8"
:code-string "[rm: vex.l0.66.0f.w0 90 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVB-mem8.kreg (make-instance 'x86-asm-instruction
:name "KMOVB"
:operands "mem8,kreg"
:code-string "[mr: vex.l0.66.0f.w0 91 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVB-kreg.reg32 (make-instance 'x86-asm-instruction
:name "KMOVB"
:operands "kreg,reg32"
:code-string "[rm: vex.l0.66.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVB-reg32.kreg (make-instance 'x86-asm-instruction
:name "KMOVB"
:operands "reg32,kreg"
:code-string "[rm: vex.l0.66.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVD-kreg.krm32 (make-instance 'x86-asm-instruction
:name "KMOVD"
:operands "kreg,krm32"
:code-string "[rm: vex.l0.66.0f.w1 90 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVD-mem32.kreg (make-instance 'x86-asm-instruction
:name "KMOVD"
:operands "mem32,kreg"
:code-string "[mr: vex.l0.66.0f.w1 91 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVD-kreg.reg32 (make-instance 'x86-asm-instruction
:name "KMOVD"
:operands "kreg,reg32"
:code-string "[rm: vex.l0.f2.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVD-reg32.kreg (make-instance 'x86-asm-instruction
:name "KMOVD"
:operands "reg32,kreg"
:code-string "[rm: vex.l0.f2.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVQ-kreg.krm64 (make-instance 'x86-asm-instruction
:name "KMOVQ"
:operands "kreg,krm64"
:code-string "[rm: vex.l0.0f.w1 90 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVQ-mem64.kreg (make-instance 'x86-asm-instruction
:name "KMOVQ"
:operands "mem64,kreg"
:code-string "[mr: vex.l0.0f.w1 91 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVQ-kreg.reg64 (make-instance 'x86-asm-instruction
:name "KMOVQ"
:operands "kreg,reg64"
:code-string "[rm: vex.l0.f2.0f.w1 92 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVQ-reg64.kreg (make-instance 'x86-asm-instruction
:name "KMOVQ"
:operands "reg64,kreg"
:code-string "[rm: vex.l0.f2.0f.w1 93 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVW-kreg.krm16 (make-instance 'x86-asm-instruction
:name "KMOVW"
:operands "kreg,krm16"
:code-string "[rm: vex.l0.0f.w0 90 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVW-mem16.kreg (make-instance 'x86-asm-instruction
:name "KMOVW"
:operands "mem16,kreg"
:code-string "[mr: vex.l0.0f.w0 91 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVW-kreg.reg32 (make-instance 'x86-asm-instruction
:name "KMOVW"
:operands "kreg,reg32"
:code-string "[rm: vex.l0.0f.w0 92 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KMOVW-reg32.kreg (make-instance 'x86-asm-instruction
:name "KMOVW"
:operands "reg32,kreg"
:code-string "[rm: vex.l0.0f.w0 93 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KNOTB-kreg.kreg (make-instance 'x86-asm-instruction
:name "KNOTB"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 44 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KNOTD-kreg.kreg (make-instance 'x86-asm-instruction
:name "KNOTD"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 44 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KNOTQ-kreg.kreg (make-instance 'x86-asm-instruction
:name "KNOTQ"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 44 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KNOTW-kreg.kreg (make-instance 'x86-asm-instruction
:name "KNOTW"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 44 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KORB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 45 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KORD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 45 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KORQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 45 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORTESTB-kreg.kreg (make-instance 'x86-asm-instruction
:name "KORTESTB"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 98 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORTESTD-kreg.kreg (make-instance 'x86-asm-instruction
:name "KORTESTD"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 98 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORTESTQ-kreg.kreg (make-instance 'x86-asm-instruction
:name "KORTESTQ"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 98 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORTESTW-kreg.kreg (make-instance 'x86-asm-instruction
:name "KORTESTW"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 98 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KORW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KORW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 45 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTLB-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTLB"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 32 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTLD-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTLD"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 33 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTLQ-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTLQ"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 33 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTLW-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTLW"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 32 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTRB-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTRB"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 30 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTRD-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTRD"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w0 31 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTRQ-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTRQ"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 31 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KSHIFTRW-kreg.kreg.imm8 (make-instance 'x86-asm-instruction
:name "KSHIFTRW"
:operands "kreg,kreg,imm8"
:code-string "[rmi: vex.l0.66.0f3a.w1 30 /r ib ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KTESTB-kreg.kreg (make-instance 'x86-asm-instruction
:name "KTESTB"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w0 99 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KTESTD-kreg.kreg (make-instance 'x86-asm-instruction
:name "KTESTD"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.66.0f.w1 99 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KTESTQ-kreg.kreg (make-instance 'x86-asm-instruction
:name "KTESTQ"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w1 99 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KTESTW-kreg.kreg (make-instance 'x86-asm-instruction
:name "KTESTW"
:operands "kreg,kreg"
:code-string "[rm: vex.l0.0f.w0 99 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KUNPCKBW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KUNPCKBW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 4b /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KUNPCKDQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KUNPCKDQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 4b /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KUNPCKWD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KUNPCKWD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 4b /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXNORB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXNORB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 46 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXNORD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXNORD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 46 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXNORQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXNORQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 46 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXNORW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXNORW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 46 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXORB-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXORB"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w0 47 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXORD-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXORD"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.66.0f.w1 47 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXORQ-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXORQ"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w1 47 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-KXORW-kreg.kreg.kreg (make-instance 'x86-asm-instruction
:name "KXORW"
:operands "kreg,kreg,kreg"
:code-string "[rvm: vex.nds.l1.0f.w0 47 /r ]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA1MSG1-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SHA1MSG1"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 c9 /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA1MSG2-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SHA1MSG2"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 ca /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA1NEXTE-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SHA1NEXTE"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 c8 /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA1RNDS4-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "SHA1RNDS4"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[rmi: 0f 3a cc /r ib ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA256MSG1-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SHA256MSG1"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 cc /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA256MSG2-xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "SHA256MSG2"
:operands "xmmreg,xmmrm128"
:code-string "[rm: 0f 38 cd /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-SHA256RNDS2-xmmreg.xmmrm128.xmm0 (make-instance 'x86-asm-instruction
:name "SHA256RNDS2"
:operands "xmmreg,xmmrm128,xmm0"
:code-string "[rm-: 0f 38 cb /r ]"
:arch-flags (list "SHA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VADDPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VADDPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VADDPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VADDPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VADDPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VADDPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VADDSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VADDSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VALIGND"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VALIGND"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VALIGND"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 03 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VALIGNQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VALIGNQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VALIGNQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 03 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VANDNPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VANDNPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VANDNPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 55 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VANDNPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VANDNPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 55 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VANDNPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 55 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VANDPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VANDPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VANDPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 54 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VANDPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VANDPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 54 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VANDPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 54 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VBLENDMPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VBLENDMPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VBLENDMPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 65 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VBLENDMPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VBLENDMPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VBLENDMPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 65 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VBROADCASTF32X2"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.256.66.0f38.w0 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VBROADCASTF32X2"
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.512.66.0f38.w0 19 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF32X4-ymmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTF32X4"
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t4: evex.256.66.0f38.w0 1a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF32X4-zmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTF32X4"
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t4: evex.512.66.0f38.w0 1a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF32X8-zmmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VBROADCASTF32X8"
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t8: evex.512.66.0f38.w0 1b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF64X2-ymmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTF64X2"
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t2: evex.256.66.0f38.w1 1a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF64X2-zmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTF64X2"
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t2: evex.512.66.0f38.w1 1a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTF64X4-zmmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VBROADCASTF64X4"
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t4: evex.512.66.0f38.w1 1b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X2-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X2"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.128.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X2"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.256.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X2"
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:t2: evex.512.66.0f38.w0 59 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X4-ymmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X4"
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t4: evex.256.66.0f38.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X4-zmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X4"
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t4: evex.512.66.0f38.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI32X8-zmmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VBROADCASTI32X8"
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t8: evex.512.66.0f38.w0 5b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI64X2-ymmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTI64X2"
:operands "ymmreg|mask|z,mem128"
:code-string "[rm:t2: evex.256.66.0f38.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI64X2-zmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VBROADCASTI64X2"
:operands "zmmreg|mask|z,mem128"
:code-string "[rm:t2: evex.512.66.0f38.w1 5a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTI64X4-zmmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VBROADCASTI64X4"
:operands "zmmreg|mask|z,mem256"
:code-string "[rm:t4: evex.512.66.0f38.w1 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-ymmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "ymmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.256.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-zmmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "zmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.512.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-ymmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSD-zmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSD"
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w1 19 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-xmmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-ymmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "ymmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.256.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-zmmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "zmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.512.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-ymmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VBROADCASTSS-zmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VBROADCASTSS"
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w0 18 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPD"
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPD"
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPD"
:operands "kreg|mask,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPS"
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPS"
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCMPPS"
:operands "kreg|mask,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCMPSD"
:operands "kreg|mask,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.f2.0f.w1 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCMPSS"
:operands "kreg|mask,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.f3.0f.w0 c2 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMISD-xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VCOMISD"
:operands "xmmreg,xmmrm64|sae"
:code-string "[rm:t1s: evex.128.66.0f.w1 2f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMISS-xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCOMISS"
:operands "xmmreg,xmmrm32|sae"
:code-string "[rm:t1s: evex.128.0f.w0 2f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w1 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCOMPRESSPS-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VCOMPRESSPS"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w0 8a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PD"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PD"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x86-asm-instruction
:name "VCVTDQ2PD"
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.f3.0f.w0 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTDQ2PS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VCVTDQ2PS"
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTPD2DQ"
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f2.0f.w1 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTPD2PS"
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2QQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2QQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTPD2QQ"
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 7b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2UDQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2UDQ"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTPD2UDQ"
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2UQQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTPD2UQQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTPD2UQQ"
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 79 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPH2PS-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VCVTPH2PS"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPH2PS-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VCVTPH2PS"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae (make-instance 'x86-asm-instruction
:name "VCVTPH2PS"
:operands "zmmreg|mask|z,ymmrm256|sae"
:code-string "[rm:hvm: evex.512.66.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2DQ"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2DQ"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VCVTPS2DQ"
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.66.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2PD"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.0f.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2PD"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.0f.w0 5a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x86-asm-instruction
:name "VCVTPS2PD"
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.0f.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "xmmreg|mask|z,xmmreg,imm8"
:code-string "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "ymmreg|mask|z,zmmreg|sae,imm8"
:code-string "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-mem64-mask.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "mem64|mask,xmmreg,imm8"
:code-string "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-mem128-mask.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2PH-mem256-mask.zmmreg-sae.imm8 (make-instance 'x86-asm-instruction
:name "VCVTPS2PH"
:operands "mem256|mask,zmmreg|sae,imm8"
:code-string "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2QQ"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2QQ"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x86-asm-instruction
:name "VCVTPS2QQ"
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.66.0f.w0 7b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2UDQ"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2UDQ"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VCVTPS2UDQ"
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2UQQ"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTPS2UQQ"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x86-asm-instruction
:name "VCVTPS2UQQ"
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.66.0f.w0 79 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTQQ2PD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTQQ2PD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTQQ2PD"
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f3.0f.w1 e6 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTQQ2PS"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTQQ2PS"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTQQ2PS"
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.0f.w1 5b /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SI-reg32.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VCVTSD2SI"
:operands "reg32,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SI-reg64.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VCVTSD2SI"
:operands "reg64,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VCVTSD2SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2USI-reg32.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VCVTSD2USI"
:operands "reg32,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSD2USI-reg64.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VCVTSD2USI"
:operands "reg64,xmmrm64|er"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SD"
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x86-asm-instruction
:name "VCVTSI2SD"
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x86-asm-instruction
:name "VCVTSI2SS"
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x86-asm-instruction
:name "VCVTSI2SS"
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w1 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCVTSS2SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SI-reg32.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VCVTSS2SI"
:operands "reg32,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2SI-reg64.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VCVTSS2SI"
:operands "reg64,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2USI-reg32.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VCVTSS2USI"
:operands "reg32,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTSS2USI-reg64.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VCVTSS2USI"
:operands "reg64,xmmrm32|er"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 79 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VCVTTPD2DQ"
:operands "ymmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 e6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2QQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2QQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VCVTTPD2QQ"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2UDQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2UDQ"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VCVTTPD2UDQ"
:operands "ymmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2UQQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTTPD2UQQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VCVTTPD2UQQ"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f.w1 78 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2DQ"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2DQ"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VCVTTPS2DQ"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.f3.0f.w0 5b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2QQ"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2QQ"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x86-asm-instruction
:name "VCVTTPS2QQ"
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.66.0f.w0 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2UDQ"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2UDQ"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VCVTTPS2UDQ"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2UQQ"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTTPS2UQQ"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x86-asm-instruction
:name "VCVTTPS2UQQ"
:operands "zmmreg|mask|z,ymmrm256|b32|sae"
:code-string "[rm:hv: evex.512.66.0f.w0 78 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2SI-reg32.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VCVTTSD2SI"
:operands "reg32,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2SI-reg64.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VCVTTSD2SI"
:operands "reg64,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2USI-reg32.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VCVTTSD2USI"
:operands "reg32,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSD2USI-reg64.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VCVTTSD2USI"
:operands "reg64,xmmrm64|sae"
:code-string "[rm:t1f64: evex.128.f2.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2SI-reg32.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCVTTSS2SI"
:operands "reg32,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2SI-reg64.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCVTTSS2SI"
:operands "reg64,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2USI-reg32.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCVTTSS2USI"
:operands "reg32,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w0 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTTSS2USI-reg64.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VCVTTSS2USI"
:operands "reg64,xmmrm32|sae"
:code-string "[rm:t1f32: evex.128.f3.0f.w1 78 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PD"
:operands "xmmreg|mask|z,xmmrm64|b32"
:code-string "[rm:hv: evex.128.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PD"
:operands "ymmreg|mask|z,xmmrm128|b32"
:code-string "[rm:hv: evex.256.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PD"
:operands "zmmreg|mask|z,ymmrm256|b32|er"
:code-string "[rm:hv: evex.512.f3.0f.w0 7a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VCVTUDQ2PS"
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.f2.0f.w0 7a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PD"
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f3.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PS"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PS"
:operands "xmmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VCVTUQQ2PS"
:operands "ymmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.f2.0f.w1 7a /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x86-asm-instruction
:name "VCVTUSI2SD"
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w0 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x86-asm-instruction
:name "VCVTUSI2SD"
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x86-asm-instruction
:name "VCVTUSI2SS"
:operands "xmmreg,xmmreg|er,rm32"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VCVTUSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x86-asm-instruction
:name "VCVTUSI2SS"
:operands "xmmreg,xmmreg|er,rm64"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w1 7b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VDBPSADBW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VDBPSADBW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VDBPSADBW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 42 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VDIVPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VDIVPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VDIVPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VDIVPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VDIVPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VDIVPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VDIVSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VDIVSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VEXP2PD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 c8 /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VEXP2PS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 c8 /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-xmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-ymmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-zmmreg-mask-z.mem512 (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-xmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-ymmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-zmmreg-mask-z.mem512 (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXPANDPS-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VEXPANDPS"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X4"
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X4"
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X4-mem128-mask.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X4"
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t4: evex.256.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X4-mem128-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X4"
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w0 19 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X8"
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 1b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF32X8-mem256-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF32X8"
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t8: evex.512.66.0f3a.w0 1b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X2"
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X2"
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X2-mem128-mask.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X2"
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t2: evex.256.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X2-mem128-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X2"
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t2: evex.512.66.0f3a.w1 19 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X4"
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 1b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTF64X4-mem256-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTF64X4"
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w1 1b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X4"
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X4"
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X4-mem128-mask.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X4"
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t4: evex.256.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X4-mem128-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X4"
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w0 39 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X8"
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w0 3b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI32X8-mem256-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI32X8"
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t8: evex.512.66.0f3a.w0 3b /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X2"
:operands "xmmreg|mask|z,ymmreg,imm8"
:code-string "[mri: evex.256.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X2"
:operands "xmmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X2-mem128-mask.ymmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X2"
:operands "mem128|mask,ymmreg,imm8"
:code-string "[mri:t2: evex.256.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X2-mem128-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X2"
:operands "mem128|mask,zmmreg,imm8"
:code-string "[mri:t2: evex.512.66.0f3a.w1 39 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X4"
:operands "ymmreg|mask|z,zmmreg,imm8"
:code-string "[mri: evex.512.66.0f3a.w1 3b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTI64X4-mem256-mask.zmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTI64X4"
:operands "mem256|mask,zmmreg,imm8"
:code-string "[mri:t4: evex.512.66.0f3a.w1 3b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTPS-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTPS"
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTPS-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTPS"
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VEXTRACTPS-mem32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VEXTRACTPS"
:operands "mem32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 54 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 54 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 55 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VFIXUPIMMSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 55 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADD132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADD132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADD132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 98 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADD132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADD132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADD132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 98 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMADD132SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 99 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMADD132SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 99 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADD213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADD213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADD213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a8 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADD213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADD213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADD213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a8 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMADD213SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 a9 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMADD213SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 a9 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADD231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADD231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADD231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b8 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADD231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADD231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADD231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b8 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMADD231SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 b9 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMADD231SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 b9 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 96 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 96 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMADDSUB231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUB132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUB132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMSUB132SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMSUB132SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUB213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 aa /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUB213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 aa /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMSUB213SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 ab /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMSUB213SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 ab /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUB231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUB231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ba /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUB231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUB231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ba /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFMSUB231SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bb /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFMSUB231SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bb /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 97 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 97 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 a7 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 a7 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b7 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFMSUBADD231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 b7 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMADD132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMADD132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMADD132SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMADD132SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMADD213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ac /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMADD213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ac /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMADD213SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 ad /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMADD213SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 ad /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMADD231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMADD231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 bc /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMADD231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMADD231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 bc /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMADD231SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bd /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMADD231SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bd /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB132PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 9e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB132PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB132PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 9e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB132SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 9f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB132SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 9f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB213PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 ae /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB213PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB213PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 ae /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB213SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 af /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB213SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 af /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB231PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 be /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VFNMSUB231PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB231PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 be /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VFNMSUB231SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 bf /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VFNMSUB231SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 bf /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPD"
:operands "kreg|mask,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPD"
:operands "kreg|mask,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPD"
:operands "kreg|mask,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 66 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPS"
:operands "kreg|mask,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPS"
:operands "kreg|mask,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSPS"
:operands "kreg|mask,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 66 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSSD-kreg-mask.xmmrm64.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSSD"
:operands "kreg|mask,xmmrm64,imm8"
:code-string "[rmi:t1s: evex.128.66.0f3a.w1 67 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VFPCLASSSS-kreg-mask.xmmrm32.imm8 (make-instance 'x86-asm-instruction
:name "VFPCLASSSS"
:operands "kreg|mask,xmmrm32,imm8"
:code-string "[rmi:t1s: evex.128.66.0f3a.w0 67 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPD-xmmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VGATHERDPD"
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPD-ymmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VGATHERDPD"
:operands "ymmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.256.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPD-zmmreg-mask.ymem64 (make-instance 'x86-asm-instruction
:name "VGATHERDPD"
:operands "zmmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.512.66.0f38.w1 92 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPS-xmmreg-mask.xmem32 (make-instance 'x86-asm-instruction
:name "VGATHERDPS"
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPS-ymmreg-mask.ymem32 (make-instance 'x86-asm-instruction
:name "VGATHERDPS"
:operands "ymmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERDPS-zmmreg-mask.zmem32 (make-instance 'x86-asm-instruction
:name "VGATHERDPS"
:operands "zmmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 92 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF0DPD-ymem64-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF0DPD"
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF0DPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF0DPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF0QPD-zmem64-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF0QPD"
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF0QPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF0QPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /1 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF1DPD-ymem64-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF1DPD"
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF1DPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF1DPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF1QPD-zmem64-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF1QPD"
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERPF1QPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VGATHERPF1QPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /2 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPD-xmmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VGATHERQPD"
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPD-ymmreg-mask.ymem64 (make-instance 'x86-asm-instruction
:name "VGATHERQPD"
:operands "ymmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPD-zmmreg-mask.zmem64 (make-instance 'x86-asm-instruction
:name "VGATHERQPD"
:operands "zmmreg|mask,zmem64"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w1 93 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPS-xmmreg-mask.xmem32 (make-instance 'x86-asm-instruction
:name "VGATHERQPS"
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPS-xmmreg-mask.ymem32 (make-instance 'x86-asm-instruction
:name "VGATHERQPS"
:operands "xmmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGATHERQPS-ymmreg-mask.zmem32 (make-instance 'x86-asm-instruction
:name "VGATHERQPS"
:operands "ymmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 93 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VGETEXPPD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VGETEXPPD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VGETEXPPD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 42 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VGETEXPPS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VGETEXPPS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VGETEXPPS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 42 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VGETEXPSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 43 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VGETEXPSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 43 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPD"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPD"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 26 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPS"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPS"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTPS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 26 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 27 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VGETMANTSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 27 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF32X4"
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.256.66.0f3a.w0 18 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF32X4"
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w0 18 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF32X8"
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t8: evex.nds.512.66.0f3a.w0 1a /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF64X2"
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.256.66.0f3a.w1 18 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF64X2"
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.512.66.0f3a.w1 18 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTF64X4"
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w1 1a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI32X4"
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.256.66.0f3a.w0 38 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI32X4"
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w0 38 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI32X8"
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t8: evex.nds.512.66.0f3a.w0 3a /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI64X2"
:operands "ymmreg|mask|z,ymmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.256.66.0f3a.w1 38 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI64X2"
:operands "zmmreg|mask|z,zmmreg,xmmrm128,imm8"
:code-string "[rvmi:t2: evex.nds.512.66.0f3a.w1 38 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTI64X4"
:operands "zmmreg|mask|z,zmmreg,ymmrm256,imm8"
:code-string "[rvmi:t4: evex.nds.512.66.0f3a.w1 3a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8 (make-instance 'x86-asm-instruction
:name "VINSERTPS"
:operands "xmmreg,xmmreg,xmmrm32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 21 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VMAXPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VMAXPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VMAXPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VMAXPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VMAXPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VMAXPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VMAXSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VMAXSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VMINPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VMINPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VMINPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VMINPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VMINPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VMINPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VMINSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VMINSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPD-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPD"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.0f.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.0f.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.0f.w0 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.0f.w0 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVAPS-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVAPS"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVD-xmmreg.rm32 (make-instance 'x86-asm-instruction
:name "VMOVD"
:operands "xmmreg,rm32"
:code-string "[rm:t1s: evex.128.66.0f.w0 6e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVD-rm32.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVD"
:operands "rm32,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w0 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDDUP-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMOVDDUP"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:dup: evex.128.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDDUP"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:dup: evex.256.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDDUP"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:dup: evex.512.f2.0f.w1 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w0 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA32-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA32"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQA64-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQA64"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f2.0f.w1 6f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU16-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU16"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f2.0f.w1 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU32-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU32"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f3.0f.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w1 6f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU64-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU64"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f3.0f.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f2.0f.w0 6f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVDQU8-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVDQU8"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.f2.0f.w0 7f /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHLPS-xmmreg.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHLPS"
:operands "xmmreg,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPD-xmmreg.xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VMOVHPD"
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t1s: evex.nds.128.66.0f.w1 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHPD"
:operands "mem64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 17 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPS-xmmreg.xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VMOVHPS"
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t2: evex.nds.128.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVHPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVHPS"
:operands "mem64,xmmreg"
:code-string "[mr:t2: evex.128.0f.w0 17 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLHPS-xmmreg.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLHPS"
:operands "xmmreg,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPD-xmmreg.xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VMOVLPD"
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t1s: evex.nds.128.66.0f.w1 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPD-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLPD"
:operands "mem64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPS-xmmreg.xmmreg.mem64 (make-instance 'x86-asm-instruction
:name "VMOVLPS"
:operands "xmmreg,xmmreg,mem64"
:code-string "[rvm:t2: evex.nds.128.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVLPS-mem64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVLPS"
:operands "mem64,xmmreg"
:code-string "[mr:t2: evex.128.0f.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQ-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTDQ"
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQ-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTDQ"
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQ-mem512.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTDQ"
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w0 e7 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQA-xmmreg.mem128 (make-instance 'x86-asm-instruction
:name "VMOVNTDQA"
:operands "xmmreg,mem128"
:code-string "[rm:fvm: evex.128.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQA-ymmreg.mem256 (make-instance 'x86-asm-instruction
:name "VMOVNTDQA"
:operands "ymmreg,mem256"
:code-string "[rm:fvm: evex.256.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTDQA-zmmreg.mem512 (make-instance 'x86-asm-instruction
:name "VMOVNTDQA"
:operands "zmmreg,mem512"
:code-string "[rm:fvm: evex.512.66.0f38.w0 2a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPD-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPD"
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPD-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPD"
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPD-mem512.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPD"
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 2b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPS-mem128.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPS"
:operands "mem128,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPS-mem256.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPS"
:operands "mem256,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVNTPS-mem512.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVNTPS"
:operands "mem512,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 2b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmreg.rm64 (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmreg,rm64"
:code-string "[rm:t1s: evex.128.66.0f.w1 6e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-rm64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "rm64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmreg,xmmrm64"
:code-string "[rm:t1s: evex.128.f3.0f.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVQ-xmmrm64.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVQ"
:operands "xmmrm64,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f.w1 d6 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.128.f2.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "mem64|mask,xmmreg"
:code-string "[mr:t1s: evex.128.f2.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.f2.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSD"
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[mvr: evex.nds.128.f2.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSHDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVSHDUP"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSHDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVSHDUP"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSHDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVSHDUP"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSLDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVSLDUP"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSLDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVSLDUP"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSLDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVSLDUP"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.f3.0f.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.f3.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "mem32|mask,xmmreg"
:code-string "[mr:t1s: evex.128.f3.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[rvm: evex.nds.128.f3.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVSS"
:operands "xmmreg|mask|z,xmmreg,xmmreg"
:code-string "[mvr: evex.nds.128.f3.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f.w1 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPD-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPD"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.66.0f.w1 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.0f.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.0f.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.0f.w0 10 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "mem128|mask,xmmreg"
:code-string "[mr:fvm: evex.128.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "mem256|mask,ymmreg"
:code-string "[mr:fvm: evex.256.0f.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMOVUPS-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VMOVUPS"
:operands "mem512|mask,zmmreg"
:code-string "[mr:fvm: evex.512.0f.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VMULPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VMULPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VMULPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VMULPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VMULPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VMULPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VMULSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VMULSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VORPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VORPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VORPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 56 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VORPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VORPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 56 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VORPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 56 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSB-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPABSB"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSB-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPABSB"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSB-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPABSB"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f38.wig 1c /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPABSD"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPABSD"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPABSD"
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 1e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPABSQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPABSQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPABSQ"
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 1f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSW-xmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPABSW"
:operands "xmmreg|mask|z,xmmrm128"
:code-string "[rm:fvm: evex.128.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSW-ymmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPABSW"
:operands "ymmreg|mask|z,ymmrm256"
:code-string "[rm:fvm: evex.256.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPABSW-zmmreg-mask-z.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPABSW"
:operands "zmmreg|mask|z,zmmrm512"
:code-string "[rm:fvm: evex.512.66.0f38.wig 1d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPACKSSDW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPACKSSDW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPACKSSDW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 6b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKSSWB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKSSWB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPACKSSWB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 63 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPACKUSDW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPACKUSDW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPACKUSDW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 2b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPACKUSWB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPACKUSWB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPACKUSWB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 67 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig fc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig fc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig fc /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPADDD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPADDD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPADDD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 fe /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPADDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPADDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPADDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 d4 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ec /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ec /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ec /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ed /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ed /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ed /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDUSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig dc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDUSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig dc /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDUSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig dc /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDUSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig dd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDUSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig dd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDUSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig dd /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPADDW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig fd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPADDW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig fd /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPADDW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPADDW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig fd /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPALIGNR"
:operands "xmmreg|mask|z,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPALIGNR"
:operands "ymmreg|mask|z,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPALIGNR"
:operands "zmmreg|mask|z,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.wig 0f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPANDD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPANDD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPANDD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 db /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPANDND"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPANDND"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPANDND"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 df /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPANDNQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPANDNQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 df /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPANDNQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 df /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPANDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPANDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 db /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPANDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 db /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPAVGB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPAVGB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPAVGB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e0 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPAVGW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPAVGW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPAVGW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e3 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPBLENDMB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPBLENDMB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPBLENDMB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 66 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPBLENDMD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPBLENDMD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPBLENDMD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 64 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPBLENDMQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPBLENDMQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPBLENDMQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 64 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPBLENDMW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPBLENDMW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPBLENDMW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 66 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.xmmrm8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.128.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.xmmrm8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.256.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.xmmrm8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "zmmreg|mask|z,xmmrm8"
:code-string "[rm:t1s: evex.512.66.0f38.w0 78 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg|mask|z,reg8"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg|mask|z,reg16"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg|mask|z,reg8"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg|mask|z,reg16"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg8 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "zmmreg|mask|z,reg8"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "zmmreg|mask|z,reg16"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTB"
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w0 7a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "xmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.128.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "ymmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.256.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.mem32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "zmmreg|mask|z,mem32"
:code-string "[rm:t1s: evex.512.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w0 58 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTD"
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMB2Q-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMB2Q"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMB2Q-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMB2Q"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMB2Q-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMB2Q"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 2a /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMW2D-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMW2D"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMW2D-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMW2D"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTMW2D-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTMW2D"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 3a /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "xmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.128.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "ymmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.256.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.mem64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "zmmreg|mask|z,mem64"
:code-string "[rm:t1s: evex.512.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm: evex.128.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "ymmreg|mask|z,xmmreg"
:code-string "[rm: evex.256.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "zmmreg|mask|z,xmmreg"
:code-string "[rm: evex.512.66.0f38.w1 59 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTQ"
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w1 7c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.128.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.256.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "zmmreg|mask|z,xmmrm16"
:code-string "[rm:t1s: evex.512.66.0f38.w0 79 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg|mask|z,reg16"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg|mask|z,reg32"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "xmmreg|mask|z,reg64"
:code-string "[rm: evex.128.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg|mask|z,reg16"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg|mask|z,reg32"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "ymmreg|mask|z,reg64"
:code-string "[rm: evex.256.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg16 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "zmmreg|mask|z,reg16"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg32 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "zmmreg|mask|z,reg32"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg64 (make-instance 'x86-asm-instruction
:name "VPBROADCASTW"
:operands "zmmreg|mask|z,reg64"
:code-string "[rm: evex.512.66.0f38.w0 7b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPB"
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPB"
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPB"
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPD"
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPD"
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPD"
:operands "kreg|mask,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 1f /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQB"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQB"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPCMPEQB"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 74 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPCMPEQD"
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPCMPEQD"
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPCMPEQD"
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPCMPEQQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPCMPEQQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPCMPEQQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 29 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPEQW"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPEQW"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPEQW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPCMPEQW"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 75 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTB"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTB"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPCMPGTB"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 64 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPCMPGTD"
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPCMPGTD"
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPCMPGTD"
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 66 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPCMPGTQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPCMPGTQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPCMPGTQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 37 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPCMPGTW"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPCMPGTW"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPGTW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPCMPGTW"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 65 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 1f /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUB"
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUB"
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUB"
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3e /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUD"
:operands "kreg|mask,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUD"
:operands "kreg|mask,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUD"
:operands "kreg|mask,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 1e /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 1e /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUW"
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUW"
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPUW"
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3e /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPW"
:operands "kreg|mask,xmmreg,xmmrm128,imm8"
:code-string "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPW"
:operands "kreg|mask,ymmreg,ymmrm256,imm8"
:code-string "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPCMPW"
:operands "kreg|mask,zmmreg,zmmrm512,imm8"
:code-string "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3f /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w0 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-mem128-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "mem128|mask,xmmreg"
:code-string "[mr:t1s: evex.128.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-mem256-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "mem256|mask,ymmreg"
:code-string "[mr:t1s: evex.256.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-mem512-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "mem512|mask,zmmreg"
:code-string "[mr:t1s: evex.512.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCOMPRESSQ-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPCOMPRESSQ"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.66.0f38.w1 8b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPCONFLICTD"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPCONFLICTD"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPCONFLICTD"
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 c4 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPCONFLICTQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPCONFLICTQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPCONFLICTQ"
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 c4 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 8d /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 36 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 36 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMI2B"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMI2B"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMI2B"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 75 /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2D"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2D"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2D"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 77 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMI2PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 77 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2Q"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2Q"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMI2Q"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 76 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMI2W"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMI2W"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMI2W"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 75 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 05 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMILPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 0d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 04 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMILPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 0c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMPD"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 01 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMPD"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 01 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 16 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 16 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 00 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPERMQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 00 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 36 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 36 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMT2B"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMT2B"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMT2B"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 7d /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2D"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2D"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2D"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2PD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2PD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2PD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2PS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2PS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPERMT2PS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 7f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2Q"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2Q"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPERMT2Q"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 7e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMT2W"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMT2W"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMT2W"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 7d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPERMW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPERMW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPERMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPERMW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 8d /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-xmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-ymmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-zmmreg-mask-z.mem512 (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDD-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDD"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-xmmreg-mask-z.mem128 (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "xmmreg|mask|z,mem128"
:code-string "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-ymmreg-mask-z.mem256 (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "ymmreg|mask|z,mem256"
:code-string "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-zmmreg-mask-z.mem512 (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "zmmreg|mask|z,mem512"
:code-string "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-ymmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "ymmreg|mask|z,ymmreg"
:code-string "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXPANDQ-zmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPEXPANDQ"
:operands "zmmreg|mask|z,zmmreg"
:code-string "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg8.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg8,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg16.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRB"
:operands "mem8,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRD"
:operands "rm32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.w0 16 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRQ"
:operands "rm64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.w1 16 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg32,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg64,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "mem16,xmmreg,imm8"
:code-string "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg16,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg32,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x86-asm-instruction
:name "VPEXTRW"
:operands "reg64,xmmreg,imm8"
:code-string "[rmi: evex.128.66.0f.wig c5 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDD-xmmreg-mask.xmem32 (make-instance 'x86-asm-instruction
:name "VPGATHERDD"
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDD-ymmreg-mask.ymem32 (make-instance 'x86-asm-instruction
:name "VPGATHERDD"
:operands "ymmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDD-zmmreg-mask.zmem32 (make-instance 'x86-asm-instruction
:name "VPGATHERDD"
:operands "zmmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 90 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDQ-xmmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VPGATHERDQ"
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDQ-ymmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VPGATHERDQ"
:operands "ymmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.256.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERDQ-zmmreg-mask.ymem64 (make-instance 'x86-asm-instruction
:name "VPGATHERDQ"
:operands "zmmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.512.66.0f38.w1 90 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQD-xmmreg-mask.xmem32 (make-instance 'x86-asm-instruction
:name "VPGATHERQD"
:operands "xmmreg|mask,xmem32"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQD-xmmreg-mask.ymem32 (make-instance 'x86-asm-instruction
:name "VPGATHERQD"
:operands "xmmreg|mask,ymem32"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQD-ymmreg-mask.zmem32 (make-instance 'x86-asm-instruction
:name "VPGATHERQD"
:operands "ymmreg|mask,zmem32"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w0 91 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQQ-xmmreg-mask.xmem64 (make-instance 'x86-asm-instruction
:name "VPGATHERQQ"
:operands "xmmreg|mask,xmem64"
:code-string "[rm:t1s: vsibx evex.128.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQQ-ymmreg-mask.ymem64 (make-instance 'x86-asm-instruction
:name "VPGATHERQQ"
:operands "ymmreg|mask,ymem64"
:code-string "[rm:t1s: vsiby evex.256.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPGATHERQQ-zmmreg-mask.zmem64 (make-instance 'x86-asm-instruction
:name "VPGATHERQQ"
:operands "zmmreg|mask,zmem64"
:code-string "[rm:t1s: vsibz evex.512.66.0f38.w1 91 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRB-xmmreg.xmmreg.reg32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRB"
:operands "xmmreg,xmmreg,reg32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRB-xmmreg.xmmreg.mem8.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRB"
:operands "xmmreg,xmmreg,mem8,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRD-xmmreg.xmmreg.rm32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRD"
:operands "xmmreg,xmmreg,rm32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 22 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRQ-xmmreg.xmmreg.rm64.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRQ"
:operands "xmmreg,xmmreg,rm64,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 22 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRW-xmmreg.xmmreg.reg32.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRW"
:operands "xmmreg,xmmreg,reg32,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPINSRW-xmmreg.xmmreg.mem16.imm8 (make-instance 'x86-asm-instruction
:name "VPINSRW"
:operands "xmmreg,xmmreg,mem16,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPLZCNTD"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPLZCNTD"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPLZCNTD"
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 44 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPLZCNTQ"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPLZCNTQ"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPLZCNTQ"
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 44 /r ]"
:arch-flags (list "AVX512CD" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52HUQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52HUQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52HUQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b5 /r ]"
:arch-flags (list "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52LUQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52LUQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMADD52LUQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 b4 /r ]"
:arch-flags (list "AVX512IFMA" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMADDUBSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMADDUBSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMADDUBSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 04 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMADDWD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMADDWD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMADDWD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMAXSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3c /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPMAXSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPMAXSD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPMAXSD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMAXSQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMAXSQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMAXSQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ee /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ee /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMAXSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ee /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXUB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig de /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXUB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig de /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMAXUB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig de /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPMAXUD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPMAXUD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPMAXUD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMAXUQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMAXUQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMAXUQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMAXUW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMAXUW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMAXUW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3e /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMINSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 38 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPMINSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPMINSD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPMINSD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 39 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMINSQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMINSQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMINSQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 39 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig ea /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig ea /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMINSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig ea /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINUB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig da /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINUB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig da /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMINUB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig da /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPMINUD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPMINUD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPMINUD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 3b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMINUQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMINUQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMINUQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 3b /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMINUW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMINUW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMINUW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 3a /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVB2M-kreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVB2M"
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVB2M-kreg.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVB2M"
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVB2M-kreg.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVB2M"
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w0 29 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVD2M-kreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVD2M"
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVD2M-kreg.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVD2M"
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVD2M-kreg.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVD2M"
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w0 39 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDB-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDB"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVDW-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVDW"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2B-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2B"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2B-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2B"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2B-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2B"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 28 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2D-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2D"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2D-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2D"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2D-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2D"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w0 38 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2Q-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2Q"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2Q-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2Q"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2Q-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2Q"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 38 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2W-xmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2W"
:operands "xmmreg,kreg"
:code-string "[rm: evex.128.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2W-ymmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2W"
:operands "ymmreg,kreg"
:code-string "[rm: evex.256.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVM2W-zmmreg.kreg (make-instance 'x86-asm-instruction
:name "VPMOVM2W"
:operands "zmmreg,kreg"
:code-string "[rm: evex.512.f3.0f38.w1 28 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQ2M-kreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQ2M"
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQ2M-kreg.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQ2M"
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQ2M-kreg.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQ2M"
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w1 39 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-mem16-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-mem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQB-mem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQB"
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQD-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQD"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVQW-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVQW"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDB-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDB"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSDW-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSDW"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-mem16-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-mem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQB-mem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQB"
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQD-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQD"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSQW-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSQW"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSWB-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVSWB"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXBD"
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 21 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:ovm: evex.128.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "ymmreg|mask|z,xmmrm32"
:code-string "[rm:ovm: evex.256.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXBQ"
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:ovm: evex.512.66.0f38.wig 22 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXBW"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXBW"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVSXBW"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 20 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXDQ"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXDQ"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVSXDQ"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.w0 25 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXWD"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXWD"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVSXWD"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 23 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVSXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVSXWQ"
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 24 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDB-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDB"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 11 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSDW-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSDW"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 13 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-mem16-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "mem16|mask,xmmreg"
:code-string "[mr:ovm: evex.128.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-mem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "mem32|mask,ymmreg"
:code-string "[mr:ovm: evex.256.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQB-mem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQB"
:operands "mem64|mask,zmmreg"
:code-string "[mr:ovm: evex.512.f3.0f38.w0 12 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQD-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQD"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "xmmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-mem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "mem32|mask,xmmreg"
:code-string "[mr:qvm: evex.128.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-mem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "mem64|mask,ymmreg"
:code-string "[mr:qvm: evex.256.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSQW-mem128-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSQW"
:operands "mem128|mask,zmmreg"
:code-string "[mr:qvm: evex.512.f3.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVUSWB-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVUSWB"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVW2M-kreg.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVW2M"
:operands "kreg,xmmreg"
:code-string "[rm: evex.128.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVW2M-kreg.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVW2M"
:operands "kreg,ymmreg"
:code-string "[rm: evex.256.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVW2M-kreg.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVW2M"
:operands "kreg,zmmreg"
:code-string "[rm: evex.512.f3.0f38.w1 29 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-xmmreg-mask-z.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "xmmreg|mask|z,xmmreg"
:code-string "[mr: evex.128.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-xmmreg-mask-z.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "xmmreg|mask|z,ymmreg"
:code-string "[mr: evex.256.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-ymmreg-mask-z.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "ymmreg|mask|z,zmmreg"
:code-string "[mr: evex.512.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-mem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "mem64|mask,xmmreg"
:code-string "[mr:hvm: evex.128.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-mem128-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "mem128|mask,ymmreg"
:code-string "[mr:hvm: evex.256.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVWB-mem256-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPMOVWB"
:operands "mem256|mask,zmmreg"
:code-string "[mr:hvm: evex.512.f3.0f38.w0 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXBD"
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 31 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "xmmreg|mask|z,xmmrm16"
:code-string "[rm:ovm: evex.128.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "ymmreg|mask|z,xmmrm32"
:code-string "[rm:ovm: evex.256.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXBQ"
:operands "zmmreg|mask|z,xmmrm64"
:code-string "[rm:ovm: evex.512.66.0f38.wig 32 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXBW"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXBW"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVZXBW"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 30 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXDQ"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXDQ"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVZXDQ"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.w0 35 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXWD"
:operands "xmmreg|mask|z,xmmrm64"
:code-string "[rm:hvm: evex.128.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXWD"
:operands "ymmreg|mask|z,xmmrm128"
:code-string "[rm:hvm: evex.256.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMOVZXWD"
:operands "zmmreg|mask|z,ymmrm256"
:code-string "[rm:hvm: evex.512.66.0f38.wig 33 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "xmmreg|mask|z,xmmrm32"
:code-string "[rm:qvm: evex.128.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "ymmreg|mask|z,xmmrm64"
:code-string "[rm:qvm: evex.256.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMOVZXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMOVZXWQ"
:operands "zmmreg|mask|z,xmmrm128"
:code-string "[rm:qvm: evex.512.66.0f38.wig 34 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMULDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMULDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMULDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 28 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHRSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHRSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMULHRSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 0b /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHUW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHUW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMULHUW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e4 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULHW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULHW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMULHW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPMULLD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPMULLD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPMULLD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 40 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMULLQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMULLQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMULLQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 40 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPMULLW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPMULLW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPMULLW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d5 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMULTISHIFTQB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMULTISHIFTQB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMULTISHIFTQB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 83 /r ]"
:arch-flags (list "AVX512VBMI" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPMULUDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPMULUDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPMULUDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 f4 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPORD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPORD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPORD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 eb /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPORQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPORQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPORQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 eb /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPROLD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPROLD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPROLD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /1 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPROLQ"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPROLQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPROLQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /1 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPROLVD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPROLVD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPROLVD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPROLVQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPROLVQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPROLVQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPRORD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPRORD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPRORD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /0 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPRORQ"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPRORQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPRORQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /0 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPRORVD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPRORVD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPRORVD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPRORVQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPRORVQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPRORVQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSADBW-xmmreg.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSADBW"
:operands "xmmreg,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSADBW-ymmreg.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSADBW"
:operands "ymmreg,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSADBW-zmmreg.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSADBW"
:operands "zmmreg,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f6 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDD-xmem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDD"
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDD-ymem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDD"
:operands "ymem32|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDD-zmem32-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDD"
:operands "zmem32|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a0 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDQ-xmem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDQ"
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDQ-xmem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDQ"
:operands "xmem64|mask,ymmreg"
:code-string "[mr:t1s: vsibx evex.256.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERDQ-ymem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERDQ"
:operands "ymem64|mask,zmmreg"
:code-string "[mr:t1s: vsiby evex.512.66.0f38.w1 a0 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQD-xmem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQD"
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQD-ymem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQD"
:operands "ymem32|mask,xmmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQD-zmem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQD"
:operands "zmem32|mask,ymmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a1 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQQ-xmem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQQ"
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQQ-ymem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQQ"
:operands "ymem64|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSCATTERQQ-zmem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VPSCATTERQQ"
:operands "zmem64|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w1 a1 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSHUFB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSHUFB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSHUFB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.wig 00 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[rmi:fv: evex.512.66.0f.w0 70 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFHW"
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[rmi:fvm: evex.128.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFHW"
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[rmi:fvm: evex.256.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFHW"
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[rmi:fvm: evex.512.f3.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFLW"
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[rmi:fvm: evex.128.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFLW"
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[rmi:fvm: evex.256.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSHUFLW"
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[rmi:fvm: evex.512.f2.0f.wig 70 /r ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 f2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /6 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLDQ"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLDQ"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLDQ"
:operands "zmmreg,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 73 /7 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 f3 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 73 /6 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPSLLVD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPSLLVD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPSLLVD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 47 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPSLLVQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPSLLVQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPSLLVQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 47 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLVW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSLLVW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSLLVW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 12 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig f1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSLLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSLLW"
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /6 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 e2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /4 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 e2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 72 /4 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPSRAVD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPSRAVD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPSRAVD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 46 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPSRAVQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPSRAVQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPSRAVQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 46 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAVW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSRAVW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSRAVW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 11 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig e1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRAW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSRAW"
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /4 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w0 d2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLD"
:operands "zmmreg|mask|z,zmmrm512|b32,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w0 72 /2 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLDQ"
:operands "xmmreg,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLDQ"
:operands "ymmreg,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLDQ"
:operands "zmmreg,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 73 /3 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.w1 d3 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[vmi:fv: evex.nds.128.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[vmi:fv: evex.nds.256.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLQ"
:operands "zmmreg|mask|z,zmmrm512|b64,imm8"
:code-string "[vmi:fv: evex.nds.512.66.0f.w1 73 /2 ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPSRLVD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPSRLVD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPSRLVD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 45 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPSRLVQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPSRLVQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPSRLVQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 45 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLVW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSRLVW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSRLVW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 10 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.128.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "ymmreg|mask|z,ymmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.256.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "zmmreg|mask|z,zmmreg,xmmrm128"
:code-string "[rvm:m128: evex.nds.512.66.0f.wig d1 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "xmmreg|mask|z,xmmrm128,imm8"
:code-string "[vmi:fvm: evex.nds.128.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "ymmreg|mask|z,ymmrm256,imm8"
:code-string "[vmi:fvm: evex.nds.256.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSRLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x86-asm-instruction
:name "VPSRLW"
:operands "zmmreg|mask|z,zmmrm512,imm8"
:code-string "[vmi:fvm: evex.nds.512.66.0f.wig 71 /2 ib ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPSUBD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPSUBD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPSUBD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 fa /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPSUBQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPSUBQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPSUBQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 fb /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig e9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBUSB"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBUSB"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBUSB"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d8 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBUSW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBUSW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBUSW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig d9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPSUBW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPSUBW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPSUBW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig f9 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 25 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VPTERNLOGQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 25 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPTESTMB"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPTESTMB"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPTESTMB"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w0 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPTESTMD"
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPTESTMD"
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPTESTMD"
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPTESTMQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPTESTMQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPTESTMQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPTESTMW"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPTESTMW"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPTESTMW"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f38.w1 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPTESTNMB"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPTESTNMB"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPTESTNMB"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.f3.0f38.w0 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPTESTNMD"
:operands "kreg|mask,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPTESTNMD"
:operands "kreg|mask,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPTESTNMD"
:operands "kreg|mask,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.f3.0f38.w0 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPTESTNMQ"
:operands "kreg|mask,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPTESTNMQ"
:operands "kreg|mask,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPTESTNMQ"
:operands "kreg|mask,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.f3.0f38.w1 27 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPTESTNMW"
:operands "kreg|mask,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPTESTNMW"
:operands "kreg|mask,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPTESTNMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPTESTNMW"
:operands "kreg|mask,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.f3.0f38.w1 26 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHBW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHBW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPUNPCKHBW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 68 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKHDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKHDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKHDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 6a /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKHQDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKHQDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKHQDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 6d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKHWD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKHWD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPUNPCKHWD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 69 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLBW"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLBW"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPUNPCKLBW"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 60 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKLDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKLDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPUNPCKLDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 62 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKLQDQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKLQDQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPUNPCKLQDQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 6c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x86-asm-instruction
:name "VPUNPCKLWD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128"
:code-string "[rvm:fvm: evex.nds.128.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x86-asm-instruction
:name "VPUNPCKLWD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256"
:code-string "[rvm:fvm: evex.nds.256.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x86-asm-instruction
:name "VPUNPCKLWD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512"
:code-string "[rvm:fvm: evex.nds.512.66.0f.wig 61 /r ]"
:arch-flags (list "AVX512BW" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VPXORD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VPXORD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VPXORD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.66.0f.w0 ef /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VPXORQ"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VPXORQ"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VPXORQ"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 ef /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 50 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRANGEPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 50 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRANGESD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 51 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRANGESS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 51 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VRCP14PD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VRCP14PD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VRCP14PD"
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 4c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VRCP14PS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VRCP14PS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VRCP14PS"
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 4c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VRCP14SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 4d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VRCP14SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 4d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VRCP28PD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 ca /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VRCP28PS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 ca /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VRCP28SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 cb /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VRCP28SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 cb /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPD"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPD"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 56 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPS"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPS"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCEPS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 56 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCESD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 57 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VREDUCESS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 57 /r ib ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPD"
:operands "xmmreg|mask|z,xmmrm128|b64,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPD"
:operands "ymmreg|mask|z,ymmrm256|b64,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w1 09 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPS"
:operands "xmmreg|mask|z,xmmrm128|b32,imm8"
:code-string "[rmi:fv: evex.128.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPS"
:operands "ymmreg|mask|z,ymmrm256|b32,imm8"
:code-string "[rmi:fv: evex.256.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALEPS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae,imm8"
:code-string "[rmi:fv: evex.512.66.0f3a.w0 08 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALESD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w1 0b /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x86-asm-instruction
:name "VRNDSCALESS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"
:code-string "[rvmi:t1s: evex.nds.128.66.0f3a.w0 0a /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VRSQRT14PD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VRSQRT14PD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VRSQRT14PD"
:operands "zmmreg|mask|z,zmmrm512|b64"
:code-string "[rm:fv: evex.512.66.0f38.w1 4e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VRSQRT14PS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VRSQRT14PS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VRSQRT14PS"
:operands "zmmreg|mask|z,zmmrm512|b32"
:code-string "[rm:fv: evex.512.66.0f38.w0 4e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x86-asm-instruction
:name "VRSQRT14SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 4f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x86-asm-instruction
:name "VRSQRT14SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 4f /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x86-asm-instruction
:name "VRSQRT28PD"
:operands "zmmreg|mask|z,zmmrm512|b64|sae"
:code-string "[rm:fv: evex.512.66.0f38.w1 cc /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x86-asm-instruction
:name "VRSQRT28PS"
:operands "zmmreg|mask|z,zmmrm512|b32|sae"
:code-string "[rm:fv: evex.512.66.0f38.w0 cc /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VRSQRT28SD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 cd /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VRSQRT28SS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|sae"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 cd /r ]"
:arch-flags (list "AVX512ER" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VSCALEFPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VSCALEFPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VSCALEFPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w1 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VSCALEFPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VSCALEFPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VSCALEFPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.66.0f38.w0 2c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VSCALEFSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w1 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VSCALEFSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.66.0f38.w0 2d /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPD-xmem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPD"
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPD-xmem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPD"
:operands "xmem64|mask,ymmreg"
:code-string "[mr:t1s: vsibx evex.256.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPD-ymem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPD"
:operands "ymem64|mask,zmmreg"
:code-string "[mr:t1s: vsiby evex.512.66.0f38.w1 a2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPS-xmem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPS"
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPS-ymem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPS"
:operands "ymem32|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERDPS-zmem32-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERDPS"
:operands "zmem32|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a2 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF0DPD-ymem64-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF0DPD"
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF0DPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF0DPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF0QPD-zmem64-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF0QPD"
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF0QPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF0QPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /5 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF1DPD-ymem64-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF1DPD"
:operands "ymem64|mask"
:code-string "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF1DPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF1DPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF1QPD-zmem64-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF1QPD"
:operands "zmem64|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERPF1QPS-zmem32-mask (make-instance 'x86-asm-instruction
:name "VSCATTERPF1QPS"
:operands "zmem32|mask"
:code-string "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /6 ]"
:arch-flags (list "AVX512PF" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPD-xmem64-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPD"
:operands "xmem64|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPD-ymem64-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPD"
:operands "ymem64|mask,ymmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPD-zmem64-mask.zmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPD"
:operands "zmem64|mask,zmmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w1 a3 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPS-xmem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPS"
:operands "xmem32|mask,xmmreg"
:code-string "[mr:t1s: vsibx evex.128.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPS-ymem32-mask.xmmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPS"
:operands "ymem32|mask,xmmreg"
:code-string "[mr:t1s: vsiby evex.256.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSCATTERQPS-zmem32-mask.ymmreg (make-instance 'x86-asm-instruction
:name "VSCATTERQPS"
:operands "zmem32|mask,ymmreg"
:code-string "[mr:t1s: vsibz evex.512.66.0f38.w0 a3 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFF32X4"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 23 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFF32X4"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 23 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFF64X2"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 23 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFF64X2"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 23 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFI32X4"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w0 43 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFI32X4"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w0 43 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFI64X2"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f3a.w1 43 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFI64X2"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f3a.w1 43 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"
:code-string "[rvmi:fv: evex.nds.128.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"
:code-string "[rvmi:fv: evex.nds.256.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"
:code-string "[rvmi:fv: evex.nds.512.66.0f.w1 c6 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"
:code-string "[rvmi:fv: evex.nds.128.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"
:code-string "[rvmi:fv: evex.nds.256.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x86-asm-instruction
:name "VSHUFPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"
:code-string "[rvmi:fv: evex.nds.512.0f.w0 c6 /r ib ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VSQRTPD"
:operands "xmmreg|mask|z,xmmrm128|b64"
:code-string "[rm:fv: evex.128.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VSQRTPD"
:operands "ymmreg|mask|z,ymmrm256|b64"
:code-string "[rm:fv: evex.256.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VSQRTPD"
:operands "zmmreg|mask|z,zmmrm512|b64|er"
:code-string "[rm:fv: evex.512.66.0f.w1 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VSQRTPS"
:operands "xmmreg|mask|z,xmmrm128|b32"
:code-string "[rm:fv: evex.128.0f.w0 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VSQRTPS"
:operands "ymmreg|mask|z,ymmrm256|b32"
:code-string "[rm:fv: evex.256.0f.w0 51 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VSQRTPS"
:operands "zmmreg|mask|z,zmmrm512|b32|er"
:code-string "[rm:fv: evex.512.0f.w0 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VSQRTSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VSQRTSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 51 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VSUBPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VSUBPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x86-asm-instruction
:name "VSUBPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VSUBPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VSUBPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 5c /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x86-asm-instruction
:name "VSUBPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"
:code-string "[rvm:fv: evex.nds.512.0f.w0 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x86-asm-instruction
:name "VSUBSD"
:operands "xmmreg|mask|z,xmmreg,xmmrm64|er"
:code-string "[rvm:t1s: evex.nds.128.f2.0f.w1 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x86-asm-instruction
:name "VSUBSS"
:operands "xmmreg|mask|z,xmmreg,xmmrm32|er"
:code-string "[rvm:t1s: evex.nds.128.f3.0f.w0 5c /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUCOMISD-xmmreg.xmmrm64-sae (make-instance 'x86-asm-instruction
:name "VUCOMISD"
:operands "xmmreg,xmmrm64|sae"
:code-string "[rm:t1s: evex.128.66.0f.w1 2e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUCOMISS-xmmreg.xmmrm32-sae (make-instance 'x86-asm-instruction
:name "VUCOMISS"
:operands "xmmreg,xmmrm32|sae"
:code-string "[rm:t1s: evex.128.0f.w0 2e /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKHPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKHPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKHPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKHPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKHPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 15 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKHPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 15 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKLPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKLPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VUNPCKLPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKLPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKLPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 14 /r ]"
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VUNPCKLPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 14 /r ]"
:arch-flags (list "AVX512" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x86-asm-instruction
:name "VXORPD"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b64"
:code-string "[rvm:fv: evex.nds.128.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x86-asm-instruction
:name "VXORPD"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b64"
:code-string "[rvm:fv: evex.nds.256.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x86-asm-instruction
:name "VXORPD"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b64"
:code-string "[rvm:fv: evex.nds.512.66.0f.w1 57 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x86-asm-instruction
:name "VXORPS"
:operands "xmmreg|mask|z,xmmreg,xmmrm128|b32"
:code-string "[rvm:fv: evex.nds.128.0f.w0 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x86-asm-instruction
:name "VXORPS"
:operands "ymmreg|mask|z,ymmreg,ymmrm256|b32"
:code-string "[rvm:fv: evex.nds.256.0f.w0 57 /r ]"
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x86-asm-instruction
:name "VXORPS"
:operands "zmmreg|mask|z,zmmreg,zmmrm512|b32"
:code-string "[rvm:fv: evex.nds.512.0f.w0 57 /r ]"
:arch-flags (list "AVX512DQ" "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-CLFLUSHOPT-mem (make-instance 'x86-asm-instruction
:name "CLFLUSHOPT"
:operands "mem"
:code-string "[m: 66 0f ae /7]"
:arch-flags (list "FUTURE")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP0-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP0"
:operands "rm16"
:code-string "[m: o16 0f 18 /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP0-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP0"
:operands "rm32"
:code-string "[m: o32 0f 18 /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP0-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP0"
:operands "rm64"
:code-string "[m: o64 0f 18 /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP1-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP1"
:operands "rm16"
:code-string "[m: o16 0f 18 /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP1-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP1"
:operands "rm32"
:code-string "[m: o32 0f 18 /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP1-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP1"
:operands "rm64"
:code-string "[m: o64 0f 18 /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP2-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP2"
:operands "rm16"
:code-string "[m: o16 0f 18 /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP2-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP2"
:operands "rm32"
:code-string "[m: o32 0f 18 /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP2-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP2"
:operands "rm64"
:code-string "[m: o64 0f 18 /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP3-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP3"
:operands "rm16"
:code-string "[m: o16 0f 18 /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP3-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP3"
:operands "rm32"
:code-string "[m: o32 0f 18 /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP3-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP3"
:operands "rm64"
:code-string "[m: o64 0f 18 /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP4-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP4"
:operands "rm16"
:code-string "[m: o16 0f 18 /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP4-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP4"
:operands "rm32"
:code-string "[m: o32 0f 18 /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP4-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP4"
:operands "rm64"
:code-string "[m: o64 0f 18 /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP5-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP5"
:operands "rm16"
:code-string "[m: o16 0f 18 /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP5-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP5"
:operands "rm32"
:code-string "[m: o32 0f 18 /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP5-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP5"
:operands "rm64"
:code-string "[m: o64 0f 18 /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP6-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP6"
:operands "rm16"
:code-string "[m: o16 0f 18 /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP6-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP6"
:operands "rm32"
:code-string "[m: o32 0f 18 /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP6-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP6"
:operands "rm64"
:code-string "[m: o64 0f 18 /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP7-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP7"
:operands "rm16"
:code-string "[m: o16 0f 18 /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP7-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP7"
:operands "rm32"
:code-string "[m: o32 0f 18 /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP7-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP7"
:operands "rm64"
:code-string "[m: o64 0f 18 /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP8-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP8"
:operands "rm16"
:code-string "[m: o16 0f 19 /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP8-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP8"
:operands "rm32"
:code-string "[m: o32 0f 19 /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP8-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP8"
:operands "rm64"
:code-string "[m: o64 0f 19 /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP9-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP9"
:operands "rm16"
:code-string "[m: o16 0f 19 /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP9-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP9"
:operands "rm32"
:code-string "[m: o32 0f 19 /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP9-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP9"
:operands "rm64"
:code-string "[m: o64 0f 19 /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP10-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP10"
:operands "rm16"
:code-string "[m: o16 0f 19 /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP10-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP10"
:operands "rm32"
:code-string "[m: o32 0f 19 /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP10-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP10"
:operands "rm64"
:code-string "[m: o64 0f 19 /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP11-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP11"
:operands "rm16"
:code-string "[m: o16 0f 19 /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP11-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP11"
:operands "rm32"
:code-string "[m: o32 0f 19 /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP11-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP11"
:operands "rm64"
:code-string "[m: o64 0f 19 /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP12-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP12"
:operands "rm16"
:code-string "[m: o16 0f 19 /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP12-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP12"
:operands "rm32"
:code-string "[m: o32 0f 19 /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP12-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP12"
:operands "rm64"
:code-string "[m: o64 0f 19 /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP13-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP13"
:operands "rm16"
:code-string "[m: o16 0f 19 /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP13-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP13"
:operands "rm32"
:code-string "[m: o32 0f 19 /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP13-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP13"
:operands "rm64"
:code-string "[m: o64 0f 19 /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP14-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP14"
:operands "rm16"
:code-string "[m: o16 0f 19 /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP14-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP14"
:operands "rm32"
:code-string "[m: o32 0f 19 /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP14-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP14"
:operands "rm64"
:code-string "[m: o64 0f 19 /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP15-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP15"
:operands "rm16"
:code-string "[m: o16 0f 19 /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP15-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP15"
:operands "rm32"
:code-string "[m: o32 0f 19 /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP15-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP15"
:operands "rm64"
:code-string "[m: o64 0f 19 /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP16-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP16"
:operands "rm16"
:code-string "[m: o16 0f 1a /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP16-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP16"
:operands "rm32"
:code-string "[m: o32 0f 1a /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP16-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP16"
:operands "rm64"
:code-string "[m: o64 0f 1a /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP17-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP17"
:operands "rm16"
:code-string "[m: o16 0f 1a /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP17-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP17"
:operands "rm32"
:code-string "[m: o32 0f 1a /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP17-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP17"
:operands "rm64"
:code-string "[m: o64 0f 1a /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP18-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP18"
:operands "rm16"
:code-string "[m: o16 0f 1a /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP18-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP18"
:operands "rm32"
:code-string "[m: o32 0f 1a /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP18-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP18"
:operands "rm64"
:code-string "[m: o64 0f 1a /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP19-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP19"
:operands "rm16"
:code-string "[m: o16 0f 1a /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP19-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP19"
:operands "rm32"
:code-string "[m: o32 0f 1a /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP19-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP19"
:operands "rm64"
:code-string "[m: o64 0f 1a /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP20-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP20"
:operands "rm16"
:code-string "[m: o16 0f 1a /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP20-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP20"
:operands "rm32"
:code-string "[m: o32 0f 1a /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP20-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP20"
:operands "rm64"
:code-string "[m: o64 0f 1a /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP21-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP21"
:operands "rm16"
:code-string "[m: o16 0f 1a /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP21-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP21"
:operands "rm32"
:code-string "[m: o32 0f 1a /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP21-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP21"
:operands "rm64"
:code-string "[m: o64 0f 1a /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP22-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP22"
:operands "rm16"
:code-string "[m: o16 0f 1a /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP22-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP22"
:operands "rm32"
:code-string "[m: o32 0f 1a /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP22-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP22"
:operands "rm64"
:code-string "[m: o64 0f 1a /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP23-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP23"
:operands "rm16"
:code-string "[m: o16 0f 1a /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP23-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP23"
:operands "rm32"
:code-string "[m: o32 0f 1a /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP23-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP23"
:operands "rm64"
:code-string "[m: o64 0f 1a /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP24-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP24"
:operands "rm16"
:code-string "[m: o16 0f 1b /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP24-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP24"
:operands "rm32"
:code-string "[m: o32 0f 1b /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP24-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP24"
:operands "rm64"
:code-string "[m: o64 0f 1b /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP25-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP25"
:operands "rm16"
:code-string "[m: o16 0f 1b /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP25-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP25"
:operands "rm32"
:code-string "[m: o32 0f 1b /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP25-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP25"
:operands "rm64"
:code-string "[m: o64 0f 1b /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP26-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP26"
:operands "rm16"
:code-string "[m: o16 0f 1b /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP26-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP26"
:operands "rm32"
:code-string "[m: o32 0f 1b /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP26-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP26"
:operands "rm64"
:code-string "[m: o64 0f 1b /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP27-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP27"
:operands "rm16"
:code-string "[m: o16 0f 1b /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP27-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP27"
:operands "rm32"
:code-string "[m: o32 0f 1b /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP27-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP27"
:operands "rm64"
:code-string "[m: o64 0f 1b /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP28-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP28"
:operands "rm16"
:code-string "[m: o16 0f 1b /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP28-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP28"
:operands "rm32"
:code-string "[m: o32 0f 1b /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP28-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP28"
:operands "rm64"
:code-string "[m: o64 0f 1b /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP29-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP29"
:operands "rm16"
:code-string "[m: o16 0f 1b /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP29-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP29"
:operands "rm32"
:code-string "[m: o32 0f 1b /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP29-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP29"
:operands "rm64"
:code-string "[m: o64 0f 1b /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP30-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP30"
:operands "rm16"
:code-string "[m: o16 0f 1b /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP30-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP30"
:operands "rm32"
:code-string "[m: o32 0f 1b /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP30-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP30"
:operands "rm64"
:code-string "[m: o64 0f 1b /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP31-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP31"
:operands "rm16"
:code-string "[m: o16 0f 1b /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP31-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP31"
:operands "rm32"
:code-string "[m: o32 0f 1b /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP31-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP31"
:operands "rm64"
:code-string "[m: o64 0f 1b /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP32-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP32"
:operands "rm16"
:code-string "[m: o16 0f 1c /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP32-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP32"
:operands "rm32"
:code-string "[m: o32 0f 1c /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP32-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP32"
:operands "rm64"
:code-string "[m: o64 0f 1c /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP33-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP33"
:operands "rm16"
:code-string "[m: o16 0f 1c /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP33-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP33"
:operands "rm32"
:code-string "[m: o32 0f 1c /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP33-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP33"
:operands "rm64"
:code-string "[m: o64 0f 1c /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP34-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP34"
:operands "rm16"
:code-string "[m: o16 0f 1c /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP34-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP34"
:operands "rm32"
:code-string "[m: o32 0f 1c /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP34-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP34"
:operands "rm64"
:code-string "[m: o64 0f 1c /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP35-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP35"
:operands "rm16"
:code-string "[m: o16 0f 1c /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP35-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP35"
:operands "rm32"
:code-string "[m: o32 0f 1c /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP35-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP35"
:operands "rm64"
:code-string "[m: o64 0f 1c /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP36-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP36"
:operands "rm16"
:code-string "[m: o16 0f 1c /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP36-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP36"
:operands "rm32"
:code-string "[m: o32 0f 1c /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP36-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP36"
:operands "rm64"
:code-string "[m: o64 0f 1c /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP37-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP37"
:operands "rm16"
:code-string "[m: o16 0f 1c /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP37-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP37"
:operands "rm32"
:code-string "[m: o32 0f 1c /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP37-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP37"
:operands "rm64"
:code-string "[m: o64 0f 1c /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP38-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP38"
:operands "rm16"
:code-string "[m: o16 0f 1c /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP38-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP38"
:operands "rm32"
:code-string "[m: o32 0f 1c /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP38-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP38"
:operands "rm64"
:code-string "[m: o64 0f 1c /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP39-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP39"
:operands "rm16"
:code-string "[m: o16 0f 1c /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP39-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP39"
:operands "rm32"
:code-string "[m: o32 0f 1c /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP39-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP39"
:operands "rm64"
:code-string "[m: o64 0f 1c /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP40-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP40"
:operands "rm16"
:code-string "[m: o16 0f 1d /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP40-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP40"
:operands "rm32"
:code-string "[m: o32 0f 1d /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP40-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP40"
:operands "rm64"
:code-string "[m: o64 0f 1d /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP41-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP41"
:operands "rm16"
:code-string "[m: o16 0f 1d /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP41-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP41"
:operands "rm32"
:code-string "[m: o32 0f 1d /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP41-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP41"
:operands "rm64"
:code-string "[m: o64 0f 1d /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP42-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP42"
:operands "rm16"
:code-string "[m: o16 0f 1d /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP42-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP42"
:operands "rm32"
:code-string "[m: o32 0f 1d /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP42-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP42"
:operands "rm64"
:code-string "[m: o64 0f 1d /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP43-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP43"
:operands "rm16"
:code-string "[m: o16 0f 1d /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP43-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP43"
:operands "rm32"
:code-string "[m: o32 0f 1d /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP43-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP43"
:operands "rm64"
:code-string "[m: o64 0f 1d /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP44-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP44"
:operands "rm16"
:code-string "[m: o16 0f 1d /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP44-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP44"
:operands "rm32"
:code-string "[m: o32 0f 1d /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP44-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP44"
:operands "rm64"
:code-string "[m: o64 0f 1d /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP45-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP45"
:operands "rm16"
:code-string "[m: o16 0f 1d /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP45-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP45"
:operands "rm32"
:code-string "[m: o32 0f 1d /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP45-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP45"
:operands "rm64"
:code-string "[m: o64 0f 1d /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP46-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP46"
:operands "rm16"
:code-string "[m: o16 0f 1d /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP46-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP46"
:operands "rm32"
:code-string "[m: o32 0f 1d /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP46-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP46"
:operands "rm64"
:code-string "[m: o64 0f 1d /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP47-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP47"
:operands "rm16"
:code-string "[m: o16 0f 1d /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP47-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP47"
:operands "rm32"
:code-string "[m: o32 0f 1d /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP47-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP47"
:operands "rm64"
:code-string "[m: o64 0f 1d /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP48-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP48"
:operands "rm16"
:code-string "[m: o16 0f 1e /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP48-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP48"
:operands "rm32"
:code-string "[m: o32 0f 1e /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP48-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP48"
:operands "rm64"
:code-string "[m: o64 0f 1e /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP49-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP49"
:operands "rm16"
:code-string "[m: o16 0f 1e /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP49-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP49"
:operands "rm32"
:code-string "[m: o32 0f 1e /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP49-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP49"
:operands "rm64"
:code-string "[m: o64 0f 1e /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP50-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP50"
:operands "rm16"
:code-string "[m: o16 0f 1e /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP50-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP50"
:operands "rm32"
:code-string "[m: o32 0f 1e /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP50-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP50"
:operands "rm64"
:code-string "[m: o64 0f 1e /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP51-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP51"
:operands "rm16"
:code-string "[m: o16 0f 1e /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP51-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP51"
:operands "rm32"
:code-string "[m: o32 0f 1e /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP51-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP51"
:operands "rm64"
:code-string "[m: o64 0f 1e /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP52-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP52"
:operands "rm16"
:code-string "[m: o16 0f 1e /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP52-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP52"
:operands "rm32"
:code-string "[m: o32 0f 1e /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP52-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP52"
:operands "rm64"
:code-string "[m: o64 0f 1e /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP53-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP53"
:operands "rm16"
:code-string "[m: o16 0f 1e /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP53-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP53"
:operands "rm32"
:code-string "[m: o32 0f 1e /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP53-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP53"
:operands "rm64"
:code-string "[m: o64 0f 1e /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP54-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP54"
:operands "rm16"
:code-string "[m: o16 0f 1e /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP54-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP54"
:operands "rm32"
:code-string "[m: o32 0f 1e /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP54-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP54"
:operands "rm64"
:code-string "[m: o64 0f 1e /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP55-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP55"
:operands "rm16"
:code-string "[m: o16 0f 1e /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP55-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP55"
:operands "rm32"
:code-string "[m: o32 0f 1e /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP55-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP55"
:operands "rm64"
:code-string "[m: o64 0f 1e /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP56-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP56"
:operands "rm16"
:code-string "[m: o16 0f 1f /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP56-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP56"
:operands "rm32"
:code-string "[m: o32 0f 1f /0]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP56-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP56"
:operands "rm64"
:code-string "[m: o64 0f 1f /0]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP57-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP57"
:operands "rm16"
:code-string "[m: o16 0f 1f /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP57-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP57"
:operands "rm32"
:code-string "[m: o32 0f 1f /1]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP57-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP57"
:operands "rm64"
:code-string "[m: o64 0f 1f /1]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP58-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP58"
:operands "rm16"
:code-string "[m: o16 0f 1f /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP58-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP58"
:operands "rm32"
:code-string "[m: o32 0f 1f /2]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP58-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP58"
:operands "rm64"
:code-string "[m: o64 0f 1f /2]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP59-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP59"
:operands "rm16"
:code-string "[m: o16 0f 1f /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP59-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP59"
:operands "rm32"
:code-string "[m: o32 0f 1f /3]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP59-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP59"
:operands "rm64"
:code-string "[m: o64 0f 1f /3]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP60-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP60"
:operands "rm16"
:code-string "[m: o16 0f 1f /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP60-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP60"
:operands "rm32"
:code-string "[m: o32 0f 1f /4]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP60-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP60"
:operands "rm64"
:code-string "[m: o64 0f 1f /4]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP61-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP61"
:operands "rm16"
:code-string "[m: o16 0f 1f /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP61-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP61"
:operands "rm32"
:code-string "[m: o32 0f 1f /5]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP61-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP61"
:operands "rm64"
:code-string "[m: o64 0f 1f /5]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP62-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP62"
:operands "rm16"
:code-string "[m: o16 0f 1f /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP62-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP62"
:operands "rm32"
:code-string "[m: o32 0f 1f /6]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP62-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP62"
:operands "rm64"
:code-string "[m: o64 0f 1f /6]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP63-rm16 (make-instance 'x86-asm-instruction
:name "HINT_NOP63"
:operands "rm16"
:code-string "[m: o16 0f 1f /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP63-rm32 (make-instance 'x86-asm-instruction
:name "HINT_NOP63"
:operands "rm32"
:code-string "[m: o32 0f 1f /7]"
:arch-flags (list "P6" "UNDOC")
:is-variant t))

(defparameter x64-instruction-variant-HINT_NOP63-rm64 (make-instance 'x86-asm-instruction
:name "HINT_NOP63"
:operands "rm64"
:code-string "[m: o64 0f 1f /7]"
:arch-flags (list "X64" "UNDOC")
:is-variant t))

(defparameter x64-instruction-container-DB (make-instance 'x86-asm-instruction :name "DB" :is-container t :variants (list
x64-instruction-variant-DB-ignore)))

(defparameter x64-instruction-container-DW (make-instance 'x86-asm-instruction :name "DW" :is-container t :variants (list
x64-instruction-variant-DW-ignore)))

(defparameter x64-instruction-container-DD (make-instance 'x86-asm-instruction :name "DD" :is-container t :variants (list
x64-instruction-variant-DD-ignore)))

(defparameter x64-instruction-container-DQ (make-instance 'x86-asm-instruction :name "DQ" :is-container t :variants (list
x64-instruction-variant-DQ-ignore)))

(defparameter x64-instruction-container-DT (make-instance 'x86-asm-instruction :name "DT" :is-container t :variants (list
x64-instruction-variant-DT-ignore)))

(defparameter x64-instruction-container-DO (make-instance 'x86-asm-instruction :name "DO" :is-container t :variants (list
x64-instruction-variant-DO-ignore)))

(defparameter x64-instruction-container-DY (make-instance 'x86-asm-instruction :name "DY" :is-container t :variants (list
x64-instruction-variant-DY-ignore)))

(defparameter x64-instruction-container-DZ (make-instance 'x86-asm-instruction :name "DZ" :is-container t :variants (list
x64-instruction-variant-DZ-ignore)))

(defparameter x64-instruction-container-RESB (make-instance 'x86-asm-instruction :name "RESB" :is-container t :variants (list
x64-instruction-variant-RESB-imm)))

(defparameter x64-instruction-container-RESW (make-instance 'x86-asm-instruction :name "RESW" :is-container t :variants (list
x64-instruction-variant-RESW-ignore)))

(defparameter x64-instruction-container-RESD (make-instance 'x86-asm-instruction :name "RESD" :is-container t :variants (list
x64-instruction-variant-RESD-ignore)))

(defparameter x64-instruction-container-RESQ (make-instance 'x86-asm-instruction :name "RESQ" :is-container t :variants (list
x64-instruction-variant-RESQ-ignore)))

(defparameter x64-instruction-container-REST (make-instance 'x86-asm-instruction :name "REST" :is-container t :variants (list
x64-instruction-variant-REST-ignore)))

(defparameter x64-instruction-container-RESO (make-instance 'x86-asm-instruction :name "RESO" :is-container t :variants (list
x64-instruction-variant-RESO-ignore)))

(defparameter x64-instruction-container-RESY (make-instance 'x86-asm-instruction :name "RESY" :is-container t :variants (list
x64-instruction-variant-RESY-ignore)))

(defparameter x64-instruction-container-RESZ (make-instance 'x86-asm-instruction :name "RESZ" :is-container t :variants (list
x64-instruction-variant-RESZ-ignore)))

(defparameter x64-instruction-container-ADC (make-instance 'x86-asm-instruction :name "ADC" :is-container t :variants (list
x64-instruction-variant-ADC-mem.reg8 x64-instruction-variant-ADC-reg8.reg8 x64-instruction-variant-ADC-mem.reg16 x64-instruction-variant-ADC-reg16.reg16 x64-instruction-variant-ADC-mem.reg32 x64-instruction-variant-ADC-reg32.reg32 x64-instruction-variant-ADC-mem.reg64 x64-instruction-variant-ADC-reg64.reg64 x64-instruction-variant-ADC-reg8.mem x64-instruction-variant-ADC-reg8.reg8 x64-instruction-variant-ADC-reg16.mem x64-instruction-variant-ADC-reg16.reg16 x64-instruction-variant-ADC-reg32.mem x64-instruction-variant-ADC-reg32.reg32 x64-instruction-variant-ADC-reg64.mem x64-instruction-variant-ADC-reg64.reg64 x64-instruction-variant-ADC-rm16.imm8 x64-instruction-variant-ADC-rm32.imm8 x64-instruction-variant-ADC-rm64.imm8 x64-instruction-variant-ADC-reg_al.imm x64-instruction-variant-ADC-reg_ax.sbyteword x64-instruction-variant-ADC-reg_ax.imm x64-instruction-variant-ADC-reg_eax.sbytedword x64-instruction-variant-ADC-reg_eax.imm x64-instruction-variant-ADC-reg_rax.sbytedword x64-instruction-variant-ADC-reg_rax.imm x64-instruction-variant-ADC-rm8.imm x64-instruction-variant-ADC-rm16.sbyteword x64-instruction-variant-ADC-rm16.imm x64-instruction-variant-ADC-rm32.sbytedword x64-instruction-variant-ADC-rm32.imm x64-instruction-variant-ADC-rm64.sbytedword x64-instruction-variant-ADC-rm64.imm x64-instruction-variant-ADC-mem.imm8 x64-instruction-variant-ADC-mem.sbyteword16 x64-instruction-variant-ADC-mem.imm16 x64-instruction-variant-ADC-mem.sbytedword32 x64-instruction-variant-ADC-mem.imm32)))

(defparameter x64-instruction-container-ADD (make-instance 'x86-asm-instruction :name "ADD" :is-container t :variants (list
x64-instruction-variant-ADD-mem.reg8 x64-instruction-variant-ADD-reg8.reg8 x64-instruction-variant-ADD-mem.reg16 x64-instruction-variant-ADD-reg16.reg16 x64-instruction-variant-ADD-mem.reg32 x64-instruction-variant-ADD-reg32.reg32 x64-instruction-variant-ADD-mem.reg64 x64-instruction-variant-ADD-reg64.reg64 x64-instruction-variant-ADD-reg8.mem x64-instruction-variant-ADD-reg8.reg8 x64-instruction-variant-ADD-reg16.mem x64-instruction-variant-ADD-reg16.reg16 x64-instruction-variant-ADD-reg32.mem x64-instruction-variant-ADD-reg32.reg32 x64-instruction-variant-ADD-reg64.mem x64-instruction-variant-ADD-reg64.reg64 x64-instruction-variant-ADD-rm16.imm8 x64-instruction-variant-ADD-rm32.imm8 x64-instruction-variant-ADD-rm64.imm8 x64-instruction-variant-ADD-reg_al.imm x64-instruction-variant-ADD-reg_ax.sbyteword x64-instruction-variant-ADD-reg_ax.imm x64-instruction-variant-ADD-reg_eax.sbytedword x64-instruction-variant-ADD-reg_eax.imm x64-instruction-variant-ADD-reg_rax.sbytedword x64-instruction-variant-ADD-reg_rax.imm x64-instruction-variant-ADD-rm8.imm x64-instruction-variant-ADD-rm16.sbyteword x64-instruction-variant-ADD-rm16.imm x64-instruction-variant-ADD-rm32.sbytedword x64-instruction-variant-ADD-rm32.imm x64-instruction-variant-ADD-rm64.sbytedword x64-instruction-variant-ADD-rm64.imm x64-instruction-variant-ADD-mem.imm8 x64-instruction-variant-ADD-mem.sbyteword16 x64-instruction-variant-ADD-mem.imm16 x64-instruction-variant-ADD-mem.sbytedword32 x64-instruction-variant-ADD-mem.imm32)))

(defparameter x64-instruction-container-AND (make-instance 'x86-asm-instruction :name "AND" :is-container t :variants (list
x64-instruction-variant-AND-mem.reg8 x64-instruction-variant-AND-reg8.reg8 x64-instruction-variant-AND-mem.reg16 x64-instruction-variant-AND-reg16.reg16 x64-instruction-variant-AND-mem.reg32 x64-instruction-variant-AND-reg32.reg32 x64-instruction-variant-AND-mem.reg64 x64-instruction-variant-AND-reg64.reg64 x64-instruction-variant-AND-reg8.mem x64-instruction-variant-AND-reg8.reg8 x64-instruction-variant-AND-reg16.mem x64-instruction-variant-AND-reg16.reg16 x64-instruction-variant-AND-reg32.mem x64-instruction-variant-AND-reg32.reg32 x64-instruction-variant-AND-reg64.mem x64-instruction-variant-AND-reg64.reg64 x64-instruction-variant-AND-rm16.imm8 x64-instruction-variant-AND-rm32.imm8 x64-instruction-variant-AND-rm64.imm8 x64-instruction-variant-AND-reg_al.imm x64-instruction-variant-AND-reg_ax.sbyteword x64-instruction-variant-AND-reg_ax.imm x64-instruction-variant-AND-reg_eax.sbytedword x64-instruction-variant-AND-reg_eax.imm x64-instruction-variant-AND-reg_rax.sbytedword x64-instruction-variant-AND-reg_rax.imm x64-instruction-variant-AND-rm8.imm x64-instruction-variant-AND-rm16.sbyteword x64-instruction-variant-AND-rm16.imm x64-instruction-variant-AND-rm32.sbytedword x64-instruction-variant-AND-rm32.imm x64-instruction-variant-AND-rm64.sbytedword x64-instruction-variant-AND-rm64.imm x64-instruction-variant-AND-mem.imm8 x64-instruction-variant-AND-mem.sbyteword16 x64-instruction-variant-AND-mem.imm16 x64-instruction-variant-AND-mem.sbytedword32 x64-instruction-variant-AND-mem.imm32)))

(defparameter x64-instruction-container-BB0_RESET (make-instance 'x86-asm-instruction :name "BB0_RESET" :is-container t :variants (list
x64-instruction-variant-BB0_RESET-void)))

(defparameter x64-instruction-container-BB1_RESET (make-instance 'x86-asm-instruction :name "BB1_RESET" :is-container t :variants (list
x64-instruction-variant-BB1_RESET-void)))

(defparameter x64-instruction-container-BSF (make-instance 'x86-asm-instruction :name "BSF" :is-container t :variants (list
x64-instruction-variant-BSF-reg16.mem x64-instruction-variant-BSF-reg16.reg16 x64-instruction-variant-BSF-reg32.mem x64-instruction-variant-BSF-reg32.reg32 x64-instruction-variant-BSF-reg64.mem x64-instruction-variant-BSF-reg64.reg64)))

(defparameter x64-instruction-container-BSR (make-instance 'x86-asm-instruction :name "BSR" :is-container t :variants (list
x64-instruction-variant-BSR-reg16.mem x64-instruction-variant-BSR-reg16.reg16 x64-instruction-variant-BSR-reg32.mem x64-instruction-variant-BSR-reg32.reg32 x64-instruction-variant-BSR-reg64.mem x64-instruction-variant-BSR-reg64.reg64)))

(defparameter x64-instruction-container-BSWAP (make-instance 'x86-asm-instruction :name "BSWAP" :is-container t :variants (list
x64-instruction-variant-BSWAP-reg32 x64-instruction-variant-BSWAP-reg64)))

(defparameter x64-instruction-container-BT (make-instance 'x86-asm-instruction :name "BT" :is-container t :variants (list
x64-instruction-variant-BT-mem.reg16 x64-instruction-variant-BT-reg16.reg16 x64-instruction-variant-BT-mem.reg32 x64-instruction-variant-BT-reg32.reg32 x64-instruction-variant-BT-mem.reg64 x64-instruction-variant-BT-reg64.reg64 x64-instruction-variant-BT-rm16.imm x64-instruction-variant-BT-rm32.imm x64-instruction-variant-BT-rm64.imm)))

(defparameter x64-instruction-container-BTC (make-instance 'x86-asm-instruction :name "BTC" :is-container t :variants (list
x64-instruction-variant-BTC-mem.reg16 x64-instruction-variant-BTC-reg16.reg16 x64-instruction-variant-BTC-mem.reg32 x64-instruction-variant-BTC-reg32.reg32 x64-instruction-variant-BTC-mem.reg64 x64-instruction-variant-BTC-reg64.reg64 x64-instruction-variant-BTC-rm16.imm x64-instruction-variant-BTC-rm32.imm x64-instruction-variant-BTC-rm64.imm)))

(defparameter x64-instruction-container-BTR (make-instance 'x86-asm-instruction :name "BTR" :is-container t :variants (list
x64-instruction-variant-BTR-mem.reg16 x64-instruction-variant-BTR-reg16.reg16 x64-instruction-variant-BTR-mem.reg32 x64-instruction-variant-BTR-reg32.reg32 x64-instruction-variant-BTR-mem.reg64 x64-instruction-variant-BTR-reg64.reg64 x64-instruction-variant-BTR-rm16.imm x64-instruction-variant-BTR-rm32.imm x64-instruction-variant-BTR-rm64.imm)))

(defparameter x64-instruction-container-BTS (make-instance 'x86-asm-instruction :name "BTS" :is-container t :variants (list
x64-instruction-variant-BTS-mem.reg16 x64-instruction-variant-BTS-reg16.reg16 x64-instruction-variant-BTS-mem.reg32 x64-instruction-variant-BTS-reg32.reg32 x64-instruction-variant-BTS-mem.reg64 x64-instruction-variant-BTS-reg64.reg64 x64-instruction-variant-BTS-rm16.imm x64-instruction-variant-BTS-rm32.imm x64-instruction-variant-BTS-rm64.imm)))

(defparameter x64-instruction-container-CALL (make-instance 'x86-asm-instruction :name "CALL" :is-container t :variants (list
x64-instruction-variant-CALL-imm x64-instruction-variant-CALL-imm-near x64-instruction-variant-CALL-imm64 x64-instruction-variant-CALL-imm64-near x64-instruction-variant-CALL-mem-far x64-instruction-variant-CALL-mem16-far x64-instruction-variant-CALL-mem32-far x64-instruction-variant-CALL-mem64-far x64-instruction-variant-CALL-mem-near x64-instruction-variant-CALL-rm64-near x64-instruction-variant-CALL-mem x64-instruction-variant-CALL-rm64)))

(defparameter x64-instruction-container-CBW (make-instance 'x86-asm-instruction :name "CBW" :is-container t :variants (list
x64-instruction-variant-CBW-void)))

(defparameter x64-instruction-container-CDQ (make-instance 'x86-asm-instruction :name "CDQ" :is-container t :variants (list
x64-instruction-variant-CDQ-void)))

(defparameter x64-instruction-container-CDQE (make-instance 'x86-asm-instruction :name "CDQE" :is-container t :variants (list
x64-instruction-variant-CDQE-void)))

(defparameter x64-instruction-container-CLC (make-instance 'x86-asm-instruction :name "CLC" :is-container t :variants (list
x64-instruction-variant-CLC-void)))

(defparameter x64-instruction-container-CLD (make-instance 'x86-asm-instruction :name "CLD" :is-container t :variants (list
x64-instruction-variant-CLD-void)))

(defparameter x64-instruction-container-CLI (make-instance 'x86-asm-instruction :name "CLI" :is-container t :variants (list
x64-instruction-variant-CLI-void)))

(defparameter x64-instruction-container-CLTS (make-instance 'x86-asm-instruction :name "CLTS" :is-container t :variants (list
x64-instruction-variant-CLTS-void)))

(defparameter x64-instruction-container-CMC (make-instance 'x86-asm-instruction :name "CMC" :is-container t :variants (list
x64-instruction-variant-CMC-void)))

(defparameter x64-instruction-container-CMP (make-instance 'x86-asm-instruction :name "CMP" :is-container t :variants (list
x64-instruction-variant-CMP-mem.reg8 x64-instruction-variant-CMP-reg8.reg8 x64-instruction-variant-CMP-mem.reg16 x64-instruction-variant-CMP-reg16.reg16 x64-instruction-variant-CMP-mem.reg32 x64-instruction-variant-CMP-reg32.reg32 x64-instruction-variant-CMP-mem.reg64 x64-instruction-variant-CMP-reg64.reg64 x64-instruction-variant-CMP-reg8.mem x64-instruction-variant-CMP-reg8.reg8 x64-instruction-variant-CMP-reg16.mem x64-instruction-variant-CMP-reg16.reg16 x64-instruction-variant-CMP-reg32.mem x64-instruction-variant-CMP-reg32.reg32 x64-instruction-variant-CMP-reg64.mem x64-instruction-variant-CMP-reg64.reg64 x64-instruction-variant-CMP-rm16.imm8 x64-instruction-variant-CMP-rm32.imm8 x64-instruction-variant-CMP-rm64.imm8 x64-instruction-variant-CMP-reg_al.imm x64-instruction-variant-CMP-reg_ax.sbyteword x64-instruction-variant-CMP-reg_ax.imm x64-instruction-variant-CMP-reg_eax.sbytedword x64-instruction-variant-CMP-reg_eax.imm x64-instruction-variant-CMP-reg_rax.sbytedword x64-instruction-variant-CMP-reg_rax.imm x64-instruction-variant-CMP-rm8.imm x64-instruction-variant-CMP-rm16.sbyteword x64-instruction-variant-CMP-rm16.imm x64-instruction-variant-CMP-rm32.sbytedword x64-instruction-variant-CMP-rm32.imm x64-instruction-variant-CMP-rm64.sbytedword x64-instruction-variant-CMP-rm64.imm x64-instruction-variant-CMP-mem.imm8 x64-instruction-variant-CMP-mem.sbyteword16 x64-instruction-variant-CMP-mem.imm16 x64-instruction-variant-CMP-mem.sbytedword32 x64-instruction-variant-CMP-mem.imm32)))

(defparameter x64-instruction-container-CMPSB (make-instance 'x86-asm-instruction :name "CMPSB" :is-container t :variants (list
x64-instruction-variant-CMPSB-void)))

(defparameter x64-instruction-container-CMPSD (make-instance 'x86-asm-instruction :name "CMPSD" :is-container t :variants (list
x64-instruction-variant-CMPSD-void)))

(defparameter x64-instruction-container-CMPSQ (make-instance 'x86-asm-instruction :name "CMPSQ" :is-container t :variants (list
x64-instruction-variant-CMPSQ-void)))

(defparameter x64-instruction-container-CMPSW (make-instance 'x86-asm-instruction :name "CMPSW" :is-container t :variants (list
x64-instruction-variant-CMPSW-void)))

(defparameter x64-instruction-container-CMPXCHG (make-instance 'x86-asm-instruction :name "CMPXCHG" :is-container t :variants (list
x64-instruction-variant-CMPXCHG-mem.reg8 x64-instruction-variant-CMPXCHG-reg8.reg8 x64-instruction-variant-CMPXCHG-mem.reg16 x64-instruction-variant-CMPXCHG-reg16.reg16 x64-instruction-variant-CMPXCHG-mem.reg32 x64-instruction-variant-CMPXCHG-reg32.reg32 x64-instruction-variant-CMPXCHG-mem.reg64 x64-instruction-variant-CMPXCHG-reg64.reg64)))

(defparameter x64-instruction-container-CMPXCHG486 (make-instance 'x86-asm-instruction :name "CMPXCHG486" :is-container t :variants (list
x64-instruction-variant-CMPXCHG486-mem.reg8 x64-instruction-variant-CMPXCHG486-reg8.reg8 x64-instruction-variant-CMPXCHG486-mem.reg16 x64-instruction-variant-CMPXCHG486-reg16.reg16 x64-instruction-variant-CMPXCHG486-mem.reg32 x64-instruction-variant-CMPXCHG486-reg32.reg32)))

(defparameter x64-instruction-container-CMPXCHG8B (make-instance 'x86-asm-instruction :name "CMPXCHG8B" :is-container t :variants (list
x64-instruction-variant-CMPXCHG8B-mem)))

(defparameter x64-instruction-container-CMPXCHG16B (make-instance 'x86-asm-instruction :name "CMPXCHG16B" :is-container t :variants (list
x64-instruction-variant-CMPXCHG16B-mem)))

(defparameter x64-instruction-container-CPUID (make-instance 'x86-asm-instruction :name "CPUID" :is-container t :variants (list
x64-instruction-variant-CPUID-void)))

(defparameter x64-instruction-container-CPU_READ (make-instance 'x86-asm-instruction :name "CPU_READ" :is-container t :variants (list
x64-instruction-variant-CPU_READ-void)))

(defparameter x64-instruction-container-CPU_WRITE (make-instance 'x86-asm-instruction :name "CPU_WRITE" :is-container t :variants (list
x64-instruction-variant-CPU_WRITE-void)))

(defparameter x64-instruction-container-CQO (make-instance 'x86-asm-instruction :name "CQO" :is-container t :variants (list
x64-instruction-variant-CQO-void)))

(defparameter x64-instruction-container-CWD (make-instance 'x86-asm-instruction :name "CWD" :is-container t :variants (list
x64-instruction-variant-CWD-void)))

(defparameter x64-instruction-container-CWDE (make-instance 'x86-asm-instruction :name "CWDE" :is-container t :variants (list
x64-instruction-variant-CWDE-void)))

(defparameter x64-instruction-container-DEC (make-instance 'x86-asm-instruction :name "DEC" :is-container t :variants (list
x64-instruction-variant-DEC-rm8 x64-instruction-variant-DEC-rm16 x64-instruction-variant-DEC-rm32 x64-instruction-variant-DEC-rm64)))

(defparameter x64-instruction-container-DIV (make-instance 'x86-asm-instruction :name "DIV" :is-container t :variants (list
x64-instruction-variant-DIV-rm8 x64-instruction-variant-DIV-rm16 x64-instruction-variant-DIV-rm32 x64-instruction-variant-DIV-rm64)))

(defparameter x64-instruction-container-DMINT (make-instance 'x86-asm-instruction :name "DMINT" :is-container t :variants (list
x64-instruction-variant-DMINT-void)))

(defparameter x64-instruction-container-EMMS (make-instance 'x86-asm-instruction :name "EMMS" :is-container t :variants (list
x64-instruction-variant-EMMS-void)))

(defparameter x64-instruction-container-ENTER (make-instance 'x86-asm-instruction :name "ENTER" :is-container t :variants (list
x64-instruction-variant-ENTER-imm.imm)))

(defparameter x64-instruction-container-EQU (make-instance 'x86-asm-instruction :name "EQU" :is-container t :variants (list
x64-instruction-variant-EQU-imm x64-instruction-variant-EQU-imm.imm)))

(defparameter x64-instruction-container-F2XM1 (make-instance 'x86-asm-instruction :name "F2XM1" :is-container t :variants (list
x64-instruction-variant-F2XM1-void)))

(defparameter x64-instruction-container-FABS (make-instance 'x86-asm-instruction :name "FABS" :is-container t :variants (list
x64-instruction-variant-FABS-void)))

(defparameter x64-instruction-container-FADD (make-instance 'x86-asm-instruction :name "FADD" :is-container t :variants (list
x64-instruction-variant-FADD-mem32 x64-instruction-variant-FADD-mem64 x64-instruction-variant-FADD-fpureg-to x64-instruction-variant-FADD-fpureg x64-instruction-variant-FADD-fpureg.fpu0 x64-instruction-variant-FADD-fpu0.fpureg x64-instruction-variant-FADD-void)))

(defparameter x64-instruction-container-FADDP (make-instance 'x86-asm-instruction :name "FADDP" :is-container t :variants (list
x64-instruction-variant-FADDP-fpureg x64-instruction-variant-FADDP-fpureg.fpu0 x64-instruction-variant-FADDP-void)))

(defparameter x64-instruction-container-FBLD (make-instance 'x86-asm-instruction :name "FBLD" :is-container t :variants (list
x64-instruction-variant-FBLD-mem80 x64-instruction-variant-FBLD-mem)))

(defparameter x64-instruction-container-FBSTP (make-instance 'x86-asm-instruction :name "FBSTP" :is-container t :variants (list
x64-instruction-variant-FBSTP-mem80 x64-instruction-variant-FBSTP-mem)))

(defparameter x64-instruction-container-FCHS (make-instance 'x86-asm-instruction :name "FCHS" :is-container t :variants (list
x64-instruction-variant-FCHS-void)))

(defparameter x64-instruction-container-FCLEX (make-instance 'x86-asm-instruction :name "FCLEX" :is-container t :variants (list
x64-instruction-variant-FCLEX-void)))

(defparameter x64-instruction-container-FCMOVB (make-instance 'x86-asm-instruction :name "FCMOVB" :is-container t :variants (list
x64-instruction-variant-FCMOVB-fpureg x64-instruction-variant-FCMOVB-fpu0.fpureg x64-instruction-variant-FCMOVB-void)))

(defparameter x64-instruction-container-FCMOVBE (make-instance 'x86-asm-instruction :name "FCMOVBE" :is-container t :variants (list
x64-instruction-variant-FCMOVBE-fpureg x64-instruction-variant-FCMOVBE-fpu0.fpureg x64-instruction-variant-FCMOVBE-void)))

(defparameter x64-instruction-container-FCMOVE (make-instance 'x86-asm-instruction :name "FCMOVE" :is-container t :variants (list
x64-instruction-variant-FCMOVE-fpureg x64-instruction-variant-FCMOVE-fpu0.fpureg x64-instruction-variant-FCMOVE-void)))

(defparameter x64-instruction-container-FCMOVNB (make-instance 'x86-asm-instruction :name "FCMOVNB" :is-container t :variants (list
x64-instruction-variant-FCMOVNB-fpureg x64-instruction-variant-FCMOVNB-fpu0.fpureg x64-instruction-variant-FCMOVNB-void)))

(defparameter x64-instruction-container-FCMOVNBE (make-instance 'x86-asm-instruction :name "FCMOVNBE" :is-container t :variants (list
x64-instruction-variant-FCMOVNBE-fpureg x64-instruction-variant-FCMOVNBE-fpu0.fpureg x64-instruction-variant-FCMOVNBE-void)))

(defparameter x64-instruction-container-FCMOVNE (make-instance 'x86-asm-instruction :name "FCMOVNE" :is-container t :variants (list
x64-instruction-variant-FCMOVNE-fpureg x64-instruction-variant-FCMOVNE-fpu0.fpureg x64-instruction-variant-FCMOVNE-void)))

(defparameter x64-instruction-container-FCMOVNU (make-instance 'x86-asm-instruction :name "FCMOVNU" :is-container t :variants (list
x64-instruction-variant-FCMOVNU-fpureg x64-instruction-variant-FCMOVNU-fpu0.fpureg x64-instruction-variant-FCMOVNU-void)))

(defparameter x64-instruction-container-FCMOVU (make-instance 'x86-asm-instruction :name "FCMOVU" :is-container t :variants (list
x64-instruction-variant-FCMOVU-fpureg x64-instruction-variant-FCMOVU-fpu0.fpureg x64-instruction-variant-FCMOVU-void)))

(defparameter x64-instruction-container-FCOM (make-instance 'x86-asm-instruction :name "FCOM" :is-container t :variants (list
x64-instruction-variant-FCOM-mem32 x64-instruction-variant-FCOM-mem64 x64-instruction-variant-FCOM-fpureg x64-instruction-variant-FCOM-fpu0.fpureg x64-instruction-variant-FCOM-void)))

(defparameter x64-instruction-container-FCOMI (make-instance 'x86-asm-instruction :name "FCOMI" :is-container t :variants (list
x64-instruction-variant-FCOMI-fpureg x64-instruction-variant-FCOMI-fpu0.fpureg x64-instruction-variant-FCOMI-void)))

(defparameter x64-instruction-container-FCOMIP (make-instance 'x86-asm-instruction :name "FCOMIP" :is-container t :variants (list
x64-instruction-variant-FCOMIP-fpureg x64-instruction-variant-FCOMIP-fpu0.fpureg x64-instruction-variant-FCOMIP-void)))

(defparameter x64-instruction-container-FCOMP (make-instance 'x86-asm-instruction :name "FCOMP" :is-container t :variants (list
x64-instruction-variant-FCOMP-mem32 x64-instruction-variant-FCOMP-mem64 x64-instruction-variant-FCOMP-fpureg x64-instruction-variant-FCOMP-fpu0.fpureg x64-instruction-variant-FCOMP-void)))

(defparameter x64-instruction-container-FCOMPP (make-instance 'x86-asm-instruction :name "FCOMPP" :is-container t :variants (list
x64-instruction-variant-FCOMPP-void)))

(defparameter x64-instruction-container-FCOS (make-instance 'x86-asm-instruction :name "FCOS" :is-container t :variants (list
x64-instruction-variant-FCOS-void)))

(defparameter x64-instruction-container-FDECSTP (make-instance 'x86-asm-instruction :name "FDECSTP" :is-container t :variants (list
x64-instruction-variant-FDECSTP-void)))

(defparameter x64-instruction-container-FDISI (make-instance 'x86-asm-instruction :name "FDISI" :is-container t :variants (list
x64-instruction-variant-FDISI-void)))

(defparameter x64-instruction-container-FDIV (make-instance 'x86-asm-instruction :name "FDIV" :is-container t :variants (list
x64-instruction-variant-FDIV-mem32 x64-instruction-variant-FDIV-mem64 x64-instruction-variant-FDIV-fpureg-to x64-instruction-variant-FDIV-fpureg x64-instruction-variant-FDIV-fpureg.fpu0 x64-instruction-variant-FDIV-fpu0.fpureg x64-instruction-variant-FDIV-void)))

(defparameter x64-instruction-container-FDIVP (make-instance 'x86-asm-instruction :name "FDIVP" :is-container t :variants (list
x64-instruction-variant-FDIVP-fpureg x64-instruction-variant-FDIVP-fpureg.fpu0 x64-instruction-variant-FDIVP-void)))

(defparameter x64-instruction-container-FDIVR (make-instance 'x86-asm-instruction :name "FDIVR" :is-container t :variants (list
x64-instruction-variant-FDIVR-mem32 x64-instruction-variant-FDIVR-mem64 x64-instruction-variant-FDIVR-fpureg-to x64-instruction-variant-FDIVR-fpureg.fpu0 x64-instruction-variant-FDIVR-fpureg x64-instruction-variant-FDIVR-fpu0.fpureg x64-instruction-variant-FDIVR-void)))

(defparameter x64-instruction-container-FDIVRP (make-instance 'x86-asm-instruction :name "FDIVRP" :is-container t :variants (list
x64-instruction-variant-FDIVRP-fpureg x64-instruction-variant-FDIVRP-fpureg.fpu0 x64-instruction-variant-FDIVRP-void)))

(defparameter x64-instruction-container-FEMMS (make-instance 'x86-asm-instruction :name "FEMMS" :is-container t :variants (list
x64-instruction-variant-FEMMS-void)))

(defparameter x64-instruction-container-FENI (make-instance 'x86-asm-instruction :name "FENI" :is-container t :variants (list
x64-instruction-variant-FENI-void)))

(defparameter x64-instruction-container-FFREE (make-instance 'x86-asm-instruction :name "FFREE" :is-container t :variants (list
x64-instruction-variant-FFREE-fpureg x64-instruction-variant-FFREE-void)))

(defparameter x64-instruction-container-FFREEP (make-instance 'x86-asm-instruction :name "FFREEP" :is-container t :variants (list
x64-instruction-variant-FFREEP-fpureg x64-instruction-variant-FFREEP-void)))

(defparameter x64-instruction-container-FIADD (make-instance 'x86-asm-instruction :name "FIADD" :is-container t :variants (list
x64-instruction-variant-FIADD-mem32 x64-instruction-variant-FIADD-mem16)))

(defparameter x64-instruction-container-FICOM (make-instance 'x86-asm-instruction :name "FICOM" :is-container t :variants (list
x64-instruction-variant-FICOM-mem32 x64-instruction-variant-FICOM-mem16)))

(defparameter x64-instruction-container-FICOMP (make-instance 'x86-asm-instruction :name "FICOMP" :is-container t :variants (list
x64-instruction-variant-FICOMP-mem32 x64-instruction-variant-FICOMP-mem16)))

(defparameter x64-instruction-container-FIDIV (make-instance 'x86-asm-instruction :name "FIDIV" :is-container t :variants (list
x64-instruction-variant-FIDIV-mem32 x64-instruction-variant-FIDIV-mem16)))

(defparameter x64-instruction-container-FIDIVR (make-instance 'x86-asm-instruction :name "FIDIVR" :is-container t :variants (list
x64-instruction-variant-FIDIVR-mem32 x64-instruction-variant-FIDIVR-mem16)))

(defparameter x64-instruction-container-FILD (make-instance 'x86-asm-instruction :name "FILD" :is-container t :variants (list
x64-instruction-variant-FILD-mem32 x64-instruction-variant-FILD-mem16 x64-instruction-variant-FILD-mem64)))

(defparameter x64-instruction-container-FIMUL (make-instance 'x86-asm-instruction :name "FIMUL" :is-container t :variants (list
x64-instruction-variant-FIMUL-mem32 x64-instruction-variant-FIMUL-mem16)))

(defparameter x64-instruction-container-FINCSTP (make-instance 'x86-asm-instruction :name "FINCSTP" :is-container t :variants (list
x64-instruction-variant-FINCSTP-void)))

(defparameter x64-instruction-container-FINIT (make-instance 'x86-asm-instruction :name "FINIT" :is-container t :variants (list
x64-instruction-variant-FINIT-void)))

(defparameter x64-instruction-container-FIST (make-instance 'x86-asm-instruction :name "FIST" :is-container t :variants (list
x64-instruction-variant-FIST-mem32 x64-instruction-variant-FIST-mem16)))

(defparameter x64-instruction-container-FISTP (make-instance 'x86-asm-instruction :name "FISTP" :is-container t :variants (list
x64-instruction-variant-FISTP-mem32 x64-instruction-variant-FISTP-mem16 x64-instruction-variant-FISTP-mem64)))

(defparameter x64-instruction-container-FISTTP (make-instance 'x86-asm-instruction :name "FISTTP" :is-container t :variants (list
x64-instruction-variant-FISTTP-mem16 x64-instruction-variant-FISTTP-mem32 x64-instruction-variant-FISTTP-mem64)))

(defparameter x64-instruction-container-FISUB (make-instance 'x86-asm-instruction :name "FISUB" :is-container t :variants (list
x64-instruction-variant-FISUB-mem32 x64-instruction-variant-FISUB-mem16)))

(defparameter x64-instruction-container-FISUBR (make-instance 'x86-asm-instruction :name "FISUBR" :is-container t :variants (list
x64-instruction-variant-FISUBR-mem32 x64-instruction-variant-FISUBR-mem16)))

(defparameter x64-instruction-container-FLD (make-instance 'x86-asm-instruction :name "FLD" :is-container t :variants (list
x64-instruction-variant-FLD-mem32 x64-instruction-variant-FLD-mem64 x64-instruction-variant-FLD-mem80 x64-instruction-variant-FLD-fpureg x64-instruction-variant-FLD-void)))

(defparameter x64-instruction-container-FLD1 (make-instance 'x86-asm-instruction :name "FLD1" :is-container t :variants (list
x64-instruction-variant-FLD1-void)))

(defparameter x64-instruction-container-FLDCW (make-instance 'x86-asm-instruction :name "FLDCW" :is-container t :variants (list
x64-instruction-variant-FLDCW-mem)))

(defparameter x64-instruction-container-FLDENV (make-instance 'x86-asm-instruction :name "FLDENV" :is-container t :variants (list
x64-instruction-variant-FLDENV-mem)))

(defparameter x64-instruction-container-FLDL2E (make-instance 'x86-asm-instruction :name "FLDL2E" :is-container t :variants (list
x64-instruction-variant-FLDL2E-void)))

(defparameter x64-instruction-container-FLDL2T (make-instance 'x86-asm-instruction :name "FLDL2T" :is-container t :variants (list
x64-instruction-variant-FLDL2T-void)))

(defparameter x64-instruction-container-FLDLG2 (make-instance 'x86-asm-instruction :name "FLDLG2" :is-container t :variants (list
x64-instruction-variant-FLDLG2-void)))

(defparameter x64-instruction-container-FLDLN2 (make-instance 'x86-asm-instruction :name "FLDLN2" :is-container t :variants (list
x64-instruction-variant-FLDLN2-void)))

(defparameter x64-instruction-container-FLDPI (make-instance 'x86-asm-instruction :name "FLDPI" :is-container t :variants (list
x64-instruction-variant-FLDPI-void)))

(defparameter x64-instruction-container-FLDZ (make-instance 'x86-asm-instruction :name "FLDZ" :is-container t :variants (list
x64-instruction-variant-FLDZ-void)))

(defparameter x64-instruction-container-FMUL (make-instance 'x86-asm-instruction :name "FMUL" :is-container t :variants (list
x64-instruction-variant-FMUL-mem32 x64-instruction-variant-FMUL-mem64 x64-instruction-variant-FMUL-fpureg-to x64-instruction-variant-FMUL-fpureg.fpu0 x64-instruction-variant-FMUL-fpureg x64-instruction-variant-FMUL-fpu0.fpureg x64-instruction-variant-FMUL-void)))

(defparameter x64-instruction-container-FMULP (make-instance 'x86-asm-instruction :name "FMULP" :is-container t :variants (list
x64-instruction-variant-FMULP-fpureg x64-instruction-variant-FMULP-fpureg.fpu0 x64-instruction-variant-FMULP-void)))

(defparameter x64-instruction-container-FNCLEX (make-instance 'x86-asm-instruction :name "FNCLEX" :is-container t :variants (list
x64-instruction-variant-FNCLEX-void)))

(defparameter x64-instruction-container-FNDISI (make-instance 'x86-asm-instruction :name "FNDISI" :is-container t :variants (list
x64-instruction-variant-FNDISI-void)))

(defparameter x64-instruction-container-FNENI (make-instance 'x86-asm-instruction :name "FNENI" :is-container t :variants (list
x64-instruction-variant-FNENI-void)))

(defparameter x64-instruction-container-FNINIT (make-instance 'x86-asm-instruction :name "FNINIT" :is-container t :variants (list
x64-instruction-variant-FNINIT-void)))

(defparameter x64-instruction-container-FNOP (make-instance 'x86-asm-instruction :name "FNOP" :is-container t :variants (list
x64-instruction-variant-FNOP-void)))

(defparameter x64-instruction-container-FNSAVE (make-instance 'x86-asm-instruction :name "FNSAVE" :is-container t :variants (list
x64-instruction-variant-FNSAVE-mem)))

(defparameter x64-instruction-container-FNSTCW (make-instance 'x86-asm-instruction :name "FNSTCW" :is-container t :variants (list
x64-instruction-variant-FNSTCW-mem)))

(defparameter x64-instruction-container-FNSTENV (make-instance 'x86-asm-instruction :name "FNSTENV" :is-container t :variants (list
x64-instruction-variant-FNSTENV-mem)))

(defparameter x64-instruction-container-FNSTSW (make-instance 'x86-asm-instruction :name "FNSTSW" :is-container t :variants (list
x64-instruction-variant-FNSTSW-mem x64-instruction-variant-FNSTSW-reg_ax)))

(defparameter x64-instruction-container-FPATAN (make-instance 'x86-asm-instruction :name "FPATAN" :is-container t :variants (list
x64-instruction-variant-FPATAN-void)))

(defparameter x64-instruction-container-FPREM (make-instance 'x86-asm-instruction :name "FPREM" :is-container t :variants (list
x64-instruction-variant-FPREM-void)))

(defparameter x64-instruction-container-FPREM1 (make-instance 'x86-asm-instruction :name "FPREM1" :is-container t :variants (list
x64-instruction-variant-FPREM1-void)))

(defparameter x64-instruction-container-FPTAN (make-instance 'x86-asm-instruction :name "FPTAN" :is-container t :variants (list
x64-instruction-variant-FPTAN-void)))

(defparameter x64-instruction-container-FRNDINT (make-instance 'x86-asm-instruction :name "FRNDINT" :is-container t :variants (list
x64-instruction-variant-FRNDINT-void)))

(defparameter x64-instruction-container-FRSTOR (make-instance 'x86-asm-instruction :name "FRSTOR" :is-container t :variants (list
x64-instruction-variant-FRSTOR-mem)))

(defparameter x64-instruction-container-FSAVE (make-instance 'x86-asm-instruction :name "FSAVE" :is-container t :variants (list
x64-instruction-variant-FSAVE-mem)))

(defparameter x64-instruction-container-FSCALE (make-instance 'x86-asm-instruction :name "FSCALE" :is-container t :variants (list
x64-instruction-variant-FSCALE-void)))

(defparameter x64-instruction-container-FSETPM (make-instance 'x86-asm-instruction :name "FSETPM" :is-container t :variants (list
x64-instruction-variant-FSETPM-void)))

(defparameter x64-instruction-container-FSIN (make-instance 'x86-asm-instruction :name "FSIN" :is-container t :variants (list
x64-instruction-variant-FSIN-void)))

(defparameter x64-instruction-container-FSINCOS (make-instance 'x86-asm-instruction :name "FSINCOS" :is-container t :variants (list
x64-instruction-variant-FSINCOS-void)))

(defparameter x64-instruction-container-FSQRT (make-instance 'x86-asm-instruction :name "FSQRT" :is-container t :variants (list
x64-instruction-variant-FSQRT-void)))

(defparameter x64-instruction-container-FST (make-instance 'x86-asm-instruction :name "FST" :is-container t :variants (list
x64-instruction-variant-FST-mem32 x64-instruction-variant-FST-mem64 x64-instruction-variant-FST-fpureg x64-instruction-variant-FST-void)))

(defparameter x64-instruction-container-FSTCW (make-instance 'x86-asm-instruction :name "FSTCW" :is-container t :variants (list
x64-instruction-variant-FSTCW-mem)))

(defparameter x64-instruction-container-FSTENV (make-instance 'x86-asm-instruction :name "FSTENV" :is-container t :variants (list
x64-instruction-variant-FSTENV-mem)))

(defparameter x64-instruction-container-FSTP (make-instance 'x86-asm-instruction :name "FSTP" :is-container t :variants (list
x64-instruction-variant-FSTP-mem32 x64-instruction-variant-FSTP-mem64 x64-instruction-variant-FSTP-mem80 x64-instruction-variant-FSTP-fpureg x64-instruction-variant-FSTP-void)))

(defparameter x64-instruction-container-FSTSW (make-instance 'x86-asm-instruction :name "FSTSW" :is-container t :variants (list
x64-instruction-variant-FSTSW-mem x64-instruction-variant-FSTSW-reg_ax)))

(defparameter x64-instruction-container-FSUB (make-instance 'x86-asm-instruction :name "FSUB" :is-container t :variants (list
x64-instruction-variant-FSUB-mem32 x64-instruction-variant-FSUB-mem64 x64-instruction-variant-FSUB-fpureg-to x64-instruction-variant-FSUB-fpureg.fpu0 x64-instruction-variant-FSUB-fpureg x64-instruction-variant-FSUB-fpu0.fpureg x64-instruction-variant-FSUB-void)))

(defparameter x64-instruction-container-FSUBP (make-instance 'x86-asm-instruction :name "FSUBP" :is-container t :variants (list
x64-instruction-variant-FSUBP-fpureg x64-instruction-variant-FSUBP-fpureg.fpu0 x64-instruction-variant-FSUBP-void)))

(defparameter x64-instruction-container-FSUBR (make-instance 'x86-asm-instruction :name "FSUBR" :is-container t :variants (list
x64-instruction-variant-FSUBR-mem32 x64-instruction-variant-FSUBR-mem64 x64-instruction-variant-FSUBR-fpureg-to x64-instruction-variant-FSUBR-fpureg.fpu0 x64-instruction-variant-FSUBR-fpureg x64-instruction-variant-FSUBR-fpu0.fpureg x64-instruction-variant-FSUBR-void)))

(defparameter x64-instruction-container-FSUBRP (make-instance 'x86-asm-instruction :name "FSUBRP" :is-container t :variants (list
x64-instruction-variant-FSUBRP-fpureg x64-instruction-variant-FSUBRP-fpureg.fpu0 x64-instruction-variant-FSUBRP-void)))

(defparameter x64-instruction-container-FTST (make-instance 'x86-asm-instruction :name "FTST" :is-container t :variants (list
x64-instruction-variant-FTST-void)))

(defparameter x64-instruction-container-FUCOM (make-instance 'x86-asm-instruction :name "FUCOM" :is-container t :variants (list
x64-instruction-variant-FUCOM-fpureg x64-instruction-variant-FUCOM-fpu0.fpureg x64-instruction-variant-FUCOM-void)))

(defparameter x64-instruction-container-FUCOMI (make-instance 'x86-asm-instruction :name "FUCOMI" :is-container t :variants (list
x64-instruction-variant-FUCOMI-fpureg x64-instruction-variant-FUCOMI-fpu0.fpureg x64-instruction-variant-FUCOMI-void)))

(defparameter x64-instruction-container-FUCOMIP (make-instance 'x86-asm-instruction :name "FUCOMIP" :is-container t :variants (list
x64-instruction-variant-FUCOMIP-fpureg x64-instruction-variant-FUCOMIP-fpu0.fpureg x64-instruction-variant-FUCOMIP-void)))

(defparameter x64-instruction-container-FUCOMP (make-instance 'x86-asm-instruction :name "FUCOMP" :is-container t :variants (list
x64-instruction-variant-FUCOMP-fpureg x64-instruction-variant-FUCOMP-fpu0.fpureg x64-instruction-variant-FUCOMP-void)))

(defparameter x64-instruction-container-FUCOMPP (make-instance 'x86-asm-instruction :name "FUCOMPP" :is-container t :variants (list
x64-instruction-variant-FUCOMPP-void)))

(defparameter x64-instruction-container-FXAM (make-instance 'x86-asm-instruction :name "FXAM" :is-container t :variants (list
x64-instruction-variant-FXAM-void)))

(defparameter x64-instruction-container-FXCH (make-instance 'x86-asm-instruction :name "FXCH" :is-container t :variants (list
x64-instruction-variant-FXCH-fpureg x64-instruction-variant-FXCH-fpureg.fpu0 x64-instruction-variant-FXCH-fpu0.fpureg x64-instruction-variant-FXCH-void)))

(defparameter x64-instruction-container-FXTRACT (make-instance 'x86-asm-instruction :name "FXTRACT" :is-container t :variants (list
x64-instruction-variant-FXTRACT-void)))

(defparameter x64-instruction-container-FYL2X (make-instance 'x86-asm-instruction :name "FYL2X" :is-container t :variants (list
x64-instruction-variant-FYL2X-void)))

(defparameter x64-instruction-container-FYL2XP1 (make-instance 'x86-asm-instruction :name "FYL2XP1" :is-container t :variants (list
x64-instruction-variant-FYL2XP1-void)))

(defparameter x64-instruction-container-HLT (make-instance 'x86-asm-instruction :name "HLT" :is-container t :variants (list
x64-instruction-variant-HLT-void)))

(defparameter x64-instruction-container-IBTS (make-instance 'x86-asm-instruction :name "IBTS" :is-container t :variants (list
x64-instruction-variant-IBTS-mem.reg16 x64-instruction-variant-IBTS-reg16.reg16 x64-instruction-variant-IBTS-mem.reg32 x64-instruction-variant-IBTS-reg32.reg32)))

(defparameter x64-instruction-container-ICEBP (make-instance 'x86-asm-instruction :name "ICEBP" :is-container t :variants (list
x64-instruction-variant-ICEBP-void)))

(defparameter x64-instruction-container-IDIV (make-instance 'x86-asm-instruction :name "IDIV" :is-container t :variants (list
x64-instruction-variant-IDIV-rm8 x64-instruction-variant-IDIV-rm16 x64-instruction-variant-IDIV-rm32 x64-instruction-variant-IDIV-rm64)))

(defparameter x64-instruction-container-IMUL (make-instance 'x86-asm-instruction :name "IMUL" :is-container t :variants (list
x64-instruction-variant-IMUL-rm8 x64-instruction-variant-IMUL-rm16 x64-instruction-variant-IMUL-rm32 x64-instruction-variant-IMUL-rm64 x64-instruction-variant-IMUL-reg16.mem x64-instruction-variant-IMUL-reg16.reg16 x64-instruction-variant-IMUL-reg32.mem x64-instruction-variant-IMUL-reg32.reg32 x64-instruction-variant-IMUL-reg64.mem x64-instruction-variant-IMUL-reg64.reg64 x64-instruction-variant-IMUL-reg16.mem.imm8 x64-instruction-variant-IMUL-reg16.mem.sbyteword x64-instruction-variant-IMUL-reg16.mem.imm16 x64-instruction-variant-IMUL-reg16.mem.imm x64-instruction-variant-IMUL-reg16.reg16.imm8 x64-instruction-variant-IMUL-reg16.reg16.sbyteword x64-instruction-variant-IMUL-reg16.reg16.imm16 x64-instruction-variant-IMUL-reg16.reg16.imm x64-instruction-variant-IMUL-reg32.mem.imm8 x64-instruction-variant-IMUL-reg32.mem.sbytedword x64-instruction-variant-IMUL-reg32.mem.imm32 x64-instruction-variant-IMUL-reg32.mem.imm x64-instruction-variant-IMUL-reg32.reg32.imm8 x64-instruction-variant-IMUL-reg32.reg32.sbytedword x64-instruction-variant-IMUL-reg32.reg32.imm32 x64-instruction-variant-IMUL-reg32.reg32.imm x64-instruction-variant-IMUL-reg64.mem.imm8 x64-instruction-variant-IMUL-reg64.mem.sbytedword x64-instruction-variant-IMUL-reg64.mem.imm32 x64-instruction-variant-IMUL-reg64.mem.imm x64-instruction-variant-IMUL-reg64.reg64.imm8 x64-instruction-variant-IMUL-reg64.reg64.sbytedword x64-instruction-variant-IMUL-reg64.reg64.imm32 x64-instruction-variant-IMUL-reg64.reg64.imm x64-instruction-variant-IMUL-reg16.imm8 x64-instruction-variant-IMUL-reg16.sbyteword x64-instruction-variant-IMUL-reg16.imm16 x64-instruction-variant-IMUL-reg16.imm x64-instruction-variant-IMUL-reg32.imm8 x64-instruction-variant-IMUL-reg32.sbytedword x64-instruction-variant-IMUL-reg32.imm32 x64-instruction-variant-IMUL-reg32.imm x64-instruction-variant-IMUL-reg64.imm8 x64-instruction-variant-IMUL-reg64.sbytedword x64-instruction-variant-IMUL-reg64.imm32 x64-instruction-variant-IMUL-reg64.imm)))

(defparameter x64-instruction-container-IN (make-instance 'x86-asm-instruction :name "IN" :is-container t :variants (list
x64-instruction-variant-IN-reg_al.imm x64-instruction-variant-IN-reg_ax.imm x64-instruction-variant-IN-reg_eax.imm x64-instruction-variant-IN-reg_al.reg_dx x64-instruction-variant-IN-reg_ax.reg_dx x64-instruction-variant-IN-reg_eax.reg_dx)))

(defparameter x64-instruction-container-INC (make-instance 'x86-asm-instruction :name "INC" :is-container t :variants (list
x64-instruction-variant-INC-rm8 x64-instruction-variant-INC-rm16 x64-instruction-variant-INC-rm32 x64-instruction-variant-INC-rm64)))

(defparameter x64-instruction-container-INCBIN (make-instance 'x86-asm-instruction :name "INCBIN" :is-container t :variants (list
x64-instruction-variant-INCBIN-ignore)))

(defparameter x64-instruction-container-INSB (make-instance 'x86-asm-instruction :name "INSB" :is-container t :variants (list
x64-instruction-variant-INSB-void)))

(defparameter x64-instruction-container-INSD (make-instance 'x86-asm-instruction :name "INSD" :is-container t :variants (list
x64-instruction-variant-INSD-void)))

(defparameter x64-instruction-container-INSW (make-instance 'x86-asm-instruction :name "INSW" :is-container t :variants (list
x64-instruction-variant-INSW-void)))

(defparameter x64-instruction-container-INT (make-instance 'x86-asm-instruction :name "INT" :is-container t :variants (list
x64-instruction-variant-INT-imm)))

(defparameter x64-instruction-container-INT01 (make-instance 'x86-asm-instruction :name "INT01" :is-container t :variants (list
x64-instruction-variant-INT01-void)))

(defparameter x64-instruction-container-INT1 (make-instance 'x86-asm-instruction :name "INT1" :is-container t :variants (list
x64-instruction-variant-INT1-void)))

(defparameter x64-instruction-container-INT03 (make-instance 'x86-asm-instruction :name "INT03" :is-container t :variants (list
x64-instruction-variant-INT03-void)))

(defparameter x64-instruction-container-INT3 (make-instance 'x86-asm-instruction :name "INT3" :is-container t :variants (list
x64-instruction-variant-INT3-void)))

(defparameter x64-instruction-container-INVD (make-instance 'x86-asm-instruction :name "INVD" :is-container t :variants (list
x64-instruction-variant-INVD-void)))

(defparameter x64-instruction-container-INVPCID (make-instance 'x86-asm-instruction :name "INVPCID" :is-container t :variants (list
x64-instruction-variant-INVPCID-reg64.mem128)))

(defparameter x64-instruction-container-INVLPG (make-instance 'x86-asm-instruction :name "INVLPG" :is-container t :variants (list
x64-instruction-variant-INVLPG-mem)))

(defparameter x64-instruction-container-INVLPGA (make-instance 'x86-asm-instruction :name "INVLPGA" :is-container t :variants (list
x64-instruction-variant-INVLPGA-reg_eax.reg_ecx x64-instruction-variant-INVLPGA-reg_rax.reg_ecx x64-instruction-variant-INVLPGA-void)))

(defparameter x64-instruction-container-IRET (make-instance 'x86-asm-instruction :name "IRET" :is-container t :variants (list
x64-instruction-variant-IRET-void)))

(defparameter x64-instruction-container-IRETD (make-instance 'x86-asm-instruction :name "IRETD" :is-container t :variants (list
x64-instruction-variant-IRETD-void)))

(defparameter x64-instruction-container-IRETQ (make-instance 'x86-asm-instruction :name "IRETQ" :is-container t :variants (list
x64-instruction-variant-IRETQ-void)))

(defparameter x64-instruction-container-IRETW (make-instance 'x86-asm-instruction :name "IRETW" :is-container t :variants (list
x64-instruction-variant-IRETW-void)))

(defparameter x64-instruction-container-JECXZ (make-instance 'x86-asm-instruction :name "JECXZ" :is-container t :variants (list
x64-instruction-variant-JECXZ-imm)))

(defparameter x64-instruction-container-JRCXZ (make-instance 'x86-asm-instruction :name "JRCXZ" :is-container t :variants (list
x64-instruction-variant-JRCXZ-imm)))

(defparameter x64-instruction-container-JMP (make-instance 'x86-asm-instruction :name "JMP" :is-container t :variants (list
x64-instruction-variant-JMP-imm-short x64-instruction-variant-JMP-imm x64-instruction-variant-JMP-imm x64-instruction-variant-JMP-imm-near x64-instruction-variant-JMP-imm64 x64-instruction-variant-JMP-imm64-near x64-instruction-variant-JMP-mem-far x64-instruction-variant-JMP-mem16-far x64-instruction-variant-JMP-mem32-far x64-instruction-variant-JMP-mem64-far x64-instruction-variant-JMP-mem-near x64-instruction-variant-JMP-rm64-near x64-instruction-variant-JMP-mem x64-instruction-variant-JMP-rm64)))

(defparameter x64-instruction-container-JMPE (make-instance 'x86-asm-instruction :name "JMPE" :is-container t :variants (list
x64-instruction-variant-JMPE-imm x64-instruction-variant-JMPE-imm16 x64-instruction-variant-JMPE-imm32 x64-instruction-variant-JMPE-rm16 x64-instruction-variant-JMPE-rm32)))

(defparameter x64-instruction-container-LAHF (make-instance 'x86-asm-instruction :name "LAHF" :is-container t :variants (list
x64-instruction-variant-LAHF-void)))

(defparameter x64-instruction-container-LAR (make-instance 'x86-asm-instruction :name "LAR" :is-container t :variants (list
x64-instruction-variant-LAR-reg16.mem x64-instruction-variant-LAR-reg16.reg16 x64-instruction-variant-LAR-reg16.reg32 x64-instruction-variant-LAR-reg16.reg64 x64-instruction-variant-LAR-reg32.mem x64-instruction-variant-LAR-reg32.reg16 x64-instruction-variant-LAR-reg32.reg32 x64-instruction-variant-LAR-reg32.reg64 x64-instruction-variant-LAR-reg64.mem x64-instruction-variant-LAR-reg64.reg16 x64-instruction-variant-LAR-reg64.reg32 x64-instruction-variant-LAR-reg64.reg64)))

(defparameter x64-instruction-container-LEA (make-instance 'x86-asm-instruction :name "LEA" :is-container t :variants (list
x64-instruction-variant-LEA-reg16.mem x64-instruction-variant-LEA-reg32.mem x64-instruction-variant-LEA-reg64.mem)))

(defparameter x64-instruction-container-LEAVE (make-instance 'x86-asm-instruction :name "LEAVE" :is-container t :variants (list
x64-instruction-variant-LEAVE-void)))

(defparameter x64-instruction-container-LFENCE (make-instance 'x86-asm-instruction :name "LFENCE" :is-container t :variants (list
x64-instruction-variant-LFENCE-void)))

(defparameter x64-instruction-container-LFS (make-instance 'x86-asm-instruction :name "LFS" :is-container t :variants (list
x64-instruction-variant-LFS-reg16.mem x64-instruction-variant-LFS-reg32.mem x64-instruction-variant-LFS-reg64.mem)))

(defparameter x64-instruction-container-LGDT (make-instance 'x86-asm-instruction :name "LGDT" :is-container t :variants (list
x64-instruction-variant-LGDT-mem)))

(defparameter x64-instruction-container-LGS (make-instance 'x86-asm-instruction :name "LGS" :is-container t :variants (list
x64-instruction-variant-LGS-reg16.mem x64-instruction-variant-LGS-reg32.mem x64-instruction-variant-LGS-reg64.mem)))

(defparameter x64-instruction-container-LIDT (make-instance 'x86-asm-instruction :name "LIDT" :is-container t :variants (list
x64-instruction-variant-LIDT-mem)))

(defparameter x64-instruction-container-LLDT (make-instance 'x86-asm-instruction :name "LLDT" :is-container t :variants (list
x64-instruction-variant-LLDT-mem x64-instruction-variant-LLDT-mem16 x64-instruction-variant-LLDT-reg16)))

(defparameter x64-instruction-container-LMSW (make-instance 'x86-asm-instruction :name "LMSW" :is-container t :variants (list
x64-instruction-variant-LMSW-mem x64-instruction-variant-LMSW-mem16 x64-instruction-variant-LMSW-reg16)))

(defparameter x64-instruction-container-LOADALL (make-instance 'x86-asm-instruction :name "LOADALL" :is-container t :variants (list
x64-instruction-variant-LOADALL-void)))

(defparameter x64-instruction-container-LOADALL286 (make-instance 'x86-asm-instruction :name "LOADALL286" :is-container t :variants (list
x64-instruction-variant-LOADALL286-void)))

(defparameter x64-instruction-container-LODSB (make-instance 'x86-asm-instruction :name "LODSB" :is-container t :variants (list
x64-instruction-variant-LODSB-void)))

(defparameter x64-instruction-container-LODSD (make-instance 'x86-asm-instruction :name "LODSD" :is-container t :variants (list
x64-instruction-variant-LODSD-void)))

(defparameter x64-instruction-container-LODSQ (make-instance 'x86-asm-instruction :name "LODSQ" :is-container t :variants (list
x64-instruction-variant-LODSQ-void)))

(defparameter x64-instruction-container-LODSW (make-instance 'x86-asm-instruction :name "LODSW" :is-container t :variants (list
x64-instruction-variant-LODSW-void)))

(defparameter x64-instruction-container-LOOP (make-instance 'x86-asm-instruction :name "LOOP" :is-container t :variants (list
x64-instruction-variant-LOOP-imm x64-instruction-variant-LOOP-imm.reg_ecx x64-instruction-variant-LOOP-imm.reg_rcx)))

(defparameter x64-instruction-container-LOOPE (make-instance 'x86-asm-instruction :name "LOOPE" :is-container t :variants (list
x64-instruction-variant-LOOPE-imm x64-instruction-variant-LOOPE-imm.reg_ecx x64-instruction-variant-LOOPE-imm.reg_rcx)))

(defparameter x64-instruction-container-LOOPNE (make-instance 'x86-asm-instruction :name "LOOPNE" :is-container t :variants (list
x64-instruction-variant-LOOPNE-imm x64-instruction-variant-LOOPNE-imm.reg_ecx x64-instruction-variant-LOOPNE-imm.reg_rcx)))

(defparameter x64-instruction-container-LOOPNZ (make-instance 'x86-asm-instruction :name "LOOPNZ" :is-container t :variants (list
x64-instruction-variant-LOOPNZ-imm x64-instruction-variant-LOOPNZ-imm.reg_ecx x64-instruction-variant-LOOPNZ-imm.reg_rcx)))

(defparameter x64-instruction-container-LOOPZ (make-instance 'x86-asm-instruction :name "LOOPZ" :is-container t :variants (list
x64-instruction-variant-LOOPZ-imm x64-instruction-variant-LOOPZ-imm.reg_ecx x64-instruction-variant-LOOPZ-imm.reg_rcx)))

(defparameter x64-instruction-container-LSL (make-instance 'x86-asm-instruction :name "LSL" :is-container t :variants (list
x64-instruction-variant-LSL-reg16.mem x64-instruction-variant-LSL-reg16.reg16 x64-instruction-variant-LSL-reg16.reg32 x64-instruction-variant-LSL-reg16.reg64 x64-instruction-variant-LSL-reg32.mem x64-instruction-variant-LSL-reg32.reg16 x64-instruction-variant-LSL-reg32.reg32 x64-instruction-variant-LSL-reg32.reg64 x64-instruction-variant-LSL-reg64.mem x64-instruction-variant-LSL-reg64.reg16 x64-instruction-variant-LSL-reg64.reg32 x64-instruction-variant-LSL-reg64.reg64)))

(defparameter x64-instruction-container-LSS (make-instance 'x86-asm-instruction :name "LSS" :is-container t :variants (list
x64-instruction-variant-LSS-reg16.mem x64-instruction-variant-LSS-reg32.mem x64-instruction-variant-LSS-reg64.mem)))

(defparameter x64-instruction-container-LTR (make-instance 'x86-asm-instruction :name "LTR" :is-container t :variants (list
x64-instruction-variant-LTR-mem x64-instruction-variant-LTR-mem16 x64-instruction-variant-LTR-reg16)))

(defparameter x64-instruction-container-MFENCE (make-instance 'x86-asm-instruction :name "MFENCE" :is-container t :variants (list
x64-instruction-variant-MFENCE-void)))

(defparameter x64-instruction-container-MONITOR (make-instance 'x86-asm-instruction :name "MONITOR" :is-container t :variants (list
x64-instruction-variant-MONITOR-void x64-instruction-variant-MONITOR-reg_rax.reg_ecx.reg_edx)))

(defparameter x64-instruction-container-MOV (make-instance 'x86-asm-instruction :name "MOV" :is-container t :variants (list
x64-instruction-variant-MOV-mem.reg_sreg x64-instruction-variant-MOV-reg16.reg_sreg x64-instruction-variant-MOV-reg32.reg_sreg x64-instruction-variant-MOV-reg64.reg_sreg x64-instruction-variant-MOV-rm64.reg_sreg x64-instruction-variant-MOV-reg_sreg.mem x64-instruction-variant-MOV-reg_sreg.reg16 x64-instruction-variant-MOV-reg_sreg.reg32 x64-instruction-variant-MOV-reg_sreg.reg64 x64-instruction-variant-MOV-reg_sreg.reg16 x64-instruction-variant-MOV-reg_sreg.reg32 x64-instruction-variant-MOV-reg_sreg.rm64 x64-instruction-variant-MOV-reg_al.mem_offs x64-instruction-variant-MOV-reg_ax.mem_offs x64-instruction-variant-MOV-reg_eax.mem_offs x64-instruction-variant-MOV-reg_rax.mem_offs x64-instruction-variant-MOV-mem_offs.reg_al x64-instruction-variant-MOV-mem_offs.reg_ax x64-instruction-variant-MOV-mem_offs.reg_eax x64-instruction-variant-MOV-mem_offs.reg_rax x64-instruction-variant-MOV-reg64.reg_creg x64-instruction-variant-MOV-reg_creg.reg64 x64-instruction-variant-MOV-reg64.reg_dreg x64-instruction-variant-MOV-reg_dreg.reg64 x64-instruction-variant-MOV-mem.reg8 x64-instruction-variant-MOV-reg8.reg8 x64-instruction-variant-MOV-mem.reg16 x64-instruction-variant-MOV-reg16.reg16 x64-instruction-variant-MOV-mem.reg32 x64-instruction-variant-MOV-reg32.reg32 x64-instruction-variant-MOV-mem.reg64 x64-instruction-variant-MOV-reg64.reg64 x64-instruction-variant-MOV-reg8.mem x64-instruction-variant-MOV-reg8.reg8 x64-instruction-variant-MOV-reg16.mem x64-instruction-variant-MOV-reg16.reg16 x64-instruction-variant-MOV-reg32.mem x64-instruction-variant-MOV-reg32.reg32 x64-instruction-variant-MOV-reg64.mem x64-instruction-variant-MOV-reg64.reg64 x64-instruction-variant-MOV-reg8.imm x64-instruction-variant-MOV-reg16.imm x64-instruction-variant-MOV-reg32.imm x64-instruction-variant-MOV-reg64.udword x64-instruction-variant-MOV-reg64.sdword x64-instruction-variant-MOV-reg64.imm x64-instruction-variant-MOV-rm8.imm x64-instruction-variant-MOV-rm16.imm x64-instruction-variant-MOV-rm32.imm x64-instruction-variant-MOV-rm64.imm x64-instruction-variant-MOV-rm64.imm32 x64-instruction-variant-MOV-mem.imm8 x64-instruction-variant-MOV-mem.imm16 x64-instruction-variant-MOV-mem.imm32)))

(defparameter x64-instruction-container-MOVD (make-instance 'x86-asm-instruction :name "MOVD" :is-container t :variants (list
x64-instruction-variant-MOVD-mmxreg.rm32 x64-instruction-variant-MOVD-rm32.mmxreg x64-instruction-variant-MOVD-mmxreg.rm64 x64-instruction-variant-MOVD-rm64.mmxreg)))

(defparameter x64-instruction-container-MOVQ (make-instance 'x86-asm-instruction :name "MOVQ" :is-container t :variants (list
x64-instruction-variant-MOVQ-mmxreg.mmxrm x64-instruction-variant-MOVQ-mmxrm.mmxreg x64-instruction-variant-MOVQ-mmxreg.rm64 x64-instruction-variant-MOVQ-rm64.mmxreg)))

(defparameter x64-instruction-container-MOVSB (make-instance 'x86-asm-instruction :name "MOVSB" :is-container t :variants (list
x64-instruction-variant-MOVSB-void)))

(defparameter x64-instruction-container-MOVSD (make-instance 'x86-asm-instruction :name "MOVSD" :is-container t :variants (list
x64-instruction-variant-MOVSD-void)))

(defparameter x64-instruction-container-MOVSQ (make-instance 'x86-asm-instruction :name "MOVSQ" :is-container t :variants (list
x64-instruction-variant-MOVSQ-void)))

(defparameter x64-instruction-container-MOVSW (make-instance 'x86-asm-instruction :name "MOVSW" :is-container t :variants (list
x64-instruction-variant-MOVSW-void)))

(defparameter x64-instruction-container-MOVSX (make-instance 'x86-asm-instruction :name "MOVSX" :is-container t :variants (list
x64-instruction-variant-MOVSX-reg16.mem x64-instruction-variant-MOVSX-reg16.reg8 x64-instruction-variant-MOVSX-reg32.rm8 x64-instruction-variant-MOVSX-reg32.rm16 x64-instruction-variant-MOVSX-reg64.rm8 x64-instruction-variant-MOVSX-reg64.rm16)))

(defparameter x64-instruction-container-MOVSXD (make-instance 'x86-asm-instruction :name "MOVSXD" :is-container t :variants (list
x64-instruction-variant-MOVSXD-reg64.rm32)))

(defparameter x64-instruction-container-MOVSX (make-instance 'x86-asm-instruction :name "MOVSX" :is-container t :variants (list
x64-instruction-variant-MOVSX-reg64.rm32)))

(defparameter x64-instruction-container-MOVZX (make-instance 'x86-asm-instruction :name "MOVZX" :is-container t :variants (list
x64-instruction-variant-MOVZX-reg16.mem x64-instruction-variant-MOVZX-reg16.reg8 x64-instruction-variant-MOVZX-reg32.rm8 x64-instruction-variant-MOVZX-reg32.rm16 x64-instruction-variant-MOVZX-reg64.rm8 x64-instruction-variant-MOVZX-reg64.rm16)))

(defparameter x64-instruction-container-MUL (make-instance 'x86-asm-instruction :name "MUL" :is-container t :variants (list
x64-instruction-variant-MUL-rm8 x64-instruction-variant-MUL-rm16 x64-instruction-variant-MUL-rm32 x64-instruction-variant-MUL-rm64)))

(defparameter x64-instruction-container-MWAIT (make-instance 'x86-asm-instruction :name "MWAIT" :is-container t :variants (list
x64-instruction-variant-MWAIT-void x64-instruction-variant-MWAIT-reg_eax.reg_ecx)))

(defparameter x64-instruction-container-NEG (make-instance 'x86-asm-instruction :name "NEG" :is-container t :variants (list
x64-instruction-variant-NEG-rm8 x64-instruction-variant-NEG-rm16 x64-instruction-variant-NEG-rm32 x64-instruction-variant-NEG-rm64)))

(defparameter x64-instruction-container-NOP (make-instance 'x86-asm-instruction :name "NOP" :is-container t :variants (list
x64-instruction-variant-NOP-void x64-instruction-variant-NOP-rm16 x64-instruction-variant-NOP-rm32 x64-instruction-variant-NOP-rm64)))

(defparameter x64-instruction-container-NOT (make-instance 'x86-asm-instruction :name "NOT" :is-container t :variants (list
x64-instruction-variant-NOT-rm8 x64-instruction-variant-NOT-rm16 x64-instruction-variant-NOT-rm32 x64-instruction-variant-NOT-rm64)))

(defparameter x64-instruction-container-OR (make-instance 'x86-asm-instruction :name "OR" :is-container t :variants (list
x64-instruction-variant-OR-mem.reg8 x64-instruction-variant-OR-reg8.reg8 x64-instruction-variant-OR-mem.reg16 x64-instruction-variant-OR-reg16.reg16 x64-instruction-variant-OR-mem.reg32 x64-instruction-variant-OR-reg32.reg32 x64-instruction-variant-OR-mem.reg64 x64-instruction-variant-OR-reg64.reg64 x64-instruction-variant-OR-reg8.mem x64-instruction-variant-OR-reg8.reg8 x64-instruction-variant-OR-reg16.mem x64-instruction-variant-OR-reg16.reg16 x64-instruction-variant-OR-reg32.mem x64-instruction-variant-OR-reg32.reg32 x64-instruction-variant-OR-reg64.mem x64-instruction-variant-OR-reg64.reg64 x64-instruction-variant-OR-rm16.imm8 x64-instruction-variant-OR-rm32.imm8 x64-instruction-variant-OR-rm64.imm8 x64-instruction-variant-OR-reg_al.imm x64-instruction-variant-OR-reg_ax.sbyteword x64-instruction-variant-OR-reg_ax.imm x64-instruction-variant-OR-reg_eax.sbytedword x64-instruction-variant-OR-reg_eax.imm x64-instruction-variant-OR-reg_rax.sbytedword x64-instruction-variant-OR-reg_rax.imm x64-instruction-variant-OR-rm8.imm x64-instruction-variant-OR-rm16.sbyteword x64-instruction-variant-OR-rm16.imm x64-instruction-variant-OR-rm32.sbytedword x64-instruction-variant-OR-rm32.imm x64-instruction-variant-OR-rm64.sbytedword x64-instruction-variant-OR-rm64.imm x64-instruction-variant-OR-mem.imm8 x64-instruction-variant-OR-mem.sbyteword16 x64-instruction-variant-OR-mem.imm16 x64-instruction-variant-OR-mem.sbytedword32 x64-instruction-variant-OR-mem.imm32)))

(defparameter x64-instruction-container-OUT (make-instance 'x86-asm-instruction :name "OUT" :is-container t :variants (list
x64-instruction-variant-OUT-imm.reg_al x64-instruction-variant-OUT-imm.reg_ax x64-instruction-variant-OUT-imm.reg_eax x64-instruction-variant-OUT-reg_dx.reg_al x64-instruction-variant-OUT-reg_dx.reg_ax x64-instruction-variant-OUT-reg_dx.reg_eax)))

(defparameter x64-instruction-container-OUTSB (make-instance 'x86-asm-instruction :name "OUTSB" :is-container t :variants (list
x64-instruction-variant-OUTSB-void)))

(defparameter x64-instruction-container-OUTSD (make-instance 'x86-asm-instruction :name "OUTSD" :is-container t :variants (list
x64-instruction-variant-OUTSD-void)))

(defparameter x64-instruction-container-OUTSW (make-instance 'x86-asm-instruction :name "OUTSW" :is-container t :variants (list
x64-instruction-variant-OUTSW-void)))

(defparameter x64-instruction-container-PACKSSDW (make-instance 'x86-asm-instruction :name "PACKSSDW" :is-container t :variants (list
x64-instruction-variant-PACKSSDW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PACKSSWB (make-instance 'x86-asm-instruction :name "PACKSSWB" :is-container t :variants (list
x64-instruction-variant-PACKSSWB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PACKUSWB (make-instance 'x86-asm-instruction :name "PACKUSWB" :is-container t :variants (list
x64-instruction-variant-PACKUSWB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDB (make-instance 'x86-asm-instruction :name "PADDB" :is-container t :variants (list
x64-instruction-variant-PADDB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDD (make-instance 'x86-asm-instruction :name "PADDD" :is-container t :variants (list
x64-instruction-variant-PADDD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDSB (make-instance 'x86-asm-instruction :name "PADDSB" :is-container t :variants (list
x64-instruction-variant-PADDSB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDSIW (make-instance 'x86-asm-instruction :name "PADDSIW" :is-container t :variants (list
x64-instruction-variant-PADDSIW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDSW (make-instance 'x86-asm-instruction :name "PADDSW" :is-container t :variants (list
x64-instruction-variant-PADDSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDUSB (make-instance 'x86-asm-instruction :name "PADDUSB" :is-container t :variants (list
x64-instruction-variant-PADDUSB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDUSW (make-instance 'x86-asm-instruction :name "PADDUSW" :is-container t :variants (list
x64-instruction-variant-PADDUSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PADDW (make-instance 'x86-asm-instruction :name "PADDW" :is-container t :variants (list
x64-instruction-variant-PADDW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PAND (make-instance 'x86-asm-instruction :name "PAND" :is-container t :variants (list
x64-instruction-variant-PAND-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PANDN (make-instance 'x86-asm-instruction :name "PANDN" :is-container t :variants (list
x64-instruction-variant-PANDN-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PAUSE (make-instance 'x86-asm-instruction :name "PAUSE" :is-container t :variants (list
x64-instruction-variant-PAUSE-void)))

(defparameter x64-instruction-container-PAVEB (make-instance 'x86-asm-instruction :name "PAVEB" :is-container t :variants (list
x64-instruction-variant-PAVEB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PAVGUSB (make-instance 'x86-asm-instruction :name "PAVGUSB" :is-container t :variants (list
x64-instruction-variant-PAVGUSB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPEQB (make-instance 'x86-asm-instruction :name "PCMPEQB" :is-container t :variants (list
x64-instruction-variant-PCMPEQB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPEQD (make-instance 'x86-asm-instruction :name "PCMPEQD" :is-container t :variants (list
x64-instruction-variant-PCMPEQD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPEQW (make-instance 'x86-asm-instruction :name "PCMPEQW" :is-container t :variants (list
x64-instruction-variant-PCMPEQW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPGTB (make-instance 'x86-asm-instruction :name "PCMPGTB" :is-container t :variants (list
x64-instruction-variant-PCMPGTB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPGTD (make-instance 'x86-asm-instruction :name "PCMPGTD" :is-container t :variants (list
x64-instruction-variant-PCMPGTD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PCMPGTW (make-instance 'x86-asm-instruction :name "PCMPGTW" :is-container t :variants (list
x64-instruction-variant-PCMPGTW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PDISTIB (make-instance 'x86-asm-instruction :name "PDISTIB" :is-container t :variants (list
x64-instruction-variant-PDISTIB-mmxreg.mem)))

(defparameter x64-instruction-container-PF2ID (make-instance 'x86-asm-instruction :name "PF2ID" :is-container t :variants (list
x64-instruction-variant-PF2ID-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFACC (make-instance 'x86-asm-instruction :name "PFACC" :is-container t :variants (list
x64-instruction-variant-PFACC-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFADD (make-instance 'x86-asm-instruction :name "PFADD" :is-container t :variants (list
x64-instruction-variant-PFADD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFCMPEQ (make-instance 'x86-asm-instruction :name "PFCMPEQ" :is-container t :variants (list
x64-instruction-variant-PFCMPEQ-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFCMPGE (make-instance 'x86-asm-instruction :name "PFCMPGE" :is-container t :variants (list
x64-instruction-variant-PFCMPGE-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFCMPGT (make-instance 'x86-asm-instruction :name "PFCMPGT" :is-container t :variants (list
x64-instruction-variant-PFCMPGT-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFMAX (make-instance 'x86-asm-instruction :name "PFMAX" :is-container t :variants (list
x64-instruction-variant-PFMAX-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFMIN (make-instance 'x86-asm-instruction :name "PFMIN" :is-container t :variants (list
x64-instruction-variant-PFMIN-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFMUL (make-instance 'x86-asm-instruction :name "PFMUL" :is-container t :variants (list
x64-instruction-variant-PFMUL-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRCP (make-instance 'x86-asm-instruction :name "PFRCP" :is-container t :variants (list
x64-instruction-variant-PFRCP-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRCPIT1 (make-instance 'x86-asm-instruction :name "PFRCPIT1" :is-container t :variants (list
x64-instruction-variant-PFRCPIT1-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRCPIT2 (make-instance 'x86-asm-instruction :name "PFRCPIT2" :is-container t :variants (list
x64-instruction-variant-PFRCPIT2-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRSQIT1 (make-instance 'x86-asm-instruction :name "PFRSQIT1" :is-container t :variants (list
x64-instruction-variant-PFRSQIT1-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRSQRT (make-instance 'x86-asm-instruction :name "PFRSQRT" :is-container t :variants (list
x64-instruction-variant-PFRSQRT-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFSUB (make-instance 'x86-asm-instruction :name "PFSUB" :is-container t :variants (list
x64-instruction-variant-PFSUB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFSUBR (make-instance 'x86-asm-instruction :name "PFSUBR" :is-container t :variants (list
x64-instruction-variant-PFSUBR-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PI2FD (make-instance 'x86-asm-instruction :name "PI2FD" :is-container t :variants (list
x64-instruction-variant-PI2FD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMACHRIW (make-instance 'x86-asm-instruction :name "PMACHRIW" :is-container t :variants (list
x64-instruction-variant-PMACHRIW-mmxreg.mem)))

(defparameter x64-instruction-container-PMADDWD (make-instance 'x86-asm-instruction :name "PMADDWD" :is-container t :variants (list
x64-instruction-variant-PMADDWD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMAGW (make-instance 'x86-asm-instruction :name "PMAGW" :is-container t :variants (list
x64-instruction-variant-PMAGW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMULHRIW (make-instance 'x86-asm-instruction :name "PMULHRIW" :is-container t :variants (list
x64-instruction-variant-PMULHRIW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMULHRWA (make-instance 'x86-asm-instruction :name "PMULHRWA" :is-container t :variants (list
x64-instruction-variant-PMULHRWA-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMULHRWC (make-instance 'x86-asm-instruction :name "PMULHRWC" :is-container t :variants (list
x64-instruction-variant-PMULHRWC-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMULHW (make-instance 'x86-asm-instruction :name "PMULHW" :is-container t :variants (list
x64-instruction-variant-PMULHW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMULLW (make-instance 'x86-asm-instruction :name "PMULLW" :is-container t :variants (list
x64-instruction-variant-PMULLW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMVGEZB (make-instance 'x86-asm-instruction :name "PMVGEZB" :is-container t :variants (list
x64-instruction-variant-PMVGEZB-mmxreg.mem)))

(defparameter x64-instruction-container-PMVLZB (make-instance 'x86-asm-instruction :name "PMVLZB" :is-container t :variants (list
x64-instruction-variant-PMVLZB-mmxreg.mem)))

(defparameter x64-instruction-container-PMVNZB (make-instance 'x86-asm-instruction :name "PMVNZB" :is-container t :variants (list
x64-instruction-variant-PMVNZB-mmxreg.mem)))

(defparameter x64-instruction-container-PMVZB (make-instance 'x86-asm-instruction :name "PMVZB" :is-container t :variants (list
x64-instruction-variant-PMVZB-mmxreg.mem)))

(defparameter x64-instruction-container-POP (make-instance 'x86-asm-instruction :name "POP" :is-container t :variants (list
x64-instruction-variant-POP-reg16 x64-instruction-variant-POP-reg64 x64-instruction-variant-POP-rm16 x64-instruction-variant-POP-rm64 x64-instruction-variant-POP-reg_cs x64-instruction-variant-POP-reg_fs x64-instruction-variant-POP-reg_gs)))

(defparameter x64-instruction-container-POPF (make-instance 'x86-asm-instruction :name "POPF" :is-container t :variants (list
x64-instruction-variant-POPF-void)))

(defparameter x64-instruction-container-POPFQ (make-instance 'x86-asm-instruction :name "POPFQ" :is-container t :variants (list
x64-instruction-variant-POPFQ-void)))

(defparameter x64-instruction-container-POPFW (make-instance 'x86-asm-instruction :name "POPFW" :is-container t :variants (list
x64-instruction-variant-POPFW-void)))

(defparameter x64-instruction-container-POR (make-instance 'x86-asm-instruction :name "POR" :is-container t :variants (list
x64-instruction-variant-POR-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PREFETCH (make-instance 'x86-asm-instruction :name "PREFETCH" :is-container t :variants (list
x64-instruction-variant-PREFETCH-mem)))

(defparameter x64-instruction-container-PREFETCHW (make-instance 'x86-asm-instruction :name "PREFETCHW" :is-container t :variants (list
x64-instruction-variant-PREFETCHW-mem)))

(defparameter x64-instruction-container-PSLLD (make-instance 'x86-asm-instruction :name "PSLLD" :is-container t :variants (list
x64-instruction-variant-PSLLD-mmxreg.mmxrm x64-instruction-variant-PSLLD-mmxreg.imm)))

(defparameter x64-instruction-container-PSLLQ (make-instance 'x86-asm-instruction :name "PSLLQ" :is-container t :variants (list
x64-instruction-variant-PSLLQ-mmxreg.mmxrm x64-instruction-variant-PSLLQ-mmxreg.imm)))

(defparameter x64-instruction-container-PSLLW (make-instance 'x86-asm-instruction :name "PSLLW" :is-container t :variants (list
x64-instruction-variant-PSLLW-mmxreg.mmxrm x64-instruction-variant-PSLLW-mmxreg.imm)))

(defparameter x64-instruction-container-PSRAD (make-instance 'x86-asm-instruction :name "PSRAD" :is-container t :variants (list
x64-instruction-variant-PSRAD-mmxreg.mmxrm x64-instruction-variant-PSRAD-mmxreg.imm)))

(defparameter x64-instruction-container-PSRAW (make-instance 'x86-asm-instruction :name "PSRAW" :is-container t :variants (list
x64-instruction-variant-PSRAW-mmxreg.mmxrm x64-instruction-variant-PSRAW-mmxreg.imm)))

(defparameter x64-instruction-container-PSRLD (make-instance 'x86-asm-instruction :name "PSRLD" :is-container t :variants (list
x64-instruction-variant-PSRLD-mmxreg.mmxrm x64-instruction-variant-PSRLD-mmxreg.imm)))

(defparameter x64-instruction-container-PSRLQ (make-instance 'x86-asm-instruction :name "PSRLQ" :is-container t :variants (list
x64-instruction-variant-PSRLQ-mmxreg.mmxrm x64-instruction-variant-PSRLQ-mmxreg.imm)))

(defparameter x64-instruction-container-PSRLW (make-instance 'x86-asm-instruction :name "PSRLW" :is-container t :variants (list
x64-instruction-variant-PSRLW-mmxreg.mmxrm x64-instruction-variant-PSRLW-mmxreg.imm)))

(defparameter x64-instruction-container-PSUBB (make-instance 'x86-asm-instruction :name "PSUBB" :is-container t :variants (list
x64-instruction-variant-PSUBB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBD (make-instance 'x86-asm-instruction :name "PSUBD" :is-container t :variants (list
x64-instruction-variant-PSUBD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBSB (make-instance 'x86-asm-instruction :name "PSUBSB" :is-container t :variants (list
x64-instruction-variant-PSUBSB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBSIW (make-instance 'x86-asm-instruction :name "PSUBSIW" :is-container t :variants (list
x64-instruction-variant-PSUBSIW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBSW (make-instance 'x86-asm-instruction :name "PSUBSW" :is-container t :variants (list
x64-instruction-variant-PSUBSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBUSB (make-instance 'x86-asm-instruction :name "PSUBUSB" :is-container t :variants (list
x64-instruction-variant-PSUBUSB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBUSW (make-instance 'x86-asm-instruction :name "PSUBUSW" :is-container t :variants (list
x64-instruction-variant-PSUBUSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSUBW (make-instance 'x86-asm-instruction :name "PSUBW" :is-container t :variants (list
x64-instruction-variant-PSUBW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKHBW (make-instance 'x86-asm-instruction :name "PUNPCKHBW" :is-container t :variants (list
x64-instruction-variant-PUNPCKHBW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKHDQ (make-instance 'x86-asm-instruction :name "PUNPCKHDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKHDQ-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKHWD (make-instance 'x86-asm-instruction :name "PUNPCKHWD" :is-container t :variants (list
x64-instruction-variant-PUNPCKHWD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKLBW (make-instance 'x86-asm-instruction :name "PUNPCKLBW" :is-container t :variants (list
x64-instruction-variant-PUNPCKLBW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKLDQ (make-instance 'x86-asm-instruction :name "PUNPCKLDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKLDQ-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUNPCKLWD (make-instance 'x86-asm-instruction :name "PUNPCKLWD" :is-container t :variants (list
x64-instruction-variant-PUNPCKLWD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PUSH (make-instance 'x86-asm-instruction :name "PUSH" :is-container t :variants (list
x64-instruction-variant-PUSH-reg16 x64-instruction-variant-PUSH-reg64 x64-instruction-variant-PUSH-rm16 x64-instruction-variant-PUSH-rm64 x64-instruction-variant-PUSH-reg_fs x64-instruction-variant-PUSH-reg_gs x64-instruction-variant-PUSH-imm8 x64-instruction-variant-PUSH-sbyteword16 x64-instruction-variant-PUSH-imm16 x64-instruction-variant-PUSH-sbytedword64 x64-instruction-variant-PUSH-imm64 x64-instruction-variant-PUSH-sbytedword32 x64-instruction-variant-PUSH-imm32)))

(defparameter x64-instruction-container-PUSHF (make-instance 'x86-asm-instruction :name "PUSHF" :is-container t :variants (list
x64-instruction-variant-PUSHF-void)))

(defparameter x64-instruction-container-PUSHFQ (make-instance 'x86-asm-instruction :name "PUSHFQ" :is-container t :variants (list
x64-instruction-variant-PUSHFQ-void)))

(defparameter x64-instruction-container-PUSHFW (make-instance 'x86-asm-instruction :name "PUSHFW" :is-container t :variants (list
x64-instruction-variant-PUSHFW-void)))

(defparameter x64-instruction-container-PXOR (make-instance 'x86-asm-instruction :name "PXOR" :is-container t :variants (list
x64-instruction-variant-PXOR-mmxreg.mmxrm)))

(defparameter x64-instruction-container-RCL (make-instance 'x86-asm-instruction :name "RCL" :is-container t :variants (list
x64-instruction-variant-RCL-rm8.unity x64-instruction-variant-RCL-rm8.reg_cl x64-instruction-variant-RCL-rm8.imm8 x64-instruction-variant-RCL-rm16.unity x64-instruction-variant-RCL-rm16.reg_cl x64-instruction-variant-RCL-rm16.imm8 x64-instruction-variant-RCL-rm32.unity x64-instruction-variant-RCL-rm32.reg_cl x64-instruction-variant-RCL-rm32.imm8 x64-instruction-variant-RCL-rm64.unity x64-instruction-variant-RCL-rm64.reg_cl x64-instruction-variant-RCL-rm64.imm8)))

(defparameter x64-instruction-container-RCR (make-instance 'x86-asm-instruction :name "RCR" :is-container t :variants (list
x64-instruction-variant-RCR-rm8.unity x64-instruction-variant-RCR-rm8.reg_cl x64-instruction-variant-RCR-rm8.imm8 x64-instruction-variant-RCR-rm16.unity x64-instruction-variant-RCR-rm16.reg_cl x64-instruction-variant-RCR-rm16.imm8 x64-instruction-variant-RCR-rm32.unity x64-instruction-variant-RCR-rm32.reg_cl x64-instruction-variant-RCR-rm32.imm8 x64-instruction-variant-RCR-rm64.unity x64-instruction-variant-RCR-rm64.reg_cl x64-instruction-variant-RCR-rm64.imm8)))

(defparameter x64-instruction-container-RDSHR (make-instance 'x86-asm-instruction :name "RDSHR" :is-container t :variants (list
x64-instruction-variant-RDSHR-rm32)))

(defparameter x64-instruction-container-RDMSR (make-instance 'x86-asm-instruction :name "RDMSR" :is-container t :variants (list
x64-instruction-variant-RDMSR-void)))

(defparameter x64-instruction-container-RDPMC (make-instance 'x86-asm-instruction :name "RDPMC" :is-container t :variants (list
x64-instruction-variant-RDPMC-void)))

(defparameter x64-instruction-container-RDTSC (make-instance 'x86-asm-instruction :name "RDTSC" :is-container t :variants (list
x64-instruction-variant-RDTSC-void)))

(defparameter x64-instruction-container-RDTSCP (make-instance 'x86-asm-instruction :name "RDTSCP" :is-container t :variants (list
x64-instruction-variant-RDTSCP-void)))

(defparameter x64-instruction-container-RET (make-instance 'x86-asm-instruction :name "RET" :is-container t :variants (list
x64-instruction-variant-RET-void x64-instruction-variant-RET-imm)))

(defparameter x64-instruction-container-RETF (make-instance 'x86-asm-instruction :name "RETF" :is-container t :variants (list
x64-instruction-variant-RETF-void x64-instruction-variant-RETF-imm)))

(defparameter x64-instruction-container-RETN (make-instance 'x86-asm-instruction :name "RETN" :is-container t :variants (list
x64-instruction-variant-RETN-void x64-instruction-variant-RETN-imm)))

(defparameter x64-instruction-container-ROL (make-instance 'x86-asm-instruction :name "ROL" :is-container t :variants (list
x64-instruction-variant-ROL-rm8.unity x64-instruction-variant-ROL-rm8.reg_cl x64-instruction-variant-ROL-rm8.imm8 x64-instruction-variant-ROL-rm16.unity x64-instruction-variant-ROL-rm16.reg_cl x64-instruction-variant-ROL-rm16.imm8 x64-instruction-variant-ROL-rm32.unity x64-instruction-variant-ROL-rm32.reg_cl x64-instruction-variant-ROL-rm32.imm8 x64-instruction-variant-ROL-rm64.unity x64-instruction-variant-ROL-rm64.reg_cl x64-instruction-variant-ROL-rm64.imm8)))

(defparameter x64-instruction-container-ROR (make-instance 'x86-asm-instruction :name "ROR" :is-container t :variants (list
x64-instruction-variant-ROR-rm8.unity x64-instruction-variant-ROR-rm8.reg_cl x64-instruction-variant-ROR-rm8.imm8 x64-instruction-variant-ROR-rm16.unity x64-instruction-variant-ROR-rm16.reg_cl x64-instruction-variant-ROR-rm16.imm8 x64-instruction-variant-ROR-rm32.unity x64-instruction-variant-ROR-rm32.reg_cl x64-instruction-variant-ROR-rm32.imm8 x64-instruction-variant-ROR-rm64.unity x64-instruction-variant-ROR-rm64.reg_cl x64-instruction-variant-ROR-rm64.imm8)))

(defparameter x64-instruction-container-RDM (make-instance 'x86-asm-instruction :name "RDM" :is-container t :variants (list
x64-instruction-variant-RDM-void)))

(defparameter x64-instruction-container-RSDC (make-instance 'x86-asm-instruction :name "RSDC" :is-container t :variants (list
x64-instruction-variant-RSDC-reg_sreg.mem80)))

(defparameter x64-instruction-container-RSLDT (make-instance 'x86-asm-instruction :name "RSLDT" :is-container t :variants (list
x64-instruction-variant-RSLDT-mem80)))

(defparameter x64-instruction-container-RSM (make-instance 'x86-asm-instruction :name "RSM" :is-container t :variants (list
x64-instruction-variant-RSM-void)))

(defparameter x64-instruction-container-RSTS (make-instance 'x86-asm-instruction :name "RSTS" :is-container t :variants (list
x64-instruction-variant-RSTS-mem80)))

(defparameter x64-instruction-container-SAHF (make-instance 'x86-asm-instruction :name "SAHF" :is-container t :variants (list
x64-instruction-variant-SAHF-void)))

(defparameter x64-instruction-container-SAL (make-instance 'x86-asm-instruction :name "SAL" :is-container t :variants (list
x64-instruction-variant-SAL-rm8.unity x64-instruction-variant-SAL-rm8.reg_cl x64-instruction-variant-SAL-rm8.imm8 x64-instruction-variant-SAL-rm16.unity x64-instruction-variant-SAL-rm16.reg_cl x64-instruction-variant-SAL-rm16.imm8 x64-instruction-variant-SAL-rm32.unity x64-instruction-variant-SAL-rm32.reg_cl x64-instruction-variant-SAL-rm32.imm8 x64-instruction-variant-SAL-rm64.unity x64-instruction-variant-SAL-rm64.reg_cl x64-instruction-variant-SAL-rm64.imm8)))

(defparameter x64-instruction-container-SALC (make-instance 'x86-asm-instruction :name "SALC" :is-container t :variants (list
x64-instruction-variant-SALC-void)))

(defparameter x64-instruction-container-SAR (make-instance 'x86-asm-instruction :name "SAR" :is-container t :variants (list
x64-instruction-variant-SAR-rm8.unity x64-instruction-variant-SAR-rm8.reg_cl x64-instruction-variant-SAR-rm8.imm8 x64-instruction-variant-SAR-rm16.unity x64-instruction-variant-SAR-rm16.reg_cl x64-instruction-variant-SAR-rm16.imm8 x64-instruction-variant-SAR-rm32.unity x64-instruction-variant-SAR-rm32.reg_cl x64-instruction-variant-SAR-rm32.imm8 x64-instruction-variant-SAR-rm64.unity x64-instruction-variant-SAR-rm64.reg_cl x64-instruction-variant-SAR-rm64.imm8)))

(defparameter x64-instruction-container-SBB (make-instance 'x86-asm-instruction :name "SBB" :is-container t :variants (list
x64-instruction-variant-SBB-mem.reg8 x64-instruction-variant-SBB-reg8.reg8 x64-instruction-variant-SBB-mem.reg16 x64-instruction-variant-SBB-reg16.reg16 x64-instruction-variant-SBB-mem.reg32 x64-instruction-variant-SBB-reg32.reg32 x64-instruction-variant-SBB-mem.reg64 x64-instruction-variant-SBB-reg64.reg64 x64-instruction-variant-SBB-reg8.mem x64-instruction-variant-SBB-reg8.reg8 x64-instruction-variant-SBB-reg16.mem x64-instruction-variant-SBB-reg16.reg16 x64-instruction-variant-SBB-reg32.mem x64-instruction-variant-SBB-reg32.reg32 x64-instruction-variant-SBB-reg64.mem x64-instruction-variant-SBB-reg64.reg64 x64-instruction-variant-SBB-rm16.imm8 x64-instruction-variant-SBB-rm32.imm8 x64-instruction-variant-SBB-rm64.imm8 x64-instruction-variant-SBB-reg_al.imm x64-instruction-variant-SBB-reg_ax.sbyteword x64-instruction-variant-SBB-reg_ax.imm x64-instruction-variant-SBB-reg_eax.sbytedword x64-instruction-variant-SBB-reg_eax.imm x64-instruction-variant-SBB-reg_rax.sbytedword x64-instruction-variant-SBB-reg_rax.imm x64-instruction-variant-SBB-rm8.imm x64-instruction-variant-SBB-rm16.sbyteword x64-instruction-variant-SBB-rm16.imm x64-instruction-variant-SBB-rm32.sbytedword x64-instruction-variant-SBB-rm32.imm x64-instruction-variant-SBB-rm64.sbytedword x64-instruction-variant-SBB-rm64.imm x64-instruction-variant-SBB-mem.imm8 x64-instruction-variant-SBB-mem.sbyteword16 x64-instruction-variant-SBB-mem.imm16 x64-instruction-variant-SBB-mem.sbytedword32 x64-instruction-variant-SBB-mem.imm32)))

(defparameter x64-instruction-container-SCASB (make-instance 'x86-asm-instruction :name "SCASB" :is-container t :variants (list
x64-instruction-variant-SCASB-void)))

(defparameter x64-instruction-container-SCASD (make-instance 'x86-asm-instruction :name "SCASD" :is-container t :variants (list
x64-instruction-variant-SCASD-void)))

(defparameter x64-instruction-container-SCASQ (make-instance 'x86-asm-instruction :name "SCASQ" :is-container t :variants (list
x64-instruction-variant-SCASQ-void)))

(defparameter x64-instruction-container-SCASW (make-instance 'x86-asm-instruction :name "SCASW" :is-container t :variants (list
x64-instruction-variant-SCASW-void)))

(defparameter x64-instruction-container-SFENCE (make-instance 'x86-asm-instruction :name "SFENCE" :is-container t :variants (list
x64-instruction-variant-SFENCE-void)))

(defparameter x64-instruction-container-SGDT (make-instance 'x86-asm-instruction :name "SGDT" :is-container t :variants (list
x64-instruction-variant-SGDT-mem)))

(defparameter x64-instruction-container-SHL (make-instance 'x86-asm-instruction :name "SHL" :is-container t :variants (list
x64-instruction-variant-SHL-rm8.unity x64-instruction-variant-SHL-rm8.reg_cl x64-instruction-variant-SHL-rm8.imm8 x64-instruction-variant-SHL-rm16.unity x64-instruction-variant-SHL-rm16.reg_cl x64-instruction-variant-SHL-rm16.imm8 x64-instruction-variant-SHL-rm32.unity x64-instruction-variant-SHL-rm32.reg_cl x64-instruction-variant-SHL-rm32.imm8 x64-instruction-variant-SHL-rm64.unity x64-instruction-variant-SHL-rm64.reg_cl x64-instruction-variant-SHL-rm64.imm8)))

(defparameter x64-instruction-container-SHLD (make-instance 'x86-asm-instruction :name "SHLD" :is-container t :variants (list
x64-instruction-variant-SHLD-mem.reg16.imm x64-instruction-variant-SHLD-reg16.reg16.imm x64-instruction-variant-SHLD-mem.reg32.imm x64-instruction-variant-SHLD-reg32.reg32.imm x64-instruction-variant-SHLD-mem.reg64.imm x64-instruction-variant-SHLD-reg64.reg64.imm x64-instruction-variant-SHLD-mem.reg16.reg_cl x64-instruction-variant-SHLD-reg16.reg16.reg_cl x64-instruction-variant-SHLD-mem.reg32.reg_cl x64-instruction-variant-SHLD-reg32.reg32.reg_cl x64-instruction-variant-SHLD-mem.reg64.reg_cl x64-instruction-variant-SHLD-reg64.reg64.reg_cl)))

(defparameter x64-instruction-container-SHR (make-instance 'x86-asm-instruction :name "SHR" :is-container t :variants (list
x64-instruction-variant-SHR-rm8.unity x64-instruction-variant-SHR-rm8.reg_cl x64-instruction-variant-SHR-rm8.imm8 x64-instruction-variant-SHR-rm16.unity x64-instruction-variant-SHR-rm16.reg_cl x64-instruction-variant-SHR-rm16.imm8 x64-instruction-variant-SHR-rm32.unity x64-instruction-variant-SHR-rm32.reg_cl x64-instruction-variant-SHR-rm32.imm8 x64-instruction-variant-SHR-rm64.unity x64-instruction-variant-SHR-rm64.reg_cl x64-instruction-variant-SHR-rm64.imm8)))

(defparameter x64-instruction-container-SHRD (make-instance 'x86-asm-instruction :name "SHRD" :is-container t :variants (list
x64-instruction-variant-SHRD-mem.reg16.imm x64-instruction-variant-SHRD-reg16.reg16.imm x64-instruction-variant-SHRD-mem.reg32.imm x64-instruction-variant-SHRD-reg32.reg32.imm x64-instruction-variant-SHRD-mem.reg64.imm x64-instruction-variant-SHRD-reg64.reg64.imm x64-instruction-variant-SHRD-mem.reg16.reg_cl x64-instruction-variant-SHRD-reg16.reg16.reg_cl x64-instruction-variant-SHRD-mem.reg32.reg_cl x64-instruction-variant-SHRD-reg32.reg32.reg_cl x64-instruction-variant-SHRD-mem.reg64.reg_cl x64-instruction-variant-SHRD-reg64.reg64.reg_cl)))

(defparameter x64-instruction-container-SIDT (make-instance 'x86-asm-instruction :name "SIDT" :is-container t :variants (list
x64-instruction-variant-SIDT-mem)))

(defparameter x64-instruction-container-SLDT (make-instance 'x86-asm-instruction :name "SLDT" :is-container t :variants (list
x64-instruction-variant-SLDT-mem x64-instruction-variant-SLDT-mem16 x64-instruction-variant-SLDT-reg16 x64-instruction-variant-SLDT-reg32 x64-instruction-variant-SLDT-reg64 x64-instruction-variant-SLDT-reg64)))

(defparameter x64-instruction-container-SKINIT (make-instance 'x86-asm-instruction :name "SKINIT" :is-container t :variants (list
x64-instruction-variant-SKINIT-void)))

(defparameter x64-instruction-container-SMI (make-instance 'x86-asm-instruction :name "SMI" :is-container t :variants (list
x64-instruction-variant-SMI-void)))

(defparameter x64-instruction-container-SMINT (make-instance 'x86-asm-instruction :name "SMINT" :is-container t :variants (list
x64-instruction-variant-SMINT-void)))

(defparameter x64-instruction-container-SMINTOLD (make-instance 'x86-asm-instruction :name "SMINTOLD" :is-container t :variants (list
x64-instruction-variant-SMINTOLD-void)))

(defparameter x64-instruction-container-SMSW (make-instance 'x86-asm-instruction :name "SMSW" :is-container t :variants (list
x64-instruction-variant-SMSW-mem x64-instruction-variant-SMSW-mem16 x64-instruction-variant-SMSW-reg16 x64-instruction-variant-SMSW-reg32)))

(defparameter x64-instruction-container-STC (make-instance 'x86-asm-instruction :name "STC" :is-container t :variants (list
x64-instruction-variant-STC-void)))

(defparameter x64-instruction-container-STD (make-instance 'x86-asm-instruction :name "STD" :is-container t :variants (list
x64-instruction-variant-STD-void)))

(defparameter x64-instruction-container-STI (make-instance 'x86-asm-instruction :name "STI" :is-container t :variants (list
x64-instruction-variant-STI-void)))

(defparameter x64-instruction-container-STOSB (make-instance 'x86-asm-instruction :name "STOSB" :is-container t :variants (list
x64-instruction-variant-STOSB-void)))

(defparameter x64-instruction-container-STOSD (make-instance 'x86-asm-instruction :name "STOSD" :is-container t :variants (list
x64-instruction-variant-STOSD-void)))

(defparameter x64-instruction-container-STOSQ (make-instance 'x86-asm-instruction :name "STOSQ" :is-container t :variants (list
x64-instruction-variant-STOSQ-void)))

(defparameter x64-instruction-container-STOSW (make-instance 'x86-asm-instruction :name "STOSW" :is-container t :variants (list
x64-instruction-variant-STOSW-void)))

(defparameter x64-instruction-container-STR (make-instance 'x86-asm-instruction :name "STR" :is-container t :variants (list
x64-instruction-variant-STR-mem x64-instruction-variant-STR-mem16 x64-instruction-variant-STR-reg16 x64-instruction-variant-STR-reg32 x64-instruction-variant-STR-reg64)))

(defparameter x64-instruction-container-SUB (make-instance 'x86-asm-instruction :name "SUB" :is-container t :variants (list
x64-instruction-variant-SUB-mem.reg8 x64-instruction-variant-SUB-reg8.reg8 x64-instruction-variant-SUB-mem.reg16 x64-instruction-variant-SUB-reg16.reg16 x64-instruction-variant-SUB-mem.reg32 x64-instruction-variant-SUB-reg32.reg32 x64-instruction-variant-SUB-mem.reg64 x64-instruction-variant-SUB-reg64.reg64 x64-instruction-variant-SUB-reg8.mem x64-instruction-variant-SUB-reg8.reg8 x64-instruction-variant-SUB-reg16.mem x64-instruction-variant-SUB-reg16.reg16 x64-instruction-variant-SUB-reg32.mem x64-instruction-variant-SUB-reg32.reg32 x64-instruction-variant-SUB-reg64.mem x64-instruction-variant-SUB-reg64.reg64 x64-instruction-variant-SUB-rm16.imm8 x64-instruction-variant-SUB-rm32.imm8 x64-instruction-variant-SUB-rm64.imm8 x64-instruction-variant-SUB-reg_al.imm x64-instruction-variant-SUB-reg_ax.sbyteword x64-instruction-variant-SUB-reg_ax.imm x64-instruction-variant-SUB-reg_eax.sbytedword x64-instruction-variant-SUB-reg_eax.imm x64-instruction-variant-SUB-reg_rax.sbytedword x64-instruction-variant-SUB-reg_rax.imm x64-instruction-variant-SUB-rm8.imm x64-instruction-variant-SUB-rm16.sbyteword x64-instruction-variant-SUB-rm16.imm x64-instruction-variant-SUB-rm32.sbytedword x64-instruction-variant-SUB-rm32.imm x64-instruction-variant-SUB-rm64.sbytedword x64-instruction-variant-SUB-rm64.imm x64-instruction-variant-SUB-mem.imm8 x64-instruction-variant-SUB-mem.sbyteword16 x64-instruction-variant-SUB-mem.imm16 x64-instruction-variant-SUB-mem.sbytedword32 x64-instruction-variant-SUB-mem.imm32)))

(defparameter x64-instruction-container-SVDC (make-instance 'x86-asm-instruction :name "SVDC" :is-container t :variants (list
x64-instruction-variant-SVDC-mem80.reg_sreg)))

(defparameter x64-instruction-container-SVLDT (make-instance 'x86-asm-instruction :name "SVLDT" :is-container t :variants (list
x64-instruction-variant-SVLDT-mem80)))

(defparameter x64-instruction-container-SVTS (make-instance 'x86-asm-instruction :name "SVTS" :is-container t :variants (list
x64-instruction-variant-SVTS-mem80)))

(defparameter x64-instruction-container-SWAPGS (make-instance 'x86-asm-instruction :name "SWAPGS" :is-container t :variants (list
x64-instruction-variant-SWAPGS-void)))

(defparameter x64-instruction-container-SYSCALL (make-instance 'x86-asm-instruction :name "SYSCALL" :is-container t :variants (list
x64-instruction-variant-SYSCALL-void)))

(defparameter x64-instruction-container-SYSENTER (make-instance 'x86-asm-instruction :name "SYSENTER" :is-container t :variants (list
x64-instruction-variant-SYSENTER-void)))

(defparameter x64-instruction-container-SYSEXIT (make-instance 'x86-asm-instruction :name "SYSEXIT" :is-container t :variants (list
x64-instruction-variant-SYSEXIT-void)))

(defparameter x64-instruction-container-SYSRET (make-instance 'x86-asm-instruction :name "SYSRET" :is-container t :variants (list
x64-instruction-variant-SYSRET-void)))

(defparameter x64-instruction-container-TEST (make-instance 'x86-asm-instruction :name "TEST" :is-container t :variants (list
x64-instruction-variant-TEST-mem.reg8 x64-instruction-variant-TEST-reg8.reg8 x64-instruction-variant-TEST-mem.reg16 x64-instruction-variant-TEST-reg16.reg16 x64-instruction-variant-TEST-mem.reg32 x64-instruction-variant-TEST-reg32.reg32 x64-instruction-variant-TEST-mem.reg64 x64-instruction-variant-TEST-reg64.reg64 x64-instruction-variant-TEST-reg8.mem x64-instruction-variant-TEST-reg16.mem x64-instruction-variant-TEST-reg32.mem x64-instruction-variant-TEST-reg64.mem x64-instruction-variant-TEST-reg_al.imm x64-instruction-variant-TEST-reg_ax.imm x64-instruction-variant-TEST-reg_eax.imm x64-instruction-variant-TEST-reg_rax.imm x64-instruction-variant-TEST-rm8.imm x64-instruction-variant-TEST-rm16.imm x64-instruction-variant-TEST-rm32.imm x64-instruction-variant-TEST-rm64.imm x64-instruction-variant-TEST-mem.imm8 x64-instruction-variant-TEST-mem.imm16 x64-instruction-variant-TEST-mem.imm32)))

(defparameter x64-instruction-container-UD0 (make-instance 'x86-asm-instruction :name "UD0" :is-container t :variants (list
x64-instruction-variant-UD0-void)))

(defparameter x64-instruction-container-UD1 (make-instance 'x86-asm-instruction :name "UD1" :is-container t :variants (list
x64-instruction-variant-UD1-void)))

(defparameter x64-instruction-container-UD2B (make-instance 'x86-asm-instruction :name "UD2B" :is-container t :variants (list
x64-instruction-variant-UD2B-void)))

(defparameter x64-instruction-container-UD2 (make-instance 'x86-asm-instruction :name "UD2" :is-container t :variants (list
x64-instruction-variant-UD2-void)))

(defparameter x64-instruction-container-UD2A (make-instance 'x86-asm-instruction :name "UD2A" :is-container t :variants (list
x64-instruction-variant-UD2A-void)))

(defparameter x64-instruction-container-UMOV (make-instance 'x86-asm-instruction :name "UMOV" :is-container t :variants (list
x64-instruction-variant-UMOV-mem.reg8 x64-instruction-variant-UMOV-reg8.reg8 x64-instruction-variant-UMOV-mem.reg16 x64-instruction-variant-UMOV-reg16.reg16 x64-instruction-variant-UMOV-mem.reg32 x64-instruction-variant-UMOV-reg32.reg32 x64-instruction-variant-UMOV-reg8.mem x64-instruction-variant-UMOV-reg8.reg8 x64-instruction-variant-UMOV-reg16.mem x64-instruction-variant-UMOV-reg16.reg16 x64-instruction-variant-UMOV-reg32.mem x64-instruction-variant-UMOV-reg32.reg32)))

(defparameter x64-instruction-container-VERR (make-instance 'x86-asm-instruction :name "VERR" :is-container t :variants (list
x64-instruction-variant-VERR-mem x64-instruction-variant-VERR-mem16 x64-instruction-variant-VERR-reg16)))

(defparameter x64-instruction-container-VERW (make-instance 'x86-asm-instruction :name "VERW" :is-container t :variants (list
x64-instruction-variant-VERW-mem x64-instruction-variant-VERW-mem16 x64-instruction-variant-VERW-reg16)))

(defparameter x64-instruction-container-FWAIT (make-instance 'x86-asm-instruction :name "FWAIT" :is-container t :variants (list
x64-instruction-variant-FWAIT-void)))

(defparameter x64-instruction-container-WBINVD (make-instance 'x86-asm-instruction :name "WBINVD" :is-container t :variants (list
x64-instruction-variant-WBINVD-void)))

(defparameter x64-instruction-container-WRSHR (make-instance 'x86-asm-instruction :name "WRSHR" :is-container t :variants (list
x64-instruction-variant-WRSHR-rm32)))

(defparameter x64-instruction-container-WRMSR (make-instance 'x86-asm-instruction :name "WRMSR" :is-container t :variants (list
x64-instruction-variant-WRMSR-void)))

(defparameter x64-instruction-container-XADD (make-instance 'x86-asm-instruction :name "XADD" :is-container t :variants (list
x64-instruction-variant-XADD-mem.reg8 x64-instruction-variant-XADD-reg8.reg8 x64-instruction-variant-XADD-mem.reg16 x64-instruction-variant-XADD-reg16.reg16 x64-instruction-variant-XADD-mem.reg32 x64-instruction-variant-XADD-reg32.reg32 x64-instruction-variant-XADD-mem.reg64 x64-instruction-variant-XADD-reg64.reg64)))

(defparameter x64-instruction-container-XBTS (make-instance 'x86-asm-instruction :name "XBTS" :is-container t :variants (list
x64-instruction-variant-XBTS-reg16.mem x64-instruction-variant-XBTS-reg16.reg16 x64-instruction-variant-XBTS-reg32.mem x64-instruction-variant-XBTS-reg32.reg32)))

(defparameter x64-instruction-container-XCHG (make-instance 'x86-asm-instruction :name "XCHG" :is-container t :variants (list
x64-instruction-variant-XCHG-reg_ax.reg16 x64-instruction-variant-XCHG-reg_eax.reg32na x64-instruction-variant-XCHG-reg_rax.reg64 x64-instruction-variant-XCHG-reg16.reg_ax x64-instruction-variant-XCHG-reg32na.reg_eax x64-instruction-variant-XCHG-reg64.reg_rax x64-instruction-variant-XCHG-reg8.mem x64-instruction-variant-XCHG-reg8.reg8 x64-instruction-variant-XCHG-reg16.mem x64-instruction-variant-XCHG-reg16.reg16 x64-instruction-variant-XCHG-reg32.mem x64-instruction-variant-XCHG-reg32.reg32 x64-instruction-variant-XCHG-reg64.mem x64-instruction-variant-XCHG-reg64.reg64 x64-instruction-variant-XCHG-mem.reg8 x64-instruction-variant-XCHG-reg8.reg8 x64-instruction-variant-XCHG-mem.reg16 x64-instruction-variant-XCHG-reg16.reg16 x64-instruction-variant-XCHG-mem.reg32 x64-instruction-variant-XCHG-reg32.reg32 x64-instruction-variant-XCHG-mem.reg64 x64-instruction-variant-XCHG-reg64.reg64)))

(defparameter x64-instruction-container-XLATB (make-instance 'x86-asm-instruction :name "XLATB" :is-container t :variants (list
x64-instruction-variant-XLATB-void)))

(defparameter x64-instruction-container-XLAT (make-instance 'x86-asm-instruction :name "XLAT" :is-container t :variants (list
x64-instruction-variant-XLAT-void)))

(defparameter x64-instruction-container-XOR (make-instance 'x86-asm-instruction :name "XOR" :is-container t :variants (list
x64-instruction-variant-XOR-mem.reg8 x64-instruction-variant-XOR-reg8.reg8 x64-instruction-variant-XOR-mem.reg16 x64-instruction-variant-XOR-reg16.reg16 x64-instruction-variant-XOR-mem.reg32 x64-instruction-variant-XOR-reg32.reg32 x64-instruction-variant-XOR-mem.reg64 x64-instruction-variant-XOR-reg64.reg64 x64-instruction-variant-XOR-reg8.mem x64-instruction-variant-XOR-reg8.reg8 x64-instruction-variant-XOR-reg16.mem x64-instruction-variant-XOR-reg16.reg16 x64-instruction-variant-XOR-reg32.mem x64-instruction-variant-XOR-reg32.reg32 x64-instruction-variant-XOR-reg64.mem x64-instruction-variant-XOR-reg64.reg64 x64-instruction-variant-XOR-rm16.imm8 x64-instruction-variant-XOR-rm32.imm8 x64-instruction-variant-XOR-rm64.imm8 x64-instruction-variant-XOR-reg_al.imm x64-instruction-variant-XOR-reg_ax.sbyteword x64-instruction-variant-XOR-reg_ax.imm x64-instruction-variant-XOR-reg_eax.sbytedword x64-instruction-variant-XOR-reg_eax.imm x64-instruction-variant-XOR-reg_rax.sbytedword x64-instruction-variant-XOR-reg_rax.imm x64-instruction-variant-XOR-rm8.imm x64-instruction-variant-XOR-rm16.sbyteword x64-instruction-variant-XOR-rm16.imm x64-instruction-variant-XOR-rm32.sbytedword x64-instruction-variant-XOR-rm32.imm x64-instruction-variant-XOR-rm64.sbytedword x64-instruction-variant-XOR-rm64.imm x64-instruction-variant-XOR-mem.imm8 x64-instruction-variant-XOR-mem.sbyteword16 x64-instruction-variant-XOR-mem.imm16 x64-instruction-variant-XOR-mem.sbytedword32 x64-instruction-variant-XOR-mem.imm32)))

(defparameter x64-instruction-container-CMOVcc (make-instance 'x86-asm-instruction :name "CMOVcc" :is-container t :variants (list
x64-instruction-variant-CMOVcc-reg16.mem x64-instruction-variant-CMOVcc-reg16.reg16 x64-instruction-variant-CMOVcc-reg32.mem x64-instruction-variant-CMOVcc-reg32.reg32 x64-instruction-variant-CMOVcc-reg64.mem x64-instruction-variant-CMOVcc-reg64.reg64)))

(defparameter x64-instruction-container-Jcc (make-instance 'x86-asm-instruction :name "Jcc" :is-container t :variants (list
x64-instruction-variant-Jcc-imm-near x64-instruction-variant-Jcc-imm64-near x64-instruction-variant-Jcc-imm-short x64-instruction-variant-Jcc-imm x64-instruction-variant-Jcc-imm x64-instruction-variant-Jcc-imm x64-instruction-variant-Jcc-imm)))

(defparameter x64-instruction-container-SETcc (make-instance 'x86-asm-instruction :name "SETcc" :is-container t :variants (list
x64-instruction-variant-SETcc-mem x64-instruction-variant-SETcc-reg8)))

(defparameter x64-instruction-container-ADDPS (make-instance 'x86-asm-instruction :name "ADDPS" :is-container t :variants (list
x64-instruction-variant-ADDPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-ADDSS (make-instance 'x86-asm-instruction :name "ADDSS" :is-container t :variants (list
x64-instruction-variant-ADDSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-ANDNPS (make-instance 'x86-asm-instruction :name "ANDNPS" :is-container t :variants (list
x64-instruction-variant-ANDNPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-ANDPS (make-instance 'x86-asm-instruction :name "ANDPS" :is-container t :variants (list
x64-instruction-variant-ANDPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPEQPS (make-instance 'x86-asm-instruction :name "CMPEQPS" :is-container t :variants (list
x64-instruction-variant-CMPEQPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPEQSS (make-instance 'x86-asm-instruction :name "CMPEQSS" :is-container t :variants (list
x64-instruction-variant-CMPEQSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPLEPS (make-instance 'x86-asm-instruction :name "CMPLEPS" :is-container t :variants (list
x64-instruction-variant-CMPLEPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPLESS (make-instance 'x86-asm-instruction :name "CMPLESS" :is-container t :variants (list
x64-instruction-variant-CMPLESS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPLTPS (make-instance 'x86-asm-instruction :name "CMPLTPS" :is-container t :variants (list
x64-instruction-variant-CMPLTPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPLTSS (make-instance 'x86-asm-instruction :name "CMPLTSS" :is-container t :variants (list
x64-instruction-variant-CMPLTSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPNEQPS (make-instance 'x86-asm-instruction :name "CMPNEQPS" :is-container t :variants (list
x64-instruction-variant-CMPNEQPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPNEQSS (make-instance 'x86-asm-instruction :name "CMPNEQSS" :is-container t :variants (list
x64-instruction-variant-CMPNEQSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPNLEPS (make-instance 'x86-asm-instruction :name "CMPNLEPS" :is-container t :variants (list
x64-instruction-variant-CMPNLEPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPNLESS (make-instance 'x86-asm-instruction :name "CMPNLESS" :is-container t :variants (list
x64-instruction-variant-CMPNLESS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPNLTPS (make-instance 'x86-asm-instruction :name "CMPNLTPS" :is-container t :variants (list
x64-instruction-variant-CMPNLTPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPNLTSS (make-instance 'x86-asm-instruction :name "CMPNLTSS" :is-container t :variants (list
x64-instruction-variant-CMPNLTSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPORDPS (make-instance 'x86-asm-instruction :name "CMPORDPS" :is-container t :variants (list
x64-instruction-variant-CMPORDPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPORDSS (make-instance 'x86-asm-instruction :name "CMPORDSS" :is-container t :variants (list
x64-instruction-variant-CMPORDSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPUNORDPS (make-instance 'x86-asm-instruction :name "CMPUNORDPS" :is-container t :variants (list
x64-instruction-variant-CMPUNORDPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-CMPUNORDSS (make-instance 'x86-asm-instruction :name "CMPUNORDSS" :is-container t :variants (list
x64-instruction-variant-CMPUNORDSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CMPPS (make-instance 'x86-asm-instruction :name "CMPPS" :is-container t :variants (list
x64-instruction-variant-CMPPS-xmmreg.mem.imm x64-instruction-variant-CMPPS-xmmreg.xmmreg.imm)))

(defparameter x64-instruction-container-CMPSS (make-instance 'x86-asm-instruction :name "CMPSS" :is-container t :variants (list
x64-instruction-variant-CMPSS-xmmreg.mem.imm x64-instruction-variant-CMPSS-xmmreg.xmmreg.imm)))

(defparameter x64-instruction-container-COMISS (make-instance 'x86-asm-instruction :name "COMISS" :is-container t :variants (list
x64-instruction-variant-COMISS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-CVTPI2PS (make-instance 'x86-asm-instruction :name "CVTPI2PS" :is-container t :variants (list
x64-instruction-variant-CVTPI2PS-xmmreg.mmxrm64)))

(defparameter x64-instruction-container-CVTPS2PI (make-instance 'x86-asm-instruction :name "CVTPS2PI" :is-container t :variants (list
x64-instruction-variant-CVTPS2PI-mmxreg.xmmrm64)))

(defparameter x64-instruction-container-CVTSI2SS (make-instance 'x86-asm-instruction :name "CVTSI2SS" :is-container t :variants (list
x64-instruction-variant-CVTSI2SS-xmmreg.mem x64-instruction-variant-CVTSI2SS-xmmreg.rm32 x64-instruction-variant-CVTSI2SS-xmmreg.rm64)))

(defparameter x64-instruction-container-CVTSS2SI (make-instance 'x86-asm-instruction :name "CVTSS2SI" :is-container t :variants (list
x64-instruction-variant-CVTSS2SI-reg32.xmmreg x64-instruction-variant-CVTSS2SI-reg32.mem x64-instruction-variant-CVTSS2SI-reg64.xmmreg x64-instruction-variant-CVTSS2SI-reg64.mem)))

(defparameter x64-instruction-container-CVTTPS2PI (make-instance 'x86-asm-instruction :name "CVTTPS2PI" :is-container t :variants (list
x64-instruction-variant-CVTTPS2PI-mmxreg.xmmrm)))

(defparameter x64-instruction-container-CVTTSS2SI (make-instance 'x86-asm-instruction :name "CVTTSS2SI" :is-container t :variants (list
x64-instruction-variant-CVTTSS2SI-reg32.xmmrm x64-instruction-variant-CVTTSS2SI-reg64.xmmrm)))

(defparameter x64-instruction-container-DIVPS (make-instance 'x86-asm-instruction :name "DIVPS" :is-container t :variants (list
x64-instruction-variant-DIVPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-DIVSS (make-instance 'x86-asm-instruction :name "DIVSS" :is-container t :variants (list
x64-instruction-variant-DIVSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-LDMXCSR (make-instance 'x86-asm-instruction :name "LDMXCSR" :is-container t :variants (list
x64-instruction-variant-LDMXCSR-mem32)))

(defparameter x64-instruction-container-MAXPS (make-instance 'x86-asm-instruction :name "MAXPS" :is-container t :variants (list
x64-instruction-variant-MAXPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-MAXSS (make-instance 'x86-asm-instruction :name "MAXSS" :is-container t :variants (list
x64-instruction-variant-MAXSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-MINPS (make-instance 'x86-asm-instruction :name "MINPS" :is-container t :variants (list
x64-instruction-variant-MINPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-MINSS (make-instance 'x86-asm-instruction :name "MINSS" :is-container t :variants (list
x64-instruction-variant-MINSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-MOVAPS (make-instance 'x86-asm-instruction :name "MOVAPS" :is-container t :variants (list
x64-instruction-variant-MOVAPS-xmmreg.xmmrm128 x64-instruction-variant-MOVAPS-xmmrm128.xmmreg)))

(defparameter x64-instruction-container-MOVHPS (make-instance 'x86-asm-instruction :name "MOVHPS" :is-container t :variants (list
x64-instruction-variant-MOVHPS-xmmreg.mem64 x64-instruction-variant-MOVHPS-mem64.xmmreg)))

(defparameter x64-instruction-container-MOVLHPS (make-instance 'x86-asm-instruction :name "MOVLHPS" :is-container t :variants (list
x64-instruction-variant-MOVLHPS-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVLPS (make-instance 'x86-asm-instruction :name "MOVLPS" :is-container t :variants (list
x64-instruction-variant-MOVLPS-xmmreg.mem64 x64-instruction-variant-MOVLPS-mem64.xmmreg)))

(defparameter x64-instruction-container-MOVHLPS (make-instance 'x86-asm-instruction :name "MOVHLPS" :is-container t :variants (list
x64-instruction-variant-MOVHLPS-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVMSKPS (make-instance 'x86-asm-instruction :name "MOVMSKPS" :is-container t :variants (list
x64-instruction-variant-MOVMSKPS-reg32.xmmreg x64-instruction-variant-MOVMSKPS-reg64.xmmreg)))

(defparameter x64-instruction-container-MOVNTPS (make-instance 'x86-asm-instruction :name "MOVNTPS" :is-container t :variants (list
x64-instruction-variant-MOVNTPS-mem128.xmmreg)))

(defparameter x64-instruction-container-MOVSS (make-instance 'x86-asm-instruction :name "MOVSS" :is-container t :variants (list
x64-instruction-variant-MOVSS-xmmreg.xmmrm32 x64-instruction-variant-MOVSS-mem32.xmmreg x64-instruction-variant-MOVSS-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVUPS (make-instance 'x86-asm-instruction :name "MOVUPS" :is-container t :variants (list
x64-instruction-variant-MOVUPS-xmmreg.xmmrm128 x64-instruction-variant-MOVUPS-xmmrm128.xmmreg)))

(defparameter x64-instruction-container-MULPS (make-instance 'x86-asm-instruction :name "MULPS" :is-container t :variants (list
x64-instruction-variant-MULPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-MULSS (make-instance 'x86-asm-instruction :name "MULSS" :is-container t :variants (list
x64-instruction-variant-MULSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-ORPS (make-instance 'x86-asm-instruction :name "ORPS" :is-container t :variants (list
x64-instruction-variant-ORPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-RCPPS (make-instance 'x86-asm-instruction :name "RCPPS" :is-container t :variants (list
x64-instruction-variant-RCPPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-RCPSS (make-instance 'x86-asm-instruction :name "RCPSS" :is-container t :variants (list
x64-instruction-variant-RCPSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-RSQRTPS (make-instance 'x86-asm-instruction :name "RSQRTPS" :is-container t :variants (list
x64-instruction-variant-RSQRTPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-RSQRTSS (make-instance 'x86-asm-instruction :name "RSQRTSS" :is-container t :variants (list
x64-instruction-variant-RSQRTSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-SHUFPS (make-instance 'x86-asm-instruction :name "SHUFPS" :is-container t :variants (list
x64-instruction-variant-SHUFPS-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-SQRTPS (make-instance 'x86-asm-instruction :name "SQRTPS" :is-container t :variants (list
x64-instruction-variant-SQRTPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SQRTSS (make-instance 'x86-asm-instruction :name "SQRTSS" :is-container t :variants (list
x64-instruction-variant-SQRTSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-STMXCSR (make-instance 'x86-asm-instruction :name "STMXCSR" :is-container t :variants (list
x64-instruction-variant-STMXCSR-mem32)))

(defparameter x64-instruction-container-SUBPS (make-instance 'x86-asm-instruction :name "SUBPS" :is-container t :variants (list
x64-instruction-variant-SUBPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SUBSS (make-instance 'x86-asm-instruction :name "SUBSS" :is-container t :variants (list
x64-instruction-variant-SUBSS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-UCOMISS (make-instance 'x86-asm-instruction :name "UCOMISS" :is-container t :variants (list
x64-instruction-variant-UCOMISS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-UNPCKHPS (make-instance 'x86-asm-instruction :name "UNPCKHPS" :is-container t :variants (list
x64-instruction-variant-UNPCKHPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-UNPCKLPS (make-instance 'x86-asm-instruction :name "UNPCKLPS" :is-container t :variants (list
x64-instruction-variant-UNPCKLPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-XORPS (make-instance 'x86-asm-instruction :name "XORPS" :is-container t :variants (list
x64-instruction-variant-XORPS-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-FXRSTOR (make-instance 'x86-asm-instruction :name "FXRSTOR" :is-container t :variants (list
x64-instruction-variant-FXRSTOR-mem)))

(defparameter x64-instruction-container-FXRSTOR64 (make-instance 'x86-asm-instruction :name "FXRSTOR64" :is-container t :variants (list
x64-instruction-variant-FXRSTOR64-mem)))

(defparameter x64-instruction-container-FXSAVE (make-instance 'x86-asm-instruction :name "FXSAVE" :is-container t :variants (list
x64-instruction-variant-FXSAVE-mem)))

(defparameter x64-instruction-container-FXSAVE64 (make-instance 'x86-asm-instruction :name "FXSAVE64" :is-container t :variants (list
x64-instruction-variant-FXSAVE64-mem)))

(defparameter x64-instruction-container-XGETBV (make-instance 'x86-asm-instruction :name "XGETBV" :is-container t :variants (list
x64-instruction-variant-XGETBV-void)))

(defparameter x64-instruction-container-XSETBV (make-instance 'x86-asm-instruction :name "XSETBV" :is-container t :variants (list
x64-instruction-variant-XSETBV-void)))

(defparameter x64-instruction-container-XSAVE (make-instance 'x86-asm-instruction :name "XSAVE" :is-container t :variants (list
x64-instruction-variant-XSAVE-mem)))

(defparameter x64-instruction-container-XSAVE64 (make-instance 'x86-asm-instruction :name "XSAVE64" :is-container t :variants (list
x64-instruction-variant-XSAVE64-mem)))

(defparameter x64-instruction-container-XSAVEC (make-instance 'x86-asm-instruction :name "XSAVEC" :is-container t :variants (list
x64-instruction-variant-XSAVEC-mem)))

(defparameter x64-instruction-container-XSAVEC64 (make-instance 'x86-asm-instruction :name "XSAVEC64" :is-container t :variants (list
x64-instruction-variant-XSAVEC64-mem)))

(defparameter x64-instruction-container-XSAVEOPT (make-instance 'x86-asm-instruction :name "XSAVEOPT" :is-container t :variants (list
x64-instruction-variant-XSAVEOPT-mem)))

(defparameter x64-instruction-container-XSAVEOPT64 (make-instance 'x86-asm-instruction :name "XSAVEOPT64" :is-container t :variants (list
x64-instruction-variant-XSAVEOPT64-mem)))

(defparameter x64-instruction-container-XSAVES (make-instance 'x86-asm-instruction :name "XSAVES" :is-container t :variants (list
x64-instruction-variant-XSAVES-mem)))

(defparameter x64-instruction-container-XSAVES64 (make-instance 'x86-asm-instruction :name "XSAVES64" :is-container t :variants (list
x64-instruction-variant-XSAVES64-mem)))

(defparameter x64-instruction-container-XRSTOR (make-instance 'x86-asm-instruction :name "XRSTOR" :is-container t :variants (list
x64-instruction-variant-XRSTOR-mem)))

(defparameter x64-instruction-container-XRSTOR64 (make-instance 'x86-asm-instruction :name "XRSTOR64" :is-container t :variants (list
x64-instruction-variant-XRSTOR64-mem)))

(defparameter x64-instruction-container-XRSTORS (make-instance 'x86-asm-instruction :name "XRSTORS" :is-container t :variants (list
x64-instruction-variant-XRSTORS-mem)))

(defparameter x64-instruction-container-XRSTORS64 (make-instance 'x86-asm-instruction :name "XRSTORS64" :is-container t :variants (list
x64-instruction-variant-XRSTORS64-mem)))

(defparameter x64-instruction-container-PREFETCHNTA (make-instance 'x86-asm-instruction :name "PREFETCHNTA" :is-container t :variants (list
x64-instruction-variant-PREFETCHNTA-mem8)))

(defparameter x64-instruction-container-PREFETCHT0 (make-instance 'x86-asm-instruction :name "PREFETCHT0" :is-container t :variants (list
x64-instruction-variant-PREFETCHT0-mem8)))

(defparameter x64-instruction-container-PREFETCHT1 (make-instance 'x86-asm-instruction :name "PREFETCHT1" :is-container t :variants (list
x64-instruction-variant-PREFETCHT1-mem8)))

(defparameter x64-instruction-container-PREFETCHT2 (make-instance 'x86-asm-instruction :name "PREFETCHT2" :is-container t :variants (list
x64-instruction-variant-PREFETCHT2-mem8)))

(defparameter x64-instruction-container-SFENCE (make-instance 'x86-asm-instruction :name "SFENCE" :is-container t :variants (list
x64-instruction-variant-SFENCE-void)))

(defparameter x64-instruction-container-MASKMOVQ (make-instance 'x86-asm-instruction :name "MASKMOVQ" :is-container t :variants (list
x64-instruction-variant-MASKMOVQ-mmxreg.mmxreg)))

(defparameter x64-instruction-container-MOVNTQ (make-instance 'x86-asm-instruction :name "MOVNTQ" :is-container t :variants (list
x64-instruction-variant-MOVNTQ-mem.mmxreg)))

(defparameter x64-instruction-container-PAVGB (make-instance 'x86-asm-instruction :name "PAVGB" :is-container t :variants (list
x64-instruction-variant-PAVGB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PAVGW (make-instance 'x86-asm-instruction :name "PAVGW" :is-container t :variants (list
x64-instruction-variant-PAVGW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PEXTRW (make-instance 'x86-asm-instruction :name "PEXTRW" :is-container t :variants (list
x64-instruction-variant-PEXTRW-reg32.mmxreg.imm)))

(defparameter x64-instruction-container-PINSRW (make-instance 'x86-asm-instruction :name "PINSRW" :is-container t :variants (list
x64-instruction-variant-PINSRW-mmxreg.mem.imm x64-instruction-variant-PINSRW-mmxreg.rm16.imm x64-instruction-variant-PINSRW-mmxreg.reg32.imm)))

(defparameter x64-instruction-container-PMAXSW (make-instance 'x86-asm-instruction :name "PMAXSW" :is-container t :variants (list
x64-instruction-variant-PMAXSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMAXUB (make-instance 'x86-asm-instruction :name "PMAXUB" :is-container t :variants (list
x64-instruction-variant-PMAXUB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMINSW (make-instance 'x86-asm-instruction :name "PMINSW" :is-container t :variants (list
x64-instruction-variant-PMINSW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMINUB (make-instance 'x86-asm-instruction :name "PMINUB" :is-container t :variants (list
x64-instruction-variant-PMINUB-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PMOVMSKB (make-instance 'x86-asm-instruction :name "PMOVMSKB" :is-container t :variants (list
x64-instruction-variant-PMOVMSKB-reg32.mmxreg)))

(defparameter x64-instruction-container-PMULHUW (make-instance 'x86-asm-instruction :name "PMULHUW" :is-container t :variants (list
x64-instruction-variant-PMULHUW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSADBW (make-instance 'x86-asm-instruction :name "PSADBW" :is-container t :variants (list
x64-instruction-variant-PSADBW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSHUFW (make-instance 'x86-asm-instruction :name "PSHUFW" :is-container t :variants (list
x64-instruction-variant-PSHUFW-mmxreg.mmxrm.imm)))

(defparameter x64-instruction-container-PF2IW (make-instance 'x86-asm-instruction :name "PF2IW" :is-container t :variants (list
x64-instruction-variant-PF2IW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFNACC (make-instance 'x86-asm-instruction :name "PFNACC" :is-container t :variants (list
x64-instruction-variant-PFNACC-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFPNACC (make-instance 'x86-asm-instruction :name "PFPNACC" :is-container t :variants (list
x64-instruction-variant-PFPNACC-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PI2FW (make-instance 'x86-asm-instruction :name "PI2FW" :is-container t :variants (list
x64-instruction-variant-PI2FW-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PSWAPD (make-instance 'x86-asm-instruction :name "PSWAPD" :is-container t :variants (list
x64-instruction-variant-PSWAPD-mmxreg.mmxrm)))

(defparameter x64-instruction-container-MASKMOVDQU (make-instance 'x86-asm-instruction :name "MASKMOVDQU" :is-container t :variants (list
x64-instruction-variant-MASKMOVDQU-xmmreg.xmmreg)))

(defparameter x64-instruction-container-CLFLUSH (make-instance 'x86-asm-instruction :name "CLFLUSH" :is-container t :variants (list
x64-instruction-variant-CLFLUSH-mem)))

(defparameter x64-instruction-container-MOVNTDQ (make-instance 'x86-asm-instruction :name "MOVNTDQ" :is-container t :variants (list
x64-instruction-variant-MOVNTDQ-mem.xmmreg)))

(defparameter x64-instruction-container-MOVNTI (make-instance 'x86-asm-instruction :name "MOVNTI" :is-container t :variants (list
x64-instruction-variant-MOVNTI-mem.reg32 x64-instruction-variant-MOVNTI-mem.reg64)))

(defparameter x64-instruction-container-MOVNTPD (make-instance 'x86-asm-instruction :name "MOVNTPD" :is-container t :variants (list
x64-instruction-variant-MOVNTPD-mem.xmmreg)))

(defparameter x64-instruction-container-LFENCE (make-instance 'x86-asm-instruction :name "LFENCE" :is-container t :variants (list
x64-instruction-variant-LFENCE-void)))

(defparameter x64-instruction-container-MFENCE (make-instance 'x86-asm-instruction :name "MFENCE" :is-container t :variants (list
x64-instruction-variant-MFENCE-void)))

(defparameter x64-instruction-container-MOVD (make-instance 'x86-asm-instruction :name "MOVD" :is-container t :variants (list
x64-instruction-variant-MOVD-mem.xmmreg x64-instruction-variant-MOVD-xmmreg.mem x64-instruction-variant-MOVD-xmmreg.rm32 x64-instruction-variant-MOVD-rm32.xmmreg)))

(defparameter x64-instruction-container-MOVDQA (make-instance 'x86-asm-instruction :name "MOVDQA" :is-container t :variants (list
x64-instruction-variant-MOVDQA-xmmreg.xmmreg x64-instruction-variant-MOVDQA-mem.xmmreg x64-instruction-variant-MOVDQA-xmmreg.mem x64-instruction-variant-MOVDQA-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVDQU (make-instance 'x86-asm-instruction :name "MOVDQU" :is-container t :variants (list
x64-instruction-variant-MOVDQU-xmmreg.xmmreg x64-instruction-variant-MOVDQU-mem.xmmreg x64-instruction-variant-MOVDQU-xmmreg.mem x64-instruction-variant-MOVDQU-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVDQ2Q (make-instance 'x86-asm-instruction :name "MOVDQ2Q" :is-container t :variants (list
x64-instruction-variant-MOVDQ2Q-mmxreg.xmmreg)))

(defparameter x64-instruction-container-MOVQ (make-instance 'x86-asm-instruction :name "MOVQ" :is-container t :variants (list
x64-instruction-variant-MOVQ-xmmreg.xmmreg x64-instruction-variant-MOVQ-xmmreg.xmmreg x64-instruction-variant-MOVQ-mem.xmmreg x64-instruction-variant-MOVQ-xmmreg.mem x64-instruction-variant-MOVQ-xmmreg.rm64 x64-instruction-variant-MOVQ-rm64.xmmreg)))

(defparameter x64-instruction-container-MOVQ2DQ (make-instance 'x86-asm-instruction :name "MOVQ2DQ" :is-container t :variants (list
x64-instruction-variant-MOVQ2DQ-xmmreg.mmxreg)))

(defparameter x64-instruction-container-PACKSSWB (make-instance 'x86-asm-instruction :name "PACKSSWB" :is-container t :variants (list
x64-instruction-variant-PACKSSWB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PACKSSDW (make-instance 'x86-asm-instruction :name "PACKSSDW" :is-container t :variants (list
x64-instruction-variant-PACKSSDW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PACKUSWB (make-instance 'x86-asm-instruction :name "PACKUSWB" :is-container t :variants (list
x64-instruction-variant-PACKUSWB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDB (make-instance 'x86-asm-instruction :name "PADDB" :is-container t :variants (list
x64-instruction-variant-PADDB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDW (make-instance 'x86-asm-instruction :name "PADDW" :is-container t :variants (list
x64-instruction-variant-PADDW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDD (make-instance 'x86-asm-instruction :name "PADDD" :is-container t :variants (list
x64-instruction-variant-PADDD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDQ (make-instance 'x86-asm-instruction :name "PADDQ" :is-container t :variants (list
x64-instruction-variant-PADDQ-mmxreg.mmxrm x64-instruction-variant-PADDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDSB (make-instance 'x86-asm-instruction :name "PADDSB" :is-container t :variants (list
x64-instruction-variant-PADDSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDSW (make-instance 'x86-asm-instruction :name "PADDSW" :is-container t :variants (list
x64-instruction-variant-PADDSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDUSB (make-instance 'x86-asm-instruction :name "PADDUSB" :is-container t :variants (list
x64-instruction-variant-PADDUSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PADDUSW (make-instance 'x86-asm-instruction :name "PADDUSW" :is-container t :variants (list
x64-instruction-variant-PADDUSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PAND (make-instance 'x86-asm-instruction :name "PAND" :is-container t :variants (list
x64-instruction-variant-PAND-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PANDN (make-instance 'x86-asm-instruction :name "PANDN" :is-container t :variants (list
x64-instruction-variant-PANDN-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PAVGB (make-instance 'x86-asm-instruction :name "PAVGB" :is-container t :variants (list
x64-instruction-variant-PAVGB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PAVGW (make-instance 'x86-asm-instruction :name "PAVGW" :is-container t :variants (list
x64-instruction-variant-PAVGW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPEQB (make-instance 'x86-asm-instruction :name "PCMPEQB" :is-container t :variants (list
x64-instruction-variant-PCMPEQB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPEQW (make-instance 'x86-asm-instruction :name "PCMPEQW" :is-container t :variants (list
x64-instruction-variant-PCMPEQW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPEQD (make-instance 'x86-asm-instruction :name "PCMPEQD" :is-container t :variants (list
x64-instruction-variant-PCMPEQD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPGTB (make-instance 'x86-asm-instruction :name "PCMPGTB" :is-container t :variants (list
x64-instruction-variant-PCMPGTB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPGTW (make-instance 'x86-asm-instruction :name "PCMPGTW" :is-container t :variants (list
x64-instruction-variant-PCMPGTW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PCMPGTD (make-instance 'x86-asm-instruction :name "PCMPGTD" :is-container t :variants (list
x64-instruction-variant-PCMPGTD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PEXTRW (make-instance 'x86-asm-instruction :name "PEXTRW" :is-container t :variants (list
x64-instruction-variant-PEXTRW-reg32.xmmreg.imm)))

(defparameter x64-instruction-container-PINSRW (make-instance 'x86-asm-instruction :name "PINSRW" :is-container t :variants (list
x64-instruction-variant-PINSRW-xmmreg.reg16.imm x64-instruction-variant-PINSRW-xmmreg.reg32.imm x64-instruction-variant-PINSRW-xmmreg.mem.imm x64-instruction-variant-PINSRW-xmmreg.mem16.imm)))

(defparameter x64-instruction-container-PMADDWD (make-instance 'x86-asm-instruction :name "PMADDWD" :is-container t :variants (list
x64-instruction-variant-PMADDWD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMAXSW (make-instance 'x86-asm-instruction :name "PMAXSW" :is-container t :variants (list
x64-instruction-variant-PMAXSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMAXUB (make-instance 'x86-asm-instruction :name "PMAXUB" :is-container t :variants (list
x64-instruction-variant-PMAXUB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINSW (make-instance 'x86-asm-instruction :name "PMINSW" :is-container t :variants (list
x64-instruction-variant-PMINSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINUB (make-instance 'x86-asm-instruction :name "PMINUB" :is-container t :variants (list
x64-instruction-variant-PMINUB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVMSKB (make-instance 'x86-asm-instruction :name "PMOVMSKB" :is-container t :variants (list
x64-instruction-variant-PMOVMSKB-reg32.xmmreg)))

(defparameter x64-instruction-container-PMULHUW (make-instance 'x86-asm-instruction :name "PMULHUW" :is-container t :variants (list
x64-instruction-variant-PMULHUW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULHW (make-instance 'x86-asm-instruction :name "PMULHW" :is-container t :variants (list
x64-instruction-variant-PMULHW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULLW (make-instance 'x86-asm-instruction :name "PMULLW" :is-container t :variants (list
x64-instruction-variant-PMULLW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULUDQ (make-instance 'x86-asm-instruction :name "PMULUDQ" :is-container t :variants (list
x64-instruction-variant-PMULUDQ-mmxreg.mmxrm x64-instruction-variant-PMULUDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-POR (make-instance 'x86-asm-instruction :name "POR" :is-container t :variants (list
x64-instruction-variant-POR-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSADBW (make-instance 'x86-asm-instruction :name "PSADBW" :is-container t :variants (list
x64-instruction-variant-PSADBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSHUFD (make-instance 'x86-asm-instruction :name "PSHUFD" :is-container t :variants (list
x64-instruction-variant-PSHUFD-xmmreg.xmmreg.imm x64-instruction-variant-PSHUFD-xmmreg.mem.imm)))

(defparameter x64-instruction-container-PSHUFHW (make-instance 'x86-asm-instruction :name "PSHUFHW" :is-container t :variants (list
x64-instruction-variant-PSHUFHW-xmmreg.xmmreg.imm x64-instruction-variant-PSHUFHW-xmmreg.mem.imm)))

(defparameter x64-instruction-container-PSHUFLW (make-instance 'x86-asm-instruction :name "PSHUFLW" :is-container t :variants (list
x64-instruction-variant-PSHUFLW-xmmreg.xmmreg.imm x64-instruction-variant-PSHUFLW-xmmreg.mem.imm)))

(defparameter x64-instruction-container-PSLLDQ (make-instance 'x86-asm-instruction :name "PSLLDQ" :is-container t :variants (list
x64-instruction-variant-PSLLDQ-xmmreg.imm)))

(defparameter x64-instruction-container-PSLLW (make-instance 'x86-asm-instruction :name "PSLLW" :is-container t :variants (list
x64-instruction-variant-PSLLW-xmmreg.xmmrm x64-instruction-variant-PSLLW-xmmreg.imm)))

(defparameter x64-instruction-container-PSLLD (make-instance 'x86-asm-instruction :name "PSLLD" :is-container t :variants (list
x64-instruction-variant-PSLLD-xmmreg.xmmrm x64-instruction-variant-PSLLD-xmmreg.imm)))

(defparameter x64-instruction-container-PSLLQ (make-instance 'x86-asm-instruction :name "PSLLQ" :is-container t :variants (list
x64-instruction-variant-PSLLQ-xmmreg.xmmrm x64-instruction-variant-PSLLQ-xmmreg.imm)))

(defparameter x64-instruction-container-PSRAW (make-instance 'x86-asm-instruction :name "PSRAW" :is-container t :variants (list
x64-instruction-variant-PSRAW-xmmreg.xmmrm x64-instruction-variant-PSRAW-xmmreg.imm)))

(defparameter x64-instruction-container-PSRAD (make-instance 'x86-asm-instruction :name "PSRAD" :is-container t :variants (list
x64-instruction-variant-PSRAD-xmmreg.xmmrm x64-instruction-variant-PSRAD-xmmreg.imm)))

(defparameter x64-instruction-container-PSRLDQ (make-instance 'x86-asm-instruction :name "PSRLDQ" :is-container t :variants (list
x64-instruction-variant-PSRLDQ-xmmreg.imm)))

(defparameter x64-instruction-container-PSRLW (make-instance 'x86-asm-instruction :name "PSRLW" :is-container t :variants (list
x64-instruction-variant-PSRLW-xmmreg.xmmrm x64-instruction-variant-PSRLW-xmmreg.imm)))

(defparameter x64-instruction-container-PSRLD (make-instance 'x86-asm-instruction :name "PSRLD" :is-container t :variants (list
x64-instruction-variant-PSRLD-xmmreg.xmmrm x64-instruction-variant-PSRLD-xmmreg.imm)))

(defparameter x64-instruction-container-PSRLQ (make-instance 'x86-asm-instruction :name "PSRLQ" :is-container t :variants (list
x64-instruction-variant-PSRLQ-xmmreg.xmmrm x64-instruction-variant-PSRLQ-xmmreg.imm)))

(defparameter x64-instruction-container-PSUBB (make-instance 'x86-asm-instruction :name "PSUBB" :is-container t :variants (list
x64-instruction-variant-PSUBB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBW (make-instance 'x86-asm-instruction :name "PSUBW" :is-container t :variants (list
x64-instruction-variant-PSUBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBD (make-instance 'x86-asm-instruction :name "PSUBD" :is-container t :variants (list
x64-instruction-variant-PSUBD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBQ (make-instance 'x86-asm-instruction :name "PSUBQ" :is-container t :variants (list
x64-instruction-variant-PSUBQ-mmxreg.mmxrm x64-instruction-variant-PSUBQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBSB (make-instance 'x86-asm-instruction :name "PSUBSB" :is-container t :variants (list
x64-instruction-variant-PSUBSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBSW (make-instance 'x86-asm-instruction :name "PSUBSW" :is-container t :variants (list
x64-instruction-variant-PSUBSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBUSB (make-instance 'x86-asm-instruction :name "PSUBUSB" :is-container t :variants (list
x64-instruction-variant-PSUBUSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSUBUSW (make-instance 'x86-asm-instruction :name "PSUBUSW" :is-container t :variants (list
x64-instruction-variant-PSUBUSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKHBW (make-instance 'x86-asm-instruction :name "PUNPCKHBW" :is-container t :variants (list
x64-instruction-variant-PUNPCKHBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKHWD (make-instance 'x86-asm-instruction :name "PUNPCKHWD" :is-container t :variants (list
x64-instruction-variant-PUNPCKHWD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKHDQ (make-instance 'x86-asm-instruction :name "PUNPCKHDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKHDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKHQDQ (make-instance 'x86-asm-instruction :name "PUNPCKHQDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKHQDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKLBW (make-instance 'x86-asm-instruction :name "PUNPCKLBW" :is-container t :variants (list
x64-instruction-variant-PUNPCKLBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKLWD (make-instance 'x86-asm-instruction :name "PUNPCKLWD" :is-container t :variants (list
x64-instruction-variant-PUNPCKLWD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKLDQ (make-instance 'x86-asm-instruction :name "PUNPCKLDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKLDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PUNPCKLQDQ (make-instance 'x86-asm-instruction :name "PUNPCKLQDQ" :is-container t :variants (list
x64-instruction-variant-PUNPCKLQDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PXOR (make-instance 'x86-asm-instruction :name "PXOR" :is-container t :variants (list
x64-instruction-variant-PXOR-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ADDPD (make-instance 'x86-asm-instruction :name "ADDPD" :is-container t :variants (list
x64-instruction-variant-ADDPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ADDSD (make-instance 'x86-asm-instruction :name "ADDSD" :is-container t :variants (list
x64-instruction-variant-ADDSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ANDNPD (make-instance 'x86-asm-instruction :name "ANDNPD" :is-container t :variants (list
x64-instruction-variant-ANDNPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ANDPD (make-instance 'x86-asm-instruction :name "ANDPD" :is-container t :variants (list
x64-instruction-variant-ANDPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPEQPD (make-instance 'x86-asm-instruction :name "CMPEQPD" :is-container t :variants (list
x64-instruction-variant-CMPEQPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPEQSD (make-instance 'x86-asm-instruction :name "CMPEQSD" :is-container t :variants (list
x64-instruction-variant-CMPEQSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPLEPD (make-instance 'x86-asm-instruction :name "CMPLEPD" :is-container t :variants (list
x64-instruction-variant-CMPLEPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPLESD (make-instance 'x86-asm-instruction :name "CMPLESD" :is-container t :variants (list
x64-instruction-variant-CMPLESD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPLTPD (make-instance 'x86-asm-instruction :name "CMPLTPD" :is-container t :variants (list
x64-instruction-variant-CMPLTPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPLTSD (make-instance 'x86-asm-instruction :name "CMPLTSD" :is-container t :variants (list
x64-instruction-variant-CMPLTSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNEQPD (make-instance 'x86-asm-instruction :name "CMPNEQPD" :is-container t :variants (list
x64-instruction-variant-CMPNEQPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNEQSD (make-instance 'x86-asm-instruction :name "CMPNEQSD" :is-container t :variants (list
x64-instruction-variant-CMPNEQSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNLEPD (make-instance 'x86-asm-instruction :name "CMPNLEPD" :is-container t :variants (list
x64-instruction-variant-CMPNLEPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNLESD (make-instance 'x86-asm-instruction :name "CMPNLESD" :is-container t :variants (list
x64-instruction-variant-CMPNLESD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNLTPD (make-instance 'x86-asm-instruction :name "CMPNLTPD" :is-container t :variants (list
x64-instruction-variant-CMPNLTPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPNLTSD (make-instance 'x86-asm-instruction :name "CMPNLTSD" :is-container t :variants (list
x64-instruction-variant-CMPNLTSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPORDPD (make-instance 'x86-asm-instruction :name "CMPORDPD" :is-container t :variants (list
x64-instruction-variant-CMPORDPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPORDSD (make-instance 'x86-asm-instruction :name "CMPORDSD" :is-container t :variants (list
x64-instruction-variant-CMPORDSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPUNORDPD (make-instance 'x86-asm-instruction :name "CMPUNORDPD" :is-container t :variants (list
x64-instruction-variant-CMPUNORDPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPUNORDSD (make-instance 'x86-asm-instruction :name "CMPUNORDSD" :is-container t :variants (list
x64-instruction-variant-CMPUNORDSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CMPPD (make-instance 'x86-asm-instruction :name "CMPPD" :is-container t :variants (list
x64-instruction-variant-CMPPD-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-CMPSD (make-instance 'x86-asm-instruction :name "CMPSD" :is-container t :variants (list
x64-instruction-variant-CMPSD-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-COMISD (make-instance 'x86-asm-instruction :name "COMISD" :is-container t :variants (list
x64-instruction-variant-COMISD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTDQ2PD (make-instance 'x86-asm-instruction :name "CVTDQ2PD" :is-container t :variants (list
x64-instruction-variant-CVTDQ2PD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTDQ2PS (make-instance 'x86-asm-instruction :name "CVTDQ2PS" :is-container t :variants (list
x64-instruction-variant-CVTDQ2PS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTPD2DQ (make-instance 'x86-asm-instruction :name "CVTPD2DQ" :is-container t :variants (list
x64-instruction-variant-CVTPD2DQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTPD2PI (make-instance 'x86-asm-instruction :name "CVTPD2PI" :is-container t :variants (list
x64-instruction-variant-CVTPD2PI-mmxreg.xmmrm)))

(defparameter x64-instruction-container-CVTPD2PS (make-instance 'x86-asm-instruction :name "CVTPD2PS" :is-container t :variants (list
x64-instruction-variant-CVTPD2PS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTPI2PD (make-instance 'x86-asm-instruction :name "CVTPI2PD" :is-container t :variants (list
x64-instruction-variant-CVTPI2PD-xmmreg.mmxrm)))

(defparameter x64-instruction-container-CVTPS2DQ (make-instance 'x86-asm-instruction :name "CVTPS2DQ" :is-container t :variants (list
x64-instruction-variant-CVTPS2DQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTPS2PD (make-instance 'x86-asm-instruction :name "CVTPS2PD" :is-container t :variants (list
x64-instruction-variant-CVTPS2PD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTSD2SI (make-instance 'x86-asm-instruction :name "CVTSD2SI" :is-container t :variants (list
x64-instruction-variant-CVTSD2SI-reg32.xmmreg x64-instruction-variant-CVTSD2SI-reg32.mem x64-instruction-variant-CVTSD2SI-reg64.xmmreg x64-instruction-variant-CVTSD2SI-reg64.mem)))

(defparameter x64-instruction-container-CVTSD2SS (make-instance 'x86-asm-instruction :name "CVTSD2SS" :is-container t :variants (list
x64-instruction-variant-CVTSD2SS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTSI2SD (make-instance 'x86-asm-instruction :name "CVTSI2SD" :is-container t :variants (list
x64-instruction-variant-CVTSI2SD-xmmreg.mem x64-instruction-variant-CVTSI2SD-xmmreg.rm32 x64-instruction-variant-CVTSI2SD-xmmreg.rm64)))

(defparameter x64-instruction-container-CVTSS2SD (make-instance 'x86-asm-instruction :name "CVTSS2SD" :is-container t :variants (list
x64-instruction-variant-CVTSS2SD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTTPD2PI (make-instance 'x86-asm-instruction :name "CVTTPD2PI" :is-container t :variants (list
x64-instruction-variant-CVTTPD2PI-mmxreg.xmmrm)))

(defparameter x64-instruction-container-CVTTPD2DQ (make-instance 'x86-asm-instruction :name "CVTTPD2DQ" :is-container t :variants (list
x64-instruction-variant-CVTTPD2DQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTTPS2DQ (make-instance 'x86-asm-instruction :name "CVTTPS2DQ" :is-container t :variants (list
x64-instruction-variant-CVTTPS2DQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CVTTSD2SI (make-instance 'x86-asm-instruction :name "CVTTSD2SI" :is-container t :variants (list
x64-instruction-variant-CVTTSD2SI-reg32.xmmreg x64-instruction-variant-CVTTSD2SI-reg32.mem x64-instruction-variant-CVTTSD2SI-reg64.xmmreg x64-instruction-variant-CVTTSD2SI-reg64.mem)))

(defparameter x64-instruction-container-DIVPD (make-instance 'x86-asm-instruction :name "DIVPD" :is-container t :variants (list
x64-instruction-variant-DIVPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-DIVSD (make-instance 'x86-asm-instruction :name "DIVSD" :is-container t :variants (list
x64-instruction-variant-DIVSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MAXPD (make-instance 'x86-asm-instruction :name "MAXPD" :is-container t :variants (list
x64-instruction-variant-MAXPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MAXSD (make-instance 'x86-asm-instruction :name "MAXSD" :is-container t :variants (list
x64-instruction-variant-MAXSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MINPD (make-instance 'x86-asm-instruction :name "MINPD" :is-container t :variants (list
x64-instruction-variant-MINPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MINSD (make-instance 'x86-asm-instruction :name "MINSD" :is-container t :variants (list
x64-instruction-variant-MINSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MOVAPD (make-instance 'x86-asm-instruction :name "MOVAPD" :is-container t :variants (list
x64-instruction-variant-MOVAPD-xmmreg.xmmreg x64-instruction-variant-MOVAPD-xmmreg.xmmreg x64-instruction-variant-MOVAPD-mem.xmmreg x64-instruction-variant-MOVAPD-xmmreg.mem)))

(defparameter x64-instruction-container-MOVHPD (make-instance 'x86-asm-instruction :name "MOVHPD" :is-container t :variants (list
x64-instruction-variant-MOVHPD-mem.xmmreg x64-instruction-variant-MOVHPD-xmmreg.mem)))

(defparameter x64-instruction-container-MOVLPD (make-instance 'x86-asm-instruction :name "MOVLPD" :is-container t :variants (list
x64-instruction-variant-MOVLPD-mem64.xmmreg x64-instruction-variant-MOVLPD-xmmreg.mem64)))

(defparameter x64-instruction-container-MOVMSKPD (make-instance 'x86-asm-instruction :name "MOVMSKPD" :is-container t :variants (list
x64-instruction-variant-MOVMSKPD-reg32.xmmreg x64-instruction-variant-MOVMSKPD-reg64.xmmreg)))

(defparameter x64-instruction-container-MOVSD (make-instance 'x86-asm-instruction :name "MOVSD" :is-container t :variants (list
x64-instruction-variant-MOVSD-xmmreg.xmmreg x64-instruction-variant-MOVSD-xmmreg.xmmreg x64-instruction-variant-MOVSD-mem64.xmmreg x64-instruction-variant-MOVSD-xmmreg.mem64)))

(defparameter x64-instruction-container-MOVUPD (make-instance 'x86-asm-instruction :name "MOVUPD" :is-container t :variants (list
x64-instruction-variant-MOVUPD-xmmreg.xmmreg x64-instruction-variant-MOVUPD-xmmreg.xmmreg x64-instruction-variant-MOVUPD-mem.xmmreg x64-instruction-variant-MOVUPD-xmmreg.mem)))

(defparameter x64-instruction-container-MULPD (make-instance 'x86-asm-instruction :name "MULPD" :is-container t :variants (list
x64-instruction-variant-MULPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MULSD (make-instance 'x86-asm-instruction :name "MULSD" :is-container t :variants (list
x64-instruction-variant-MULSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ORPD (make-instance 'x86-asm-instruction :name "ORPD" :is-container t :variants (list
x64-instruction-variant-ORPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-SHUFPD (make-instance 'x86-asm-instruction :name "SHUFPD" :is-container t :variants (list
x64-instruction-variant-SHUFPD-xmmreg.xmmreg.imm x64-instruction-variant-SHUFPD-xmmreg.mem.imm)))

(defparameter x64-instruction-container-SQRTPD (make-instance 'x86-asm-instruction :name "SQRTPD" :is-container t :variants (list
x64-instruction-variant-SQRTPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-SQRTSD (make-instance 'x86-asm-instruction :name "SQRTSD" :is-container t :variants (list
x64-instruction-variant-SQRTSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-SUBPD (make-instance 'x86-asm-instruction :name "SUBPD" :is-container t :variants (list
x64-instruction-variant-SUBPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-SUBSD (make-instance 'x86-asm-instruction :name "SUBSD" :is-container t :variants (list
x64-instruction-variant-SUBSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-UCOMISD (make-instance 'x86-asm-instruction :name "UCOMISD" :is-container t :variants (list
x64-instruction-variant-UCOMISD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-UNPCKHPD (make-instance 'x86-asm-instruction :name "UNPCKHPD" :is-container t :variants (list
x64-instruction-variant-UNPCKHPD-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-UNPCKLPD (make-instance 'x86-asm-instruction :name "UNPCKLPD" :is-container t :variants (list
x64-instruction-variant-UNPCKLPD-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-XORPD (make-instance 'x86-asm-instruction :name "XORPD" :is-container t :variants (list
x64-instruction-variant-XORPD-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-ADDSUBPD (make-instance 'x86-asm-instruction :name "ADDSUBPD" :is-container t :variants (list
x64-instruction-variant-ADDSUBPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ADDSUBPS (make-instance 'x86-asm-instruction :name "ADDSUBPS" :is-container t :variants (list
x64-instruction-variant-ADDSUBPS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-HADDPD (make-instance 'x86-asm-instruction :name "HADDPD" :is-container t :variants (list
x64-instruction-variant-HADDPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-HADDPS (make-instance 'x86-asm-instruction :name "HADDPS" :is-container t :variants (list
x64-instruction-variant-HADDPS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-HSUBPD (make-instance 'x86-asm-instruction :name "HSUBPD" :is-container t :variants (list
x64-instruction-variant-HSUBPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-HSUBPS (make-instance 'x86-asm-instruction :name "HSUBPS" :is-container t :variants (list
x64-instruction-variant-HSUBPS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-LDDQU (make-instance 'x86-asm-instruction :name "LDDQU" :is-container t :variants (list
x64-instruction-variant-LDDQU-xmmreg.mem)))

(defparameter x64-instruction-container-MOVDDUP (make-instance 'x86-asm-instruction :name "MOVDDUP" :is-container t :variants (list
x64-instruction-variant-MOVDDUP-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MOVSHDUP (make-instance 'x86-asm-instruction :name "MOVSHDUP" :is-container t :variants (list
x64-instruction-variant-MOVSHDUP-xmmreg.xmmrm)))

(defparameter x64-instruction-container-MOVSLDUP (make-instance 'x86-asm-instruction :name "MOVSLDUP" :is-container t :variants (list
x64-instruction-variant-MOVSLDUP-xmmreg.xmmrm)))

(defparameter x64-instruction-container-CLGI (make-instance 'x86-asm-instruction :name "CLGI" :is-container t :variants (list
x64-instruction-variant-CLGI-void)))

(defparameter x64-instruction-container-STGI (make-instance 'x86-asm-instruction :name "STGI" :is-container t :variants (list
x64-instruction-variant-STGI-void)))

(defparameter x64-instruction-container-VMCALL (make-instance 'x86-asm-instruction :name "VMCALL" :is-container t :variants (list
x64-instruction-variant-VMCALL-void)))

(defparameter x64-instruction-container-VMCLEAR (make-instance 'x86-asm-instruction :name "VMCLEAR" :is-container t :variants (list
x64-instruction-variant-VMCLEAR-mem)))

(defparameter x64-instruction-container-VMFUNC (make-instance 'x86-asm-instruction :name "VMFUNC" :is-container t :variants (list
x64-instruction-variant-VMFUNC-void)))

(defparameter x64-instruction-container-VMLAUNCH (make-instance 'x86-asm-instruction :name "VMLAUNCH" :is-container t :variants (list
x64-instruction-variant-VMLAUNCH-void)))

(defparameter x64-instruction-container-VMLOAD (make-instance 'x86-asm-instruction :name "VMLOAD" :is-container t :variants (list
x64-instruction-variant-VMLOAD-void)))

(defparameter x64-instruction-container-VMMCALL (make-instance 'x86-asm-instruction :name "VMMCALL" :is-container t :variants (list
x64-instruction-variant-VMMCALL-void)))

(defparameter x64-instruction-container-VMPTRLD (make-instance 'x86-asm-instruction :name "VMPTRLD" :is-container t :variants (list
x64-instruction-variant-VMPTRLD-mem)))

(defparameter x64-instruction-container-VMPTRST (make-instance 'x86-asm-instruction :name "VMPTRST" :is-container t :variants (list
x64-instruction-variant-VMPTRST-mem)))

(defparameter x64-instruction-container-VMREAD (make-instance 'x86-asm-instruction :name "VMREAD" :is-container t :variants (list
x64-instruction-variant-VMREAD-rm64.reg64)))

(defparameter x64-instruction-container-VMRESUME (make-instance 'x86-asm-instruction :name "VMRESUME" :is-container t :variants (list
x64-instruction-variant-VMRESUME-void)))

(defparameter x64-instruction-container-VMRUN (make-instance 'x86-asm-instruction :name "VMRUN" :is-container t :variants (list
x64-instruction-variant-VMRUN-void)))

(defparameter x64-instruction-container-VMSAVE (make-instance 'x86-asm-instruction :name "VMSAVE" :is-container t :variants (list
x64-instruction-variant-VMSAVE-void)))

(defparameter x64-instruction-container-VMWRITE (make-instance 'x86-asm-instruction :name "VMWRITE" :is-container t :variants (list
x64-instruction-variant-VMWRITE-reg64.rm64)))

(defparameter x64-instruction-container-VMXOFF (make-instance 'x86-asm-instruction :name "VMXOFF" :is-container t :variants (list
x64-instruction-variant-VMXOFF-void)))

(defparameter x64-instruction-container-VMXON (make-instance 'x86-asm-instruction :name "VMXON" :is-container t :variants (list
x64-instruction-variant-VMXON-mem)))

(defparameter x64-instruction-container-INVEPT (make-instance 'x86-asm-instruction :name "INVEPT" :is-container t :variants (list
x64-instruction-variant-INVEPT-reg64.mem)))

(defparameter x64-instruction-container-INVVPID (make-instance 'x86-asm-instruction :name "INVVPID" :is-container t :variants (list
x64-instruction-variant-INVVPID-reg64.mem)))

(defparameter x64-instruction-container-PABSB (make-instance 'x86-asm-instruction :name "PABSB" :is-container t :variants (list
x64-instruction-variant-PABSB-mmxreg.mmxrm x64-instruction-variant-PABSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PABSW (make-instance 'x86-asm-instruction :name "PABSW" :is-container t :variants (list
x64-instruction-variant-PABSW-mmxreg.mmxrm x64-instruction-variant-PABSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PABSD (make-instance 'x86-asm-instruction :name "PABSD" :is-container t :variants (list
x64-instruction-variant-PABSD-mmxreg.mmxrm x64-instruction-variant-PABSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PALIGNR (make-instance 'x86-asm-instruction :name "PALIGNR" :is-container t :variants (list
x64-instruction-variant-PALIGNR-mmxreg.mmxrm.imm x64-instruction-variant-PALIGNR-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PHADDW (make-instance 'x86-asm-instruction :name "PHADDW" :is-container t :variants (list
x64-instruction-variant-PHADDW-mmxreg.mmxrm x64-instruction-variant-PHADDW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PHADDD (make-instance 'x86-asm-instruction :name "PHADDD" :is-container t :variants (list
x64-instruction-variant-PHADDD-mmxreg.mmxrm x64-instruction-variant-PHADDD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PHADDSW (make-instance 'x86-asm-instruction :name "PHADDSW" :is-container t :variants (list
x64-instruction-variant-PHADDSW-mmxreg.mmxrm x64-instruction-variant-PHADDSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PHSUBW (make-instance 'x86-asm-instruction :name "PHSUBW" :is-container t :variants (list
x64-instruction-variant-PHSUBW-mmxreg.mmxrm x64-instruction-variant-PHSUBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PHSUBD (make-instance 'x86-asm-instruction :name "PHSUBD" :is-container t :variants (list
x64-instruction-variant-PHSUBD-mmxreg.mmxrm x64-instruction-variant-PHSUBD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PHSUBSW (make-instance 'x86-asm-instruction :name "PHSUBSW" :is-container t :variants (list
x64-instruction-variant-PHSUBSW-mmxreg.mmxrm x64-instruction-variant-PHSUBSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMADDUBSW (make-instance 'x86-asm-instruction :name "PMADDUBSW" :is-container t :variants (list
x64-instruction-variant-PMADDUBSW-mmxreg.mmxrm x64-instruction-variant-PMADDUBSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULHRSW (make-instance 'x86-asm-instruction :name "PMULHRSW" :is-container t :variants (list
x64-instruction-variant-PMULHRSW-mmxreg.mmxrm x64-instruction-variant-PMULHRSW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSHUFB (make-instance 'x86-asm-instruction :name "PSHUFB" :is-container t :variants (list
x64-instruction-variant-PSHUFB-mmxreg.mmxrm x64-instruction-variant-PSHUFB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSIGNB (make-instance 'x86-asm-instruction :name "PSIGNB" :is-container t :variants (list
x64-instruction-variant-PSIGNB-mmxreg.mmxrm x64-instruction-variant-PSIGNB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSIGNW (make-instance 'x86-asm-instruction :name "PSIGNW" :is-container t :variants (list
x64-instruction-variant-PSIGNW-mmxreg.mmxrm x64-instruction-variant-PSIGNW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PSIGND (make-instance 'x86-asm-instruction :name "PSIGND" :is-container t :variants (list
x64-instruction-variant-PSIGND-mmxreg.mmxrm x64-instruction-variant-PSIGND-xmmreg.xmmrm)))

(defparameter x64-instruction-container-EXTRQ (make-instance 'x86-asm-instruction :name "EXTRQ" :is-container t :variants (list
x64-instruction-variant-EXTRQ-xmmreg.imm.imm x64-instruction-variant-EXTRQ-xmmreg.xmmreg)))

(defparameter x64-instruction-container-INSERTQ (make-instance 'x86-asm-instruction :name "INSERTQ" :is-container t :variants (list
x64-instruction-variant-INSERTQ-xmmreg.xmmreg.imm.imm x64-instruction-variant-INSERTQ-xmmreg.xmmreg)))

(defparameter x64-instruction-container-MOVNTSD (make-instance 'x86-asm-instruction :name "MOVNTSD" :is-container t :variants (list
x64-instruction-variant-MOVNTSD-mem.xmmreg)))

(defparameter x64-instruction-container-MOVNTSS (make-instance 'x86-asm-instruction :name "MOVNTSS" :is-container t :variants (list
x64-instruction-variant-MOVNTSS-mem.xmmreg)))

(defparameter x64-instruction-container-LZCNT (make-instance 'x86-asm-instruction :name "LZCNT" :is-container t :variants (list
x64-instruction-variant-LZCNT-reg16.rm16 x64-instruction-variant-LZCNT-reg32.rm32 x64-instruction-variant-LZCNT-reg64.rm64)))

(defparameter x64-instruction-container-BLENDPD (make-instance 'x86-asm-instruction :name "BLENDPD" :is-container t :variants (list
x64-instruction-variant-BLENDPD-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-BLENDPS (make-instance 'x86-asm-instruction :name "BLENDPS" :is-container t :variants (list
x64-instruction-variant-BLENDPS-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-BLENDVPD (make-instance 'x86-asm-instruction :name "BLENDVPD" :is-container t :variants (list
x64-instruction-variant-BLENDVPD-xmmreg.xmmrm.xmm0 x64-instruction-variant-BLENDVPD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-BLENDVPS (make-instance 'x86-asm-instruction :name "BLENDVPS" :is-container t :variants (list
x64-instruction-variant-BLENDVPS-xmmreg.xmmrm.xmm0 x64-instruction-variant-BLENDVPS-xmmreg.xmmrm)))

(defparameter x64-instruction-container-DPPD (make-instance 'x86-asm-instruction :name "DPPD" :is-container t :variants (list
x64-instruction-variant-DPPD-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-DPPS (make-instance 'x86-asm-instruction :name "DPPS" :is-container t :variants (list
x64-instruction-variant-DPPS-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-EXTRACTPS (make-instance 'x86-asm-instruction :name "EXTRACTPS" :is-container t :variants (list
x64-instruction-variant-EXTRACTPS-rm32.xmmreg.imm x64-instruction-variant-EXTRACTPS-reg64.xmmreg.imm)))

(defparameter x64-instruction-container-INSERTPS (make-instance 'x86-asm-instruction :name "INSERTPS" :is-container t :variants (list
x64-instruction-variant-INSERTPS-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-MOVNTDQA (make-instance 'x86-asm-instruction :name "MOVNTDQA" :is-container t :variants (list
x64-instruction-variant-MOVNTDQA-xmmreg.mem128)))

(defparameter x64-instruction-container-MPSADBW (make-instance 'x86-asm-instruction :name "MPSADBW" :is-container t :variants (list
x64-instruction-variant-MPSADBW-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PACKUSDW (make-instance 'x86-asm-instruction :name "PACKUSDW" :is-container t :variants (list
x64-instruction-variant-PACKUSDW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PBLENDVB (make-instance 'x86-asm-instruction :name "PBLENDVB" :is-container t :variants (list
x64-instruction-variant-PBLENDVB-xmmreg.xmmrm.xmm0 x64-instruction-variant-PBLENDVB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PBLENDW (make-instance 'x86-asm-instruction :name "PBLENDW" :is-container t :variants (list
x64-instruction-variant-PBLENDW-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PCMPEQQ (make-instance 'x86-asm-instruction :name "PCMPEQQ" :is-container t :variants (list
x64-instruction-variant-PCMPEQQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PEXTRB (make-instance 'x86-asm-instruction :name "PEXTRB" :is-container t :variants (list
x64-instruction-variant-PEXTRB-reg32.xmmreg.imm x64-instruction-variant-PEXTRB-mem8.xmmreg.imm x64-instruction-variant-PEXTRB-reg64.xmmreg.imm)))

(defparameter x64-instruction-container-PEXTRD (make-instance 'x86-asm-instruction :name "PEXTRD" :is-container t :variants (list
x64-instruction-variant-PEXTRD-rm32.xmmreg.imm)))

(defparameter x64-instruction-container-PEXTRQ (make-instance 'x86-asm-instruction :name "PEXTRQ" :is-container t :variants (list
x64-instruction-variant-PEXTRQ-rm64.xmmreg.imm)))

(defparameter x64-instruction-container-PEXTRW (make-instance 'x86-asm-instruction :name "PEXTRW" :is-container t :variants (list
x64-instruction-variant-PEXTRW-reg32.xmmreg.imm x64-instruction-variant-PEXTRW-mem16.xmmreg.imm x64-instruction-variant-PEXTRW-reg64.xmmreg.imm)))

(defparameter x64-instruction-container-PHMINPOSUW (make-instance 'x86-asm-instruction :name "PHMINPOSUW" :is-container t :variants (list
x64-instruction-variant-PHMINPOSUW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PINSRB (make-instance 'x86-asm-instruction :name "PINSRB" :is-container t :variants (list
x64-instruction-variant-PINSRB-xmmreg.mem.imm x64-instruction-variant-PINSRB-xmmreg.rm8.imm x64-instruction-variant-PINSRB-xmmreg.reg32.imm)))

(defparameter x64-instruction-container-PINSRD (make-instance 'x86-asm-instruction :name "PINSRD" :is-container t :variants (list
x64-instruction-variant-PINSRD-xmmreg.mem.imm x64-instruction-variant-PINSRD-xmmreg.rm32.imm)))

(defparameter x64-instruction-container-PINSRQ (make-instance 'x86-asm-instruction :name "PINSRQ" :is-container t :variants (list
x64-instruction-variant-PINSRQ-xmmreg.mem.imm x64-instruction-variant-PINSRQ-xmmreg.rm64.imm)))

(defparameter x64-instruction-container-PMAXSB (make-instance 'x86-asm-instruction :name "PMAXSB" :is-container t :variants (list
x64-instruction-variant-PMAXSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMAXSD (make-instance 'x86-asm-instruction :name "PMAXSD" :is-container t :variants (list
x64-instruction-variant-PMAXSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMAXUD (make-instance 'x86-asm-instruction :name "PMAXUD" :is-container t :variants (list
x64-instruction-variant-PMAXUD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMAXUW (make-instance 'x86-asm-instruction :name "PMAXUW" :is-container t :variants (list
x64-instruction-variant-PMAXUW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINSB (make-instance 'x86-asm-instruction :name "PMINSB" :is-container t :variants (list
x64-instruction-variant-PMINSB-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINSD (make-instance 'x86-asm-instruction :name "PMINSD" :is-container t :variants (list
x64-instruction-variant-PMINSD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINUD (make-instance 'x86-asm-instruction :name "PMINUD" :is-container t :variants (list
x64-instruction-variant-PMINUD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMINUW (make-instance 'x86-asm-instruction :name "PMINUW" :is-container t :variants (list
x64-instruction-variant-PMINUW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXBW (make-instance 'x86-asm-instruction :name "PMOVSXBW" :is-container t :variants (list
x64-instruction-variant-PMOVSXBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXBD (make-instance 'x86-asm-instruction :name "PMOVSXBD" :is-container t :variants (list
x64-instruction-variant-PMOVSXBD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXBQ (make-instance 'x86-asm-instruction :name "PMOVSXBQ" :is-container t :variants (list
x64-instruction-variant-PMOVSXBQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXWD (make-instance 'x86-asm-instruction :name "PMOVSXWD" :is-container t :variants (list
x64-instruction-variant-PMOVSXWD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXWQ (make-instance 'x86-asm-instruction :name "PMOVSXWQ" :is-container t :variants (list
x64-instruction-variant-PMOVSXWQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVSXDQ (make-instance 'x86-asm-instruction :name "PMOVSXDQ" :is-container t :variants (list
x64-instruction-variant-PMOVSXDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXBW (make-instance 'x86-asm-instruction :name "PMOVZXBW" :is-container t :variants (list
x64-instruction-variant-PMOVZXBW-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXBD (make-instance 'x86-asm-instruction :name "PMOVZXBD" :is-container t :variants (list
x64-instruction-variant-PMOVZXBD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXBQ (make-instance 'x86-asm-instruction :name "PMOVZXBQ" :is-container t :variants (list
x64-instruction-variant-PMOVZXBQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXWD (make-instance 'x86-asm-instruction :name "PMOVZXWD" :is-container t :variants (list
x64-instruction-variant-PMOVZXWD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXWQ (make-instance 'x86-asm-instruction :name "PMOVZXWQ" :is-container t :variants (list
x64-instruction-variant-PMOVZXWQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMOVZXDQ (make-instance 'x86-asm-instruction :name "PMOVZXDQ" :is-container t :variants (list
x64-instruction-variant-PMOVZXDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULDQ (make-instance 'x86-asm-instruction :name "PMULDQ" :is-container t :variants (list
x64-instruction-variant-PMULDQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PMULLD (make-instance 'x86-asm-instruction :name "PMULLD" :is-container t :variants (list
x64-instruction-variant-PMULLD-xmmreg.xmmrm)))

(defparameter x64-instruction-container-PTEST (make-instance 'x86-asm-instruction :name "PTEST" :is-container t :variants (list
x64-instruction-variant-PTEST-xmmreg.xmmrm)))

(defparameter x64-instruction-container-ROUNDPD (make-instance 'x86-asm-instruction :name "ROUNDPD" :is-container t :variants (list
x64-instruction-variant-ROUNDPD-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-ROUNDPS (make-instance 'x86-asm-instruction :name "ROUNDPS" :is-container t :variants (list
x64-instruction-variant-ROUNDPS-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-ROUNDSD (make-instance 'x86-asm-instruction :name "ROUNDSD" :is-container t :variants (list
x64-instruction-variant-ROUNDSD-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-ROUNDSS (make-instance 'x86-asm-instruction :name "ROUNDSS" :is-container t :variants (list
x64-instruction-variant-ROUNDSS-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-CRC32 (make-instance 'x86-asm-instruction :name "CRC32" :is-container t :variants (list
x64-instruction-variant-CRC32-reg32.rm8 x64-instruction-variant-CRC32-reg32.rm16 x64-instruction-variant-CRC32-reg32.rm32 x64-instruction-variant-CRC32-reg64.rm8 x64-instruction-variant-CRC32-reg64.rm64)))

(defparameter x64-instruction-container-PCMPESTRI (make-instance 'x86-asm-instruction :name "PCMPESTRI" :is-container t :variants (list
x64-instruction-variant-PCMPESTRI-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PCMPESTRM (make-instance 'x86-asm-instruction :name "PCMPESTRM" :is-container t :variants (list
x64-instruction-variant-PCMPESTRM-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PCMPISTRI (make-instance 'x86-asm-instruction :name "PCMPISTRI" :is-container t :variants (list
x64-instruction-variant-PCMPISTRI-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PCMPISTRM (make-instance 'x86-asm-instruction :name "PCMPISTRM" :is-container t :variants (list
x64-instruction-variant-PCMPISTRM-xmmreg.xmmrm.imm)))

(defparameter x64-instruction-container-PCMPGTQ (make-instance 'x86-asm-instruction :name "PCMPGTQ" :is-container t :variants (list
x64-instruction-variant-PCMPGTQ-xmmreg.xmmrm)))

(defparameter x64-instruction-container-POPCNT (make-instance 'x86-asm-instruction :name "POPCNT" :is-container t :variants (list
x64-instruction-variant-POPCNT-reg16.rm16 x64-instruction-variant-POPCNT-reg32.rm32 x64-instruction-variant-POPCNT-reg64.rm64)))

(defparameter x64-instruction-container-GETSEC (make-instance 'x86-asm-instruction :name "GETSEC" :is-container t :variants (list
x64-instruction-variant-GETSEC-void)))

(defparameter x64-instruction-container-PFRCPV (make-instance 'x86-asm-instruction :name "PFRCPV" :is-container t :variants (list
x64-instruction-variant-PFRCPV-mmxreg.mmxrm)))

(defparameter x64-instruction-container-PFRSQRTV (make-instance 'x86-asm-instruction :name "PFRSQRTV" :is-container t :variants (list
x64-instruction-variant-PFRSQRTV-mmxreg.mmxrm)))

(defparameter x64-instruction-container-MOVBE (make-instance 'x86-asm-instruction :name "MOVBE" :is-container t :variants (list
x64-instruction-variant-MOVBE-reg16.mem16 x64-instruction-variant-MOVBE-reg32.mem32 x64-instruction-variant-MOVBE-reg64.mem64 x64-instruction-variant-MOVBE-mem16.reg16 x64-instruction-variant-MOVBE-mem32.reg32 x64-instruction-variant-MOVBE-mem64.reg64)))

(defparameter x64-instruction-container-AESENC (make-instance 'x86-asm-instruction :name "AESENC" :is-container t :variants (list
x64-instruction-variant-AESENC-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-AESENCLAST (make-instance 'x86-asm-instruction :name "AESENCLAST" :is-container t :variants (list
x64-instruction-variant-AESENCLAST-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-AESDEC (make-instance 'x86-asm-instruction :name "AESDEC" :is-container t :variants (list
x64-instruction-variant-AESDEC-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-AESDECLAST (make-instance 'x86-asm-instruction :name "AESDECLAST" :is-container t :variants (list
x64-instruction-variant-AESDECLAST-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-AESIMC (make-instance 'x86-asm-instruction :name "AESIMC" :is-container t :variants (list
x64-instruction-variant-AESIMC-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-AESKEYGENASSIST (make-instance 'x86-asm-instruction :name "AESKEYGENASSIST" :is-container t :variants (list
x64-instruction-variant-AESKEYGENASSIST-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VAESENC (make-instance 'x86-asm-instruction :name "VAESENC" :is-container t :variants (list
x64-instruction-variant-VAESENC-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VAESENCLAST (make-instance 'x86-asm-instruction :name "VAESENCLAST" :is-container t :variants (list
x64-instruction-variant-VAESENCLAST-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VAESDEC (make-instance 'x86-asm-instruction :name "VAESDEC" :is-container t :variants (list
x64-instruction-variant-VAESDEC-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VAESDECLAST (make-instance 'x86-asm-instruction :name "VAESDECLAST" :is-container t :variants (list
x64-instruction-variant-VAESDECLAST-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VAESIMC (make-instance 'x86-asm-instruction :name "VAESIMC" :is-container t :variants (list
x64-instruction-variant-VAESIMC-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-VAESKEYGENASSIST (make-instance 'x86-asm-instruction :name "VAESKEYGENASSIST" :is-container t :variants (list
x64-instruction-variant-VAESKEYGENASSIST-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VADDPD (make-instance 'x86-asm-instruction :name "VADDPD" :is-container t :variants (list
x64-instruction-variant-VADDPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VADDPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VADDPS (make-instance 'x86-asm-instruction :name "VADDPS" :is-container t :variants (list
x64-instruction-variant-VADDPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VADDPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VADDSD (make-instance 'x86-asm-instruction :name "VADDSD" :is-container t :variants (list
x64-instruction-variant-VADDSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VADDSS (make-instance 'x86-asm-instruction :name "VADDSS" :is-container t :variants (list
x64-instruction-variant-VADDSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VADDSUBPD (make-instance 'x86-asm-instruction :name "VADDSUBPD" :is-container t :variants (list
x64-instruction-variant-VADDSUBPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VADDSUBPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VADDSUBPS (make-instance 'x86-asm-instruction :name "VADDSUBPS" :is-container t :variants (list
x64-instruction-variant-VADDSUBPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VADDSUBPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VANDPD (make-instance 'x86-asm-instruction :name "VANDPD" :is-container t :variants (list
x64-instruction-variant-VANDPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VANDPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VANDPS (make-instance 'x86-asm-instruction :name "VANDPS" :is-container t :variants (list
x64-instruction-variant-VANDPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VANDPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VANDNPD (make-instance 'x86-asm-instruction :name "VANDNPD" :is-container t :variants (list
x64-instruction-variant-VANDNPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VANDNPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VANDNPS (make-instance 'x86-asm-instruction :name "VANDNPS" :is-container t :variants (list
x64-instruction-variant-VANDNPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VANDNPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VBLENDPD (make-instance 'x86-asm-instruction :name "VBLENDPD" :is-container t :variants (list
x64-instruction-variant-VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VBLENDPS (make-instance 'x86-asm-instruction :name "VBLENDPS" :is-container t :variants (list
x64-instruction-variant-VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VBLENDVPD (make-instance 'x86-asm-instruction :name "VBLENDVPD" :is-container t :variants (list
x64-instruction-variant-VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VBLENDVPS (make-instance 'x86-asm-instruction :name "VBLENDVPS" :is-container t :variants (list
x64-instruction-variant-VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VBROADCASTSS (make-instance 'x86-asm-instruction :name "VBROADCASTSS" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSS-xmmreg.mem32 x64-instruction-variant-VBROADCASTSS-ymmreg.mem32)))

(defparameter x64-instruction-container-VBROADCASTSD (make-instance 'x86-asm-instruction :name "VBROADCASTSD" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSD-ymmreg.mem64)))

(defparameter x64-instruction-container-VBROADCASTF128 (make-instance 'x86-asm-instruction :name "VBROADCASTF128" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF128-ymmreg.mem128)))

(defparameter x64-instruction-container-VCMPEQ_OSPD (make-instance 'x86-asm-instruction :name "VCMPEQ_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQPD (make-instance 'x86-asm-instruction :name "VCMPEQPD" :is-container t :variants (list
x64-instruction-variant-VCMPEQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLT_OSPD (make-instance 'x86-asm-instruction :name "VCMPLT_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLTPD (make-instance 'x86-asm-instruction :name "VCMPLTPD" :is-container t :variants (list
x64-instruction-variant-VCMPLTPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLTPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLE_OSPD (make-instance 'x86-asm-instruction :name "VCMPLE_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLEPD (make-instance 'x86-asm-instruction :name "VCMPLEPD" :is-container t :variants (list
x64-instruction-variant-VCMPLEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORD_QPD (make-instance 'x86-asm-instruction :name "VCMPUNORD_QPD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORDPD (make-instance 'x86-asm-instruction :name "VCMPUNORDPD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_UQPD (make-instance 'x86-asm-instruction :name "VCMPNEQ_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQPD (make-instance 'x86-asm-instruction :name "VCMPNEQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLT_USPD (make-instance 'x86-asm-instruction :name "VCMPNLT_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLTPD (make-instance 'x86-asm-instruction :name "VCMPNLTPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLTPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLTPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLE_USPD (make-instance 'x86-asm-instruction :name "VCMPNLE_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLEPD (make-instance 'x86-asm-instruction :name "VCMPNLEPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORD_QPD (make-instance 'x86-asm-instruction :name "VCMPORD_QPD" :is-container t :variants (list
x64-instruction-variant-VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORDPD (make-instance 'x86-asm-instruction :name "VCMPORDPD" :is-container t :variants (list
x64-instruction-variant-VCMPORDPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORDPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_UQPD (make-instance 'x86-asm-instruction :name "VCMPEQ_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGE_USPD (make-instance 'x86-asm-instruction :name "VCMPNGE_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGEPD (make-instance 'x86-asm-instruction :name "VCMPNGEPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGT_USPD (make-instance 'x86-asm-instruction :name "VCMPNGT_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGTPD (make-instance 'x86-asm-instruction :name "VCMPNGTPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGTPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGTPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSE_OQPD (make-instance 'x86-asm-instruction :name "VCMPFALSE_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSEPD (make-instance 'x86-asm-instruction :name "VCMPFALSEPD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_OQPD (make-instance 'x86-asm-instruction :name "VCMPNEQ_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGE_OSPD (make-instance 'x86-asm-instruction :name "VCMPGE_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGEPD (make-instance 'x86-asm-instruction :name "VCMPGEPD" :is-container t :variants (list
x64-instruction-variant-VCMPGEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGT_OSPD (make-instance 'x86-asm-instruction :name "VCMPGT_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGTPD (make-instance 'x86-asm-instruction :name "VCMPGTPD" :is-container t :variants (list
x64-instruction-variant-VCMPGTPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGTPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUE_UQPD (make-instance 'x86-asm-instruction :name "VCMPTRUE_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUEPD (make-instance 'x86-asm-instruction :name "VCMPTRUEPD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_OSPD (make-instance 'x86-asm-instruction :name "VCMPEQ_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLT_OQPD (make-instance 'x86-asm-instruction :name "VCMPLT_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLE_OQPD (make-instance 'x86-asm-instruction :name "VCMPLE_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORD_SPD (make-instance 'x86-asm-instruction :name "VCMPUNORD_SPD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_USPD (make-instance 'x86-asm-instruction :name "VCMPNEQ_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLT_UQPD (make-instance 'x86-asm-instruction :name "VCMPNLT_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLE_UQPD (make-instance 'x86-asm-instruction :name "VCMPNLE_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORD_SPD (make-instance 'x86-asm-instruction :name "VCMPORD_SPD" :is-container t :variants (list
x64-instruction-variant-VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_USPD (make-instance 'x86-asm-instruction :name "VCMPEQ_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGE_UQPD (make-instance 'x86-asm-instruction :name "VCMPNGE_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGT_UQPD (make-instance 'x86-asm-instruction :name "VCMPNGT_UQPD" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSE_OSPD (make-instance 'x86-asm-instruction :name "VCMPFALSE_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_OSPD (make-instance 'x86-asm-instruction :name "VCMPNEQ_OSPD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGE_OQPD (make-instance 'x86-asm-instruction :name "VCMPGE_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGT_OQPD (make-instance 'x86-asm-instruction :name "VCMPGT_OQPD" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUE_USPD (make-instance 'x86-asm-instruction :name "VCMPTRUE_USPD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPPD (make-instance 'x86-asm-instruction :name "VCMPPD" :is-container t :variants (list
x64-instruction-variant-VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VCMPEQ_OSPS (make-instance 'x86-asm-instruction :name "VCMPEQ_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQPS (make-instance 'x86-asm-instruction :name "VCMPEQPS" :is-container t :variants (list
x64-instruction-variant-VCMPEQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLT_OSPS (make-instance 'x86-asm-instruction :name "VCMPLT_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLTPS (make-instance 'x86-asm-instruction :name "VCMPLTPS" :is-container t :variants (list
x64-instruction-variant-VCMPLTPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLTPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLE_OSPS (make-instance 'x86-asm-instruction :name "VCMPLE_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLEPS (make-instance 'x86-asm-instruction :name "VCMPLEPS" :is-container t :variants (list
x64-instruction-variant-VCMPLEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORD_QPS (make-instance 'x86-asm-instruction :name "VCMPUNORD_QPS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORDPS (make-instance 'x86-asm-instruction :name "VCMPUNORDPS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_UQPS (make-instance 'x86-asm-instruction :name "VCMPNEQ_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQPS (make-instance 'x86-asm-instruction :name "VCMPNEQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLT_USPS (make-instance 'x86-asm-instruction :name "VCMPNLT_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLTPS (make-instance 'x86-asm-instruction :name "VCMPNLTPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLTPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLTPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLE_USPS (make-instance 'x86-asm-instruction :name "VCMPNLE_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLEPS (make-instance 'x86-asm-instruction :name "VCMPNLEPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORD_QPS (make-instance 'x86-asm-instruction :name "VCMPORD_QPS" :is-container t :variants (list
x64-instruction-variant-VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORDPS (make-instance 'x86-asm-instruction :name "VCMPORDPS" :is-container t :variants (list
x64-instruction-variant-VCMPORDPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORDPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_UQPS (make-instance 'x86-asm-instruction :name "VCMPEQ_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGE_USPS (make-instance 'x86-asm-instruction :name "VCMPNGE_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGEPS (make-instance 'x86-asm-instruction :name "VCMPNGEPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGT_USPS (make-instance 'x86-asm-instruction :name "VCMPNGT_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGTPS (make-instance 'x86-asm-instruction :name "VCMPNGTPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGTPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGTPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSE_OQPS (make-instance 'x86-asm-instruction :name "VCMPFALSE_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSEPS (make-instance 'x86-asm-instruction :name "VCMPFALSEPS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_OQPS (make-instance 'x86-asm-instruction :name "VCMPNEQ_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGE_OSPS (make-instance 'x86-asm-instruction :name "VCMPGE_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGEPS (make-instance 'x86-asm-instruction :name "VCMPGEPS" :is-container t :variants (list
x64-instruction-variant-VCMPGEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGT_OSPS (make-instance 'x86-asm-instruction :name "VCMPGT_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGTPS (make-instance 'x86-asm-instruction :name "VCMPGTPS" :is-container t :variants (list
x64-instruction-variant-VCMPGTPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGTPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUE_UQPS (make-instance 'x86-asm-instruction :name "VCMPTRUE_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUEPS (make-instance 'x86-asm-instruction :name "VCMPTRUEPS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_OSPS (make-instance 'x86-asm-instruction :name "VCMPEQ_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLT_OQPS (make-instance 'x86-asm-instruction :name "VCMPLT_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPLE_OQPS (make-instance 'x86-asm-instruction :name "VCMPLE_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPUNORD_SPS (make-instance 'x86-asm-instruction :name "VCMPUNORD_SPS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_USPS (make-instance 'x86-asm-instruction :name "VCMPNEQ_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLT_UQPS (make-instance 'x86-asm-instruction :name "VCMPNLT_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNLE_UQPS (make-instance 'x86-asm-instruction :name "VCMPNLE_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPORD_SPS (make-instance 'x86-asm-instruction :name "VCMPORD_SPS" :is-container t :variants (list
x64-instruction-variant-VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPEQ_USPS (make-instance 'x86-asm-instruction :name "VCMPEQ_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGE_UQPS (make-instance 'x86-asm-instruction :name "VCMPNGE_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNGT_UQPS (make-instance 'x86-asm-instruction :name "VCMPNGT_UQPS" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPFALSE_OSPS (make-instance 'x86-asm-instruction :name "VCMPFALSE_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPNEQ_OSPS (make-instance 'x86-asm-instruction :name "VCMPNEQ_OSPS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGE_OQPS (make-instance 'x86-asm-instruction :name "VCMPGE_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPGT_OQPS (make-instance 'x86-asm-instruction :name "VCMPGT_OQPS" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPTRUE_USPS (make-instance 'x86-asm-instruction :name "VCMPTRUE_USPS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VCMPPS (make-instance 'x86-asm-instruction :name "VCMPPS" :is-container t :variants (list
x64-instruction-variant-VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VCMPEQ_OSSD (make-instance 'x86-asm-instruction :name "VCMPEQ_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQSD (make-instance 'x86-asm-instruction :name "VCMPEQSD" :is-container t :variants (list
x64-instruction-variant-VCMPEQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLT_OSSD (make-instance 'x86-asm-instruction :name "VCMPLT_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLTSD (make-instance 'x86-asm-instruction :name "VCMPLTSD" :is-container t :variants (list
x64-instruction-variant-VCMPLTSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLE_OSSD (make-instance 'x86-asm-instruction :name "VCMPLE_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLESD (make-instance 'x86-asm-instruction :name "VCMPLESD" :is-container t :variants (list
x64-instruction-variant-VCMPLESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORD_QSD (make-instance 'x86-asm-instruction :name "VCMPUNORD_QSD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORDSD (make-instance 'x86-asm-instruction :name "VCMPUNORDSD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_UQSD (make-instance 'x86-asm-instruction :name "VCMPNEQ_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQSD (make-instance 'x86-asm-instruction :name "VCMPNEQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLT_USSD (make-instance 'x86-asm-instruction :name "VCMPNLT_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLTSD (make-instance 'x86-asm-instruction :name "VCMPNLTSD" :is-container t :variants (list
x64-instruction-variant-VCMPNLTSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLE_USSD (make-instance 'x86-asm-instruction :name "VCMPNLE_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLESD (make-instance 'x86-asm-instruction :name "VCMPNLESD" :is-container t :variants (list
x64-instruction-variant-VCMPNLESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORD_QSD (make-instance 'x86-asm-instruction :name "VCMPORD_QSD" :is-container t :variants (list
x64-instruction-variant-VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORDSD (make-instance 'x86-asm-instruction :name "VCMPORDSD" :is-container t :variants (list
x64-instruction-variant-VCMPORDSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_UQSD (make-instance 'x86-asm-instruction :name "VCMPEQ_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGE_USSD (make-instance 'x86-asm-instruction :name "VCMPNGE_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGESD (make-instance 'x86-asm-instruction :name "VCMPNGESD" :is-container t :variants (list
x64-instruction-variant-VCMPNGESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGT_USSD (make-instance 'x86-asm-instruction :name "VCMPNGT_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGTSD (make-instance 'x86-asm-instruction :name "VCMPNGTSD" :is-container t :variants (list
x64-instruction-variant-VCMPNGTSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSE_OQSD (make-instance 'x86-asm-instruction :name "VCMPFALSE_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSESD (make-instance 'x86-asm-instruction :name "VCMPFALSESD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_OQSD (make-instance 'x86-asm-instruction :name "VCMPNEQ_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGE_OSSD (make-instance 'x86-asm-instruction :name "VCMPGE_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGESD (make-instance 'x86-asm-instruction :name "VCMPGESD" :is-container t :variants (list
x64-instruction-variant-VCMPGESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGT_OSSD (make-instance 'x86-asm-instruction :name "VCMPGT_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGTSD (make-instance 'x86-asm-instruction :name "VCMPGTSD" :is-container t :variants (list
x64-instruction-variant-VCMPGTSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUE_UQSD (make-instance 'x86-asm-instruction :name "VCMPTRUE_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUESD (make-instance 'x86-asm-instruction :name "VCMPTRUESD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUESD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_OSSD (make-instance 'x86-asm-instruction :name "VCMPEQ_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLT_OQSD (make-instance 'x86-asm-instruction :name "VCMPLT_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLE_OQSD (make-instance 'x86-asm-instruction :name "VCMPLE_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORD_SSD (make-instance 'x86-asm-instruction :name "VCMPUNORD_SSD" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_USSD (make-instance 'x86-asm-instruction :name "VCMPNEQ_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLT_UQSD (make-instance 'x86-asm-instruction :name "VCMPNLT_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLE_UQSD (make-instance 'x86-asm-instruction :name "VCMPNLE_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORD_SSD (make-instance 'x86-asm-instruction :name "VCMPORD_SSD" :is-container t :variants (list
x64-instruction-variant-VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_USSD (make-instance 'x86-asm-instruction :name "VCMPEQ_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGE_UQSD (make-instance 'x86-asm-instruction :name "VCMPNGE_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGT_UQSD (make-instance 'x86-asm-instruction :name "VCMPNGT_UQSD" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSE_OSSD (make-instance 'x86-asm-instruction :name "VCMPFALSE_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_OSSD (make-instance 'x86-asm-instruction :name "VCMPNEQ_OSSD" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGE_OQSD (make-instance 'x86-asm-instruction :name "VCMPGE_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGT_OQSD (make-instance 'x86-asm-instruction :name "VCMPGT_OQSD" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUE_USSD (make-instance 'x86-asm-instruction :name "VCMPTRUE_USSD" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPSD (make-instance 'x86-asm-instruction :name "VCMPSD" :is-container t :variants (list
x64-instruction-variant-VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8)))

(defparameter x64-instruction-container-VCMPEQ_OSSS (make-instance 'x86-asm-instruction :name "VCMPEQ_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQSS (make-instance 'x86-asm-instruction :name "VCMPEQSS" :is-container t :variants (list
x64-instruction-variant-VCMPEQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLT_OSSS (make-instance 'x86-asm-instruction :name "VCMPLT_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLTSS (make-instance 'x86-asm-instruction :name "VCMPLTSS" :is-container t :variants (list
x64-instruction-variant-VCMPLTSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLE_OSSS (make-instance 'x86-asm-instruction :name "VCMPLE_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLESS (make-instance 'x86-asm-instruction :name "VCMPLESS" :is-container t :variants (list
x64-instruction-variant-VCMPLESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORD_QSS (make-instance 'x86-asm-instruction :name "VCMPUNORD_QSS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORDSS (make-instance 'x86-asm-instruction :name "VCMPUNORDSS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_UQSS (make-instance 'x86-asm-instruction :name "VCMPNEQ_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQSS (make-instance 'x86-asm-instruction :name "VCMPNEQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLT_USSS (make-instance 'x86-asm-instruction :name "VCMPNLT_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLTSS (make-instance 'x86-asm-instruction :name "VCMPNLTSS" :is-container t :variants (list
x64-instruction-variant-VCMPNLTSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLE_USSS (make-instance 'x86-asm-instruction :name "VCMPNLE_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLESS (make-instance 'x86-asm-instruction :name "VCMPNLESS" :is-container t :variants (list
x64-instruction-variant-VCMPNLESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORD_QSS (make-instance 'x86-asm-instruction :name "VCMPORD_QSS" :is-container t :variants (list
x64-instruction-variant-VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORDSS (make-instance 'x86-asm-instruction :name "VCMPORDSS" :is-container t :variants (list
x64-instruction-variant-VCMPORDSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_UQSS (make-instance 'x86-asm-instruction :name "VCMPEQ_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGE_USSS (make-instance 'x86-asm-instruction :name "VCMPNGE_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGESS (make-instance 'x86-asm-instruction :name "VCMPNGESS" :is-container t :variants (list
x64-instruction-variant-VCMPNGESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGT_USSS (make-instance 'x86-asm-instruction :name "VCMPNGT_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGTSS (make-instance 'x86-asm-instruction :name "VCMPNGTSS" :is-container t :variants (list
x64-instruction-variant-VCMPNGTSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSE_OQSS (make-instance 'x86-asm-instruction :name "VCMPFALSE_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSESS (make-instance 'x86-asm-instruction :name "VCMPFALSESS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_OQSS (make-instance 'x86-asm-instruction :name "VCMPNEQ_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGE_OSSS (make-instance 'x86-asm-instruction :name "VCMPGE_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGESS (make-instance 'x86-asm-instruction :name "VCMPGESS" :is-container t :variants (list
x64-instruction-variant-VCMPGESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGT_OSSS (make-instance 'x86-asm-instruction :name "VCMPGT_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGTSS (make-instance 'x86-asm-instruction :name "VCMPGTSS" :is-container t :variants (list
x64-instruction-variant-VCMPGTSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUE_UQSS (make-instance 'x86-asm-instruction :name "VCMPTRUE_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUESS (make-instance 'x86-asm-instruction :name "VCMPTRUESS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUESS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_OSSS (make-instance 'x86-asm-instruction :name "VCMPEQ_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLT_OQSS (make-instance 'x86-asm-instruction :name "VCMPLT_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPLE_OQSS (make-instance 'x86-asm-instruction :name "VCMPLE_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPUNORD_SSS (make-instance 'x86-asm-instruction :name "VCMPUNORD_SSS" :is-container t :variants (list
x64-instruction-variant-VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_USSS (make-instance 'x86-asm-instruction :name "VCMPNEQ_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLT_UQSS (make-instance 'x86-asm-instruction :name "VCMPNLT_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNLE_UQSS (make-instance 'x86-asm-instruction :name "VCMPNLE_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPORD_SSS (make-instance 'x86-asm-instruction :name "VCMPORD_SSS" :is-container t :variants (list
x64-instruction-variant-VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPEQ_USSS (make-instance 'x86-asm-instruction :name "VCMPEQ_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGE_UQSS (make-instance 'x86-asm-instruction :name "VCMPNGE_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNGT_UQSS (make-instance 'x86-asm-instruction :name "VCMPNGT_UQSS" :is-container t :variants (list
x64-instruction-variant-VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPFALSE_OSSS (make-instance 'x86-asm-instruction :name "VCMPFALSE_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPNEQ_OSSS (make-instance 'x86-asm-instruction :name "VCMPNEQ_OSSS" :is-container t :variants (list
x64-instruction-variant-VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGE_OQSS (make-instance 'x86-asm-instruction :name "VCMPGE_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPGT_OQSS (make-instance 'x86-asm-instruction :name "VCMPGT_OQSS" :is-container t :variants (list
x64-instruction-variant-VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPTRUE_USSS (make-instance 'x86-asm-instruction :name "VCMPTRUE_USSS" :is-container t :variants (list
x64-instruction-variant-VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCMPSS (make-instance 'x86-asm-instruction :name "VCMPSS" :is-container t :variants (list
x64-instruction-variant-VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8)))

(defparameter x64-instruction-container-VCOMISD (make-instance 'x86-asm-instruction :name "VCOMISD" :is-container t :variants (list
x64-instruction-variant-VCOMISD-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VCOMISS (make-instance 'x86-asm-instruction :name "VCOMISS" :is-container t :variants (list
x64-instruction-variant-VCOMISS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VCVTDQ2PD (make-instance 'x86-asm-instruction :name "VCVTDQ2PD" :is-container t :variants (list
x64-instruction-variant-VCVTDQ2PD-xmmreg.xmmrm64 x64-instruction-variant-VCVTDQ2PD-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VCVTDQ2PS (make-instance 'x86-asm-instruction :name "VCVTDQ2PS" :is-container t :variants (list
x64-instruction-variant-VCVTDQ2PS-xmmreg.xmmrm128 x64-instruction-variant-VCVTDQ2PS-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VCVTPD2DQ (make-instance 'x86-asm-instruction :name "VCVTPD2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTPD2DQ-xmmreg.xmmreg x64-instruction-variant-VCVTPD2DQ-xmmreg.mem128 x64-instruction-variant-VCVTPD2DQ-xmmreg.ymmreg x64-instruction-variant-VCVTPD2DQ-xmmreg.mem256)))

(defparameter x64-instruction-container-VCVTPD2PS (make-instance 'x86-asm-instruction :name "VCVTPD2PS" :is-container t :variants (list
x64-instruction-variant-VCVTPD2PS-xmmreg.xmmreg x64-instruction-variant-VCVTPD2PS-xmmreg.mem128 x64-instruction-variant-VCVTPD2PS-xmmreg.ymmreg x64-instruction-variant-VCVTPD2PS-xmmreg.mem256)))

(defparameter x64-instruction-container-VCVTPS2DQ (make-instance 'x86-asm-instruction :name "VCVTPS2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTPS2DQ-xmmreg.xmmrm128 x64-instruction-variant-VCVTPS2DQ-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VCVTPS2PD (make-instance 'x86-asm-instruction :name "VCVTPS2PD" :is-container t :variants (list
x64-instruction-variant-VCVTPS2PD-xmmreg.xmmrm64 x64-instruction-variant-VCVTPS2PD-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VCVTSD2SI (make-instance 'x86-asm-instruction :name "VCVTSD2SI" :is-container t :variants (list
x64-instruction-variant-VCVTSD2SI-reg32.xmmrm64 x64-instruction-variant-VCVTSD2SI-reg64.xmmrm64)))

(defparameter x64-instruction-container-VCVTSD2SS (make-instance 'x86-asm-instruction :name "VCVTSD2SS" :is-container t :variants (list
x64-instruction-variant-VCVTSD2SS-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VCVTSI2SD (make-instance 'x86-asm-instruction :name "VCVTSI2SD" :is-container t :variants (list
x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.rm32 x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.mem32 x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg*.rm64)))

(defparameter x64-instruction-container-VCVTSI2SS (make-instance 'x86-asm-instruction :name "VCVTSI2SS" :is-container t :variants (list
x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.rm32 x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.mem32 x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg*.rm64)))

(defparameter x64-instruction-container-VCVTSS2SD (make-instance 'x86-asm-instruction :name "VCVTSS2SD" :is-container t :variants (list
x64-instruction-variant-VCVTSS2SD-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VCVTSS2SI (make-instance 'x86-asm-instruction :name "VCVTSS2SI" :is-container t :variants (list
x64-instruction-variant-VCVTSS2SI-reg32.xmmrm32 x64-instruction-variant-VCVTSS2SI-reg64.xmmrm32)))

(defparameter x64-instruction-container-VCVTTPD2DQ (make-instance 'x86-asm-instruction :name "VCVTTPD2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPD2DQ-xmmreg.xmmreg x64-instruction-variant-VCVTTPD2DQ-xmmreg.mem128 x64-instruction-variant-VCVTTPD2DQ-xmmreg.ymmreg x64-instruction-variant-VCVTTPD2DQ-xmmreg.mem256)))

(defparameter x64-instruction-container-VCVTTPS2DQ (make-instance 'x86-asm-instruction :name "VCVTTPS2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPS2DQ-xmmreg.xmmrm128 x64-instruction-variant-VCVTTPS2DQ-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VCVTTSD2SI (make-instance 'x86-asm-instruction :name "VCVTTSD2SI" :is-container t :variants (list
x64-instruction-variant-VCVTTSD2SI-reg32.xmmrm64 x64-instruction-variant-VCVTTSD2SI-reg64.xmmrm64)))

(defparameter x64-instruction-container-VCVTTSS2SI (make-instance 'x86-asm-instruction :name "VCVTTSS2SI" :is-container t :variants (list
x64-instruction-variant-VCVTTSS2SI-reg32.xmmrm32 x64-instruction-variant-VCVTTSS2SI-reg64.xmmrm32)))

(defparameter x64-instruction-container-VDIVPD (make-instance 'x86-asm-instruction :name "VDIVPD" :is-container t :variants (list
x64-instruction-variant-VDIVPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VDIVPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VDIVPS (make-instance 'x86-asm-instruction :name "VDIVPS" :is-container t :variants (list
x64-instruction-variant-VDIVPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VDIVPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VDIVSD (make-instance 'x86-asm-instruction :name "VDIVSD" :is-container t :variants (list
x64-instruction-variant-VDIVSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VDIVSS (make-instance 'x86-asm-instruction :name "VDIVSS" :is-container t :variants (list
x64-instruction-variant-VDIVSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VDPPD (make-instance 'x86-asm-instruction :name "VDPPD" :is-container t :variants (list
x64-instruction-variant-VDPPD-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VDPPS (make-instance 'x86-asm-instruction :name "VDPPS" :is-container t :variants (list
x64-instruction-variant-VDPPS-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VDPPS-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VEXTRACTF128 (make-instance 'x86-asm-instruction :name "VEXTRACTF128" :is-container t :variants (list
x64-instruction-variant-VEXTRACTF128-xmmrm128.ymmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTPS (make-instance 'x86-asm-instruction :name "VEXTRACTPS" :is-container t :variants (list
x64-instruction-variant-VEXTRACTPS-rm32.xmmreg.imm8)))

(defparameter x64-instruction-container-VHADDPD (make-instance 'x86-asm-instruction :name "VHADDPD" :is-container t :variants (list
x64-instruction-variant-VHADDPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VHADDPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VHADDPS (make-instance 'x86-asm-instruction :name "VHADDPS" :is-container t :variants (list
x64-instruction-variant-VHADDPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VHADDPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VHSUBPD (make-instance 'x86-asm-instruction :name "VHSUBPD" :is-container t :variants (list
x64-instruction-variant-VHSUBPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VHSUBPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VHSUBPS (make-instance 'x86-asm-instruction :name "VHSUBPS" :is-container t :variants (list
x64-instruction-variant-VHSUBPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VHSUBPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VINSERTF128 (make-instance 'x86-asm-instruction :name "VINSERTF128" :is-container t :variants (list
x64-instruction-variant-VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VINSERTPS (make-instance 'x86-asm-instruction :name "VINSERTPS" :is-container t :variants (list
x64-instruction-variant-VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8)))

(defparameter x64-instruction-container-VLDDQU (make-instance 'x86-asm-instruction :name "VLDDQU" :is-container t :variants (list
x64-instruction-variant-VLDDQU-xmmreg.mem128)))

(defparameter x64-instruction-container-VLDQQU (make-instance 'x86-asm-instruction :name "VLDQQU" :is-container t :variants (list
x64-instruction-variant-VLDQQU-ymmreg.mem256)))

(defparameter x64-instruction-container-VLDDQU (make-instance 'x86-asm-instruction :name "VLDDQU" :is-container t :variants (list
x64-instruction-variant-VLDDQU-ymmreg.mem256)))

(defparameter x64-instruction-container-VLDMXCSR (make-instance 'x86-asm-instruction :name "VLDMXCSR" :is-container t :variants (list
x64-instruction-variant-VLDMXCSR-mem32)))

(defparameter x64-instruction-container-VMASKMOVDQU (make-instance 'x86-asm-instruction :name "VMASKMOVDQU" :is-container t :variants (list
x64-instruction-variant-VMASKMOVDQU-xmmreg.xmmreg)))

(defparameter x64-instruction-container-VMASKMOVPS (make-instance 'x86-asm-instruction :name "VMASKMOVPS" :is-container t :variants (list
x64-instruction-variant-VMASKMOVPS-xmmreg.xmmreg.mem128 x64-instruction-variant-VMASKMOVPS-ymmreg.ymmreg.mem256 x64-instruction-variant-VMASKMOVPS-mem128.xmmreg.xmmreg x64-instruction-variant-VMASKMOVPS-mem256.ymmreg.ymmreg)))

(defparameter x64-instruction-container-VMASKMOVPD (make-instance 'x86-asm-instruction :name "VMASKMOVPD" :is-container t :variants (list
x64-instruction-variant-VMASKMOVPD-xmmreg.xmmreg.mem128 x64-instruction-variant-VMASKMOVPD-ymmreg.ymmreg.mem256 x64-instruction-variant-VMASKMOVPD-mem128.xmmreg.xmmreg x64-instruction-variant-VMASKMOVPD-mem256.ymmreg.ymmreg)))

(defparameter x64-instruction-container-VMAXPD (make-instance 'x86-asm-instruction :name "VMAXPD" :is-container t :variants (list
x64-instruction-variant-VMAXPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMAXPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMAXPS (make-instance 'x86-asm-instruction :name "VMAXPS" :is-container t :variants (list
x64-instruction-variant-VMAXPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMAXPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMAXSD (make-instance 'x86-asm-instruction :name "VMAXSD" :is-container t :variants (list
x64-instruction-variant-VMAXSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VMAXSS (make-instance 'x86-asm-instruction :name "VMAXSS" :is-container t :variants (list
x64-instruction-variant-VMAXSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VMINPD (make-instance 'x86-asm-instruction :name "VMINPD" :is-container t :variants (list
x64-instruction-variant-VMINPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMINPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMINPS (make-instance 'x86-asm-instruction :name "VMINPS" :is-container t :variants (list
x64-instruction-variant-VMINPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMINPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMINSD (make-instance 'x86-asm-instruction :name "VMINSD" :is-container t :variants (list
x64-instruction-variant-VMINSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VMINSS (make-instance 'x86-asm-instruction :name "VMINSS" :is-container t :variants (list
x64-instruction-variant-VMINSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VMOVAPD (make-instance 'x86-asm-instruction :name "VMOVAPD" :is-container t :variants (list
x64-instruction-variant-VMOVAPD-xmmreg.xmmrm128 x64-instruction-variant-VMOVAPD-xmmrm128.xmmreg x64-instruction-variant-VMOVAPD-ymmreg.ymmrm256 x64-instruction-variant-VMOVAPD-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVAPS (make-instance 'x86-asm-instruction :name "VMOVAPS" :is-container t :variants (list
x64-instruction-variant-VMOVAPS-xmmreg.xmmrm128 x64-instruction-variant-VMOVAPS-xmmrm128.xmmreg x64-instruction-variant-VMOVAPS-ymmreg.ymmrm256 x64-instruction-variant-VMOVAPS-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVD (make-instance 'x86-asm-instruction :name "VMOVD" :is-container t :variants (list
x64-instruction-variant-VMOVD-xmmreg.rm32 x64-instruction-variant-VMOVD-rm32.xmmreg)))

(defparameter x64-instruction-container-VMOVQ (make-instance 'x86-asm-instruction :name "VMOVQ" :is-container t :variants (list
x64-instruction-variant-VMOVQ-xmmreg.xmmrm64 x64-instruction-variant-VMOVQ-xmmrm64.xmmreg x64-instruction-variant-VMOVQ-xmmreg.rm64 x64-instruction-variant-VMOVQ-rm64.xmmreg)))

(defparameter x64-instruction-container-VMOVDDUP (make-instance 'x86-asm-instruction :name "VMOVDDUP" :is-container t :variants (list
x64-instruction-variant-VMOVDDUP-xmmreg.xmmrm64 x64-instruction-variant-VMOVDDUP-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VMOVDQA (make-instance 'x86-asm-instruction :name "VMOVDQA" :is-container t :variants (list
x64-instruction-variant-VMOVDQA-xmmreg.xmmrm128 x64-instruction-variant-VMOVDQA-xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VMOVQQA (make-instance 'x86-asm-instruction :name "VMOVQQA" :is-container t :variants (list
x64-instruction-variant-VMOVQQA-ymmreg.ymmrm256 x64-instruction-variant-VMOVQQA-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVDQA (make-instance 'x86-asm-instruction :name "VMOVDQA" :is-container t :variants (list
x64-instruction-variant-VMOVDQA-ymmreg.ymmrm x64-instruction-variant-VMOVDQA-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVDQU (make-instance 'x86-asm-instruction :name "VMOVDQU" :is-container t :variants (list
x64-instruction-variant-VMOVDQU-xmmreg.xmmrm128 x64-instruction-variant-VMOVDQU-xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VMOVQQU (make-instance 'x86-asm-instruction :name "VMOVQQU" :is-container t :variants (list
x64-instruction-variant-VMOVQQU-ymmreg.ymmrm256 x64-instruction-variant-VMOVQQU-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVDQU (make-instance 'x86-asm-instruction :name "VMOVDQU" :is-container t :variants (list
x64-instruction-variant-VMOVDQU-ymmreg.ymmrm256 x64-instruction-variant-VMOVDQU-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVHLPS (make-instance 'x86-asm-instruction :name "VMOVHLPS" :is-container t :variants (list
x64-instruction-variant-VMOVHLPS-xmmreg.xmmreg*.xmmreg)))

(defparameter x64-instruction-container-VMOVHPD (make-instance 'x86-asm-instruction :name "VMOVHPD" :is-container t :variants (list
x64-instruction-variant-VMOVHPD-xmmreg.xmmreg*.mem64 x64-instruction-variant-VMOVHPD-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVHPS (make-instance 'x86-asm-instruction :name "VMOVHPS" :is-container t :variants (list
x64-instruction-variant-VMOVHPS-xmmreg.xmmreg*.mem64 x64-instruction-variant-VMOVHPS-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVLHPS (make-instance 'x86-asm-instruction :name "VMOVLHPS" :is-container t :variants (list
x64-instruction-variant-VMOVLHPS-xmmreg.xmmreg*.xmmreg)))

(defparameter x64-instruction-container-VMOVLPD (make-instance 'x86-asm-instruction :name "VMOVLPD" :is-container t :variants (list
x64-instruction-variant-VMOVLPD-xmmreg.xmmreg*.mem64 x64-instruction-variant-VMOVLPD-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVLPS (make-instance 'x86-asm-instruction :name "VMOVLPS" :is-container t :variants (list
x64-instruction-variant-VMOVLPS-xmmreg.xmmreg*.mem64 x64-instruction-variant-VMOVLPS-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVMSKPD (make-instance 'x86-asm-instruction :name "VMOVMSKPD" :is-container t :variants (list
x64-instruction-variant-VMOVMSKPD-reg64.xmmreg x64-instruction-variant-VMOVMSKPD-reg32.xmmreg x64-instruction-variant-VMOVMSKPD-reg64.ymmreg x64-instruction-variant-VMOVMSKPD-reg32.ymmreg)))

(defparameter x64-instruction-container-VMOVMSKPS (make-instance 'x86-asm-instruction :name "VMOVMSKPS" :is-container t :variants (list
x64-instruction-variant-VMOVMSKPS-reg64.xmmreg x64-instruction-variant-VMOVMSKPS-reg32.xmmreg x64-instruction-variant-VMOVMSKPS-reg64.ymmreg x64-instruction-variant-VMOVMSKPS-reg32.ymmreg)))

(defparameter x64-instruction-container-VMOVNTDQ (make-instance 'x86-asm-instruction :name "VMOVNTDQ" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQ-mem128.xmmreg)))

(defparameter x64-instruction-container-VMOVNTQQ (make-instance 'x86-asm-instruction :name "VMOVNTQQ" :is-container t :variants (list
x64-instruction-variant-VMOVNTQQ-mem256.ymmreg)))

(defparameter x64-instruction-container-VMOVNTDQ (make-instance 'x86-asm-instruction :name "VMOVNTDQ" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQ-mem256.ymmreg)))

(defparameter x64-instruction-container-VMOVNTDQA (make-instance 'x86-asm-instruction :name "VMOVNTDQA" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQA-xmmreg.mem128)))

(defparameter x64-instruction-container-VMOVNTPD (make-instance 'x86-asm-instruction :name "VMOVNTPD" :is-container t :variants (list
x64-instruction-variant-VMOVNTPD-mem128.xmmreg x64-instruction-variant-VMOVNTPD-mem256.ymmreg)))

(defparameter x64-instruction-container-VMOVNTPS (make-instance 'x86-asm-instruction :name "VMOVNTPS" :is-container t :variants (list
x64-instruction-variant-VMOVNTPS-mem128.xmmreg x64-instruction-variant-VMOVNTPS-mem128.ymmreg)))

(defparameter x64-instruction-container-VMOVSD (make-instance 'x86-asm-instruction :name "VMOVSD" :is-container t :variants (list
x64-instruction-variant-VMOVSD-xmmreg.xmmreg*.xmmreg x64-instruction-variant-VMOVSD-xmmreg.mem64 x64-instruction-variant-VMOVSD-xmmreg.xmmreg*.xmmreg x64-instruction-variant-VMOVSD-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVSHDUP (make-instance 'x86-asm-instruction :name "VMOVSHDUP" :is-container t :variants (list
x64-instruction-variant-VMOVSHDUP-xmmreg.xmmrm128 x64-instruction-variant-VMOVSHDUP-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VMOVSLDUP (make-instance 'x86-asm-instruction :name "VMOVSLDUP" :is-container t :variants (list
x64-instruction-variant-VMOVSLDUP-xmmreg.xmmrm128 x64-instruction-variant-VMOVSLDUP-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VMOVSS (make-instance 'x86-asm-instruction :name "VMOVSS" :is-container t :variants (list
x64-instruction-variant-VMOVSS-xmmreg.xmmreg*.xmmreg x64-instruction-variant-VMOVSS-xmmreg.mem32 x64-instruction-variant-VMOVSS-xmmreg.xmmreg*.xmmreg x64-instruction-variant-VMOVSS-mem32.xmmreg)))

(defparameter x64-instruction-container-VMOVUPD (make-instance 'x86-asm-instruction :name "VMOVUPD" :is-container t :variants (list
x64-instruction-variant-VMOVUPD-xmmreg.xmmrm128 x64-instruction-variant-VMOVUPD-xmmrm128.xmmreg x64-instruction-variant-VMOVUPD-ymmreg.ymmrm256 x64-instruction-variant-VMOVUPD-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMOVUPS (make-instance 'x86-asm-instruction :name "VMOVUPS" :is-container t :variants (list
x64-instruction-variant-VMOVUPS-xmmreg.xmmrm128 x64-instruction-variant-VMOVUPS-xmmrm128.xmmreg x64-instruction-variant-VMOVUPS-ymmreg.ymmrm256 x64-instruction-variant-VMOVUPS-ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VMPSADBW (make-instance 'x86-asm-instruction :name "VMPSADBW" :is-container t :variants (list
x64-instruction-variant-VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VMULPD (make-instance 'x86-asm-instruction :name "VMULPD" :is-container t :variants (list
x64-instruction-variant-VMULPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMULPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMULPS (make-instance 'x86-asm-instruction :name "VMULPS" :is-container t :variants (list
x64-instruction-variant-VMULPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VMULPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMULSD (make-instance 'x86-asm-instruction :name "VMULSD" :is-container t :variants (list
x64-instruction-variant-VMULSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VMULSS (make-instance 'x86-asm-instruction :name "VMULSS" :is-container t :variants (list
x64-instruction-variant-VMULSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VORPD (make-instance 'x86-asm-instruction :name "VORPD" :is-container t :variants (list
x64-instruction-variant-VORPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VORPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VORPS (make-instance 'x86-asm-instruction :name "VORPS" :is-container t :variants (list
x64-instruction-variant-VORPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VORPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPABSB (make-instance 'x86-asm-instruction :name "VPABSB" :is-container t :variants (list
x64-instruction-variant-VPABSB-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-VPABSW (make-instance 'x86-asm-instruction :name "VPABSW" :is-container t :variants (list
x64-instruction-variant-VPABSW-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-VPABSD (make-instance 'x86-asm-instruction :name "VPABSD" :is-container t :variants (list
x64-instruction-variant-VPABSD-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-VPACKSSWB (make-instance 'x86-asm-instruction :name "VPACKSSWB" :is-container t :variants (list
x64-instruction-variant-VPACKSSWB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPACKSSDW (make-instance 'x86-asm-instruction :name "VPACKSSDW" :is-container t :variants (list
x64-instruction-variant-VPACKSSDW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPACKUSWB (make-instance 'x86-asm-instruction :name "VPACKUSWB" :is-container t :variants (list
x64-instruction-variant-VPACKUSWB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPACKUSDW (make-instance 'x86-asm-instruction :name "VPACKUSDW" :is-container t :variants (list
x64-instruction-variant-VPACKUSDW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDB (make-instance 'x86-asm-instruction :name "VPADDB" :is-container t :variants (list
x64-instruction-variant-VPADDB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDW (make-instance 'x86-asm-instruction :name "VPADDW" :is-container t :variants (list
x64-instruction-variant-VPADDW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDD (make-instance 'x86-asm-instruction :name "VPADDD" :is-container t :variants (list
x64-instruction-variant-VPADDD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDQ (make-instance 'x86-asm-instruction :name "VPADDQ" :is-container t :variants (list
x64-instruction-variant-VPADDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDSB (make-instance 'x86-asm-instruction :name "VPADDSB" :is-container t :variants (list
x64-instruction-variant-VPADDSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDSW (make-instance 'x86-asm-instruction :name "VPADDSW" :is-container t :variants (list
x64-instruction-variant-VPADDSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDUSB (make-instance 'x86-asm-instruction :name "VPADDUSB" :is-container t :variants (list
x64-instruction-variant-VPADDUSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPADDUSW (make-instance 'x86-asm-instruction :name "VPADDUSW" :is-container t :variants (list
x64-instruction-variant-VPADDUSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPALIGNR (make-instance 'x86-asm-instruction :name "VPALIGNR" :is-container t :variants (list
x64-instruction-variant-VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPAND (make-instance 'x86-asm-instruction :name "VPAND" :is-container t :variants (list
x64-instruction-variant-VPAND-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPANDN (make-instance 'x86-asm-instruction :name "VPANDN" :is-container t :variants (list
x64-instruction-variant-VPANDN-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPAVGB (make-instance 'x86-asm-instruction :name "VPAVGB" :is-container t :variants (list
x64-instruction-variant-VPAVGB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPAVGW (make-instance 'x86-asm-instruction :name "VPAVGW" :is-container t :variants (list
x64-instruction-variant-VPAVGW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPBLENDVB (make-instance 'x86-asm-instruction :name "VPBLENDVB" :is-container t :variants (list
x64-instruction-variant-VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPBLENDW (make-instance 'x86-asm-instruction :name "VPBLENDW" :is-container t :variants (list
x64-instruction-variant-VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCMPESTRI (make-instance 'x86-asm-instruction :name "VPCMPESTRI" :is-container t :variants (list
x64-instruction-variant-VPCMPESTRI-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCMPESTRM (make-instance 'x86-asm-instruction :name "VPCMPESTRM" :is-container t :variants (list
x64-instruction-variant-VPCMPESTRM-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCMPISTRI (make-instance 'x86-asm-instruction :name "VPCMPISTRI" :is-container t :variants (list
x64-instruction-variant-VPCMPISTRI-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCMPISTRM (make-instance 'x86-asm-instruction :name "VPCMPISTRM" :is-container t :variants (list
x64-instruction-variant-VPCMPISTRM-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCMPEQB (make-instance 'x86-asm-instruction :name "VPCMPEQB" :is-container t :variants (list
x64-instruction-variant-VPCMPEQB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPEQW (make-instance 'x86-asm-instruction :name "VPCMPEQW" :is-container t :variants (list
x64-instruction-variant-VPCMPEQW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPEQD (make-instance 'x86-asm-instruction :name "VPCMPEQD" :is-container t :variants (list
x64-instruction-variant-VPCMPEQD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPEQQ (make-instance 'x86-asm-instruction :name "VPCMPEQQ" :is-container t :variants (list
x64-instruction-variant-VPCMPEQQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPGTB (make-instance 'x86-asm-instruction :name "VPCMPGTB" :is-container t :variants (list
x64-instruction-variant-VPCMPGTB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPGTW (make-instance 'x86-asm-instruction :name "VPCMPGTW" :is-container t :variants (list
x64-instruction-variant-VPCMPGTW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPGTD (make-instance 'x86-asm-instruction :name "VPCMPGTD" :is-container t :variants (list
x64-instruction-variant-VPCMPGTD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCMPGTQ (make-instance 'x86-asm-instruction :name "VPCMPGTQ" :is-container t :variants (list
x64-instruction-variant-VPCMPGTQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPERMILPD (make-instance 'x86-asm-instruction :name "VPERMILPD" :is-container t :variants (list
x64-instruction-variant-VPERMILPD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VPERMILPD-ymmreg.ymmreg.ymmrm256 x64-instruction-variant-VPERMILPD-xmmreg.xmmrm128.imm8 x64-instruction-variant-VPERMILPD-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPERMILPS (make-instance 'x86-asm-instruction :name "VPERMILPS" :is-container t :variants (list
x64-instruction-variant-VPERMILPS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VPERMILPS-ymmreg.ymmreg.ymmrm256 x64-instruction-variant-VPERMILPS-xmmreg.xmmrm128.imm8 x64-instruction-variant-VPERMILPS-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPERM2F128 (make-instance 'x86-asm-instruction :name "VPERM2F128" :is-container t :variants (list
x64-instruction-variant-VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPEXTRB (make-instance 'x86-asm-instruction :name "VPEXTRB" :is-container t :variants (list
x64-instruction-variant-VPEXTRB-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRB-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRB-mem8.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRW (make-instance 'x86-asm-instruction :name "VPEXTRW" :is-container t :variants (list
x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRW-mem16.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRD (make-instance 'x86-asm-instruction :name "VPEXTRD" :is-container t :variants (list
x64-instruction-variant-VPEXTRD-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRD-rm32.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRQ (make-instance 'x86-asm-instruction :name "VPEXTRQ" :is-container t :variants (list
x64-instruction-variant-VPEXTRQ-rm64.xmmreg.imm8)))

(defparameter x64-instruction-container-VPHADDW (make-instance 'x86-asm-instruction :name "VPHADDW" :is-container t :variants (list
x64-instruction-variant-VPHADDW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPHADDD (make-instance 'x86-asm-instruction :name "VPHADDD" :is-container t :variants (list
x64-instruction-variant-VPHADDD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPHADDSW (make-instance 'x86-asm-instruction :name "VPHADDSW" :is-container t :variants (list
x64-instruction-variant-VPHADDSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPHMINPOSUW (make-instance 'x86-asm-instruction :name "VPHMINPOSUW" :is-container t :variants (list
x64-instruction-variant-VPHMINPOSUW-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-VPHSUBW (make-instance 'x86-asm-instruction :name "VPHSUBW" :is-container t :variants (list
x64-instruction-variant-VPHSUBW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPHSUBD (make-instance 'x86-asm-instruction :name "VPHSUBD" :is-container t :variants (list
x64-instruction-variant-VPHSUBD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPHSUBSW (make-instance 'x86-asm-instruction :name "VPHSUBSW" :is-container t :variants (list
x64-instruction-variant-VPHSUBSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPINSRB (make-instance 'x86-asm-instruction :name "VPINSRB" :is-container t :variants (list
x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.mem8.imm8 x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.rm8.imm8 x64-instruction-variant-VPINSRB-xmmreg.xmmreg*.reg32.imm8)))

(defparameter x64-instruction-container-VPINSRW (make-instance 'x86-asm-instruction :name "VPINSRW" :is-container t :variants (list
x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.mem16.imm8 x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.rm16.imm8 x64-instruction-variant-VPINSRW-xmmreg.xmmreg*.reg32.imm8)))

(defparameter x64-instruction-container-VPINSRD (make-instance 'x86-asm-instruction :name "VPINSRD" :is-container t :variants (list
x64-instruction-variant-VPINSRD-xmmreg.xmmreg*.mem32.imm8 x64-instruction-variant-VPINSRD-xmmreg.xmmreg*.rm32.imm8)))

(defparameter x64-instruction-container-VPINSRQ (make-instance 'x86-asm-instruction :name "VPINSRQ" :is-container t :variants (list
x64-instruction-variant-VPINSRQ-xmmreg.xmmreg*.mem64.imm8 x64-instruction-variant-VPINSRQ-xmmreg.xmmreg*.rm64.imm8)))

(defparameter x64-instruction-container-VPMADDWD (make-instance 'x86-asm-instruction :name "VPMADDWD" :is-container t :variants (list
x64-instruction-variant-VPMADDWD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMADDUBSW (make-instance 'x86-asm-instruction :name "VPMADDUBSW" :is-container t :variants (list
x64-instruction-variant-VPMADDUBSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXSB (make-instance 'x86-asm-instruction :name "VPMAXSB" :is-container t :variants (list
x64-instruction-variant-VPMAXSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXSW (make-instance 'x86-asm-instruction :name "VPMAXSW" :is-container t :variants (list
x64-instruction-variant-VPMAXSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXSD (make-instance 'x86-asm-instruction :name "VPMAXSD" :is-container t :variants (list
x64-instruction-variant-VPMAXSD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXUB (make-instance 'x86-asm-instruction :name "VPMAXUB" :is-container t :variants (list
x64-instruction-variant-VPMAXUB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXUW (make-instance 'x86-asm-instruction :name "VPMAXUW" :is-container t :variants (list
x64-instruction-variant-VPMAXUW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMAXUD (make-instance 'x86-asm-instruction :name "VPMAXUD" :is-container t :variants (list
x64-instruction-variant-VPMAXUD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINSB (make-instance 'x86-asm-instruction :name "VPMINSB" :is-container t :variants (list
x64-instruction-variant-VPMINSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINSW (make-instance 'x86-asm-instruction :name "VPMINSW" :is-container t :variants (list
x64-instruction-variant-VPMINSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINSD (make-instance 'x86-asm-instruction :name "VPMINSD" :is-container t :variants (list
x64-instruction-variant-VPMINSD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINUB (make-instance 'x86-asm-instruction :name "VPMINUB" :is-container t :variants (list
x64-instruction-variant-VPMINUB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINUW (make-instance 'x86-asm-instruction :name "VPMINUW" :is-container t :variants (list
x64-instruction-variant-VPMINUW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMINUD (make-instance 'x86-asm-instruction :name "VPMINUD" :is-container t :variants (list
x64-instruction-variant-VPMINUD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMOVMSKB (make-instance 'x86-asm-instruction :name "VPMOVMSKB" :is-container t :variants (list
x64-instruction-variant-VPMOVMSKB-reg64.xmmreg x64-instruction-variant-VPMOVMSKB-reg32.xmmreg)))

(defparameter x64-instruction-container-VPMOVSXBW (make-instance 'x86-asm-instruction :name "VPMOVSXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBW-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMOVSXBD (make-instance 'x86-asm-instruction :name "VPMOVSXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBD-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VPMOVSXBQ (make-instance 'x86-asm-instruction :name "VPMOVSXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBQ-xmmreg.xmmrm16)))

(defparameter x64-instruction-container-VPMOVSXWD (make-instance 'x86-asm-instruction :name "VPMOVSXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWD-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMOVSXWQ (make-instance 'x86-asm-instruction :name "VPMOVSXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWQ-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VPMOVSXDQ (make-instance 'x86-asm-instruction :name "VPMOVSXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXDQ-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMOVZXBW (make-instance 'x86-asm-instruction :name "VPMOVZXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBW-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMOVZXBD (make-instance 'x86-asm-instruction :name "VPMOVZXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBD-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VPMOVZXBQ (make-instance 'x86-asm-instruction :name "VPMOVZXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBQ-xmmreg.xmmrm16)))

(defparameter x64-instruction-container-VPMOVZXWD (make-instance 'x86-asm-instruction :name "VPMOVZXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWD-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMOVZXWQ (make-instance 'x86-asm-instruction :name "VPMOVZXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWQ-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VPMOVZXDQ (make-instance 'x86-asm-instruction :name "VPMOVZXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXDQ-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VPMULHUW (make-instance 'x86-asm-instruction :name "VPMULHUW" :is-container t :variants (list
x64-instruction-variant-VPMULHUW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULHRSW (make-instance 'x86-asm-instruction :name "VPMULHRSW" :is-container t :variants (list
x64-instruction-variant-VPMULHRSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULHW (make-instance 'x86-asm-instruction :name "VPMULHW" :is-container t :variants (list
x64-instruction-variant-VPMULHW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULLW (make-instance 'x86-asm-instruction :name "VPMULLW" :is-container t :variants (list
x64-instruction-variant-VPMULLW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULLD (make-instance 'x86-asm-instruction :name "VPMULLD" :is-container t :variants (list
x64-instruction-variant-VPMULLD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULUDQ (make-instance 'x86-asm-instruction :name "VPMULUDQ" :is-container t :variants (list
x64-instruction-variant-VPMULUDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPMULDQ (make-instance 'x86-asm-instruction :name "VPMULDQ" :is-container t :variants (list
x64-instruction-variant-VPMULDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPOR (make-instance 'x86-asm-instruction :name "VPOR" :is-container t :variants (list
x64-instruction-variant-VPOR-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSADBW (make-instance 'x86-asm-instruction :name "VPSADBW" :is-container t :variants (list
x64-instruction-variant-VPSADBW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHUFB (make-instance 'x86-asm-instruction :name "VPSHUFB" :is-container t :variants (list
x64-instruction-variant-VPSHUFB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHUFD (make-instance 'x86-asm-instruction :name "VPSHUFD" :is-container t :variants (list
x64-instruction-variant-VPSHUFD-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPSHUFHW (make-instance 'x86-asm-instruction :name "VPSHUFHW" :is-container t :variants (list
x64-instruction-variant-VPSHUFHW-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPSHUFLW (make-instance 'x86-asm-instruction :name "VPSHUFLW" :is-container t :variants (list
x64-instruction-variant-VPSHUFLW-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPSIGNB (make-instance 'x86-asm-instruction :name "VPSIGNB" :is-container t :variants (list
x64-instruction-variant-VPSIGNB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSIGNW (make-instance 'x86-asm-instruction :name "VPSIGNW" :is-container t :variants (list
x64-instruction-variant-VPSIGNW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSIGND (make-instance 'x86-asm-instruction :name "VPSIGND" :is-container t :variants (list
x64-instruction-variant-VPSIGND-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSLLDQ (make-instance 'x86-asm-instruction :name "VPSLLDQ" :is-container t :variants (list
x64-instruction-variant-VPSLLDQ-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLDQ (make-instance 'x86-asm-instruction :name "VPSRLDQ" :is-container t :variants (list
x64-instruction-variant-VPSRLDQ-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLW (make-instance 'x86-asm-instruction :name "VPSLLW" :is-container t :variants (list
x64-instruction-variant-VPSLLW-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSLLW-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLD (make-instance 'x86-asm-instruction :name "VPSLLD" :is-container t :variants (list
x64-instruction-variant-VPSLLD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSLLD-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLQ (make-instance 'x86-asm-instruction :name "VPSLLQ" :is-container t :variants (list
x64-instruction-variant-VPSLLQ-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSLLQ-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRAW (make-instance 'x86-asm-instruction :name "VPSRAW" :is-container t :variants (list
x64-instruction-variant-VPSRAW-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRAW-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRAD (make-instance 'x86-asm-instruction :name "VPSRAD" :is-container t :variants (list
x64-instruction-variant-VPSRAD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRAD-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLW (make-instance 'x86-asm-instruction :name "VPSRLW" :is-container t :variants (list
x64-instruction-variant-VPSRLW-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRLW-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLD (make-instance 'x86-asm-instruction :name "VPSRLD" :is-container t :variants (list
x64-instruction-variant-VPSRLD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRLD-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLQ (make-instance 'x86-asm-instruction :name "VPSRLQ" :is-container t :variants (list
x64-instruction-variant-VPSRLQ-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRLQ-xmmreg.xmmreg*.imm8)))

(defparameter x64-instruction-container-VPTEST (make-instance 'x86-asm-instruction :name "VPTEST" :is-container t :variants (list
x64-instruction-variant-VPTEST-xmmreg.xmmrm128 x64-instruction-variant-VPTEST-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VPSUBB (make-instance 'x86-asm-instruction :name "VPSUBB" :is-container t :variants (list
x64-instruction-variant-VPSUBB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBW (make-instance 'x86-asm-instruction :name "VPSUBW" :is-container t :variants (list
x64-instruction-variant-VPSUBW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBD (make-instance 'x86-asm-instruction :name "VPSUBD" :is-container t :variants (list
x64-instruction-variant-VPSUBD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBQ (make-instance 'x86-asm-instruction :name "VPSUBQ" :is-container t :variants (list
x64-instruction-variant-VPSUBQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBSB (make-instance 'x86-asm-instruction :name "VPSUBSB" :is-container t :variants (list
x64-instruction-variant-VPSUBSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBSW (make-instance 'x86-asm-instruction :name "VPSUBSW" :is-container t :variants (list
x64-instruction-variant-VPSUBSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBUSB (make-instance 'x86-asm-instruction :name "VPSUBUSB" :is-container t :variants (list
x64-instruction-variant-VPSUBUSB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSUBUSW (make-instance 'x86-asm-instruction :name "VPSUBUSW" :is-container t :variants (list
x64-instruction-variant-VPSUBUSW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKHBW (make-instance 'x86-asm-instruction :name "VPUNPCKHBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKHWD (make-instance 'x86-asm-instruction :name "VPUNPCKHWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKHDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKHQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKLBW (make-instance 'x86-asm-instruction :name "VPUNPCKLBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKLWD (make-instance 'x86-asm-instruction :name "VPUNPCKLWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKLDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPUNPCKLQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPXOR (make-instance 'x86-asm-instruction :name "VPXOR" :is-container t :variants (list
x64-instruction-variant-VPXOR-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VRCPPS (make-instance 'x86-asm-instruction :name "VRCPPS" :is-container t :variants (list
x64-instruction-variant-VRCPPS-xmmreg.xmmrm128 x64-instruction-variant-VRCPPS-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VRCPSS (make-instance 'x86-asm-instruction :name "VRCPSS" :is-container t :variants (list
x64-instruction-variant-VRCPSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VRSQRTPS (make-instance 'x86-asm-instruction :name "VRSQRTPS" :is-container t :variants (list
x64-instruction-variant-VRSQRTPS-xmmreg.xmmrm128 x64-instruction-variant-VRSQRTPS-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VRSQRTSS (make-instance 'x86-asm-instruction :name "VRSQRTSS" :is-container t :variants (list
x64-instruction-variant-VRSQRTSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VROUNDPD (make-instance 'x86-asm-instruction :name "VROUNDPD" :is-container t :variants (list
x64-instruction-variant-VROUNDPD-xmmreg.xmmrm128.imm8 x64-instruction-variant-VROUNDPD-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VROUNDPS (make-instance 'x86-asm-instruction :name "VROUNDPS" :is-container t :variants (list
x64-instruction-variant-VROUNDPS-xmmreg.xmmrm128.imm8 x64-instruction-variant-VROUNDPS-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VROUNDSD (make-instance 'x86-asm-instruction :name "VROUNDSD" :is-container t :variants (list
x64-instruction-variant-VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8)))

(defparameter x64-instruction-container-VROUNDSS (make-instance 'x86-asm-instruction :name "VROUNDSS" :is-container t :variants (list
x64-instruction-variant-VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8)))

(defparameter x64-instruction-container-VSHUFPD (make-instance 'x86-asm-instruction :name "VSHUFPD" :is-container t :variants (list
x64-instruction-variant-VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VSHUFPS (make-instance 'x86-asm-instruction :name "VSHUFPS" :is-container t :variants (list
x64-instruction-variant-VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VSQRTPD (make-instance 'x86-asm-instruction :name "VSQRTPD" :is-container t :variants (list
x64-instruction-variant-VSQRTPD-xmmreg.xmmrm128 x64-instruction-variant-VSQRTPD-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VSQRTPS (make-instance 'x86-asm-instruction :name "VSQRTPS" :is-container t :variants (list
x64-instruction-variant-VSQRTPS-xmmreg.xmmrm128 x64-instruction-variant-VSQRTPS-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VSQRTSD (make-instance 'x86-asm-instruction :name "VSQRTSD" :is-container t :variants (list
x64-instruction-variant-VSQRTSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VSQRTSS (make-instance 'x86-asm-instruction :name "VSQRTSS" :is-container t :variants (list
x64-instruction-variant-VSQRTSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VSTMXCSR (make-instance 'x86-asm-instruction :name "VSTMXCSR" :is-container t :variants (list
x64-instruction-variant-VSTMXCSR-mem32)))

(defparameter x64-instruction-container-VSUBPD (make-instance 'x86-asm-instruction :name "VSUBPD" :is-container t :variants (list
x64-instruction-variant-VSUBPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VSUBPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VSUBPS (make-instance 'x86-asm-instruction :name "VSUBPS" :is-container t :variants (list
x64-instruction-variant-VSUBPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VSUBPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VSUBSD (make-instance 'x86-asm-instruction :name "VSUBSD" :is-container t :variants (list
x64-instruction-variant-VSUBSD-xmmreg.xmmreg*.xmmrm64)))

(defparameter x64-instruction-container-VSUBSS (make-instance 'x86-asm-instruction :name "VSUBSS" :is-container t :variants (list
x64-instruction-variant-VSUBSS-xmmreg.xmmreg*.xmmrm32)))

(defparameter x64-instruction-container-VTESTPS (make-instance 'x86-asm-instruction :name "VTESTPS" :is-container t :variants (list
x64-instruction-variant-VTESTPS-xmmreg.xmmrm128 x64-instruction-variant-VTESTPS-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VTESTPD (make-instance 'x86-asm-instruction :name "VTESTPD" :is-container t :variants (list
x64-instruction-variant-VTESTPD-xmmreg.xmmrm128 x64-instruction-variant-VTESTPD-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VUCOMISD (make-instance 'x86-asm-instruction :name "VUCOMISD" :is-container t :variants (list
x64-instruction-variant-VUCOMISD-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VUCOMISS (make-instance 'x86-asm-instruction :name "VUCOMISS" :is-container t :variants (list
x64-instruction-variant-VUCOMISS-xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VUNPCKHPD (make-instance 'x86-asm-instruction :name "VUNPCKHPD" :is-container t :variants (list
x64-instruction-variant-VUNPCKHPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VUNPCKHPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VUNPCKHPS (make-instance 'x86-asm-instruction :name "VUNPCKHPS" :is-container t :variants (list
x64-instruction-variant-VUNPCKHPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VUNPCKHPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VUNPCKLPD (make-instance 'x86-asm-instruction :name "VUNPCKLPD" :is-container t :variants (list
x64-instruction-variant-VUNPCKLPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VUNPCKLPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VUNPCKLPS (make-instance 'x86-asm-instruction :name "VUNPCKLPS" :is-container t :variants (list
x64-instruction-variant-VUNPCKLPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VUNPCKLPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VXORPD (make-instance 'x86-asm-instruction :name "VXORPD" :is-container t :variants (list
x64-instruction-variant-VXORPD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VXORPD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VXORPS (make-instance 'x86-asm-instruction :name "VXORPS" :is-container t :variants (list
x64-instruction-variant-VXORPS-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VXORPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VZEROALL (make-instance 'x86-asm-instruction :name "VZEROALL" :is-container t :variants (list
x64-instruction-variant-VZEROALL-void)))

(defparameter x64-instruction-container-VZEROUPPER (make-instance 'x86-asm-instruction :name "VZEROUPPER" :is-container t :variants (list
x64-instruction-variant-VZEROUPPER-void)))

(defparameter x64-instruction-container-PCLMULLQLQDQ (make-instance 'x86-asm-instruction :name "PCLMULLQLQDQ" :is-container t :variants (list
x64-instruction-variant-PCLMULLQLQDQ-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-PCLMULHQLQDQ (make-instance 'x86-asm-instruction :name "PCLMULHQLQDQ" :is-container t :variants (list
x64-instruction-variant-PCLMULHQLQDQ-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-PCLMULLQHQDQ (make-instance 'x86-asm-instruction :name "PCLMULLQHQDQ" :is-container t :variants (list
x64-instruction-variant-PCLMULLQHQDQ-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-PCLMULHQHQDQ (make-instance 'x86-asm-instruction :name "PCLMULHQHQDQ" :is-container t :variants (list
x64-instruction-variant-PCLMULHQHQDQ-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-PCLMULQDQ (make-instance 'x86-asm-instruction :name "PCLMULQDQ" :is-container t :variants (list
x64-instruction-variant-PCLMULQDQ-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCLMULLQLQDQ (make-instance 'x86-asm-instruction :name "VPCLMULLQLQDQ" :is-container t :variants (list
x64-instruction-variant-VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCLMULHQLQDQ (make-instance 'x86-asm-instruction :name "VPCLMULHQLQDQ" :is-container t :variants (list
x64-instruction-variant-VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCLMULLQHQDQ (make-instance 'x86-asm-instruction :name "VPCLMULLQHQDQ" :is-container t :variants (list
x64-instruction-variant-VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCLMULHQHQDQ (make-instance 'x86-asm-instruction :name "VPCLMULHQHQDQ" :is-container t :variants (list
x64-instruction-variant-VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPCLMULQDQ (make-instance 'x86-asm-instruction :name "VPCLMULQDQ" :is-container t :variants (list
x64-instruction-variant-VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VFMADD132PS (make-instance 'x86-asm-instruction :name "VFMADD132PS" :is-container t :variants (list
x64-instruction-variant-VFMADD132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD132PD (make-instance 'x86-asm-instruction :name "VFMADD132PD" :is-container t :variants (list
x64-instruction-variant-VFMADD132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD312PS (make-instance 'x86-asm-instruction :name "VFMADD312PS" :is-container t :variants (list
x64-instruction-variant-VFMADD312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD312PD (make-instance 'x86-asm-instruction :name "VFMADD312PD" :is-container t :variants (list
x64-instruction-variant-VFMADD312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD213PS (make-instance 'x86-asm-instruction :name "VFMADD213PS" :is-container t :variants (list
x64-instruction-variant-VFMADD213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD213PD (make-instance 'x86-asm-instruction :name "VFMADD213PD" :is-container t :variants (list
x64-instruction-variant-VFMADD213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD123PS (make-instance 'x86-asm-instruction :name "VFMADD123PS" :is-container t :variants (list
x64-instruction-variant-VFMADD123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD123PD (make-instance 'x86-asm-instruction :name "VFMADD123PD" :is-container t :variants (list
x64-instruction-variant-VFMADD123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD231PS (make-instance 'x86-asm-instruction :name "VFMADD231PS" :is-container t :variants (list
x64-instruction-variant-VFMADD231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD231PD (make-instance 'x86-asm-instruction :name "VFMADD231PD" :is-container t :variants (list
x64-instruction-variant-VFMADD231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD321PS (make-instance 'x86-asm-instruction :name "VFMADD321PS" :is-container t :variants (list
x64-instruction-variant-VFMADD321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD321PD (make-instance 'x86-asm-instruction :name "VFMADD321PD" :is-container t :variants (list
x64-instruction-variant-VFMADD321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADD321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB132PS (make-instance 'x86-asm-instruction :name "VFMADDSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB132PD (make-instance 'x86-asm-instruction :name "VFMADDSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB312PS (make-instance 'x86-asm-instruction :name "VFMADDSUB312PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB312PD (make-instance 'x86-asm-instruction :name "VFMADDSUB312PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB213PS (make-instance 'x86-asm-instruction :name "VFMADDSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB213PD (make-instance 'x86-asm-instruction :name "VFMADDSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB123PS (make-instance 'x86-asm-instruction :name "VFMADDSUB123PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB123PD (make-instance 'x86-asm-instruction :name "VFMADDSUB123PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB231PS (make-instance 'x86-asm-instruction :name "VFMADDSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB231PD (make-instance 'x86-asm-instruction :name "VFMADDSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB321PS (make-instance 'x86-asm-instruction :name "VFMADDSUB321PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUB321PD (make-instance 'x86-asm-instruction :name "VFMADDSUB321PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB132PS (make-instance 'x86-asm-instruction :name "VFMSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB132PD (make-instance 'x86-asm-instruction :name "VFMSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB312PS (make-instance 'x86-asm-instruction :name "VFMSUB312PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB312PD (make-instance 'x86-asm-instruction :name "VFMSUB312PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB213PS (make-instance 'x86-asm-instruction :name "VFMSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB213PD (make-instance 'x86-asm-instruction :name "VFMSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB123PS (make-instance 'x86-asm-instruction :name "VFMSUB123PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB123PD (make-instance 'x86-asm-instruction :name "VFMSUB123PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB231PS (make-instance 'x86-asm-instruction :name "VFMSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB231PD (make-instance 'x86-asm-instruction :name "VFMSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB321PS (make-instance 'x86-asm-instruction :name "VFMSUB321PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUB321PD (make-instance 'x86-asm-instruction :name "VFMSUB321PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUB321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD132PS (make-instance 'x86-asm-instruction :name "VFMSUBADD132PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD132PD (make-instance 'x86-asm-instruction :name "VFMSUBADD132PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD312PS (make-instance 'x86-asm-instruction :name "VFMSUBADD312PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD312PD (make-instance 'x86-asm-instruction :name "VFMSUBADD312PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD213PS (make-instance 'x86-asm-instruction :name "VFMSUBADD213PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD213PD (make-instance 'x86-asm-instruction :name "VFMSUBADD213PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD123PS (make-instance 'x86-asm-instruction :name "VFMSUBADD123PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD123PD (make-instance 'x86-asm-instruction :name "VFMSUBADD123PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD231PS (make-instance 'x86-asm-instruction :name "VFMSUBADD231PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD231PD (make-instance 'x86-asm-instruction :name "VFMSUBADD231PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD321PS (make-instance 'x86-asm-instruction :name "VFMSUBADD321PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADD321PD (make-instance 'x86-asm-instruction :name "VFMSUBADD321PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD132PS (make-instance 'x86-asm-instruction :name "VFNMADD132PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD132PD (make-instance 'x86-asm-instruction :name "VFNMADD132PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD312PS (make-instance 'x86-asm-instruction :name "VFNMADD312PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD312PD (make-instance 'x86-asm-instruction :name "VFNMADD312PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD213PS (make-instance 'x86-asm-instruction :name "VFNMADD213PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD213PD (make-instance 'x86-asm-instruction :name "VFNMADD213PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD123PS (make-instance 'x86-asm-instruction :name "VFNMADD123PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD123PD (make-instance 'x86-asm-instruction :name "VFNMADD123PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD231PS (make-instance 'x86-asm-instruction :name "VFNMADD231PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD231PD (make-instance 'x86-asm-instruction :name "VFNMADD231PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD321PS (make-instance 'x86-asm-instruction :name "VFNMADD321PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADD321PD (make-instance 'x86-asm-instruction :name "VFNMADD321PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMADD321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB132PS (make-instance 'x86-asm-instruction :name "VFNMSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB132PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB132PD (make-instance 'x86-asm-instruction :name "VFNMSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB132PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB312PS (make-instance 'x86-asm-instruction :name "VFNMSUB312PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB312PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB312PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB312PD (make-instance 'x86-asm-instruction :name "VFNMSUB312PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB312PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB312PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB213PS (make-instance 'x86-asm-instruction :name "VFNMSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB213PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB213PD (make-instance 'x86-asm-instruction :name "VFNMSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB213PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB123PS (make-instance 'x86-asm-instruction :name "VFNMSUB123PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB123PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB123PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB123PD (make-instance 'x86-asm-instruction :name "VFNMSUB123PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB123PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB123PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB231PS (make-instance 'x86-asm-instruction :name "VFNMSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB231PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB231PD (make-instance 'x86-asm-instruction :name "VFNMSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB231PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB321PS (make-instance 'x86-asm-instruction :name "VFNMSUB321PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB321PS-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB321PS-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUB321PD (make-instance 'x86-asm-instruction :name "VFNMSUB321PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB321PD-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUB321PD-ymmreg.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADD132SS (make-instance 'x86-asm-instruction :name "VFMADD132SS" :is-container t :variants (list
x64-instruction-variant-VFMADD132SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD132SD (make-instance 'x86-asm-instruction :name "VFMADD132SD" :is-container t :variants (list
x64-instruction-variant-VFMADD132SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADD312SS (make-instance 'x86-asm-instruction :name "VFMADD312SS" :is-container t :variants (list
x64-instruction-variant-VFMADD312SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD312SD (make-instance 'x86-asm-instruction :name "VFMADD312SD" :is-container t :variants (list
x64-instruction-variant-VFMADD312SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADD213SS (make-instance 'x86-asm-instruction :name "VFMADD213SS" :is-container t :variants (list
x64-instruction-variant-VFMADD213SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD213SD (make-instance 'x86-asm-instruction :name "VFMADD213SD" :is-container t :variants (list
x64-instruction-variant-VFMADD213SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADD123SS (make-instance 'x86-asm-instruction :name "VFMADD123SS" :is-container t :variants (list
x64-instruction-variant-VFMADD123SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD123SD (make-instance 'x86-asm-instruction :name "VFMADD123SD" :is-container t :variants (list
x64-instruction-variant-VFMADD123SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADD231SS (make-instance 'x86-asm-instruction :name "VFMADD231SS" :is-container t :variants (list
x64-instruction-variant-VFMADD231SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD231SD (make-instance 'x86-asm-instruction :name "VFMADD231SD" :is-container t :variants (list
x64-instruction-variant-VFMADD231SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADD321SS (make-instance 'x86-asm-instruction :name "VFMADD321SS" :is-container t :variants (list
x64-instruction-variant-VFMADD321SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADD321SD (make-instance 'x86-asm-instruction :name "VFMADD321SD" :is-container t :variants (list
x64-instruction-variant-VFMADD321SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB132SS (make-instance 'x86-asm-instruction :name "VFMSUB132SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB132SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB132SD (make-instance 'x86-asm-instruction :name "VFMSUB132SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB132SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB312SS (make-instance 'x86-asm-instruction :name "VFMSUB312SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB312SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB312SD (make-instance 'x86-asm-instruction :name "VFMSUB312SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB312SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB213SS (make-instance 'x86-asm-instruction :name "VFMSUB213SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB213SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB213SD (make-instance 'x86-asm-instruction :name "VFMSUB213SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB213SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB123SS (make-instance 'x86-asm-instruction :name "VFMSUB123SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB123SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB123SD (make-instance 'x86-asm-instruction :name "VFMSUB123SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB123SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB231SS (make-instance 'x86-asm-instruction :name "VFMSUB231SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB231SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB231SD (make-instance 'x86-asm-instruction :name "VFMSUB231SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB231SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUB321SS (make-instance 'x86-asm-instruction :name "VFMSUB321SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB321SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMSUB321SD (make-instance 'x86-asm-instruction :name "VFMSUB321SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB321SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD132SS (make-instance 'x86-asm-instruction :name "VFNMADD132SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD132SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD132SD (make-instance 'x86-asm-instruction :name "VFNMADD132SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD132SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD312SS (make-instance 'x86-asm-instruction :name "VFNMADD312SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD312SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD312SD (make-instance 'x86-asm-instruction :name "VFNMADD312SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD312SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD213SS (make-instance 'x86-asm-instruction :name "VFNMADD213SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD213SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD213SD (make-instance 'x86-asm-instruction :name "VFNMADD213SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD213SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD123SS (make-instance 'x86-asm-instruction :name "VFNMADD123SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD123SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD123SD (make-instance 'x86-asm-instruction :name "VFNMADD123SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD123SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD231SS (make-instance 'x86-asm-instruction :name "VFNMADD231SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD231SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD231SD (make-instance 'x86-asm-instruction :name "VFNMADD231SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD231SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADD321SS (make-instance 'x86-asm-instruction :name "VFNMADD321SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD321SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADD321SD (make-instance 'x86-asm-instruction :name "VFNMADD321SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD321SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB132SS (make-instance 'x86-asm-instruction :name "VFNMSUB132SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB132SD (make-instance 'x86-asm-instruction :name "VFNMSUB132SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB312SS (make-instance 'x86-asm-instruction :name "VFNMSUB312SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB312SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB312SD (make-instance 'x86-asm-instruction :name "VFNMSUB312SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB312SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB213SS (make-instance 'x86-asm-instruction :name "VFNMSUB213SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB213SD (make-instance 'x86-asm-instruction :name "VFNMSUB213SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB123SS (make-instance 'x86-asm-instruction :name "VFNMSUB123SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB123SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB123SD (make-instance 'x86-asm-instruction :name "VFNMSUB123SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB123SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB231SS (make-instance 'x86-asm-instruction :name "VFNMSUB231SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB231SD (make-instance 'x86-asm-instruction :name "VFNMSUB231SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUB321SS (make-instance 'x86-asm-instruction :name "VFNMSUB321SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB321SS-xmmreg.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUB321SD (make-instance 'x86-asm-instruction :name "VFNMSUB321SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB321SD-xmmreg.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-RDFSBASE (make-instance 'x86-asm-instruction :name "RDFSBASE" :is-container t :variants (list
x64-instruction-variant-RDFSBASE-reg32 x64-instruction-variant-RDFSBASE-reg64)))

(defparameter x64-instruction-container-RDGSBASE (make-instance 'x86-asm-instruction :name "RDGSBASE" :is-container t :variants (list
x64-instruction-variant-RDGSBASE-reg32 x64-instruction-variant-RDGSBASE-reg64)))

(defparameter x64-instruction-container-RDRAND (make-instance 'x86-asm-instruction :name "RDRAND" :is-container t :variants (list
x64-instruction-variant-RDRAND-reg16 x64-instruction-variant-RDRAND-reg32 x64-instruction-variant-RDRAND-reg64)))

(defparameter x64-instruction-container-WRFSBASE (make-instance 'x86-asm-instruction :name "WRFSBASE" :is-container t :variants (list
x64-instruction-variant-WRFSBASE-reg32 x64-instruction-variant-WRFSBASE-reg64)))

(defparameter x64-instruction-container-WRGSBASE (make-instance 'x86-asm-instruction :name "WRGSBASE" :is-container t :variants (list
x64-instruction-variant-WRGSBASE-reg32 x64-instruction-variant-WRGSBASE-reg64)))

(defparameter x64-instruction-container-VCVTPH2PS (make-instance 'x86-asm-instruction :name "VCVTPH2PS" :is-container t :variants (list
x64-instruction-variant-VCVTPH2PS-ymmreg.xmmrm128 x64-instruction-variant-VCVTPH2PS-xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VCVTPS2PH (make-instance 'x86-asm-instruction :name "VCVTPS2PH" :is-container t :variants (list
x64-instruction-variant-VCVTPS2PH-xmmrm128.ymmreg.imm8 x64-instruction-variant-VCVTPS2PH-xmmrm64.xmmreg.imm8)))

(defparameter x64-instruction-container-ADCX (make-instance 'x86-asm-instruction :name "ADCX" :is-container t :variants (list
x64-instruction-variant-ADCX-reg32.rm32 x64-instruction-variant-ADCX-reg64.rm64)))

(defparameter x64-instruction-container-ADOX (make-instance 'x86-asm-instruction :name "ADOX" :is-container t :variants (list
x64-instruction-variant-ADOX-reg32.rm32 x64-instruction-variant-ADOX-reg64.rm64)))

(defparameter x64-instruction-container-RDSEED (make-instance 'x86-asm-instruction :name "RDSEED" :is-container t :variants (list
x64-instruction-variant-RDSEED-reg16 x64-instruction-variant-RDSEED-reg32 x64-instruction-variant-RDSEED-reg64)))

(defparameter x64-instruction-container-CLAC (make-instance 'x86-asm-instruction :name "CLAC" :is-container t :variants (list
x64-instruction-variant-CLAC-void)))

(defparameter x64-instruction-container-STAC (make-instance 'x86-asm-instruction :name "STAC" :is-container t :variants (list
x64-instruction-variant-STAC-void)))

(defparameter x64-instruction-container-XSTORE (make-instance 'x86-asm-instruction :name "XSTORE" :is-container t :variants (list
x64-instruction-variant-XSTORE-void)))

(defparameter x64-instruction-container-XCRYPTECB (make-instance 'x86-asm-instruction :name "XCRYPTECB" :is-container t :variants (list
x64-instruction-variant-XCRYPTECB-void)))

(defparameter x64-instruction-container-XCRYPTCBC (make-instance 'x86-asm-instruction :name "XCRYPTCBC" :is-container t :variants (list
x64-instruction-variant-XCRYPTCBC-void)))

(defparameter x64-instruction-container-XCRYPTCTR (make-instance 'x86-asm-instruction :name "XCRYPTCTR" :is-container t :variants (list
x64-instruction-variant-XCRYPTCTR-void)))

(defparameter x64-instruction-container-XCRYPTCFB (make-instance 'x86-asm-instruction :name "XCRYPTCFB" :is-container t :variants (list
x64-instruction-variant-XCRYPTCFB-void)))

(defparameter x64-instruction-container-XCRYPTOFB (make-instance 'x86-asm-instruction :name "XCRYPTOFB" :is-container t :variants (list
x64-instruction-variant-XCRYPTOFB-void)))

(defparameter x64-instruction-container-MONTMUL (make-instance 'x86-asm-instruction :name "MONTMUL" :is-container t :variants (list
x64-instruction-variant-MONTMUL-void)))

(defparameter x64-instruction-container-XSHA1 (make-instance 'x86-asm-instruction :name "XSHA1" :is-container t :variants (list
x64-instruction-variant-XSHA1-void)))

(defparameter x64-instruction-container-XSHA256 (make-instance 'x86-asm-instruction :name "XSHA256" :is-container t :variants (list
x64-instruction-variant-XSHA256-void)))

(defparameter x64-instruction-container-LLWPCB (make-instance 'x86-asm-instruction :name "LLWPCB" :is-container t :variants (list
x64-instruction-variant-LLWPCB-reg32 x64-instruction-variant-LLWPCB-reg64)))

(defparameter x64-instruction-container-SLWPCB (make-instance 'x86-asm-instruction :name "SLWPCB" :is-container t :variants (list
x64-instruction-variant-SLWPCB-reg32 x64-instruction-variant-SLWPCB-reg64)))

(defparameter x64-instruction-container-LWPVAL (make-instance 'x86-asm-instruction :name "LWPVAL" :is-container t :variants (list
x64-instruction-variant-LWPVAL-reg32.rm32.imm32 x64-instruction-variant-LWPVAL-reg64.rm32.imm32)))

(defparameter x64-instruction-container-LWPINS (make-instance 'x86-asm-instruction :name "LWPINS" :is-container t :variants (list
x64-instruction-variant-LWPINS-reg32.rm32.imm32 x64-instruction-variant-LWPINS-reg64.rm32.imm32)))

(defparameter x64-instruction-container-VFMADDPD (make-instance 'x86-asm-instruction :name "VFMADDPD" :is-container t :variants (list
x64-instruction-variant-VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDPS (make-instance 'x86-asm-instruction :name "VFMADDPS" :is-container t :variants (list
x64-instruction-variant-VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSD (make-instance 'x86-asm-instruction :name "VFMADDSD" :is-container t :variants (list
x64-instruction-variant-VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg x64-instruction-variant-VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMADDSS (make-instance 'x86-asm-instruction :name "VFMADDSS" :is-container t :variants (list
x64-instruction-variant-VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg x64-instruction-variant-VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFMADDSUBPD (make-instance 'x86-asm-instruction :name "VFMADDSUBPD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMADDSUBPS (make-instance 'x86-asm-instruction :name "VFMADDSUBPS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADDPD (make-instance 'x86-asm-instruction :name "VFMSUBADDPD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBADDPS (make-instance 'x86-asm-instruction :name "VFMSUBADDPS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBPD (make-instance 'x86-asm-instruction :name "VFMSUBPD" :is-container t :variants (list
x64-instruction-variant-VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBPS (make-instance 'x86-asm-instruction :name "VFMSUBPS" :is-container t :variants (list
x64-instruction-variant-VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFMSUBSD (make-instance 'x86-asm-instruction :name "VFMSUBSD" :is-container t :variants (list
x64-instruction-variant-VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg x64-instruction-variant-VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFMSUBSS (make-instance 'x86-asm-instruction :name "VFMSUBSS" :is-container t :variants (list
x64-instruction-variant-VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg x64-instruction-variant-VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMADDPD (make-instance 'x86-asm-instruction :name "VFNMADDPD" :is-container t :variants (list
x64-instruction-variant-VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADDPS (make-instance 'x86-asm-instruction :name "VFNMADDPS" :is-container t :variants (list
x64-instruction-variant-VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMADDSD (make-instance 'x86-asm-instruction :name "VFNMADDSD" :is-container t :variants (list
x64-instruction-variant-VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg x64-instruction-variant-VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMADDSS (make-instance 'x86-asm-instruction :name "VFNMADDSS" :is-container t :variants (list
x64-instruction-variant-VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg x64-instruction-variant-VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFNMSUBPD (make-instance 'x86-asm-instruction :name "VFNMSUBPD" :is-container t :variants (list
x64-instruction-variant-VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUBPS (make-instance 'x86-asm-instruction :name "VFNMSUBPS" :is-container t :variants (list
x64-instruction-variant-VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VFNMSUBSD (make-instance 'x86-asm-instruction :name "VFNMSUBSD" :is-container t :variants (list
x64-instruction-variant-VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg x64-instruction-variant-VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VFNMSUBSS (make-instance 'x86-asm-instruction :name "VFNMSUBSS" :is-container t :variants (list
x64-instruction-variant-VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg x64-instruction-variant-VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VFRCZPD (make-instance 'x86-asm-instruction :name "VFRCZPD" :is-container t :variants (list
x64-instruction-variant-VFRCZPD-xmmreg.xmmrm128* x64-instruction-variant-VFRCZPD-ymmreg.ymmrm256*)))

(defparameter x64-instruction-container-VFRCZPS (make-instance 'x86-asm-instruction :name "VFRCZPS" :is-container t :variants (list
x64-instruction-variant-VFRCZPS-xmmreg.xmmrm128* x64-instruction-variant-VFRCZPS-ymmreg.ymmrm256*)))

(defparameter x64-instruction-container-VFRCZSD (make-instance 'x86-asm-instruction :name "VFRCZSD" :is-container t :variants (list
x64-instruction-variant-VFRCZSD-xmmreg.xmmrm64*)))

(defparameter x64-instruction-container-VFRCZSS (make-instance 'x86-asm-instruction :name "VFRCZSS" :is-container t :variants (list
x64-instruction-variant-VFRCZSS-xmmreg.xmmrm32*)))

(defparameter x64-instruction-container-VPCMOV (make-instance 'x86-asm-instruction :name "VPCMOV" :is-container t :variants (list
x64-instruction-variant-VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg x64-instruction-variant-VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg x64-instruction-variant-VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VPCOMB (make-instance 'x86-asm-instruction :name "VPCOMB" :is-container t :variants (list
x64-instruction-variant-VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMD (make-instance 'x86-asm-instruction :name "VPCOMD" :is-container t :variants (list
x64-instruction-variant-VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMQ (make-instance 'x86-asm-instruction :name "VPCOMQ" :is-container t :variants (list
x64-instruction-variant-VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMUB (make-instance 'x86-asm-instruction :name "VPCOMUB" :is-container t :variants (list
x64-instruction-variant-VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMUD (make-instance 'x86-asm-instruction :name "VPCOMUD" :is-container t :variants (list
x64-instruction-variant-VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMUQ (make-instance 'x86-asm-instruction :name "VPCOMUQ" :is-container t :variants (list
x64-instruction-variant-VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMUW (make-instance 'x86-asm-instruction :name "VPCOMUW" :is-container t :variants (list
x64-instruction-variant-VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPCOMW (make-instance 'x86-asm-instruction :name "VPCOMW" :is-container t :variants (list
x64-instruction-variant-VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPHADDBD (make-instance 'x86-asm-instruction :name "VPHADDBD" :is-container t :variants (list
x64-instruction-variant-VPHADDBD-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDBQ (make-instance 'x86-asm-instruction :name "VPHADDBQ" :is-container t :variants (list
x64-instruction-variant-VPHADDBQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDBW (make-instance 'x86-asm-instruction :name "VPHADDBW" :is-container t :variants (list
x64-instruction-variant-VPHADDBW-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDDQ (make-instance 'x86-asm-instruction :name "VPHADDDQ" :is-container t :variants (list
x64-instruction-variant-VPHADDDQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUBD (make-instance 'x86-asm-instruction :name "VPHADDUBD" :is-container t :variants (list
x64-instruction-variant-VPHADDUBD-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUBQ (make-instance 'x86-asm-instruction :name "VPHADDUBQ" :is-container t :variants (list
x64-instruction-variant-VPHADDUBQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUBW (make-instance 'x86-asm-instruction :name "VPHADDUBW" :is-container t :variants (list
x64-instruction-variant-VPHADDUBW-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUDQ (make-instance 'x86-asm-instruction :name "VPHADDUDQ" :is-container t :variants (list
x64-instruction-variant-VPHADDUDQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUWD (make-instance 'x86-asm-instruction :name "VPHADDUWD" :is-container t :variants (list
x64-instruction-variant-VPHADDUWD-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDUWQ (make-instance 'x86-asm-instruction :name "VPHADDUWQ" :is-container t :variants (list
x64-instruction-variant-VPHADDUWQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDWD (make-instance 'x86-asm-instruction :name "VPHADDWD" :is-container t :variants (list
x64-instruction-variant-VPHADDWD-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHADDWQ (make-instance 'x86-asm-instruction :name "VPHADDWQ" :is-container t :variants (list
x64-instruction-variant-VPHADDWQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHSUBBW (make-instance 'x86-asm-instruction :name "VPHSUBBW" :is-container t :variants (list
x64-instruction-variant-VPHSUBBW-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHSUBDQ (make-instance 'x86-asm-instruction :name "VPHSUBDQ" :is-container t :variants (list
x64-instruction-variant-VPHSUBDQ-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPHSUBWD (make-instance 'x86-asm-instruction :name "VPHSUBWD" :is-container t :variants (list
x64-instruction-variant-VPHSUBWD-xmmreg.xmmrm128*)))

(defparameter x64-instruction-container-VPMACSDD (make-instance 'x86-asm-instruction :name "VPMACSDD" :is-container t :variants (list
x64-instruction-variant-VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSDQH (make-instance 'x86-asm-instruction :name "VPMACSDQH" :is-container t :variants (list
x64-instruction-variant-VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSDQL (make-instance 'x86-asm-instruction :name "VPMACSDQL" :is-container t :variants (list
x64-instruction-variant-VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSSDD (make-instance 'x86-asm-instruction :name "VPMACSSDD" :is-container t :variants (list
x64-instruction-variant-VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSSDQH (make-instance 'x86-asm-instruction :name "VPMACSSDQH" :is-container t :variants (list
x64-instruction-variant-VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSSDQL (make-instance 'x86-asm-instruction :name "VPMACSSDQL" :is-container t :variants (list
x64-instruction-variant-VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSSWD (make-instance 'x86-asm-instruction :name "VPMACSSWD" :is-container t :variants (list
x64-instruction-variant-VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSSWW (make-instance 'x86-asm-instruction :name "VPMACSSWW" :is-container t :variants (list
x64-instruction-variant-VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSWD (make-instance 'x86-asm-instruction :name "VPMACSWD" :is-container t :variants (list
x64-instruction-variant-VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMACSWW (make-instance 'x86-asm-instruction :name "VPMACSWW" :is-container t :variants (list
x64-instruction-variant-VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMADCSSWD (make-instance 'x86-asm-instruction :name "VPMADCSSWD" :is-container t :variants (list
x64-instruction-variant-VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPMADCSWD (make-instance 'x86-asm-instruction :name "VPMADCSWD" :is-container t :variants (list
x64-instruction-variant-VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPPERM (make-instance 'x86-asm-instruction :name "VPPERM" :is-container t :variants (list
x64-instruction-variant-VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128 x64-instruction-variant-VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg)))

(defparameter x64-instruction-container-VPROTB (make-instance 'x86-asm-instruction :name "VPROTB" :is-container t :variants (list
x64-instruction-variant-VPROTB-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPROTB-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPROTB-xmmreg.xmmrm128*.imm8)))

(defparameter x64-instruction-container-VPROTD (make-instance 'x86-asm-instruction :name "VPROTD" :is-container t :variants (list
x64-instruction-variant-VPROTD-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPROTD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPROTD-xmmreg.xmmrm128*.imm8)))

(defparameter x64-instruction-container-VPROTQ (make-instance 'x86-asm-instruction :name "VPROTQ" :is-container t :variants (list
x64-instruction-variant-VPROTQ-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPROTQ-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPROTQ-xmmreg.xmmrm128*.imm8)))

(defparameter x64-instruction-container-VPROTW (make-instance 'x86-asm-instruction :name "VPROTW" :is-container t :variants (list
x64-instruction-variant-VPROTW-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPROTW-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPROTW-xmmreg.xmmrm128*.imm8)))

(defparameter x64-instruction-container-VPSHAB (make-instance 'x86-asm-instruction :name "VPSHAB" :is-container t :variants (list
x64-instruction-variant-VPSHAB-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHAB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHAD (make-instance 'x86-asm-instruction :name "VPSHAD" :is-container t :variants (list
x64-instruction-variant-VPSHAD-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHAD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHAQ (make-instance 'x86-asm-instruction :name "VPSHAQ" :is-container t :variants (list
x64-instruction-variant-VPSHAQ-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHAQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHAW (make-instance 'x86-asm-instruction :name "VPSHAW" :is-container t :variants (list
x64-instruction-variant-VPSHAW-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHAW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHLB (make-instance 'x86-asm-instruction :name "VPSHLB" :is-container t :variants (list
x64-instruction-variant-VPSHLB-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHLB-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHLD (make-instance 'x86-asm-instruction :name "VPSHLD" :is-container t :variants (list
x64-instruction-variant-VPSHLD-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHLD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHLQ (make-instance 'x86-asm-instruction :name "VPSHLQ" :is-container t :variants (list
x64-instruction-variant-VPSHLQ-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHLQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSHLW (make-instance 'x86-asm-instruction :name "VPSHLW" :is-container t :variants (list
x64-instruction-variant-VPSHLW-xmmreg.xmmrm128*.xmmreg x64-instruction-variant-VPSHLW-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VMPSADBW (make-instance 'x86-asm-instruction :name "VMPSADBW" :is-container t :variants (list
x64-instruction-variant-VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPABSB (make-instance 'x86-asm-instruction :name "VPABSB" :is-container t :variants (list
x64-instruction-variant-VPABSB-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VPABSW (make-instance 'x86-asm-instruction :name "VPABSW" :is-container t :variants (list
x64-instruction-variant-VPABSW-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VPABSD (make-instance 'x86-asm-instruction :name "VPABSD" :is-container t :variants (list
x64-instruction-variant-VPABSD-ymmreg.ymmrm256)))

(defparameter x64-instruction-container-VPACKSSWB (make-instance 'x86-asm-instruction :name "VPACKSSWB" :is-container t :variants (list
x64-instruction-variant-VPACKSSWB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPACKSSDW (make-instance 'x86-asm-instruction :name "VPACKSSDW" :is-container t :variants (list
x64-instruction-variant-VPACKSSDW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPACKUSDW (make-instance 'x86-asm-instruction :name "VPACKUSDW" :is-container t :variants (list
x64-instruction-variant-VPACKUSDW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPACKUSWB (make-instance 'x86-asm-instruction :name "VPACKUSWB" :is-container t :variants (list
x64-instruction-variant-VPACKUSWB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDB (make-instance 'x86-asm-instruction :name "VPADDB" :is-container t :variants (list
x64-instruction-variant-VPADDB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDW (make-instance 'x86-asm-instruction :name "VPADDW" :is-container t :variants (list
x64-instruction-variant-VPADDW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDD (make-instance 'x86-asm-instruction :name "VPADDD" :is-container t :variants (list
x64-instruction-variant-VPADDD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDQ (make-instance 'x86-asm-instruction :name "VPADDQ" :is-container t :variants (list
x64-instruction-variant-VPADDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDSB (make-instance 'x86-asm-instruction :name "VPADDSB" :is-container t :variants (list
x64-instruction-variant-VPADDSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDSW (make-instance 'x86-asm-instruction :name "VPADDSW" :is-container t :variants (list
x64-instruction-variant-VPADDSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDUSB (make-instance 'x86-asm-instruction :name "VPADDUSB" :is-container t :variants (list
x64-instruction-variant-VPADDUSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPADDUSW (make-instance 'x86-asm-instruction :name "VPADDUSW" :is-container t :variants (list
x64-instruction-variant-VPADDUSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPALIGNR (make-instance 'x86-asm-instruction :name "VPALIGNR" :is-container t :variants (list
x64-instruction-variant-VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPAND (make-instance 'x86-asm-instruction :name "VPAND" :is-container t :variants (list
x64-instruction-variant-VPAND-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPANDN (make-instance 'x86-asm-instruction :name "VPANDN" :is-container t :variants (list
x64-instruction-variant-VPANDN-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPAVGB (make-instance 'x86-asm-instruction :name "VPAVGB" :is-container t :variants (list
x64-instruction-variant-VPAVGB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPAVGW (make-instance 'x86-asm-instruction :name "VPAVGW" :is-container t :variants (list
x64-instruction-variant-VPAVGW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPBLENDVB (make-instance 'x86-asm-instruction :name "VPBLENDVB" :is-container t :variants (list
x64-instruction-variant-VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg)))

(defparameter x64-instruction-container-VPBLENDW (make-instance 'x86-asm-instruction :name "VPBLENDW" :is-container t :variants (list
x64-instruction-variant-VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPCMPEQB (make-instance 'x86-asm-instruction :name "VPCMPEQB" :is-container t :variants (list
x64-instruction-variant-VPCMPEQB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPEQW (make-instance 'x86-asm-instruction :name "VPCMPEQW" :is-container t :variants (list
x64-instruction-variant-VPCMPEQW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPEQD (make-instance 'x86-asm-instruction :name "VPCMPEQD" :is-container t :variants (list
x64-instruction-variant-VPCMPEQD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPEQQ (make-instance 'x86-asm-instruction :name "VPCMPEQQ" :is-container t :variants (list
x64-instruction-variant-VPCMPEQQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPGTB (make-instance 'x86-asm-instruction :name "VPCMPGTB" :is-container t :variants (list
x64-instruction-variant-VPCMPGTB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPGTW (make-instance 'x86-asm-instruction :name "VPCMPGTW" :is-container t :variants (list
x64-instruction-variant-VPCMPGTW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPGTD (make-instance 'x86-asm-instruction :name "VPCMPGTD" :is-container t :variants (list
x64-instruction-variant-VPCMPGTD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPCMPGTQ (make-instance 'x86-asm-instruction :name "VPCMPGTQ" :is-container t :variants (list
x64-instruction-variant-VPCMPGTQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHADDW (make-instance 'x86-asm-instruction :name "VPHADDW" :is-container t :variants (list
x64-instruction-variant-VPHADDW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHADDD (make-instance 'x86-asm-instruction :name "VPHADDD" :is-container t :variants (list
x64-instruction-variant-VPHADDD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHADDSW (make-instance 'x86-asm-instruction :name "VPHADDSW" :is-container t :variants (list
x64-instruction-variant-VPHADDSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHSUBW (make-instance 'x86-asm-instruction :name "VPHSUBW" :is-container t :variants (list
x64-instruction-variant-VPHSUBW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHSUBD (make-instance 'x86-asm-instruction :name "VPHSUBD" :is-container t :variants (list
x64-instruction-variant-VPHSUBD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPHSUBSW (make-instance 'x86-asm-instruction :name "VPHSUBSW" :is-container t :variants (list
x64-instruction-variant-VPHSUBSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMADDUBSW (make-instance 'x86-asm-instruction :name "VPMADDUBSW" :is-container t :variants (list
x64-instruction-variant-VPMADDUBSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMADDWD (make-instance 'x86-asm-instruction :name "VPMADDWD" :is-container t :variants (list
x64-instruction-variant-VPMADDWD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXSB (make-instance 'x86-asm-instruction :name "VPMAXSB" :is-container t :variants (list
x64-instruction-variant-VPMAXSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXSW (make-instance 'x86-asm-instruction :name "VPMAXSW" :is-container t :variants (list
x64-instruction-variant-VPMAXSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXSD (make-instance 'x86-asm-instruction :name "VPMAXSD" :is-container t :variants (list
x64-instruction-variant-VPMAXSD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXUB (make-instance 'x86-asm-instruction :name "VPMAXUB" :is-container t :variants (list
x64-instruction-variant-VPMAXUB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXUW (make-instance 'x86-asm-instruction :name "VPMAXUW" :is-container t :variants (list
x64-instruction-variant-VPMAXUW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMAXUD (make-instance 'x86-asm-instruction :name "VPMAXUD" :is-container t :variants (list
x64-instruction-variant-VPMAXUD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINSB (make-instance 'x86-asm-instruction :name "VPMINSB" :is-container t :variants (list
x64-instruction-variant-VPMINSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINSW (make-instance 'x86-asm-instruction :name "VPMINSW" :is-container t :variants (list
x64-instruction-variant-VPMINSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINSD (make-instance 'x86-asm-instruction :name "VPMINSD" :is-container t :variants (list
x64-instruction-variant-VPMINSD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINUB (make-instance 'x86-asm-instruction :name "VPMINUB" :is-container t :variants (list
x64-instruction-variant-VPMINUB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINUW (make-instance 'x86-asm-instruction :name "VPMINUW" :is-container t :variants (list
x64-instruction-variant-VPMINUW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMINUD (make-instance 'x86-asm-instruction :name "VPMINUD" :is-container t :variants (list
x64-instruction-variant-VPMINUD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMOVMSKB (make-instance 'x86-asm-instruction :name "VPMOVMSKB" :is-container t :variants (list
x64-instruction-variant-VPMOVMSKB-reg32.ymmreg x64-instruction-variant-VPMOVMSKB-reg64.ymmreg)))

(defparameter x64-instruction-container-VPMOVSXBW (make-instance 'x86-asm-instruction :name "VPMOVSXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBW-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMOVSXBD (make-instance 'x86-asm-instruction :name "VPMOVSXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBD-ymmreg.mem64 x64-instruction-variant-VPMOVSXBD-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVSXBQ (make-instance 'x86-asm-instruction :name "VPMOVSXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBQ-ymmreg.mem32 x64-instruction-variant-VPMOVSXBQ-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVSXWD (make-instance 'x86-asm-instruction :name "VPMOVSXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWD-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMOVSXWQ (make-instance 'x86-asm-instruction :name "VPMOVSXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWQ-ymmreg.mem64 x64-instruction-variant-VPMOVSXWQ-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVSXDQ (make-instance 'x86-asm-instruction :name "VPMOVSXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXDQ-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMOVZXBW (make-instance 'x86-asm-instruction :name "VPMOVZXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBW-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMOVZXBD (make-instance 'x86-asm-instruction :name "VPMOVZXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBD-ymmreg.mem64 x64-instruction-variant-VPMOVZXBD-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVZXBQ (make-instance 'x86-asm-instruction :name "VPMOVZXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBQ-ymmreg.mem32 x64-instruction-variant-VPMOVZXBQ-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVZXWD (make-instance 'x86-asm-instruction :name "VPMOVZXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWD-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMOVZXWQ (make-instance 'x86-asm-instruction :name "VPMOVZXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWQ-ymmreg.mem64 x64-instruction-variant-VPMOVZXWQ-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPMOVZXDQ (make-instance 'x86-asm-instruction :name "VPMOVZXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXDQ-ymmreg.xmmrm128)))

(defparameter x64-instruction-container-VPMULDQ (make-instance 'x86-asm-instruction :name "VPMULDQ" :is-container t :variants (list
x64-instruction-variant-VPMULDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULHRSW (make-instance 'x86-asm-instruction :name "VPMULHRSW" :is-container t :variants (list
x64-instruction-variant-VPMULHRSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULHUW (make-instance 'x86-asm-instruction :name "VPMULHUW" :is-container t :variants (list
x64-instruction-variant-VPMULHUW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULHW (make-instance 'x86-asm-instruction :name "VPMULHW" :is-container t :variants (list
x64-instruction-variant-VPMULHW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULLW (make-instance 'x86-asm-instruction :name "VPMULLW" :is-container t :variants (list
x64-instruction-variant-VPMULLW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULLD (make-instance 'x86-asm-instruction :name "VPMULLD" :is-container t :variants (list
x64-instruction-variant-VPMULLD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPMULUDQ (make-instance 'x86-asm-instruction :name "VPMULUDQ" :is-container t :variants (list
x64-instruction-variant-VPMULUDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPOR (make-instance 'x86-asm-instruction :name "VPOR" :is-container t :variants (list
x64-instruction-variant-VPOR-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSADBW (make-instance 'x86-asm-instruction :name "VPSADBW" :is-container t :variants (list
x64-instruction-variant-VPSADBW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSHUFB (make-instance 'x86-asm-instruction :name "VPSHUFB" :is-container t :variants (list
x64-instruction-variant-VPSHUFB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSHUFD (make-instance 'x86-asm-instruction :name "VPSHUFD" :is-container t :variants (list
x64-instruction-variant-VPSHUFD-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPSHUFHW (make-instance 'x86-asm-instruction :name "VPSHUFHW" :is-container t :variants (list
x64-instruction-variant-VPSHUFHW-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPSHUFLW (make-instance 'x86-asm-instruction :name "VPSHUFLW" :is-container t :variants (list
x64-instruction-variant-VPSHUFLW-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPSIGNB (make-instance 'x86-asm-instruction :name "VPSIGNB" :is-container t :variants (list
x64-instruction-variant-VPSIGNB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSIGNW (make-instance 'x86-asm-instruction :name "VPSIGNW" :is-container t :variants (list
x64-instruction-variant-VPSIGNW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSIGND (make-instance 'x86-asm-instruction :name "VPSIGND" :is-container t :variants (list
x64-instruction-variant-VPSIGND-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSLLDQ (make-instance 'x86-asm-instruction :name "VPSLLDQ" :is-container t :variants (list
x64-instruction-variant-VPSLLDQ-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLW (make-instance 'x86-asm-instruction :name "VPSLLW" :is-container t :variants (list
x64-instruction-variant-VPSLLW-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSLLW-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLD (make-instance 'x86-asm-instruction :name "VPSLLD" :is-container t :variants (list
x64-instruction-variant-VPSLLD-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSLLD-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSLLQ (make-instance 'x86-asm-instruction :name "VPSLLQ" :is-container t :variants (list
x64-instruction-variant-VPSLLQ-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSLLQ-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRAW (make-instance 'x86-asm-instruction :name "VPSRAW" :is-container t :variants (list
x64-instruction-variant-VPSRAW-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSRAW-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRAD (make-instance 'x86-asm-instruction :name "VPSRAD" :is-container t :variants (list
x64-instruction-variant-VPSRAD-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSRAD-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLDQ (make-instance 'x86-asm-instruction :name "VPSRLDQ" :is-container t :variants (list
x64-instruction-variant-VPSRLDQ-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLW (make-instance 'x86-asm-instruction :name "VPSRLW" :is-container t :variants (list
x64-instruction-variant-VPSRLW-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSRLW-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLD (make-instance 'x86-asm-instruction :name "VPSRLD" :is-container t :variants (list
x64-instruction-variant-VPSRLD-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSRLD-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSRLQ (make-instance 'x86-asm-instruction :name "VPSRLQ" :is-container t :variants (list
x64-instruction-variant-VPSRLQ-ymmreg.ymmreg*.xmmrm128 x64-instruction-variant-VPSRLQ-ymmreg.ymmreg*.imm8)))

(defparameter x64-instruction-container-VPSUBB (make-instance 'x86-asm-instruction :name "VPSUBB" :is-container t :variants (list
x64-instruction-variant-VPSUBB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBW (make-instance 'x86-asm-instruction :name "VPSUBW" :is-container t :variants (list
x64-instruction-variant-VPSUBW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBD (make-instance 'x86-asm-instruction :name "VPSUBD" :is-container t :variants (list
x64-instruction-variant-VPSUBD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBQ (make-instance 'x86-asm-instruction :name "VPSUBQ" :is-container t :variants (list
x64-instruction-variant-VPSUBQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBSB (make-instance 'x86-asm-instruction :name "VPSUBSB" :is-container t :variants (list
x64-instruction-variant-VPSUBSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBSW (make-instance 'x86-asm-instruction :name "VPSUBSW" :is-container t :variants (list
x64-instruction-variant-VPSUBSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBUSB (make-instance 'x86-asm-instruction :name "VPSUBUSB" :is-container t :variants (list
x64-instruction-variant-VPSUBUSB-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSUBUSW (make-instance 'x86-asm-instruction :name "VPSUBUSW" :is-container t :variants (list
x64-instruction-variant-VPSUBUSW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKHBW (make-instance 'x86-asm-instruction :name "VPUNPCKHBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKHWD (make-instance 'x86-asm-instruction :name "VPUNPCKHWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKHDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKHQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKLBW (make-instance 'x86-asm-instruction :name "VPUNPCKLBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKLWD (make-instance 'x86-asm-instruction :name "VPUNPCKLWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKLDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPUNPCKLQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPXOR (make-instance 'x86-asm-instruction :name "VPXOR" :is-container t :variants (list
x64-instruction-variant-VPXOR-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VMOVNTDQA (make-instance 'x86-asm-instruction :name "VMOVNTDQA" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQA-ymmreg.mem256)))

(defparameter x64-instruction-container-VBROADCASTSS (make-instance 'x86-asm-instruction :name "VBROADCASTSS" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSS-xmmreg.xmmreg x64-instruction-variant-VBROADCASTSS-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VBROADCASTSD (make-instance 'x86-asm-instruction :name "VBROADCASTSD" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSD-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VBROADCASTI128 (make-instance 'x86-asm-instruction :name "VBROADCASTI128" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI128-ymmreg.mem128)))

(defparameter x64-instruction-container-VPBLENDD (make-instance 'x86-asm-instruction :name "VPBLENDD" :is-container t :variants (list
x64-instruction-variant-VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8 x64-instruction-variant-VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPBROADCASTB (make-instance 'x86-asm-instruction :name "VPBROADCASTB" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTB-xmmreg.mem8 x64-instruction-variant-VPBROADCASTB-xmmreg.xmmreg x64-instruction-variant-VPBROADCASTB-ymmreg.mem8 x64-instruction-variant-VPBROADCASTB-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPBROADCASTW (make-instance 'x86-asm-instruction :name "VPBROADCASTW" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTW-xmmreg.mem16 x64-instruction-variant-VPBROADCASTW-xmmreg.xmmreg x64-instruction-variant-VPBROADCASTW-ymmreg.mem16 x64-instruction-variant-VPBROADCASTW-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPBROADCASTD (make-instance 'x86-asm-instruction :name "VPBROADCASTD" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTD-xmmreg.mem32 x64-instruction-variant-VPBROADCASTD-xmmreg.xmmreg x64-instruction-variant-VPBROADCASTD-ymmreg.mem32 x64-instruction-variant-VPBROADCASTD-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPBROADCASTQ (make-instance 'x86-asm-instruction :name "VPBROADCASTQ" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTQ-xmmreg.mem64 x64-instruction-variant-VPBROADCASTQ-xmmreg.xmmreg x64-instruction-variant-VPBROADCASTQ-ymmreg.mem64 x64-instruction-variant-VPBROADCASTQ-ymmreg.xmmreg)))

(defparameter x64-instruction-container-VPERMD (make-instance 'x86-asm-instruction :name "VPERMD" :is-container t :variants (list
x64-instruction-variant-VPERMD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPERMPD (make-instance 'x86-asm-instruction :name "VPERMPD" :is-container t :variants (list
x64-instruction-variant-VPERMPD-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPERMPS (make-instance 'x86-asm-instruction :name "VPERMPS" :is-container t :variants (list
x64-instruction-variant-VPERMPS-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPERMQ (make-instance 'x86-asm-instruction :name "VPERMQ" :is-container t :variants (list
x64-instruction-variant-VPERMQ-ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VPERM2I128 (make-instance 'x86-asm-instruction :name "VPERM2I128" :is-container t :variants (list
x64-instruction-variant-VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VEXTRACTI128 (make-instance 'x86-asm-instruction :name "VEXTRACTI128" :is-container t :variants (list
x64-instruction-variant-VEXTRACTI128-xmmrm128.ymmreg.imm8)))

(defparameter x64-instruction-container-VINSERTI128 (make-instance 'x86-asm-instruction :name "VINSERTI128" :is-container t :variants (list
x64-instruction-variant-VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8)))

(defparameter x64-instruction-container-VPMASKMOVD (make-instance 'x86-asm-instruction :name "VPMASKMOVD" :is-container t :variants (list
x64-instruction-variant-VPMASKMOVD-xmmreg.xmmreg*.mem128 x64-instruction-variant-VPMASKMOVD-ymmreg.ymmreg*.mem256)))

(defparameter x64-instruction-container-VPMASKMOVQ (make-instance 'x86-asm-instruction :name "VPMASKMOVQ" :is-container t :variants (list
x64-instruction-variant-VPMASKMOVQ-xmmreg.xmmreg*.mem128 x64-instruction-variant-VPMASKMOVQ-ymmreg.ymmreg*.mem256)))

(defparameter x64-instruction-container-VPMASKMOVD (make-instance 'x86-asm-instruction :name "VPMASKMOVD" :is-container t :variants (list
x64-instruction-variant-VPMASKMOVD-mem128.xmmreg*.xmmreg x64-instruction-variant-VPMASKMOVD-mem256.ymmreg*.ymmreg)))

(defparameter x64-instruction-container-VPMASKMOVQ (make-instance 'x86-asm-instruction :name "VPMASKMOVQ" :is-container t :variants (list
x64-instruction-variant-VPMASKMOVQ-mem128.xmmreg*.xmmreg x64-instruction-variant-VPMASKMOVQ-mem256.ymmreg*.ymmreg)))

(defparameter x64-instruction-container-VPSLLVD (make-instance 'x86-asm-instruction :name "VPSLLVD" :is-container t :variants (list
x64-instruction-variant-VPSLLVD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSLLVQ (make-instance 'x86-asm-instruction :name "VPSLLVQ" :is-container t :variants (list
x64-instruction-variant-VPSLLVQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSLLVD (make-instance 'x86-asm-instruction :name "VPSLLVD" :is-container t :variants (list
x64-instruction-variant-VPSLLVD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSLLVQ (make-instance 'x86-asm-instruction :name "VPSLLVQ" :is-container t :variants (list
x64-instruction-variant-VPSLLVQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSRAVD (make-instance 'x86-asm-instruction :name "VPSRAVD" :is-container t :variants (list
x64-instruction-variant-VPSRAVD-xmmreg.xmmreg*.xmmrm128 x64-instruction-variant-VPSRAVD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSRLVD (make-instance 'x86-asm-instruction :name "VPSRLVD" :is-container t :variants (list
x64-instruction-variant-VPSRLVD-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSRLVQ (make-instance 'x86-asm-instruction :name "VPSRLVQ" :is-container t :variants (list
x64-instruction-variant-VPSRLVQ-xmmreg.xmmreg*.xmmrm128)))

(defparameter x64-instruction-container-VPSRLVD (make-instance 'x86-asm-instruction :name "VPSRLVD" :is-container t :variants (list
x64-instruction-variant-VPSRLVD-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VPSRLVQ (make-instance 'x86-asm-instruction :name "VPSRLVQ" :is-container t :variants (list
x64-instruction-variant-VPSRLVQ-ymmreg.ymmreg*.ymmrm256)))

(defparameter x64-instruction-container-VGATHERDPD (make-instance 'x86-asm-instruction :name "VGATHERDPD" :is-container t :variants (list
x64-instruction-variant-VGATHERDPD-xmmreg.xmem64.xmmreg)))

(defparameter x64-instruction-container-VGATHERQPD (make-instance 'x86-asm-instruction :name "VGATHERQPD" :is-container t :variants (list
x64-instruction-variant-VGATHERQPD-xmmreg.xmem64.xmmreg)))

(defparameter x64-instruction-container-VGATHERDPD (make-instance 'x86-asm-instruction :name "VGATHERDPD" :is-container t :variants (list
x64-instruction-variant-VGATHERDPD-ymmreg.xmem64.ymmreg)))

(defparameter x64-instruction-container-VGATHERQPD (make-instance 'x86-asm-instruction :name "VGATHERQPD" :is-container t :variants (list
x64-instruction-variant-VGATHERQPD-ymmreg.ymem64.ymmreg)))

(defparameter x64-instruction-container-VGATHERDPS (make-instance 'x86-asm-instruction :name "VGATHERDPS" :is-container t :variants (list
x64-instruction-variant-VGATHERDPS-xmmreg.xmem32.xmmreg)))

(defparameter x64-instruction-container-VGATHERQPS (make-instance 'x86-asm-instruction :name "VGATHERQPS" :is-container t :variants (list
x64-instruction-variant-VGATHERQPS-xmmreg.xmem32.xmmreg)))

(defparameter x64-instruction-container-VGATHERDPS (make-instance 'x86-asm-instruction :name "VGATHERDPS" :is-container t :variants (list
x64-instruction-variant-VGATHERDPS-ymmreg.ymem32.ymmreg)))

(defparameter x64-instruction-container-VGATHERQPS (make-instance 'x86-asm-instruction :name "VGATHERQPS" :is-container t :variants (list
x64-instruction-variant-VGATHERQPS-xmmreg.ymem32.xmmreg)))

(defparameter x64-instruction-container-VPGATHERDD (make-instance 'x86-asm-instruction :name "VPGATHERDD" :is-container t :variants (list
x64-instruction-variant-VPGATHERDD-xmmreg.xmem32.xmmreg)))

(defparameter x64-instruction-container-VPGATHERQD (make-instance 'x86-asm-instruction :name "VPGATHERQD" :is-container t :variants (list
x64-instruction-variant-VPGATHERQD-xmmreg.xmem32.xmmreg)))

(defparameter x64-instruction-container-VPGATHERDD (make-instance 'x86-asm-instruction :name "VPGATHERDD" :is-container t :variants (list
x64-instruction-variant-VPGATHERDD-ymmreg.ymem32.ymmreg)))

(defparameter x64-instruction-container-VPGATHERQD (make-instance 'x86-asm-instruction :name "VPGATHERQD" :is-container t :variants (list
x64-instruction-variant-VPGATHERQD-xmmreg.ymem32.xmmreg)))

(defparameter x64-instruction-container-VPGATHERDQ (make-instance 'x86-asm-instruction :name "VPGATHERDQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERDQ-xmmreg.xmem64.xmmreg)))

(defparameter x64-instruction-container-VPGATHERQQ (make-instance 'x86-asm-instruction :name "VPGATHERQQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERQQ-xmmreg.xmem64.xmmreg)))

(defparameter x64-instruction-container-VPGATHERDQ (make-instance 'x86-asm-instruction :name "VPGATHERDQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERDQ-ymmreg.xmem64.ymmreg)))

(defparameter x64-instruction-container-VPGATHERQQ (make-instance 'x86-asm-instruction :name "VPGATHERQQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERQQ-ymmreg.ymem64.ymmreg)))

(defparameter x64-instruction-container-XABORT (make-instance 'x86-asm-instruction :name "XABORT" :is-container t :variants (list
x64-instruction-variant-XABORT-imm x64-instruction-variant-XABORT-imm8)))

(defparameter x64-instruction-container-XBEGIN (make-instance 'x86-asm-instruction :name "XBEGIN" :is-container t :variants (list
x64-instruction-variant-XBEGIN-imm x64-instruction-variant-XBEGIN-imm-near x64-instruction-variant-XBEGIN-imm64 x64-instruction-variant-XBEGIN-imm64-near)))

(defparameter x64-instruction-container-XEND (make-instance 'x86-asm-instruction :name "XEND" :is-container t :variants (list
x64-instruction-variant-XEND-void)))

(defparameter x64-instruction-container-XTEST (make-instance 'x86-asm-instruction :name "XTEST" :is-container t :variants (list
x64-instruction-variant-XTEST-void)))

(defparameter x64-instruction-container-ANDN (make-instance 'x86-asm-instruction :name "ANDN" :is-container t :variants (list
x64-instruction-variant-ANDN-reg32.reg32.rm32 x64-instruction-variant-ANDN-reg64.reg64.rm64)))

(defparameter x64-instruction-container-BEXTR (make-instance 'x86-asm-instruction :name "BEXTR" :is-container t :variants (list
x64-instruction-variant-BEXTR-reg32.rm32.reg32 x64-instruction-variant-BEXTR-reg64.rm64.reg64 x64-instruction-variant-BEXTR-reg32.rm32.imm32 x64-instruction-variant-BEXTR-reg64.rm64.imm32)))

(defparameter x64-instruction-container-BLCI (make-instance 'x86-asm-instruction :name "BLCI" :is-container t :variants (list
x64-instruction-variant-BLCI-reg32.rm32 x64-instruction-variant-BLCI-reg64.rm64)))

(defparameter x64-instruction-container-BLCIC (make-instance 'x86-asm-instruction :name "BLCIC" :is-container t :variants (list
x64-instruction-variant-BLCIC-reg32.rm32 x64-instruction-variant-BLCIC-reg64.rm64)))

(defparameter x64-instruction-container-BLSI (make-instance 'x86-asm-instruction :name "BLSI" :is-container t :variants (list
x64-instruction-variant-BLSI-reg32.rm32 x64-instruction-variant-BLSI-reg64.rm64)))

(defparameter x64-instruction-container-BLSIC (make-instance 'x86-asm-instruction :name "BLSIC" :is-container t :variants (list
x64-instruction-variant-BLSIC-reg32.rm32 x64-instruction-variant-BLSIC-reg64.rm64)))

(defparameter x64-instruction-container-BLCFILL (make-instance 'x86-asm-instruction :name "BLCFILL" :is-container t :variants (list
x64-instruction-variant-BLCFILL-reg32.rm32 x64-instruction-variant-BLCFILL-reg64.rm64)))

(defparameter x64-instruction-container-BLSFILL (make-instance 'x86-asm-instruction :name "BLSFILL" :is-container t :variants (list
x64-instruction-variant-BLSFILL-reg32.rm32 x64-instruction-variant-BLSFILL-reg64.rm64)))

(defparameter x64-instruction-container-BLCMSK (make-instance 'x86-asm-instruction :name "BLCMSK" :is-container t :variants (list
x64-instruction-variant-BLCMSK-reg32.rm32 x64-instruction-variant-BLCMSK-reg64.rm64)))

(defparameter x64-instruction-container-BLSMSK (make-instance 'x86-asm-instruction :name "BLSMSK" :is-container t :variants (list
x64-instruction-variant-BLSMSK-reg32.rm32 x64-instruction-variant-BLSMSK-reg64.rm64)))

(defparameter x64-instruction-container-BLSR (make-instance 'x86-asm-instruction :name "BLSR" :is-container t :variants (list
x64-instruction-variant-BLSR-reg32.rm32 x64-instruction-variant-BLSR-reg64.rm64)))

(defparameter x64-instruction-container-BLCS (make-instance 'x86-asm-instruction :name "BLCS" :is-container t :variants (list
x64-instruction-variant-BLCS-reg32.rm32 x64-instruction-variant-BLCS-reg64.rm64)))

(defparameter x64-instruction-container-BZHI (make-instance 'x86-asm-instruction :name "BZHI" :is-container t :variants (list
x64-instruction-variant-BZHI-reg32.rm32.reg32 x64-instruction-variant-BZHI-reg64.rm64.reg64)))

(defparameter x64-instruction-container-MULX (make-instance 'x86-asm-instruction :name "MULX" :is-container t :variants (list
x64-instruction-variant-MULX-reg32.reg32.rm32 x64-instruction-variant-MULX-reg64.reg64.rm64)))

(defparameter x64-instruction-container-PDEP (make-instance 'x86-asm-instruction :name "PDEP" :is-container t :variants (list
x64-instruction-variant-PDEP-reg32.reg32.rm32 x64-instruction-variant-PDEP-reg64.reg64.rm64)))

(defparameter x64-instruction-container-PEXT (make-instance 'x86-asm-instruction :name "PEXT" :is-container t :variants (list
x64-instruction-variant-PEXT-reg32.reg32.rm32 x64-instruction-variant-PEXT-reg64.reg64.rm64)))

(defparameter x64-instruction-container-RORX (make-instance 'x86-asm-instruction :name "RORX" :is-container t :variants (list
x64-instruction-variant-RORX-reg32.rm32.imm8 x64-instruction-variant-RORX-reg64.rm64.imm8)))

(defparameter x64-instruction-container-SARX (make-instance 'x86-asm-instruction :name "SARX" :is-container t :variants (list
x64-instruction-variant-SARX-reg32.rm32.reg32 x64-instruction-variant-SARX-reg64.rm64.reg64)))

(defparameter x64-instruction-container-SHLX (make-instance 'x86-asm-instruction :name "SHLX" :is-container t :variants (list
x64-instruction-variant-SHLX-reg32.rm32.reg32 x64-instruction-variant-SHLX-reg64.rm64.reg64)))

(defparameter x64-instruction-container-SHRX (make-instance 'x86-asm-instruction :name "SHRX" :is-container t :variants (list
x64-instruction-variant-SHRX-reg32.rm32.reg32 x64-instruction-variant-SHRX-reg64.rm64.reg64)))

(defparameter x64-instruction-container-TZCNT (make-instance 'x86-asm-instruction :name "TZCNT" :is-container t :variants (list
x64-instruction-variant-TZCNT-reg16.rm16 x64-instruction-variant-TZCNT-reg32.rm32 x64-instruction-variant-TZCNT-reg64.rm64)))

(defparameter x64-instruction-container-TZMSK (make-instance 'x86-asm-instruction :name "TZMSK" :is-container t :variants (list
x64-instruction-variant-TZMSK-reg32.rm32 x64-instruction-variant-TZMSK-reg64.rm64)))

(defparameter x64-instruction-container-T1MSKC (make-instance 'x86-asm-instruction :name "T1MSKC" :is-container t :variants (list
x64-instruction-variant-T1MSKC-reg32.rm32 x64-instruction-variant-T1MSKC-reg64.rm64)))

(defparameter x64-instruction-container-PREFETCHWT1 (make-instance 'x86-asm-instruction :name "PREFETCHWT1" :is-container t :variants (list
x64-instruction-variant-PREFETCHWT1-mem8)))

(defparameter x64-instruction-container-BNDMK (make-instance 'x86-asm-instruction :name "BNDMK" :is-container t :variants (list
x64-instruction-variant-BNDMK-bndreg.mem)))

(defparameter x64-instruction-container-BNDCL (make-instance 'x86-asm-instruction :name "BNDCL" :is-container t :variants (list
x64-instruction-variant-BNDCL-bndreg.mem x64-instruction-variant-BNDCL-bndreg.reg64)))

(defparameter x64-instruction-container-BNDCU (make-instance 'x86-asm-instruction :name "BNDCU" :is-container t :variants (list
x64-instruction-variant-BNDCU-bndreg.mem x64-instruction-variant-BNDCU-bndreg.reg64)))

(defparameter x64-instruction-container-BNDCN (make-instance 'x86-asm-instruction :name "BNDCN" :is-container t :variants (list
x64-instruction-variant-BNDCN-bndreg.mem x64-instruction-variant-BNDCN-bndreg.reg64)))

(defparameter x64-instruction-container-BNDMOV (make-instance 'x86-asm-instruction :name "BNDMOV" :is-container t :variants (list
x64-instruction-variant-BNDMOV-bndreg.bndreg x64-instruction-variant-BNDMOV-bndreg.mem x64-instruction-variant-BNDMOV-bndreg.bndreg x64-instruction-variant-BNDMOV-mem.bndreg)))

(defparameter x64-instruction-container-BNDLDX (make-instance 'x86-asm-instruction :name "BNDLDX" :is-container t :variants (list
x64-instruction-variant-BNDLDX-bndreg.mem x64-instruction-variant-BNDLDX-bndreg.mem.reg64)))

(defparameter x64-instruction-container-BNDSTX (make-instance 'x86-asm-instruction :name "BNDSTX" :is-container t :variants (list
x64-instruction-variant-BNDSTX-mem.bndreg x64-instruction-variant-BNDSTX-mem.reg64.bndreg x64-instruction-variant-BNDSTX-mem.bndreg.reg64)))

(defparameter x64-instruction-container-KADDB (make-instance 'x86-asm-instruction :name "KADDB" :is-container t :variants (list
x64-instruction-variant-KADDB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KADDD (make-instance 'x86-asm-instruction :name "KADDD" :is-container t :variants (list
x64-instruction-variant-KADDD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KADDQ (make-instance 'x86-asm-instruction :name "KADDQ" :is-container t :variants (list
x64-instruction-variant-KADDQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KADDW (make-instance 'x86-asm-instruction :name "KADDW" :is-container t :variants (list
x64-instruction-variant-KADDW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDB (make-instance 'x86-asm-instruction :name "KANDB" :is-container t :variants (list
x64-instruction-variant-KANDB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDD (make-instance 'x86-asm-instruction :name "KANDD" :is-container t :variants (list
x64-instruction-variant-KANDD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDNB (make-instance 'x86-asm-instruction :name "KANDNB" :is-container t :variants (list
x64-instruction-variant-KANDNB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDND (make-instance 'x86-asm-instruction :name "KANDND" :is-container t :variants (list
x64-instruction-variant-KANDND-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDNQ (make-instance 'x86-asm-instruction :name "KANDNQ" :is-container t :variants (list
x64-instruction-variant-KANDNQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDNW (make-instance 'x86-asm-instruction :name "KANDNW" :is-container t :variants (list
x64-instruction-variant-KANDNW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDQ (make-instance 'x86-asm-instruction :name "KANDQ" :is-container t :variants (list
x64-instruction-variant-KANDQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KANDW (make-instance 'x86-asm-instruction :name "KANDW" :is-container t :variants (list
x64-instruction-variant-KANDW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KMOVB (make-instance 'x86-asm-instruction :name "KMOVB" :is-container t :variants (list
x64-instruction-variant-KMOVB-kreg.krm8 x64-instruction-variant-KMOVB-mem8.kreg x64-instruction-variant-KMOVB-kreg.reg32 x64-instruction-variant-KMOVB-reg32.kreg)))

(defparameter x64-instruction-container-KMOVD (make-instance 'x86-asm-instruction :name "KMOVD" :is-container t :variants (list
x64-instruction-variant-KMOVD-kreg.krm32 x64-instruction-variant-KMOVD-mem32.kreg x64-instruction-variant-KMOVD-kreg.reg32 x64-instruction-variant-KMOVD-reg32.kreg)))

(defparameter x64-instruction-container-KMOVQ (make-instance 'x86-asm-instruction :name "KMOVQ" :is-container t :variants (list
x64-instruction-variant-KMOVQ-kreg.krm64 x64-instruction-variant-KMOVQ-mem64.kreg x64-instruction-variant-KMOVQ-kreg.reg64 x64-instruction-variant-KMOVQ-reg64.kreg)))

(defparameter x64-instruction-container-KMOVW (make-instance 'x86-asm-instruction :name "KMOVW" :is-container t :variants (list
x64-instruction-variant-KMOVW-kreg.krm16 x64-instruction-variant-KMOVW-mem16.kreg x64-instruction-variant-KMOVW-kreg.reg32 x64-instruction-variant-KMOVW-reg32.kreg)))

(defparameter x64-instruction-container-KNOTB (make-instance 'x86-asm-instruction :name "KNOTB" :is-container t :variants (list
x64-instruction-variant-KNOTB-kreg.kreg)))

(defparameter x64-instruction-container-KNOTD (make-instance 'x86-asm-instruction :name "KNOTD" :is-container t :variants (list
x64-instruction-variant-KNOTD-kreg.kreg)))

(defparameter x64-instruction-container-KNOTQ (make-instance 'x86-asm-instruction :name "KNOTQ" :is-container t :variants (list
x64-instruction-variant-KNOTQ-kreg.kreg)))

(defparameter x64-instruction-container-KNOTW (make-instance 'x86-asm-instruction :name "KNOTW" :is-container t :variants (list
x64-instruction-variant-KNOTW-kreg.kreg)))

(defparameter x64-instruction-container-KORB (make-instance 'x86-asm-instruction :name "KORB" :is-container t :variants (list
x64-instruction-variant-KORB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KORD (make-instance 'x86-asm-instruction :name "KORD" :is-container t :variants (list
x64-instruction-variant-KORD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KORQ (make-instance 'x86-asm-instruction :name "KORQ" :is-container t :variants (list
x64-instruction-variant-KORQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KORTESTB (make-instance 'x86-asm-instruction :name "KORTESTB" :is-container t :variants (list
x64-instruction-variant-KORTESTB-kreg.kreg)))

(defparameter x64-instruction-container-KORTESTD (make-instance 'x86-asm-instruction :name "KORTESTD" :is-container t :variants (list
x64-instruction-variant-KORTESTD-kreg.kreg)))

(defparameter x64-instruction-container-KORTESTQ (make-instance 'x86-asm-instruction :name "KORTESTQ" :is-container t :variants (list
x64-instruction-variant-KORTESTQ-kreg.kreg)))

(defparameter x64-instruction-container-KORTESTW (make-instance 'x86-asm-instruction :name "KORTESTW" :is-container t :variants (list
x64-instruction-variant-KORTESTW-kreg.kreg)))

(defparameter x64-instruction-container-KORW (make-instance 'x86-asm-instruction :name "KORW" :is-container t :variants (list
x64-instruction-variant-KORW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KSHIFTLB (make-instance 'x86-asm-instruction :name "KSHIFTLB" :is-container t :variants (list
x64-instruction-variant-KSHIFTLB-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTLD (make-instance 'x86-asm-instruction :name "KSHIFTLD" :is-container t :variants (list
x64-instruction-variant-KSHIFTLD-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTLQ (make-instance 'x86-asm-instruction :name "KSHIFTLQ" :is-container t :variants (list
x64-instruction-variant-KSHIFTLQ-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTLW (make-instance 'x86-asm-instruction :name "KSHIFTLW" :is-container t :variants (list
x64-instruction-variant-KSHIFTLW-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTRB (make-instance 'x86-asm-instruction :name "KSHIFTRB" :is-container t :variants (list
x64-instruction-variant-KSHIFTRB-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTRD (make-instance 'x86-asm-instruction :name "KSHIFTRD" :is-container t :variants (list
x64-instruction-variant-KSHIFTRD-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTRQ (make-instance 'x86-asm-instruction :name "KSHIFTRQ" :is-container t :variants (list
x64-instruction-variant-KSHIFTRQ-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KSHIFTRW (make-instance 'x86-asm-instruction :name "KSHIFTRW" :is-container t :variants (list
x64-instruction-variant-KSHIFTRW-kreg.kreg.imm8)))

(defparameter x64-instruction-container-KTESTB (make-instance 'x86-asm-instruction :name "KTESTB" :is-container t :variants (list
x64-instruction-variant-KTESTB-kreg.kreg)))

(defparameter x64-instruction-container-KTESTD (make-instance 'x86-asm-instruction :name "KTESTD" :is-container t :variants (list
x64-instruction-variant-KTESTD-kreg.kreg)))

(defparameter x64-instruction-container-KTESTQ (make-instance 'x86-asm-instruction :name "KTESTQ" :is-container t :variants (list
x64-instruction-variant-KTESTQ-kreg.kreg)))

(defparameter x64-instruction-container-KTESTW (make-instance 'x86-asm-instruction :name "KTESTW" :is-container t :variants (list
x64-instruction-variant-KTESTW-kreg.kreg)))

(defparameter x64-instruction-container-KUNPCKBW (make-instance 'x86-asm-instruction :name "KUNPCKBW" :is-container t :variants (list
x64-instruction-variant-KUNPCKBW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KUNPCKDQ (make-instance 'x86-asm-instruction :name "KUNPCKDQ" :is-container t :variants (list
x64-instruction-variant-KUNPCKDQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KUNPCKWD (make-instance 'x86-asm-instruction :name "KUNPCKWD" :is-container t :variants (list
x64-instruction-variant-KUNPCKWD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXNORB (make-instance 'x86-asm-instruction :name "KXNORB" :is-container t :variants (list
x64-instruction-variant-KXNORB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXNORD (make-instance 'x86-asm-instruction :name "KXNORD" :is-container t :variants (list
x64-instruction-variant-KXNORD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXNORQ (make-instance 'x86-asm-instruction :name "KXNORQ" :is-container t :variants (list
x64-instruction-variant-KXNORQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXNORW (make-instance 'x86-asm-instruction :name "KXNORW" :is-container t :variants (list
x64-instruction-variant-KXNORW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXORB (make-instance 'x86-asm-instruction :name "KXORB" :is-container t :variants (list
x64-instruction-variant-KXORB-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXORD (make-instance 'x86-asm-instruction :name "KXORD" :is-container t :variants (list
x64-instruction-variant-KXORD-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXORQ (make-instance 'x86-asm-instruction :name "KXORQ" :is-container t :variants (list
x64-instruction-variant-KXORQ-kreg.kreg.kreg)))

(defparameter x64-instruction-container-KXORW (make-instance 'x86-asm-instruction :name "KXORW" :is-container t :variants (list
x64-instruction-variant-KXORW-kreg.kreg.kreg)))

(defparameter x64-instruction-container-SHA1MSG1 (make-instance 'x86-asm-instruction :name "SHA1MSG1" :is-container t :variants (list
x64-instruction-variant-SHA1MSG1-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SHA1MSG2 (make-instance 'x86-asm-instruction :name "SHA1MSG2" :is-container t :variants (list
x64-instruction-variant-SHA1MSG2-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SHA1NEXTE (make-instance 'x86-asm-instruction :name "SHA1NEXTE" :is-container t :variants (list
x64-instruction-variant-SHA1NEXTE-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SHA1RNDS4 (make-instance 'x86-asm-instruction :name "SHA1RNDS4" :is-container t :variants (list
x64-instruction-variant-SHA1RNDS4-xmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-SHA256MSG1 (make-instance 'x86-asm-instruction :name "SHA256MSG1" :is-container t :variants (list
x64-instruction-variant-SHA256MSG1-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SHA256MSG2 (make-instance 'x86-asm-instruction :name "SHA256MSG2" :is-container t :variants (list
x64-instruction-variant-SHA256MSG2-xmmreg.xmmrm128)))

(defparameter x64-instruction-container-SHA256RNDS2 (make-instance 'x86-asm-instruction :name "SHA256RNDS2" :is-container t :variants (list
x64-instruction-variant-SHA256RNDS2-xmmreg.xmmrm128.xmm0)))

(defparameter x64-instruction-container-VADDPD (make-instance 'x86-asm-instruction :name "VADDPD" :is-container t :variants (list
x64-instruction-variant-VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VADDPS (make-instance 'x86-asm-instruction :name "VADDPS" :is-container t :variants (list
x64-instruction-variant-VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VADDSD (make-instance 'x86-asm-instruction :name "VADDSD" :is-container t :variants (list
x64-instruction-variant-VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VADDSS (make-instance 'x86-asm-instruction :name "VADDSS" :is-container t :variants (list
x64-instruction-variant-VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VALIGND (make-instance 'x86-asm-instruction :name "VALIGND" :is-container t :variants (list
x64-instruction-variant-VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VALIGNQ (make-instance 'x86-asm-instruction :name "VALIGNQ" :is-container t :variants (list
x64-instruction-variant-VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VANDNPD (make-instance 'x86-asm-instruction :name "VANDNPD" :is-container t :variants (list
x64-instruction-variant-VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VANDNPS (make-instance 'x86-asm-instruction :name "VANDNPS" :is-container t :variants (list
x64-instruction-variant-VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VANDPD (make-instance 'x86-asm-instruction :name "VANDPD" :is-container t :variants (list
x64-instruction-variant-VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VANDPS (make-instance 'x86-asm-instruction :name "VANDPS" :is-container t :variants (list
x64-instruction-variant-VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VBLENDMPD (make-instance 'x86-asm-instruction :name "VBLENDMPD" :is-container t :variants (list
x64-instruction-variant-VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VBLENDMPS (make-instance 'x86-asm-instruction :name "VBLENDMPS" :is-container t :variants (list
x64-instruction-variant-VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VBROADCASTF32X2 (make-instance 'x86-asm-instruction :name "VBROADCASTF32X2" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF32X2-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VBROADCASTF32X2-zmmreg-mask-z.xmmrm64)))

(defparameter x64-instruction-container-VBROADCASTF32X4 (make-instance 'x86-asm-instruction :name "VBROADCASTF32X4" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF32X4-ymmreg-mask-z.mem128 x64-instruction-variant-VBROADCASTF32X4-zmmreg-mask-z.mem128)))

(defparameter x64-instruction-container-VBROADCASTF32X8 (make-instance 'x86-asm-instruction :name "VBROADCASTF32X8" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF32X8-zmmreg-mask-z.mem256)))

(defparameter x64-instruction-container-VBROADCASTF64X2 (make-instance 'x86-asm-instruction :name "VBROADCASTF64X2" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF64X2-ymmreg-mask-z.mem128 x64-instruction-variant-VBROADCASTF64X2-zmmreg-mask-z.mem128)))

(defparameter x64-instruction-container-VBROADCASTF64X4 (make-instance 'x86-asm-instruction :name "VBROADCASTF64X4" :is-container t :variants (list
x64-instruction-variant-VBROADCASTF64X4-zmmreg-mask-z.mem256)))

(defparameter x64-instruction-container-VBROADCASTI32X2 (make-instance 'x86-asm-instruction :name "VBROADCASTI32X2" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI32X2-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VBROADCASTI32X2-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VBROADCASTI32X2-zmmreg-mask-z.xmmrm64)))

(defparameter x64-instruction-container-VBROADCASTI32X4 (make-instance 'x86-asm-instruction :name "VBROADCASTI32X4" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI32X4-ymmreg-mask-z.mem128 x64-instruction-variant-VBROADCASTI32X4-zmmreg-mask-z.mem128)))

(defparameter x64-instruction-container-VBROADCASTI32X8 (make-instance 'x86-asm-instruction :name "VBROADCASTI32X8" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI32X8-zmmreg-mask-z.mem256)))

(defparameter x64-instruction-container-VBROADCASTI64X2 (make-instance 'x86-asm-instruction :name "VBROADCASTI64X2" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI64X2-ymmreg-mask-z.mem128 x64-instruction-variant-VBROADCASTI64X2-zmmreg-mask-z.mem128)))

(defparameter x64-instruction-container-VBROADCASTI64X4 (make-instance 'x86-asm-instruction :name "VBROADCASTI64X4" :is-container t :variants (list
x64-instruction-variant-VBROADCASTI64X4-zmmreg-mask-z.mem256)))

(defparameter x64-instruction-container-VBROADCASTSD (make-instance 'x86-asm-instruction :name "VBROADCASTSD" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSD-ymmreg-mask-z.mem64 x64-instruction-variant-VBROADCASTSD-zmmreg-mask-z.mem64 x64-instruction-variant-VBROADCASTSD-ymmreg-mask-z.xmmreg x64-instruction-variant-VBROADCASTSD-zmmreg-mask-z.xmmreg)))

(defparameter x64-instruction-container-VBROADCASTSS (make-instance 'x86-asm-instruction :name "VBROADCASTSS" :is-container t :variants (list
x64-instruction-variant-VBROADCASTSS-xmmreg-mask-z.mem32 x64-instruction-variant-VBROADCASTSS-ymmreg-mask-z.mem32 x64-instruction-variant-VBROADCASTSS-zmmreg-mask-z.mem32 x64-instruction-variant-VBROADCASTSS-xmmreg-mask-z.xmmreg x64-instruction-variant-VBROADCASTSS-ymmreg-mask-z.xmmreg x64-instruction-variant-VBROADCASTSS-zmmreg-mask-z.xmmreg)))

(defparameter x64-instruction-container-VCMPPD (make-instance 'x86-asm-instruction :name "VCMPPD" :is-container t :variants (list
x64-instruction-variant-VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VCMPPS (make-instance 'x86-asm-instruction :name "VCMPPS" :is-container t :variants (list
x64-instruction-variant-VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VCMPSD (make-instance 'x86-asm-instruction :name "VCMPSD" :is-container t :variants (list
x64-instruction-variant-VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VCMPSS (make-instance 'x86-asm-instruction :name "VCMPSS" :is-container t :variants (list
x64-instruction-variant-VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VCOMISD (make-instance 'x86-asm-instruction :name "VCOMISD" :is-container t :variants (list
x64-instruction-variant-VCOMISD-xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VCOMISS (make-instance 'x86-asm-instruction :name "VCOMISS" :is-container t :variants (list
x64-instruction-variant-VCOMISS-xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VCOMPRESSPD (make-instance 'x86-asm-instruction :name "VCOMPRESSPD" :is-container t :variants (list
x64-instruction-variant-VCOMPRESSPD-mem128-mask.xmmreg x64-instruction-variant-VCOMPRESSPD-mem256-mask.ymmreg x64-instruction-variant-VCOMPRESSPD-mem512-mask.zmmreg x64-instruction-variant-VCOMPRESSPD-xmmreg-mask-z.xmmreg x64-instruction-variant-VCOMPRESSPD-ymmreg-mask-z.ymmreg x64-instruction-variant-VCOMPRESSPD-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VCOMPRESSPS (make-instance 'x86-asm-instruction :name "VCOMPRESSPS" :is-container t :variants (list
x64-instruction-variant-VCOMPRESSPS-mem128-mask.xmmreg x64-instruction-variant-VCOMPRESSPS-mem256-mask.ymmreg x64-instruction-variant-VCOMPRESSPS-mem512-mask.zmmreg x64-instruction-variant-VCOMPRESSPS-xmmreg-mask-z.xmmreg x64-instruction-variant-VCOMPRESSPS-ymmreg-mask-z.ymmreg x64-instruction-variant-VCOMPRESSPS-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VCVTDQ2PD (make-instance 'x86-asm-instruction :name "VCVTDQ2PD" :is-container t :variants (list
x64-instruction-variant-VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er)))

(defparameter x64-instruction-container-VCVTDQ2PS (make-instance 'x86-asm-instruction :name "VCVTDQ2PS" :is-container t :variants (list
x64-instruction-variant-VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VCVTPD2DQ (make-instance 'x86-asm-instruction :name "VCVTPD2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTPD2PS (make-instance 'x86-asm-instruction :name "VCVTPD2PS" :is-container t :variants (list
x64-instruction-variant-VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTPD2QQ (make-instance 'x86-asm-instruction :name "VCVTPD2QQ" :is-container t :variants (list
x64-instruction-variant-VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTPD2UDQ (make-instance 'x86-asm-instruction :name "VCVTPD2UDQ" :is-container t :variants (list
x64-instruction-variant-VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTPD2UQQ (make-instance 'x86-asm-instruction :name "VCVTPD2UQQ" :is-container t :variants (list
x64-instruction-variant-VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTPH2PS (make-instance 'x86-asm-instruction :name "VCVTPH2PS" :is-container t :variants (list
x64-instruction-variant-VCVTPH2PS-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VCVTPH2PS-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae)))

(defparameter x64-instruction-container-VCVTPS2DQ (make-instance 'x86-asm-instruction :name "VCVTPS2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VCVTPS2PD (make-instance 'x86-asm-instruction :name "VCVTPS2PD" :is-container t :variants (list
x64-instruction-variant-VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae)))

(defparameter x64-instruction-container-VCVTPS2PH (make-instance 'x86-asm-instruction :name "VCVTPS2PH" :is-container t :variants (list
x64-instruction-variant-VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8 x64-instruction-variant-VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8 x64-instruction-variant-VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8 x64-instruction-variant-VCVTPS2PH-mem64-mask.xmmreg.imm8 x64-instruction-variant-VCVTPS2PH-mem128-mask.ymmreg.imm8 x64-instruction-variant-VCVTPS2PH-mem256-mask.zmmreg-sae.imm8)))

(defparameter x64-instruction-container-VCVTPS2QQ (make-instance 'x86-asm-instruction :name "VCVTPS2QQ" :is-container t :variants (list
x64-instruction-variant-VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er)))

(defparameter x64-instruction-container-VCVTPS2UDQ (make-instance 'x86-asm-instruction :name "VCVTPS2UDQ" :is-container t :variants (list
x64-instruction-variant-VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VCVTPS2UQQ (make-instance 'x86-asm-instruction :name "VCVTPS2UQQ" :is-container t :variants (list
x64-instruction-variant-VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er)))

(defparameter x64-instruction-container-VCVTQQ2PD (make-instance 'x86-asm-instruction :name "VCVTQQ2PD" :is-container t :variants (list
x64-instruction-variant-VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTQQ2PS (make-instance 'x86-asm-instruction :name "VCVTQQ2PS" :is-container t :variants (list
x64-instruction-variant-VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTSD2SI (make-instance 'x86-asm-instruction :name "VCVTSD2SI" :is-container t :variants (list
x64-instruction-variant-VCVTSD2SI-reg32.xmmrm64-er x64-instruction-variant-VCVTSD2SI-reg64.xmmrm64-er)))

(defparameter x64-instruction-container-VCVTSD2SS (make-instance 'x86-asm-instruction :name "VCVTSD2SS" :is-container t :variants (list
x64-instruction-variant-VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VCVTSD2USI (make-instance 'x86-asm-instruction :name "VCVTSD2USI" :is-container t :variants (list
x64-instruction-variant-VCVTSD2USI-reg32.xmmrm64-er x64-instruction-variant-VCVTSD2USI-reg64.xmmrm64-er)))

(defparameter x64-instruction-container-VCVTSI2SD (make-instance 'x86-asm-instruction :name "VCVTSI2SD" :is-container t :variants (list
x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg-er.rm32 x64-instruction-variant-VCVTSI2SD-xmmreg.xmmreg-er.rm64)))

(defparameter x64-instruction-container-VCVTSI2SS (make-instance 'x86-asm-instruction :name "VCVTSI2SS" :is-container t :variants (list
x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg-er.rm32 x64-instruction-variant-VCVTSI2SS-xmmreg.xmmreg-er.rm64)))

(defparameter x64-instruction-container-VCVTSS2SD (make-instance 'x86-asm-instruction :name "VCVTSS2SD" :is-container t :variants (list
x64-instruction-variant-VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VCVTSS2SI (make-instance 'x86-asm-instruction :name "VCVTSS2SI" :is-container t :variants (list
x64-instruction-variant-VCVTSS2SI-reg32.xmmrm32-er x64-instruction-variant-VCVTSS2SI-reg64.xmmrm32-er)))

(defparameter x64-instruction-container-VCVTSS2USI (make-instance 'x86-asm-instruction :name "VCVTSS2USI" :is-container t :variants (list
x64-instruction-variant-VCVTSS2USI-reg32.xmmrm32-er x64-instruction-variant-VCVTSS2USI-reg64.xmmrm32-er)))

(defparameter x64-instruction-container-VCVTTPD2DQ (make-instance 'x86-asm-instruction :name "VCVTTPD2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VCVTTPD2QQ (make-instance 'x86-asm-instruction :name "VCVTTPD2QQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VCVTTPD2UDQ (make-instance 'x86-asm-instruction :name "VCVTTPD2UDQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VCVTTPD2UQQ (make-instance 'x86-asm-instruction :name "VCVTTPD2UQQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VCVTTPS2DQ (make-instance 'x86-asm-instruction :name "VCVTTPS2DQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VCVTTPS2QQ (make-instance 'x86-asm-instruction :name "VCVTTPS2QQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae)))

(defparameter x64-instruction-container-VCVTTPS2UDQ (make-instance 'x86-asm-instruction :name "VCVTTPS2UDQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VCVTTPS2UQQ (make-instance 'x86-asm-instruction :name "VCVTTPS2UQQ" :is-container t :variants (list
x64-instruction-variant-VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae)))

(defparameter x64-instruction-container-VCVTTSD2SI (make-instance 'x86-asm-instruction :name "VCVTTSD2SI" :is-container t :variants (list
x64-instruction-variant-VCVTTSD2SI-reg32.xmmrm64-sae x64-instruction-variant-VCVTTSD2SI-reg64.xmmrm64-sae)))

(defparameter x64-instruction-container-VCVTTSD2USI (make-instance 'x86-asm-instruction :name "VCVTTSD2USI" :is-container t :variants (list
x64-instruction-variant-VCVTTSD2USI-reg32.xmmrm64-sae x64-instruction-variant-VCVTTSD2USI-reg64.xmmrm64-sae)))

(defparameter x64-instruction-container-VCVTTSS2SI (make-instance 'x86-asm-instruction :name "VCVTTSS2SI" :is-container t :variants (list
x64-instruction-variant-VCVTTSS2SI-reg32.xmmrm32-sae x64-instruction-variant-VCVTTSS2SI-reg64.xmmrm32-sae)))

(defparameter x64-instruction-container-VCVTTSS2USI (make-instance 'x86-asm-instruction :name "VCVTTSS2USI" :is-container t :variants (list
x64-instruction-variant-VCVTTSS2USI-reg32.xmmrm32-sae x64-instruction-variant-VCVTTSS2USI-reg64.xmmrm32-sae)))

(defparameter x64-instruction-container-VCVTUDQ2PD (make-instance 'x86-asm-instruction :name "VCVTUDQ2PD" :is-container t :variants (list
x64-instruction-variant-VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32 x64-instruction-variant-VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er)))

(defparameter x64-instruction-container-VCVTUDQ2PS (make-instance 'x86-asm-instruction :name "VCVTUDQ2PS" :is-container t :variants (list
x64-instruction-variant-VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VCVTUQQ2PD (make-instance 'x86-asm-instruction :name "VCVTUQQ2PD" :is-container t :variants (list
x64-instruction-variant-VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTUQQ2PS (make-instance 'x86-asm-instruction :name "VCVTUQQ2PS" :is-container t :variants (list
x64-instruction-variant-VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VCVTUSI2SD (make-instance 'x86-asm-instruction :name "VCVTUSI2SD" :is-container t :variants (list
x64-instruction-variant-VCVTUSI2SD-xmmreg.xmmreg-er.rm32 x64-instruction-variant-VCVTUSI2SD-xmmreg.xmmreg-er.rm64)))

(defparameter x64-instruction-container-VCVTUSI2SS (make-instance 'x86-asm-instruction :name "VCVTUSI2SS" :is-container t :variants (list
x64-instruction-variant-VCVTUSI2SS-xmmreg.xmmreg-er.rm32 x64-instruction-variant-VCVTUSI2SS-xmmreg.xmmreg-er.rm64)))

(defparameter x64-instruction-container-VDBPSADBW (make-instance 'x86-asm-instruction :name "VDBPSADBW" :is-container t :variants (list
x64-instruction-variant-VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8 x64-instruction-variant-VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8 x64-instruction-variant-VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VDIVPD (make-instance 'x86-asm-instruction :name "VDIVPD" :is-container t :variants (list
x64-instruction-variant-VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VDIVPS (make-instance 'x86-asm-instruction :name "VDIVPS" :is-container t :variants (list
x64-instruction-variant-VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VDIVSD (make-instance 'x86-asm-instruction :name "VDIVSD" :is-container t :variants (list
x64-instruction-variant-VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VDIVSS (make-instance 'x86-asm-instruction :name "VDIVSS" :is-container t :variants (list
x64-instruction-variant-VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VEXP2PD (make-instance 'x86-asm-instruction :name "VEXP2PD" :is-container t :variants (list
x64-instruction-variant-VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VEXP2PS (make-instance 'x86-asm-instruction :name "VEXP2PS" :is-container t :variants (list
x64-instruction-variant-VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VEXPANDPD (make-instance 'x86-asm-instruction :name "VEXPANDPD" :is-container t :variants (list
x64-instruction-variant-VEXPANDPD-xmmreg-mask-z.mem128 x64-instruction-variant-VEXPANDPD-ymmreg-mask-z.mem256 x64-instruction-variant-VEXPANDPD-zmmreg-mask-z.mem512 x64-instruction-variant-VEXPANDPD-xmmreg-mask-z.xmmreg x64-instruction-variant-VEXPANDPD-ymmreg-mask-z.ymmreg x64-instruction-variant-VEXPANDPD-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VEXPANDPS (make-instance 'x86-asm-instruction :name "VEXPANDPS" :is-container t :variants (list
x64-instruction-variant-VEXPANDPS-xmmreg-mask-z.mem128 x64-instruction-variant-VEXPANDPS-ymmreg-mask-z.mem256 x64-instruction-variant-VEXPANDPS-zmmreg-mask-z.mem512 x64-instruction-variant-VEXPANDPS-xmmreg-mask-z.xmmreg x64-instruction-variant-VEXPANDPS-ymmreg-mask-z.ymmreg x64-instruction-variant-VEXPANDPS-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VEXTRACTF32X4 (make-instance 'x86-asm-instruction :name "VEXTRACTF32X4" :is-container t :variants (list
x64-instruction-variant-VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8 x64-instruction-variant-VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTF32X4-mem128-mask.ymmreg.imm8 x64-instruction-variant-VEXTRACTF32X4-mem128-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTF32X8 (make-instance 'x86-asm-instruction :name "VEXTRACTF32X8" :is-container t :variants (list
x64-instruction-variant-VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTF32X8-mem256-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTF64X2 (make-instance 'x86-asm-instruction :name "VEXTRACTF64X2" :is-container t :variants (list
x64-instruction-variant-VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8 x64-instruction-variant-VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTF64X2-mem128-mask.ymmreg.imm8 x64-instruction-variant-VEXTRACTF64X2-mem128-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTF64X4 (make-instance 'x86-asm-instruction :name "VEXTRACTF64X4" :is-container t :variants (list
x64-instruction-variant-VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTF64X4-mem256-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTI32X4 (make-instance 'x86-asm-instruction :name "VEXTRACTI32X4" :is-container t :variants (list
x64-instruction-variant-VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8 x64-instruction-variant-VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTI32X4-mem128-mask.ymmreg.imm8 x64-instruction-variant-VEXTRACTI32X4-mem128-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTI32X8 (make-instance 'x86-asm-instruction :name "VEXTRACTI32X8" :is-container t :variants (list
x64-instruction-variant-VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTI32X8-mem256-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTI64X2 (make-instance 'x86-asm-instruction :name "VEXTRACTI64X2" :is-container t :variants (list
x64-instruction-variant-VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8 x64-instruction-variant-VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTI64X2-mem128-mask.ymmreg.imm8 x64-instruction-variant-VEXTRACTI64X2-mem128-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTI64X4 (make-instance 'x86-asm-instruction :name "VEXTRACTI64X4" :is-container t :variants (list
x64-instruction-variant-VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8 x64-instruction-variant-VEXTRACTI64X4-mem256-mask.zmmreg.imm8)))

(defparameter x64-instruction-container-VEXTRACTPS (make-instance 'x86-asm-instruction :name "VEXTRACTPS" :is-container t :variants (list
x64-instruction-variant-VEXTRACTPS-reg32.xmmreg.imm8 x64-instruction-variant-VEXTRACTPS-reg64.xmmreg.imm8 x64-instruction-variant-VEXTRACTPS-mem32.xmmreg.imm8)))

(defparameter x64-instruction-container-VFIXUPIMMPD (make-instance 'x86-asm-instruction :name "VFIXUPIMMPD" :is-container t :variants (list
x64-instruction-variant-VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VFIXUPIMMPS (make-instance 'x86-asm-instruction :name "VFIXUPIMMPS" :is-container t :variants (list
x64-instruction-variant-VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VFIXUPIMMSD (make-instance 'x86-asm-instruction :name "VFIXUPIMMSD" :is-container t :variants (list
x64-instruction-variant-VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VFIXUPIMMSS (make-instance 'x86-asm-instruction :name "VFIXUPIMMSS" :is-container t :variants (list
x64-instruction-variant-VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VFMADD132PD (make-instance 'x86-asm-instruction :name "VFMADD132PD" :is-container t :variants (list
x64-instruction-variant-VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADD132PS (make-instance 'x86-asm-instruction :name "VFMADD132PS" :is-container t :variants (list
x64-instruction-variant-VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMADD132SD (make-instance 'x86-asm-instruction :name "VFMADD132SD" :is-container t :variants (list
x64-instruction-variant-VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMADD132SS (make-instance 'x86-asm-instruction :name "VFMADD132SS" :is-container t :variants (list
x64-instruction-variant-VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMADD213PD (make-instance 'x86-asm-instruction :name "VFMADD213PD" :is-container t :variants (list
x64-instruction-variant-VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADD213PS (make-instance 'x86-asm-instruction :name "VFMADD213PS" :is-container t :variants (list
x64-instruction-variant-VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMADD213SD (make-instance 'x86-asm-instruction :name "VFMADD213SD" :is-container t :variants (list
x64-instruction-variant-VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMADD213SS (make-instance 'x86-asm-instruction :name "VFMADD213SS" :is-container t :variants (list
x64-instruction-variant-VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMADD231PD (make-instance 'x86-asm-instruction :name "VFMADD231PD" :is-container t :variants (list
x64-instruction-variant-VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADD231PS (make-instance 'x86-asm-instruction :name "VFMADD231PS" :is-container t :variants (list
x64-instruction-variant-VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMADD231SD (make-instance 'x86-asm-instruction :name "VFMADD231SD" :is-container t :variants (list
x64-instruction-variant-VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMADD231SS (make-instance 'x86-asm-instruction :name "VFMADD231SS" :is-container t :variants (list
x64-instruction-variant-VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMADDSUB132PD (make-instance 'x86-asm-instruction :name "VFMADDSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADDSUB132PS (make-instance 'x86-asm-instruction :name "VFMADDSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMADDSUB213PD (make-instance 'x86-asm-instruction :name "VFMADDSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADDSUB213PS (make-instance 'x86-asm-instruction :name "VFMADDSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMADDSUB231PD (make-instance 'x86-asm-instruction :name "VFMADDSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMADDSUB231PS (make-instance 'x86-asm-instruction :name "VFMADDSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUB132PD (make-instance 'x86-asm-instruction :name "VFMSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUB132PS (make-instance 'x86-asm-instruction :name "VFMSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUB132SD (make-instance 'x86-asm-instruction :name "VFMSUB132SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMSUB132SS (make-instance 'x86-asm-instruction :name "VFMSUB132SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMSUB213PD (make-instance 'x86-asm-instruction :name "VFMSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUB213PS (make-instance 'x86-asm-instruction :name "VFMSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUB213SD (make-instance 'x86-asm-instruction :name "VFMSUB213SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMSUB213SS (make-instance 'x86-asm-instruction :name "VFMSUB213SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMSUB231PD (make-instance 'x86-asm-instruction :name "VFMSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUB231PS (make-instance 'x86-asm-instruction :name "VFMSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUB231SD (make-instance 'x86-asm-instruction :name "VFMSUB231SD" :is-container t :variants (list
x64-instruction-variant-VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFMSUB231SS (make-instance 'x86-asm-instruction :name "VFMSUB231SS" :is-container t :variants (list
x64-instruction-variant-VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFMSUBADD132PD (make-instance 'x86-asm-instruction :name "VFMSUBADD132PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUBADD132PS (make-instance 'x86-asm-instruction :name "VFMSUBADD132PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUBADD213PD (make-instance 'x86-asm-instruction :name "VFMSUBADD213PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUBADD213PS (make-instance 'x86-asm-instruction :name "VFMSUBADD213PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFMSUBADD231PD (make-instance 'x86-asm-instruction :name "VFMSUBADD231PD" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFMSUBADD231PS (make-instance 'x86-asm-instruction :name "VFMSUBADD231PS" :is-container t :variants (list
x64-instruction-variant-VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMADD132PD (make-instance 'x86-asm-instruction :name "VFNMADD132PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMADD132PS (make-instance 'x86-asm-instruction :name "VFNMADD132PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMADD132SD (make-instance 'x86-asm-instruction :name "VFNMADD132SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMADD132SS (make-instance 'x86-asm-instruction :name "VFNMADD132SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFNMADD213PD (make-instance 'x86-asm-instruction :name "VFNMADD213PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMADD213PS (make-instance 'x86-asm-instruction :name "VFNMADD213PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMADD213SD (make-instance 'x86-asm-instruction :name "VFNMADD213SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMADD213SS (make-instance 'x86-asm-instruction :name "VFNMADD213SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFNMADD231PD (make-instance 'x86-asm-instruction :name "VFNMADD231PD" :is-container t :variants (list
x64-instruction-variant-VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMADD231PS (make-instance 'x86-asm-instruction :name "VFNMADD231PS" :is-container t :variants (list
x64-instruction-variant-VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMADD231SD (make-instance 'x86-asm-instruction :name "VFNMADD231SD" :is-container t :variants (list
x64-instruction-variant-VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMADD231SS (make-instance 'x86-asm-instruction :name "VFNMADD231SS" :is-container t :variants (list
x64-instruction-variant-VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFNMSUB132PD (make-instance 'x86-asm-instruction :name "VFNMSUB132PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMSUB132PS (make-instance 'x86-asm-instruction :name "VFNMSUB132PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMSUB132SD (make-instance 'x86-asm-instruction :name "VFNMSUB132SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMSUB132SS (make-instance 'x86-asm-instruction :name "VFNMSUB132SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFNMSUB213PD (make-instance 'x86-asm-instruction :name "VFNMSUB213PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMSUB213PS (make-instance 'x86-asm-instruction :name "VFNMSUB213PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMSUB213SD (make-instance 'x86-asm-instruction :name "VFNMSUB213SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMSUB213SS (make-instance 'x86-asm-instruction :name "VFNMSUB213SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFNMSUB231PD (make-instance 'x86-asm-instruction :name "VFNMSUB231PD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VFNMSUB231PS (make-instance 'x86-asm-instruction :name "VFNMSUB231PS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VFNMSUB231SD (make-instance 'x86-asm-instruction :name "VFNMSUB231SD" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VFNMSUB231SS (make-instance 'x86-asm-instruction :name "VFNMSUB231SS" :is-container t :variants (list
x64-instruction-variant-VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VFPCLASSPD (make-instance 'x86-asm-instruction :name "VFPCLASSPD" :is-container t :variants (list
x64-instruction-variant-VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8 x64-instruction-variant-VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8 x64-instruction-variant-VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VFPCLASSPS (make-instance 'x86-asm-instruction :name "VFPCLASSPS" :is-container t :variants (list
x64-instruction-variant-VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8 x64-instruction-variant-VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8 x64-instruction-variant-VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VFPCLASSSD (make-instance 'x86-asm-instruction :name "VFPCLASSSD" :is-container t :variants (list
x64-instruction-variant-VFPCLASSSD-kreg-mask.xmmrm64.imm8)))

(defparameter x64-instruction-container-VFPCLASSSS (make-instance 'x86-asm-instruction :name "VFPCLASSSS" :is-container t :variants (list
x64-instruction-variant-VFPCLASSSS-kreg-mask.xmmrm32.imm8)))

(defparameter x64-instruction-container-VGATHERDPD (make-instance 'x86-asm-instruction :name "VGATHERDPD" :is-container t :variants (list
x64-instruction-variant-VGATHERDPD-xmmreg-mask.xmem64 x64-instruction-variant-VGATHERDPD-ymmreg-mask.xmem64 x64-instruction-variant-VGATHERDPD-zmmreg-mask.ymem64)))

(defparameter x64-instruction-container-VGATHERDPS (make-instance 'x86-asm-instruction :name "VGATHERDPS" :is-container t :variants (list
x64-instruction-variant-VGATHERDPS-xmmreg-mask.xmem32 x64-instruction-variant-VGATHERDPS-ymmreg-mask.ymem32 x64-instruction-variant-VGATHERDPS-zmmreg-mask.zmem32)))

(defparameter x64-instruction-container-VGATHERPF0DPD (make-instance 'x86-asm-instruction :name "VGATHERPF0DPD" :is-container t :variants (list
x64-instruction-variant-VGATHERPF0DPD-ymem64-mask)))

(defparameter x64-instruction-container-VGATHERPF0DPS (make-instance 'x86-asm-instruction :name "VGATHERPF0DPS" :is-container t :variants (list
x64-instruction-variant-VGATHERPF0DPS-zmem32-mask)))

(defparameter x64-instruction-container-VGATHERPF0QPD (make-instance 'x86-asm-instruction :name "VGATHERPF0QPD" :is-container t :variants (list
x64-instruction-variant-VGATHERPF0QPD-zmem64-mask)))

(defparameter x64-instruction-container-VGATHERPF0QPS (make-instance 'x86-asm-instruction :name "VGATHERPF0QPS" :is-container t :variants (list
x64-instruction-variant-VGATHERPF0QPS-zmem32-mask)))

(defparameter x64-instruction-container-VGATHERPF1DPD (make-instance 'x86-asm-instruction :name "VGATHERPF1DPD" :is-container t :variants (list
x64-instruction-variant-VGATHERPF1DPD-ymem64-mask)))

(defparameter x64-instruction-container-VGATHERPF1DPS (make-instance 'x86-asm-instruction :name "VGATHERPF1DPS" :is-container t :variants (list
x64-instruction-variant-VGATHERPF1DPS-zmem32-mask)))

(defparameter x64-instruction-container-VGATHERPF1QPD (make-instance 'x86-asm-instruction :name "VGATHERPF1QPD" :is-container t :variants (list
x64-instruction-variant-VGATHERPF1QPD-zmem64-mask)))

(defparameter x64-instruction-container-VGATHERPF1QPS (make-instance 'x86-asm-instruction :name "VGATHERPF1QPS" :is-container t :variants (list
x64-instruction-variant-VGATHERPF1QPS-zmem32-mask)))

(defparameter x64-instruction-container-VGATHERQPD (make-instance 'x86-asm-instruction :name "VGATHERQPD" :is-container t :variants (list
x64-instruction-variant-VGATHERQPD-xmmreg-mask.xmem64 x64-instruction-variant-VGATHERQPD-ymmreg-mask.ymem64 x64-instruction-variant-VGATHERQPD-zmmreg-mask.zmem64)))

(defparameter x64-instruction-container-VGATHERQPS (make-instance 'x86-asm-instruction :name "VGATHERQPS" :is-container t :variants (list
x64-instruction-variant-VGATHERQPS-xmmreg-mask.xmem32 x64-instruction-variant-VGATHERQPS-xmmreg-mask.ymem32 x64-instruction-variant-VGATHERQPS-ymmreg-mask.zmem32)))

(defparameter x64-instruction-container-VGETEXPPD (make-instance 'x86-asm-instruction :name "VGETEXPPD" :is-container t :variants (list
x64-instruction-variant-VGETEXPPD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VGETEXPPD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VGETEXPPS (make-instance 'x86-asm-instruction :name "VGETEXPPS" :is-container t :variants (list
x64-instruction-variant-VGETEXPPS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VGETEXPPS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VGETEXPSD (make-instance 'x86-asm-instruction :name "VGETEXPSD" :is-container t :variants (list
x64-instruction-variant-VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VGETEXPSS (make-instance 'x86-asm-instruction :name "VGETEXPSS" :is-container t :variants (list
x64-instruction-variant-VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VGETMANTPD (make-instance 'x86-asm-instruction :name "VGETMANTPD" :is-container t :variants (list
x64-instruction-variant-VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VGETMANTPS (make-instance 'x86-asm-instruction :name "VGETMANTPS" :is-container t :variants (list
x64-instruction-variant-VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VGETMANTSD (make-instance 'x86-asm-instruction :name "VGETMANTSD" :is-container t :variants (list
x64-instruction-variant-VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VGETMANTSS (make-instance 'x86-asm-instruction :name "VGETMANTSS" :is-container t :variants (list
x64-instruction-variant-VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VINSERTF32X4 (make-instance 'x86-asm-instruction :name "VINSERTF32X4" :is-container t :variants (list
x64-instruction-variant-VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 x64-instruction-variant-VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VINSERTF32X8 (make-instance 'x86-asm-instruction :name "VINSERTF32X8" :is-container t :variants (list
x64-instruction-variant-VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VINSERTF64X2 (make-instance 'x86-asm-instruction :name "VINSERTF64X2" :is-container t :variants (list
x64-instruction-variant-VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 x64-instruction-variant-VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VINSERTF64X4 (make-instance 'x86-asm-instruction :name "VINSERTF64X4" :is-container t :variants (list
x64-instruction-variant-VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VINSERTI32X4 (make-instance 'x86-asm-instruction :name "VINSERTI32X4" :is-container t :variants (list
x64-instruction-variant-VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 x64-instruction-variant-VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VINSERTI32X8 (make-instance 'x86-asm-instruction :name "VINSERTI32X8" :is-container t :variants (list
x64-instruction-variant-VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VINSERTI64X2 (make-instance 'x86-asm-instruction :name "VINSERTI64X2" :is-container t :variants (list
x64-instruction-variant-VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 x64-instruction-variant-VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8)))

(defparameter x64-instruction-container-VINSERTI64X4 (make-instance 'x86-asm-instruction :name "VINSERTI64X4" :is-container t :variants (list
x64-instruction-variant-VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8)))

(defparameter x64-instruction-container-VINSERTPS (make-instance 'x86-asm-instruction :name "VINSERTPS" :is-container t :variants (list
x64-instruction-variant-VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8)))

(defparameter x64-instruction-container-VMAXPD (make-instance 'x86-asm-instruction :name "VMAXPD" :is-container t :variants (list
x64-instruction-variant-VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VMAXPS (make-instance 'x86-asm-instruction :name "VMAXPS" :is-container t :variants (list
x64-instruction-variant-VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VMAXSD (make-instance 'x86-asm-instruction :name "VMAXSD" :is-container t :variants (list
x64-instruction-variant-VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VMAXSS (make-instance 'x86-asm-instruction :name "VMAXSS" :is-container t :variants (list
x64-instruction-variant-VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VMINPD (make-instance 'x86-asm-instruction :name "VMINPD" :is-container t :variants (list
x64-instruction-variant-VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VMINPS (make-instance 'x86-asm-instruction :name "VMINPS" :is-container t :variants (list
x64-instruction-variant-VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VMINSD (make-instance 'x86-asm-instruction :name "VMINSD" :is-container t :variants (list
x64-instruction-variant-VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VMINSS (make-instance 'x86-asm-instruction :name "VMINSS" :is-container t :variants (list
x64-instruction-variant-VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VMOVAPD (make-instance 'x86-asm-instruction :name "VMOVAPD" :is-container t :variants (list
x64-instruction-variant-VMOVAPD-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVAPD-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVAPD-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVAPD-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVAPD-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVAPD-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVAPD-mem128-mask.xmmreg x64-instruction-variant-VMOVAPD-mem256-mask.ymmreg x64-instruction-variant-VMOVAPD-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVAPS (make-instance 'x86-asm-instruction :name "VMOVAPS" :is-container t :variants (list
x64-instruction-variant-VMOVAPS-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVAPS-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVAPS-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVAPS-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVAPS-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVAPS-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVAPS-mem128-mask.xmmreg x64-instruction-variant-VMOVAPS-mem256-mask.ymmreg x64-instruction-variant-VMOVAPS-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVD (make-instance 'x86-asm-instruction :name "VMOVD" :is-container t :variants (list
x64-instruction-variant-VMOVD-xmmreg.rm32 x64-instruction-variant-VMOVD-rm32.xmmreg)))

(defparameter x64-instruction-container-VMOVDDUP (make-instance 'x86-asm-instruction :name "VMOVDDUP" :is-container t :variants (list
x64-instruction-variant-VMOVDDUP-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VMOVDDUP-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDDUP-zmmreg-mask-z.zmmrm512)))

(defparameter x64-instruction-container-VMOVDQA32 (make-instance 'x86-asm-instruction :name "VMOVDQA32" :is-container t :variants (list
x64-instruction-variant-VMOVDQA32-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQA32-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQA32-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQA32-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQA32-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQA32-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQA32-mem128-mask.xmmreg x64-instruction-variant-VMOVDQA32-mem256-mask.ymmreg x64-instruction-variant-VMOVDQA32-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVDQA64 (make-instance 'x86-asm-instruction :name "VMOVDQA64" :is-container t :variants (list
x64-instruction-variant-VMOVDQA64-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQA64-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQA64-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQA64-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQA64-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQA64-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQA64-mem128-mask.xmmreg x64-instruction-variant-VMOVDQA64-mem256-mask.ymmreg x64-instruction-variant-VMOVDQA64-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVDQU16 (make-instance 'x86-asm-instruction :name "VMOVDQU16" :is-container t :variants (list
x64-instruction-variant-VMOVDQU16-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQU16-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQU16-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQU16-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQU16-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQU16-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQU16-mem128-mask.xmmreg x64-instruction-variant-VMOVDQU16-mem256-mask.ymmreg x64-instruction-variant-VMOVDQU16-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVDQU32 (make-instance 'x86-asm-instruction :name "VMOVDQU32" :is-container t :variants (list
x64-instruction-variant-VMOVDQU32-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQU32-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQU32-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQU32-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQU32-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQU32-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQU32-mem128-mask.xmmreg x64-instruction-variant-VMOVDQU32-mem256-mask.ymmreg x64-instruction-variant-VMOVDQU32-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVDQU64 (make-instance 'x86-asm-instruction :name "VMOVDQU64" :is-container t :variants (list
x64-instruction-variant-VMOVDQU64-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQU64-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQU64-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQU64-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQU64-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQU64-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQU64-mem128-mask.xmmreg x64-instruction-variant-VMOVDQU64-mem256-mask.ymmreg x64-instruction-variant-VMOVDQU64-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVDQU8 (make-instance 'x86-asm-instruction :name "VMOVDQU8" :is-container t :variants (list
x64-instruction-variant-VMOVDQU8-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVDQU8-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVDQU8-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVDQU8-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVDQU8-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVDQU8-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVDQU8-mem128-mask.xmmreg x64-instruction-variant-VMOVDQU8-mem256-mask.ymmreg x64-instruction-variant-VMOVDQU8-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVHLPS (make-instance 'x86-asm-instruction :name "VMOVHLPS" :is-container t :variants (list
x64-instruction-variant-VMOVHLPS-xmmreg.xmmreg.xmmreg)))

(defparameter x64-instruction-container-VMOVHPD (make-instance 'x86-asm-instruction :name "VMOVHPD" :is-container t :variants (list
x64-instruction-variant-VMOVHPD-xmmreg.xmmreg.mem64 x64-instruction-variant-VMOVHPD-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVHPS (make-instance 'x86-asm-instruction :name "VMOVHPS" :is-container t :variants (list
x64-instruction-variant-VMOVHPS-xmmreg.xmmreg.mem64 x64-instruction-variant-VMOVHPS-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVLHPS (make-instance 'x86-asm-instruction :name "VMOVLHPS" :is-container t :variants (list
x64-instruction-variant-VMOVLHPS-xmmreg.xmmreg.xmmreg)))

(defparameter x64-instruction-container-VMOVLPD (make-instance 'x86-asm-instruction :name "VMOVLPD" :is-container t :variants (list
x64-instruction-variant-VMOVLPD-xmmreg.xmmreg.mem64 x64-instruction-variant-VMOVLPD-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVLPS (make-instance 'x86-asm-instruction :name "VMOVLPS" :is-container t :variants (list
x64-instruction-variant-VMOVLPS-xmmreg.xmmreg.mem64 x64-instruction-variant-VMOVLPS-mem64.xmmreg)))

(defparameter x64-instruction-container-VMOVNTDQ (make-instance 'x86-asm-instruction :name "VMOVNTDQ" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQ-mem128.xmmreg x64-instruction-variant-VMOVNTDQ-mem256.ymmreg x64-instruction-variant-VMOVNTDQ-mem512.zmmreg)))

(defparameter x64-instruction-container-VMOVNTDQA (make-instance 'x86-asm-instruction :name "VMOVNTDQA" :is-container t :variants (list
x64-instruction-variant-VMOVNTDQA-xmmreg.mem128 x64-instruction-variant-VMOVNTDQA-ymmreg.mem256 x64-instruction-variant-VMOVNTDQA-zmmreg.mem512)))

(defparameter x64-instruction-container-VMOVNTPD (make-instance 'x86-asm-instruction :name "VMOVNTPD" :is-container t :variants (list
x64-instruction-variant-VMOVNTPD-mem128.xmmreg x64-instruction-variant-VMOVNTPD-mem256.ymmreg x64-instruction-variant-VMOVNTPD-mem512.zmmreg)))

(defparameter x64-instruction-container-VMOVNTPS (make-instance 'x86-asm-instruction :name "VMOVNTPS" :is-container t :variants (list
x64-instruction-variant-VMOVNTPS-mem128.xmmreg x64-instruction-variant-VMOVNTPS-mem256.ymmreg x64-instruction-variant-VMOVNTPS-mem512.zmmreg)))

(defparameter x64-instruction-container-VMOVQ (make-instance 'x86-asm-instruction :name "VMOVQ" :is-container t :variants (list
x64-instruction-variant-VMOVQ-xmmreg.rm64 x64-instruction-variant-VMOVQ-rm64.xmmreg x64-instruction-variant-VMOVQ-xmmreg.xmmrm64 x64-instruction-variant-VMOVQ-xmmrm64.xmmreg)))

(defparameter x64-instruction-container-VMOVSD (make-instance 'x86-asm-instruction :name "VMOVSD" :is-container t :variants (list
x64-instruction-variant-VMOVSD-xmmreg-mask-z.mem64 x64-instruction-variant-VMOVSD-mem64-mask.xmmreg x64-instruction-variant-VMOVSD-xmmreg-mask-z.xmmreg.xmmreg x64-instruction-variant-VMOVSD-xmmreg-mask-z.xmmreg.xmmreg)))

(defparameter x64-instruction-container-VMOVSHDUP (make-instance 'x86-asm-instruction :name "VMOVSHDUP" :is-container t :variants (list
x64-instruction-variant-VMOVSHDUP-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVSHDUP-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVSHDUP-zmmreg-mask-z.zmmrm512)))

(defparameter x64-instruction-container-VMOVSLDUP (make-instance 'x86-asm-instruction :name "VMOVSLDUP" :is-container t :variants (list
x64-instruction-variant-VMOVSLDUP-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVSLDUP-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVSLDUP-zmmreg-mask-z.zmmrm512)))

(defparameter x64-instruction-container-VMOVSS (make-instance 'x86-asm-instruction :name "VMOVSS" :is-container t :variants (list
x64-instruction-variant-VMOVSS-xmmreg-mask-z.mem32 x64-instruction-variant-VMOVSS-mem32-mask.xmmreg x64-instruction-variant-VMOVSS-xmmreg-mask-z.xmmreg.xmmreg x64-instruction-variant-VMOVSS-xmmreg-mask-z.xmmreg.xmmreg)))

(defparameter x64-instruction-container-VMOVUPD (make-instance 'x86-asm-instruction :name "VMOVUPD" :is-container t :variants (list
x64-instruction-variant-VMOVUPD-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVUPD-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVUPD-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVUPD-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVUPD-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVUPD-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVUPD-mem128-mask.xmmreg x64-instruction-variant-VMOVUPD-mem256-mask.ymmreg x64-instruction-variant-VMOVUPD-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMOVUPS (make-instance 'x86-asm-instruction :name "VMOVUPS" :is-container t :variants (list
x64-instruction-variant-VMOVUPS-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VMOVUPS-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VMOVUPS-zmmreg-mask-z.zmmrm512 x64-instruction-variant-VMOVUPS-xmmreg-mask-z.xmmreg x64-instruction-variant-VMOVUPS-ymmreg-mask-z.ymmreg x64-instruction-variant-VMOVUPS-zmmreg-mask-z.zmmreg x64-instruction-variant-VMOVUPS-mem128-mask.xmmreg x64-instruction-variant-VMOVUPS-mem256-mask.ymmreg x64-instruction-variant-VMOVUPS-mem512-mask.zmmreg)))

(defparameter x64-instruction-container-VMULPD (make-instance 'x86-asm-instruction :name "VMULPD" :is-container t :variants (list
x64-instruction-variant-VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VMULPS (make-instance 'x86-asm-instruction :name "VMULPS" :is-container t :variants (list
x64-instruction-variant-VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VMULSD (make-instance 'x86-asm-instruction :name "VMULSD" :is-container t :variants (list
x64-instruction-variant-VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VMULSS (make-instance 'x86-asm-instruction :name "VMULSS" :is-container t :variants (list
x64-instruction-variant-VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VORPD (make-instance 'x86-asm-instruction :name "VORPD" :is-container t :variants (list
x64-instruction-variant-VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VORPS (make-instance 'x86-asm-instruction :name "VORPS" :is-container t :variants (list
x64-instruction-variant-VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPABSB (make-instance 'x86-asm-instruction :name "VPABSB" :is-container t :variants (list
x64-instruction-variant-VPABSB-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VPABSB-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VPABSB-zmmreg-mask-z.zmmrm512)))

(defparameter x64-instruction-container-VPABSD (make-instance 'x86-asm-instruction :name "VPABSD" :is-container t :variants (list
x64-instruction-variant-VPABSD-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VPABSD-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VPABSD-zmmreg-mask-z.zmmrm512-b32)))

(defparameter x64-instruction-container-VPABSQ (make-instance 'x86-asm-instruction :name "VPABSQ" :is-container t :variants (list
x64-instruction-variant-VPABSQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VPABSQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VPABSQ-zmmreg-mask-z.zmmrm512-b64)))

(defparameter x64-instruction-container-VPABSW (make-instance 'x86-asm-instruction :name "VPABSW" :is-container t :variants (list
x64-instruction-variant-VPABSW-xmmreg-mask-z.xmmrm128 x64-instruction-variant-VPABSW-ymmreg-mask-z.ymmrm256 x64-instruction-variant-VPABSW-zmmreg-mask-z.zmmrm512)))

(defparameter x64-instruction-container-VPACKSSDW (make-instance 'x86-asm-instruction :name "VPACKSSDW" :is-container t :variants (list
x64-instruction-variant-VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPACKSSWB (make-instance 'x86-asm-instruction :name "VPACKSSWB" :is-container t :variants (list
x64-instruction-variant-VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPACKUSDW (make-instance 'x86-asm-instruction :name "VPACKUSDW" :is-container t :variants (list
x64-instruction-variant-VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPACKUSWB (make-instance 'x86-asm-instruction :name "VPACKUSWB" :is-container t :variants (list
x64-instruction-variant-VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDB (make-instance 'x86-asm-instruction :name "VPADDB" :is-container t :variants (list
x64-instruction-variant-VPADDB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDD (make-instance 'x86-asm-instruction :name "VPADDD" :is-container t :variants (list
x64-instruction-variant-VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPADDQ (make-instance 'x86-asm-instruction :name "VPADDQ" :is-container t :variants (list
x64-instruction-variant-VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPADDSB (make-instance 'x86-asm-instruction :name "VPADDSB" :is-container t :variants (list
x64-instruction-variant-VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDSW (make-instance 'x86-asm-instruction :name "VPADDSW" :is-container t :variants (list
x64-instruction-variant-VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDUSB (make-instance 'x86-asm-instruction :name "VPADDUSB" :is-container t :variants (list
x64-instruction-variant-VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDUSW (make-instance 'x86-asm-instruction :name "VPADDUSW" :is-container t :variants (list
x64-instruction-variant-VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPADDW (make-instance 'x86-asm-instruction :name "VPADDW" :is-container t :variants (list
x64-instruction-variant-VPADDW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPADDW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPADDW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPALIGNR (make-instance 'x86-asm-instruction :name "VPALIGNR" :is-container t :variants (list
x64-instruction-variant-VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8 x64-instruction-variant-VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8 x64-instruction-variant-VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPANDD (make-instance 'x86-asm-instruction :name "VPANDD" :is-container t :variants (list
x64-instruction-variant-VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPANDND (make-instance 'x86-asm-instruction :name "VPANDND" :is-container t :variants (list
x64-instruction-variant-VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPANDNQ (make-instance 'x86-asm-instruction :name "VPANDNQ" :is-container t :variants (list
x64-instruction-variant-VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPANDQ (make-instance 'x86-asm-instruction :name "VPANDQ" :is-container t :variants (list
x64-instruction-variant-VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPAVGB (make-instance 'x86-asm-instruction :name "VPAVGB" :is-container t :variants (list
x64-instruction-variant-VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPAVGW (make-instance 'x86-asm-instruction :name "VPAVGW" :is-container t :variants (list
x64-instruction-variant-VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPBLENDMB (make-instance 'x86-asm-instruction :name "VPBLENDMB" :is-container t :variants (list
x64-instruction-variant-VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPBLENDMD (make-instance 'x86-asm-instruction :name "VPBLENDMD" :is-container t :variants (list
x64-instruction-variant-VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPBLENDMQ (make-instance 'x86-asm-instruction :name "VPBLENDMQ" :is-container t :variants (list
x64-instruction-variant-VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPBLENDMW (make-instance 'x86-asm-instruction :name "VPBLENDMW" :is-container t :variants (list
x64-instruction-variant-VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPBROADCASTB (make-instance 'x86-asm-instruction :name "VPBROADCASTB" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.xmmrm8 x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.xmmrm8 x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.xmmrm8 x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg8 x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTB-xmmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg8 x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTB-ymmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg8 x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTB-zmmreg-mask-z.reg64)))

(defparameter x64-instruction-container-VPBROADCASTD (make-instance 'x86-asm-instruction :name "VPBROADCASTD" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.mem32 x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.mem32 x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.mem32 x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTD-xmmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTD-ymmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTD-zmmreg-mask-z.reg32)))

(defparameter x64-instruction-container-VPBROADCASTMB2Q (make-instance 'x86-asm-instruction :name "VPBROADCASTMB2Q" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTMB2Q-xmmreg.kreg x64-instruction-variant-VPBROADCASTMB2Q-ymmreg.kreg x64-instruction-variant-VPBROADCASTMB2Q-zmmreg.kreg)))

(defparameter x64-instruction-container-VPBROADCASTMW2D (make-instance 'x86-asm-instruction :name "VPBROADCASTMW2D" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTMW2D-xmmreg.kreg x64-instruction-variant-VPBROADCASTMW2D-ymmreg.kreg x64-instruction-variant-VPBROADCASTMW2D-zmmreg.kreg)))

(defparameter x64-instruction-container-VPBROADCASTQ (make-instance 'x86-asm-instruction :name "VPBROADCASTQ" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.mem64 x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.mem64 x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.mem64 x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.xmmreg x64-instruction-variant-VPBROADCASTQ-xmmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTQ-ymmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTQ-zmmreg-mask-z.reg64)))

(defparameter x64-instruction-container-VPBROADCASTW (make-instance 'x86-asm-instruction :name "VPBROADCASTW" :is-container t :variants (list
x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.xmmrm16 x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.xmmrm16 x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.xmmrm16 x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTW-xmmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTW-ymmreg-mask-z.reg64 x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg16 x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg32 x64-instruction-variant-VPBROADCASTW-zmmreg-mask-z.reg64)))

(defparameter x64-instruction-container-VPCMPB (make-instance 'x86-asm-instruction :name "VPCMPB" :is-container t :variants (list
x64-instruction-variant-VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8 x64-instruction-variant-VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8 x64-instruction-variant-VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPCMPD (make-instance 'x86-asm-instruction :name "VPCMPD" :is-container t :variants (list
x64-instruction-variant-VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPCMPEQB (make-instance 'x86-asm-instruction :name "VPCMPEQB" :is-container t :variants (list
x64-instruction-variant-VPCMPEQB-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPCMPEQB-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPCMPEQB-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPCMPEQD (make-instance 'x86-asm-instruction :name "VPCMPEQD" :is-container t :variants (list
x64-instruction-variant-VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32 x64-instruction-variant-VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32 x64-instruction-variant-VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPCMPEQQ (make-instance 'x86-asm-instruction :name "VPCMPEQQ" :is-container t :variants (list
x64-instruction-variant-VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64 x64-instruction-variant-VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64 x64-instruction-variant-VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPCMPEQW (make-instance 'x86-asm-instruction :name "VPCMPEQW" :is-container t :variants (list
x64-instruction-variant-VPCMPEQW-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPCMPEQW-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPCMPEQW-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPCMPGTB (make-instance 'x86-asm-instruction :name "VPCMPGTB" :is-container t :variants (list
x64-instruction-variant-VPCMPGTB-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPCMPGTB-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPCMPGTB-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPCMPGTD (make-instance 'x86-asm-instruction :name "VPCMPGTD" :is-container t :variants (list
x64-instruction-variant-VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32 x64-instruction-variant-VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32 x64-instruction-variant-VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPCMPGTQ (make-instance 'x86-asm-instruction :name "VPCMPGTQ" :is-container t :variants (list
x64-instruction-variant-VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64 x64-instruction-variant-VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64 x64-instruction-variant-VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPCMPGTW (make-instance 'x86-asm-instruction :name "VPCMPGTW" :is-container t :variants (list
x64-instruction-variant-VPCMPGTW-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPCMPGTW-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPCMPGTW-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPCMPQ (make-instance 'x86-asm-instruction :name "VPCMPQ" :is-container t :variants (list
x64-instruction-variant-VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPCMPUB (make-instance 'x86-asm-instruction :name "VPCMPUB" :is-container t :variants (list
x64-instruction-variant-VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8 x64-instruction-variant-VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8 x64-instruction-variant-VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPCMPUD (make-instance 'x86-asm-instruction :name "VPCMPUD" :is-container t :variants (list
x64-instruction-variant-VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPCMPUQ (make-instance 'x86-asm-instruction :name "VPCMPUQ" :is-container t :variants (list
x64-instruction-variant-VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPCMPUW (make-instance 'x86-asm-instruction :name "VPCMPUW" :is-container t :variants (list
x64-instruction-variant-VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8 x64-instruction-variant-VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8 x64-instruction-variant-VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPCMPW (make-instance 'x86-asm-instruction :name "VPCMPW" :is-container t :variants (list
x64-instruction-variant-VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8 x64-instruction-variant-VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8 x64-instruction-variant-VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPCOMPRESSD (make-instance 'x86-asm-instruction :name "VPCOMPRESSD" :is-container t :variants (list
x64-instruction-variant-VPCOMPRESSD-mem128-mask.xmmreg x64-instruction-variant-VPCOMPRESSD-mem256-mask.ymmreg x64-instruction-variant-VPCOMPRESSD-mem512-mask.zmmreg x64-instruction-variant-VPCOMPRESSD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPCOMPRESSD-ymmreg-mask-z.ymmreg x64-instruction-variant-VPCOMPRESSD-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VPCOMPRESSQ (make-instance 'x86-asm-instruction :name "VPCOMPRESSQ" :is-container t :variants (list
x64-instruction-variant-VPCOMPRESSQ-mem128-mask.xmmreg x64-instruction-variant-VPCOMPRESSQ-mem256-mask.ymmreg x64-instruction-variant-VPCOMPRESSQ-mem512-mask.zmmreg x64-instruction-variant-VPCOMPRESSQ-xmmreg-mask-z.xmmreg x64-instruction-variant-VPCOMPRESSQ-ymmreg-mask-z.ymmreg x64-instruction-variant-VPCOMPRESSQ-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VPCONFLICTD (make-instance 'x86-asm-instruction :name "VPCONFLICTD" :is-container t :variants (list
x64-instruction-variant-VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32)))

(defparameter x64-instruction-container-VPCONFLICTQ (make-instance 'x86-asm-instruction :name "VPCONFLICTQ" :is-container t :variants (list
x64-instruction-variant-VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMB (make-instance 'x86-asm-instruction :name "VPERMB" :is-container t :variants (list
x64-instruction-variant-VPERMB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPERMD (make-instance 'x86-asm-instruction :name "VPERMD" :is-container t :variants (list
x64-instruction-variant-VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMI2B (make-instance 'x86-asm-instruction :name "VPERMI2B" :is-container t :variants (list
x64-instruction-variant-VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPERMI2D (make-instance 'x86-asm-instruction :name "VPERMI2D" :is-container t :variants (list
x64-instruction-variant-VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMI2PD (make-instance 'x86-asm-instruction :name "VPERMI2PD" :is-container t :variants (list
x64-instruction-variant-VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMI2PS (make-instance 'x86-asm-instruction :name "VPERMI2PS" :is-container t :variants (list
x64-instruction-variant-VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMI2Q (make-instance 'x86-asm-instruction :name "VPERMI2Q" :is-container t :variants (list
x64-instruction-variant-VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMI2W (make-instance 'x86-asm-instruction :name "VPERMI2W" :is-container t :variants (list
x64-instruction-variant-VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPERMILPD (make-instance 'x86-asm-instruction :name "VPERMILPD" :is-container t :variants (list
x64-instruction-variant-VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8 x64-instruction-variant-VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMILPS (make-instance 'x86-asm-instruction :name "VPERMILPS" :is-container t :variants (list
x64-instruction-variant-VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8 x64-instruction-variant-VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMPD (make-instance 'x86-asm-instruction :name "VPERMPD" :is-container t :variants (list
x64-instruction-variant-VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8 x64-instruction-variant-VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMPS (make-instance 'x86-asm-instruction :name "VPERMPS" :is-container t :variants (list
x64-instruction-variant-VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMQ (make-instance 'x86-asm-instruction :name "VPERMQ" :is-container t :variants (list
x64-instruction-variant-VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8 x64-instruction-variant-VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMT2B (make-instance 'x86-asm-instruction :name "VPERMT2B" :is-container t :variants (list
x64-instruction-variant-VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPERMT2D (make-instance 'x86-asm-instruction :name "VPERMT2D" :is-container t :variants (list
x64-instruction-variant-VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMT2PD (make-instance 'x86-asm-instruction :name "VPERMT2PD" :is-container t :variants (list
x64-instruction-variant-VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMT2PS (make-instance 'x86-asm-instruction :name "VPERMT2PS" :is-container t :variants (list
x64-instruction-variant-VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPERMT2Q (make-instance 'x86-asm-instruction :name "VPERMT2Q" :is-container t :variants (list
x64-instruction-variant-VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPERMT2W (make-instance 'x86-asm-instruction :name "VPERMT2W" :is-container t :variants (list
x64-instruction-variant-VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPERMW (make-instance 'x86-asm-instruction :name "VPERMW" :is-container t :variants (list
x64-instruction-variant-VPERMW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPERMW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPERMW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPEXPANDD (make-instance 'x86-asm-instruction :name "VPEXPANDD" :is-container t :variants (list
x64-instruction-variant-VPEXPANDD-xmmreg-mask-z.mem128 x64-instruction-variant-VPEXPANDD-ymmreg-mask-z.mem256 x64-instruction-variant-VPEXPANDD-zmmreg-mask-z.mem512 x64-instruction-variant-VPEXPANDD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPEXPANDD-ymmreg-mask-z.ymmreg x64-instruction-variant-VPEXPANDD-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VPEXPANDQ (make-instance 'x86-asm-instruction :name "VPEXPANDQ" :is-container t :variants (list
x64-instruction-variant-VPEXPANDQ-xmmreg-mask-z.mem128 x64-instruction-variant-VPEXPANDQ-ymmreg-mask-z.mem256 x64-instruction-variant-VPEXPANDQ-zmmreg-mask-z.mem512 x64-instruction-variant-VPEXPANDQ-xmmreg-mask-z.xmmreg x64-instruction-variant-VPEXPANDQ-ymmreg-mask-z.ymmreg x64-instruction-variant-VPEXPANDQ-zmmreg-mask-z.zmmreg)))

(defparameter x64-instruction-container-VPEXTRB (make-instance 'x86-asm-instruction :name "VPEXTRB" :is-container t :variants (list
x64-instruction-variant-VPEXTRB-reg8.xmmreg.imm8 x64-instruction-variant-VPEXTRB-reg16.xmmreg.imm8 x64-instruction-variant-VPEXTRB-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRB-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRB-mem8.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRD (make-instance 'x86-asm-instruction :name "VPEXTRD" :is-container t :variants (list
x64-instruction-variant-VPEXTRD-rm32.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRQ (make-instance 'x86-asm-instruction :name "VPEXTRQ" :is-container t :variants (list
x64-instruction-variant-VPEXTRQ-rm64.xmmreg.imm8)))

(defparameter x64-instruction-container-VPEXTRW (make-instance 'x86-asm-instruction :name "VPEXTRW" :is-container t :variants (list
x64-instruction-variant-VPEXTRW-reg16.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8 x64-instruction-variant-VPEXTRW-mem16.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg16.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg32.xmmreg.imm8 x64-instruction-variant-VPEXTRW-reg64.xmmreg.imm8)))

(defparameter x64-instruction-container-VPGATHERDD (make-instance 'x86-asm-instruction :name "VPGATHERDD" :is-container t :variants (list
x64-instruction-variant-VPGATHERDD-xmmreg-mask.xmem32 x64-instruction-variant-VPGATHERDD-ymmreg-mask.ymem32 x64-instruction-variant-VPGATHERDD-zmmreg-mask.zmem32)))

(defparameter x64-instruction-container-VPGATHERDQ (make-instance 'x86-asm-instruction :name "VPGATHERDQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERDQ-xmmreg-mask.xmem64 x64-instruction-variant-VPGATHERDQ-ymmreg-mask.xmem64 x64-instruction-variant-VPGATHERDQ-zmmreg-mask.ymem64)))

(defparameter x64-instruction-container-VPGATHERQD (make-instance 'x86-asm-instruction :name "VPGATHERQD" :is-container t :variants (list
x64-instruction-variant-VPGATHERQD-xmmreg-mask.xmem32 x64-instruction-variant-VPGATHERQD-xmmreg-mask.ymem32 x64-instruction-variant-VPGATHERQD-ymmreg-mask.zmem32)))

(defparameter x64-instruction-container-VPGATHERQQ (make-instance 'x86-asm-instruction :name "VPGATHERQQ" :is-container t :variants (list
x64-instruction-variant-VPGATHERQQ-xmmreg-mask.xmem64 x64-instruction-variant-VPGATHERQQ-ymmreg-mask.ymem64 x64-instruction-variant-VPGATHERQQ-zmmreg-mask.zmem64)))

(defparameter x64-instruction-container-VPINSRB (make-instance 'x86-asm-instruction :name "VPINSRB" :is-container t :variants (list
x64-instruction-variant-VPINSRB-xmmreg.xmmreg.reg32.imm8 x64-instruction-variant-VPINSRB-xmmreg.xmmreg.mem8.imm8)))

(defparameter x64-instruction-container-VPINSRD (make-instance 'x86-asm-instruction :name "VPINSRD" :is-container t :variants (list
x64-instruction-variant-VPINSRD-xmmreg.xmmreg.rm32.imm8)))

(defparameter x64-instruction-container-VPINSRQ (make-instance 'x86-asm-instruction :name "VPINSRQ" :is-container t :variants (list
x64-instruction-variant-VPINSRQ-xmmreg.xmmreg.rm64.imm8)))

(defparameter x64-instruction-container-VPINSRW (make-instance 'x86-asm-instruction :name "VPINSRW" :is-container t :variants (list
x64-instruction-variant-VPINSRW-xmmreg.xmmreg.reg32.imm8 x64-instruction-variant-VPINSRW-xmmreg.xmmreg.mem16.imm8)))

(defparameter x64-instruction-container-VPLZCNTD (make-instance 'x86-asm-instruction :name "VPLZCNTD" :is-container t :variants (list
x64-instruction-variant-VPLZCNTD-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VPLZCNTD-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VPLZCNTD-zmmreg-mask-z.zmmrm512-b32)))

(defparameter x64-instruction-container-VPLZCNTQ (make-instance 'x86-asm-instruction :name "VPLZCNTQ" :is-container t :variants (list
x64-instruction-variant-VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMADD52HUQ (make-instance 'x86-asm-instruction :name "VPMADD52HUQ" :is-container t :variants (list
x64-instruction-variant-VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMADD52LUQ (make-instance 'x86-asm-instruction :name "VPMADD52LUQ" :is-container t :variants (list
x64-instruction-variant-VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMADDUBSW (make-instance 'x86-asm-instruction :name "VPMADDUBSW" :is-container t :variants (list
x64-instruction-variant-VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMADDWD (make-instance 'x86-asm-instruction :name "VPMADDWD" :is-container t :variants (list
x64-instruction-variant-VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMAXSB (make-instance 'x86-asm-instruction :name "VPMAXSB" :is-container t :variants (list
x64-instruction-variant-VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMAXSD (make-instance 'x86-asm-instruction :name "VPMAXSD" :is-container t :variants (list
x64-instruction-variant-VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPMAXSQ (make-instance 'x86-asm-instruction :name "VPMAXSQ" :is-container t :variants (list
x64-instruction-variant-VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMAXSW (make-instance 'x86-asm-instruction :name "VPMAXSW" :is-container t :variants (list
x64-instruction-variant-VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMAXUB (make-instance 'x86-asm-instruction :name "VPMAXUB" :is-container t :variants (list
x64-instruction-variant-VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMAXUD (make-instance 'x86-asm-instruction :name "VPMAXUD" :is-container t :variants (list
x64-instruction-variant-VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPMAXUQ (make-instance 'x86-asm-instruction :name "VPMAXUQ" :is-container t :variants (list
x64-instruction-variant-VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMAXUW (make-instance 'x86-asm-instruction :name "VPMAXUW" :is-container t :variants (list
x64-instruction-variant-VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMINSB (make-instance 'x86-asm-instruction :name "VPMINSB" :is-container t :variants (list
x64-instruction-variant-VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMINSD (make-instance 'x86-asm-instruction :name "VPMINSD" :is-container t :variants (list
x64-instruction-variant-VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPMINSQ (make-instance 'x86-asm-instruction :name "VPMINSQ" :is-container t :variants (list
x64-instruction-variant-VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMINSW (make-instance 'x86-asm-instruction :name "VPMINSW" :is-container t :variants (list
x64-instruction-variant-VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMINUB (make-instance 'x86-asm-instruction :name "VPMINUB" :is-container t :variants (list
x64-instruction-variant-VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMINUD (make-instance 'x86-asm-instruction :name "VPMINUD" :is-container t :variants (list
x64-instruction-variant-VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPMINUQ (make-instance 'x86-asm-instruction :name "VPMINUQ" :is-container t :variants (list
x64-instruction-variant-VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMINUW (make-instance 'x86-asm-instruction :name "VPMINUW" :is-container t :variants (list
x64-instruction-variant-VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMOVB2M (make-instance 'x86-asm-instruction :name "VPMOVB2M" :is-container t :variants (list
x64-instruction-variant-VPMOVB2M-kreg.xmmreg x64-instruction-variant-VPMOVB2M-kreg.ymmreg x64-instruction-variant-VPMOVB2M-kreg.zmmreg)))

(defparameter x64-instruction-container-VPMOVD2M (make-instance 'x86-asm-instruction :name "VPMOVD2M" :is-container t :variants (list
x64-instruction-variant-VPMOVD2M-kreg.xmmreg x64-instruction-variant-VPMOVD2M-kreg.ymmreg x64-instruction-variant-VPMOVD2M-kreg.zmmreg)))

(defparameter x64-instruction-container-VPMOVDB (make-instance 'x86-asm-instruction :name "VPMOVDB" :is-container t :variants (list
x64-instruction-variant-VPMOVDB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVDB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVDB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVDB-mem32-mask.xmmreg x64-instruction-variant-VPMOVDB-mem64-mask.ymmreg x64-instruction-variant-VPMOVDB-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVDW (make-instance 'x86-asm-instruction :name "VPMOVDW" :is-container t :variants (list
x64-instruction-variant-VPMOVDW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVDW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVDW-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVDW-mem64-mask.xmmreg x64-instruction-variant-VPMOVDW-mem128-mask.ymmreg x64-instruction-variant-VPMOVDW-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVM2B (make-instance 'x86-asm-instruction :name "VPMOVM2B" :is-container t :variants (list
x64-instruction-variant-VPMOVM2B-xmmreg.kreg x64-instruction-variant-VPMOVM2B-ymmreg.kreg x64-instruction-variant-VPMOVM2B-zmmreg.kreg)))

(defparameter x64-instruction-container-VPMOVM2D (make-instance 'x86-asm-instruction :name "VPMOVM2D" :is-container t :variants (list
x64-instruction-variant-VPMOVM2D-xmmreg.kreg x64-instruction-variant-VPMOVM2D-ymmreg.kreg x64-instruction-variant-VPMOVM2D-zmmreg.kreg)))

(defparameter x64-instruction-container-VPMOVM2Q (make-instance 'x86-asm-instruction :name "VPMOVM2Q" :is-container t :variants (list
x64-instruction-variant-VPMOVM2Q-xmmreg.kreg x64-instruction-variant-VPMOVM2Q-ymmreg.kreg x64-instruction-variant-VPMOVM2Q-zmmreg.kreg)))

(defparameter x64-instruction-container-VPMOVM2W (make-instance 'x86-asm-instruction :name "VPMOVM2W" :is-container t :variants (list
x64-instruction-variant-VPMOVM2W-xmmreg.kreg x64-instruction-variant-VPMOVM2W-ymmreg.kreg x64-instruction-variant-VPMOVM2W-zmmreg.kreg)))

(defparameter x64-instruction-container-VPMOVQ2M (make-instance 'x86-asm-instruction :name "VPMOVQ2M" :is-container t :variants (list
x64-instruction-variant-VPMOVQ2M-kreg.xmmreg x64-instruction-variant-VPMOVQ2M-kreg.ymmreg x64-instruction-variant-VPMOVQ2M-kreg.zmmreg)))

(defparameter x64-instruction-container-VPMOVQB (make-instance 'x86-asm-instruction :name "VPMOVQB" :is-container t :variants (list
x64-instruction-variant-VPMOVQB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVQB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVQB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVQB-mem16-mask.xmmreg x64-instruction-variant-VPMOVQB-mem32-mask.ymmreg x64-instruction-variant-VPMOVQB-mem64-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVQD (make-instance 'x86-asm-instruction :name "VPMOVQD" :is-container t :variants (list
x64-instruction-variant-VPMOVQD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVQD-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVQD-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVQD-mem64-mask.xmmreg x64-instruction-variant-VPMOVQD-mem128-mask.ymmreg x64-instruction-variant-VPMOVQD-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVQW (make-instance 'x86-asm-instruction :name "VPMOVQW" :is-container t :variants (list
x64-instruction-variant-VPMOVQW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVQW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVQW-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVQW-mem32-mask.xmmreg x64-instruction-variant-VPMOVQW-mem64-mask.ymmreg x64-instruction-variant-VPMOVQW-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSDB (make-instance 'x86-asm-instruction :name "VPMOVSDB" :is-container t :variants (list
x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSDB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSDB-mem32-mask.xmmreg x64-instruction-variant-VPMOVSDB-mem64-mask.ymmreg x64-instruction-variant-VPMOVSDB-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSDW (make-instance 'x86-asm-instruction :name "VPMOVSDW" :is-container t :variants (list
x64-instruction-variant-VPMOVSDW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSDW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSDW-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSDW-mem64-mask.xmmreg x64-instruction-variant-VPMOVSDW-mem128-mask.ymmreg x64-instruction-variant-VPMOVSDW-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSQB (make-instance 'x86-asm-instruction :name "VPMOVSQB" :is-container t :variants (list
x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSQB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSQB-mem16-mask.xmmreg x64-instruction-variant-VPMOVSQB-mem32-mask.ymmreg x64-instruction-variant-VPMOVSQB-mem64-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSQD (make-instance 'x86-asm-instruction :name "VPMOVSQD" :is-container t :variants (list
x64-instruction-variant-VPMOVSQD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSQD-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSQD-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSQD-mem64-mask.xmmreg x64-instruction-variant-VPMOVSQD-mem128-mask.ymmreg x64-instruction-variant-VPMOVSQD-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSQW (make-instance 'x86-asm-instruction :name "VPMOVSQW" :is-container t :variants (list
x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSQW-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSQW-mem32-mask.xmmreg x64-instruction-variant-VPMOVSQW-mem64-mask.ymmreg x64-instruction-variant-VPMOVSQW-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSWB (make-instance 'x86-asm-instruction :name "VPMOVSWB" :is-container t :variants (list
x64-instruction-variant-VPMOVSWB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVSWB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVSWB-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVSWB-mem64-mask.xmmreg x64-instruction-variant-VPMOVSWB-mem128-mask.ymmreg x64-instruction-variant-VPMOVSWB-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVSXBD (make-instance 'x86-asm-instruction :name "VPMOVSXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBD-xmmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVSXBD-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVSXBD-zmmreg-mask-z.xmmrm128)))

(defparameter x64-instruction-container-VPMOVSXBQ (make-instance 'x86-asm-instruction :name "VPMOVSXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBQ-xmmreg-mask-z.xmmrm16 x64-instruction-variant-VPMOVSXBQ-ymmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVSXBQ-zmmreg-mask-z.xmmrm64)))

(defparameter x64-instruction-container-VPMOVSXBW (make-instance 'x86-asm-instruction :name "VPMOVSXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVSXBW-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVSXBW-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVSXBW-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVSXDQ (make-instance 'x86-asm-instruction :name "VPMOVSXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXDQ-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVSXDQ-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVSXDQ-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVSXWD (make-instance 'x86-asm-instruction :name "VPMOVSXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWD-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVSXWD-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVSXWD-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVSXWQ (make-instance 'x86-asm-instruction :name "VPMOVSXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVSXWQ-xmmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVSXWQ-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVSXWQ-zmmreg-mask-z.xmmrm128)))

(defparameter x64-instruction-container-VPMOVUSDB (make-instance 'x86-asm-instruction :name "VPMOVUSDB" :is-container t :variants (list
x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSDB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSDB-mem32-mask.xmmreg x64-instruction-variant-VPMOVUSDB-mem64-mask.ymmreg x64-instruction-variant-VPMOVUSDB-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVUSDW (make-instance 'x86-asm-instruction :name "VPMOVUSDW" :is-container t :variants (list
x64-instruction-variant-VPMOVUSDW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSDW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSDW-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSDW-mem64-mask.xmmreg x64-instruction-variant-VPMOVUSDW-mem128-mask.ymmreg x64-instruction-variant-VPMOVUSDW-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVUSQB (make-instance 'x86-asm-instruction :name "VPMOVUSQB" :is-container t :variants (list
x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSQB-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSQB-mem16-mask.xmmreg x64-instruction-variant-VPMOVUSQB-mem32-mask.ymmreg x64-instruction-variant-VPMOVUSQB-mem64-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVUSQD (make-instance 'x86-asm-instruction :name "VPMOVUSQD" :is-container t :variants (list
x64-instruction-variant-VPMOVUSQD-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSQD-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSQD-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSQD-mem64-mask.xmmreg x64-instruction-variant-VPMOVUSQD-mem128-mask.ymmreg x64-instruction-variant-VPMOVUSQD-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVUSQW (make-instance 'x86-asm-instruction :name "VPMOVUSQW" :is-container t :variants (list
x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSQW-xmmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSQW-mem32-mask.xmmreg x64-instruction-variant-VPMOVUSQW-mem64-mask.ymmreg x64-instruction-variant-VPMOVUSQW-mem128-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVUSWB (make-instance 'x86-asm-instruction :name "VPMOVUSWB" :is-container t :variants (list
x64-instruction-variant-VPMOVUSWB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVUSWB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVUSWB-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVUSWB-mem64-mask.xmmreg x64-instruction-variant-VPMOVUSWB-mem128-mask.ymmreg x64-instruction-variant-VPMOVUSWB-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVW2M (make-instance 'x86-asm-instruction :name "VPMOVW2M" :is-container t :variants (list
x64-instruction-variant-VPMOVW2M-kreg.xmmreg x64-instruction-variant-VPMOVW2M-kreg.ymmreg x64-instruction-variant-VPMOVW2M-kreg.zmmreg)))

(defparameter x64-instruction-container-VPMOVWB (make-instance 'x86-asm-instruction :name "VPMOVWB" :is-container t :variants (list
x64-instruction-variant-VPMOVWB-xmmreg-mask-z.xmmreg x64-instruction-variant-VPMOVWB-xmmreg-mask-z.ymmreg x64-instruction-variant-VPMOVWB-ymmreg-mask-z.zmmreg x64-instruction-variant-VPMOVWB-mem64-mask.xmmreg x64-instruction-variant-VPMOVWB-mem128-mask.ymmreg x64-instruction-variant-VPMOVWB-mem256-mask.zmmreg)))

(defparameter x64-instruction-container-VPMOVZXBD (make-instance 'x86-asm-instruction :name "VPMOVZXBD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBD-xmmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVZXBD-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVZXBD-zmmreg-mask-z.xmmrm128)))

(defparameter x64-instruction-container-VPMOVZXBQ (make-instance 'x86-asm-instruction :name "VPMOVZXBQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBQ-xmmreg-mask-z.xmmrm16 x64-instruction-variant-VPMOVZXBQ-ymmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVZXBQ-zmmreg-mask-z.xmmrm64)))

(defparameter x64-instruction-container-VPMOVZXBW (make-instance 'x86-asm-instruction :name "VPMOVZXBW" :is-container t :variants (list
x64-instruction-variant-VPMOVZXBW-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVZXBW-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVZXBW-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVZXDQ (make-instance 'x86-asm-instruction :name "VPMOVZXDQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXDQ-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVZXDQ-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVZXDQ-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVZXWD (make-instance 'x86-asm-instruction :name "VPMOVZXWD" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWD-xmmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVZXWD-ymmreg-mask-z.xmmrm128 x64-instruction-variant-VPMOVZXWD-zmmreg-mask-z.ymmrm256)))

(defparameter x64-instruction-container-VPMOVZXWQ (make-instance 'x86-asm-instruction :name "VPMOVZXWQ" :is-container t :variants (list
x64-instruction-variant-VPMOVZXWQ-xmmreg-mask-z.xmmrm32 x64-instruction-variant-VPMOVZXWQ-ymmreg-mask-z.xmmrm64 x64-instruction-variant-VPMOVZXWQ-zmmreg-mask-z.xmmrm128)))

(defparameter x64-instruction-container-VPMULDQ (make-instance 'x86-asm-instruction :name "VPMULDQ" :is-container t :variants (list
x64-instruction-variant-VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMULHRSW (make-instance 'x86-asm-instruction :name "VPMULHRSW" :is-container t :variants (list
x64-instruction-variant-VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMULHUW (make-instance 'x86-asm-instruction :name "VPMULHUW" :is-container t :variants (list
x64-instruction-variant-VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMULHW (make-instance 'x86-asm-instruction :name "VPMULHW" :is-container t :variants (list
x64-instruction-variant-VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMULLD (make-instance 'x86-asm-instruction :name "VPMULLD" :is-container t :variants (list
x64-instruction-variant-VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPMULLQ (make-instance 'x86-asm-instruction :name "VPMULLQ" :is-container t :variants (list
x64-instruction-variant-VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMULLW (make-instance 'x86-asm-instruction :name "VPMULLW" :is-container t :variants (list
x64-instruction-variant-VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPMULTISHIFTQB (make-instance 'x86-asm-instruction :name "VPMULTISHIFTQB" :is-container t :variants (list
x64-instruction-variant-VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPMULUDQ (make-instance 'x86-asm-instruction :name "VPMULUDQ" :is-container t :variants (list
x64-instruction-variant-VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPORD (make-instance 'x86-asm-instruction :name "VPORD" :is-container t :variants (list
x64-instruction-variant-VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPORQ (make-instance 'x86-asm-instruction :name "VPORQ" :is-container t :variants (list
x64-instruction-variant-VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPROLD (make-instance 'x86-asm-instruction :name "VPROLD" :is-container t :variants (list
x64-instruction-variant-VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPROLQ (make-instance 'x86-asm-instruction :name "VPROLQ" :is-container t :variants (list
x64-instruction-variant-VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPROLVD (make-instance 'x86-asm-instruction :name "VPROLVD" :is-container t :variants (list
x64-instruction-variant-VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPROLVQ (make-instance 'x86-asm-instruction :name "VPROLVQ" :is-container t :variants (list
x64-instruction-variant-VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPRORD (make-instance 'x86-asm-instruction :name "VPRORD" :is-container t :variants (list
x64-instruction-variant-VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPRORQ (make-instance 'x86-asm-instruction :name "VPRORQ" :is-container t :variants (list
x64-instruction-variant-VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPRORVD (make-instance 'x86-asm-instruction :name "VPRORVD" :is-container t :variants (list
x64-instruction-variant-VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPRORVQ (make-instance 'x86-asm-instruction :name "VPRORVQ" :is-container t :variants (list
x64-instruction-variant-VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPSADBW (make-instance 'x86-asm-instruction :name "VPSADBW" :is-container t :variants (list
x64-instruction-variant-VPSADBW-xmmreg.xmmreg.xmmrm128 x64-instruction-variant-VPSADBW-ymmreg.ymmreg.ymmrm256 x64-instruction-variant-VPSADBW-zmmreg.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSCATTERDD (make-instance 'x86-asm-instruction :name "VPSCATTERDD" :is-container t :variants (list
x64-instruction-variant-VPSCATTERDD-xmem32-mask.xmmreg x64-instruction-variant-VPSCATTERDD-ymem32-mask.ymmreg x64-instruction-variant-VPSCATTERDD-zmem32-mask.zmmreg)))

(defparameter x64-instruction-container-VPSCATTERDQ (make-instance 'x86-asm-instruction :name "VPSCATTERDQ" :is-container t :variants (list
x64-instruction-variant-VPSCATTERDQ-xmem64-mask.xmmreg x64-instruction-variant-VPSCATTERDQ-xmem64-mask.ymmreg x64-instruction-variant-VPSCATTERDQ-ymem64-mask.zmmreg)))

(defparameter x64-instruction-container-VPSCATTERQD (make-instance 'x86-asm-instruction :name "VPSCATTERQD" :is-container t :variants (list
x64-instruction-variant-VPSCATTERQD-xmem32-mask.xmmreg x64-instruction-variant-VPSCATTERQD-ymem32-mask.xmmreg x64-instruction-variant-VPSCATTERQD-zmem32-mask.ymmreg)))

(defparameter x64-instruction-container-VPSCATTERQQ (make-instance 'x86-asm-instruction :name "VPSCATTERQQ" :is-container t :variants (list
x64-instruction-variant-VPSCATTERQQ-xmem64-mask.xmmreg x64-instruction-variant-VPSCATTERQQ-ymem64-mask.ymmreg x64-instruction-variant-VPSCATTERQQ-zmem64-mask.zmmreg)))

(defparameter x64-instruction-container-VPSHUFB (make-instance 'x86-asm-instruction :name "VPSHUFB" :is-container t :variants (list
x64-instruction-variant-VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSHUFD (make-instance 'x86-asm-instruction :name "VPSHUFD" :is-container t :variants (list
x64-instruction-variant-VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPSHUFHW (make-instance 'x86-asm-instruction :name "VPSHUFHW" :is-container t :variants (list
x64-instruction-variant-VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8 x64-instruction-variant-VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8 x64-instruction-variant-VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSHUFLW (make-instance 'x86-asm-instruction :name "VPSHUFLW" :is-container t :variants (list
x64-instruction-variant-VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8 x64-instruction-variant-VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8 x64-instruction-variant-VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSLLD (make-instance 'x86-asm-instruction :name "VPSLLD" :is-container t :variants (list
x64-instruction-variant-VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPSLLDQ (make-instance 'x86-asm-instruction :name "VPSLLDQ" :is-container t :variants (list
x64-instruction-variant-VPSLLDQ-xmmreg.xmmrm128.imm8 x64-instruction-variant-VPSLLDQ-ymmreg.ymmrm256.imm8 x64-instruction-variant-VPSLLDQ-zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSLLQ (make-instance 'x86-asm-instruction :name "VPSLLQ" :is-container t :variants (list
x64-instruction-variant-VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPSLLVD (make-instance 'x86-asm-instruction :name "VPSLLVD" :is-container t :variants (list
x64-instruction-variant-VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPSLLVQ (make-instance 'x86-asm-instruction :name "VPSLLVQ" :is-container t :variants (list
x64-instruction-variant-VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPSLLVW (make-instance 'x86-asm-instruction :name "VPSLLVW" :is-container t :variants (list
x64-instruction-variant-VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSLLW (make-instance 'x86-asm-instruction :name "VPSLLW" :is-container t :variants (list
x64-instruction-variant-VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSLLW-xmmreg-mask-z.xmmrm128.imm8 x64-instruction-variant-VPSLLW-ymmreg-mask-z.ymmrm256.imm8 x64-instruction-variant-VPSLLW-zmmreg-mask-z.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSRAD (make-instance 'x86-asm-instruction :name "VPSRAD" :is-container t :variants (list
x64-instruction-variant-VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPSRAQ (make-instance 'x86-asm-instruction :name "VPSRAQ" :is-container t :variants (list
x64-instruction-variant-VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPSRAVD (make-instance 'x86-asm-instruction :name "VPSRAVD" :is-container t :variants (list
x64-instruction-variant-VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPSRAVQ (make-instance 'x86-asm-instruction :name "VPSRAVQ" :is-container t :variants (list
x64-instruction-variant-VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPSRAVW (make-instance 'x86-asm-instruction :name "VPSRAVW" :is-container t :variants (list
x64-instruction-variant-VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSRAW (make-instance 'x86-asm-instruction :name "VPSRAW" :is-container t :variants (list
x64-instruction-variant-VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRAW-xmmreg-mask-z.xmmrm128.imm8 x64-instruction-variant-VPSRAW-ymmreg-mask-z.ymmrm256.imm8 x64-instruction-variant-VPSRAW-zmmreg-mask-z.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSRLD (make-instance 'x86-asm-instruction :name "VPSRLD" :is-container t :variants (list
x64-instruction-variant-VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPSRLDQ (make-instance 'x86-asm-instruction :name "VPSRLDQ" :is-container t :variants (list
x64-instruction-variant-VPSRLDQ-xmmreg.xmmrm128.imm8 x64-instruction-variant-VPSRLDQ-ymmreg.ymmrm256.imm8 x64-instruction-variant-VPSRLDQ-zmmreg.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSRLQ (make-instance 'x86-asm-instruction :name "VPSRLQ" :is-container t :variants (list
x64-instruction-variant-VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPSRLVD (make-instance 'x86-asm-instruction :name "VPSRLVD" :is-container t :variants (list
x64-instruction-variant-VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPSRLVQ (make-instance 'x86-asm-instruction :name "VPSRLVQ" :is-container t :variants (list
x64-instruction-variant-VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPSRLVW (make-instance 'x86-asm-instruction :name "VPSRLVW" :is-container t :variants (list
x64-instruction-variant-VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSRLW (make-instance 'x86-asm-instruction :name "VPSRLW" :is-container t :variants (list
x64-instruction-variant-VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128 x64-instruction-variant-VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128 x64-instruction-variant-VPSRLW-xmmreg-mask-z.xmmrm128.imm8 x64-instruction-variant-VPSRLW-ymmreg-mask-z.ymmrm256.imm8 x64-instruction-variant-VPSRLW-zmmreg-mask-z.zmmrm512.imm8)))

(defparameter x64-instruction-container-VPSUBB (make-instance 'x86-asm-instruction :name "VPSUBB" :is-container t :variants (list
x64-instruction-variant-VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSUBD (make-instance 'x86-asm-instruction :name "VPSUBD" :is-container t :variants (list
x64-instruction-variant-VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPSUBQ (make-instance 'x86-asm-instruction :name "VPSUBQ" :is-container t :variants (list
x64-instruction-variant-VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPSUBSB (make-instance 'x86-asm-instruction :name "VPSUBSB" :is-container t :variants (list
x64-instruction-variant-VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSUBSW (make-instance 'x86-asm-instruction :name "VPSUBSW" :is-container t :variants (list
x64-instruction-variant-VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSUBUSB (make-instance 'x86-asm-instruction :name "VPSUBUSB" :is-container t :variants (list
x64-instruction-variant-VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSUBUSW (make-instance 'x86-asm-instruction :name "VPSUBUSW" :is-container t :variants (list
x64-instruction-variant-VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPSUBW (make-instance 'x86-asm-instruction :name "VPSUBW" :is-container t :variants (list
x64-instruction-variant-VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPTERNLOGD (make-instance 'x86-asm-instruction :name "VPTERNLOGD" :is-container t :variants (list
x64-instruction-variant-VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VPTERNLOGQ (make-instance 'x86-asm-instruction :name "VPTERNLOGQ" :is-container t :variants (list
x64-instruction-variant-VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VPTESTMB (make-instance 'x86-asm-instruction :name "VPTESTMB" :is-container t :variants (list
x64-instruction-variant-VPTESTMB-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPTESTMB-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPTESTMB-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPTESTMD (make-instance 'x86-asm-instruction :name "VPTESTMD" :is-container t :variants (list
x64-instruction-variant-VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32 x64-instruction-variant-VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32 x64-instruction-variant-VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPTESTMQ (make-instance 'x86-asm-instruction :name "VPTESTMQ" :is-container t :variants (list
x64-instruction-variant-VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64 x64-instruction-variant-VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64 x64-instruction-variant-VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPTESTMW (make-instance 'x86-asm-instruction :name "VPTESTMW" :is-container t :variants (list
x64-instruction-variant-VPTESTMW-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPTESTMW-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPTESTMW-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPTESTNMB (make-instance 'x86-asm-instruction :name "VPTESTNMB" :is-container t :variants (list
x64-instruction-variant-VPTESTNMB-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPTESTNMB-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPTESTNMB-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPTESTNMD (make-instance 'x86-asm-instruction :name "VPTESTNMD" :is-container t :variants (list
x64-instruction-variant-VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32 x64-instruction-variant-VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32 x64-instruction-variant-VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPTESTNMQ (make-instance 'x86-asm-instruction :name "VPTESTNMQ" :is-container t :variants (list
x64-instruction-variant-VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64 x64-instruction-variant-VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64 x64-instruction-variant-VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPTESTNMW (make-instance 'x86-asm-instruction :name "VPTESTNMW" :is-container t :variants (list
x64-instruction-variant-VPTESTNMW-kreg-mask.xmmreg.xmmrm128 x64-instruction-variant-VPTESTNMW-kreg-mask.ymmreg.ymmrm256 x64-instruction-variant-VPTESTNMW-kreg-mask.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPUNPCKHBW (make-instance 'x86-asm-instruction :name "VPUNPCKHBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPUNPCKHDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPUNPCKHQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKHQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPUNPCKHWD (make-instance 'x86-asm-instruction :name "VPUNPCKHWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPUNPCKLBW (make-instance 'x86-asm-instruction :name "VPUNPCKLBW" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPUNPCKLDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPUNPCKLQDQ (make-instance 'x86-asm-instruction :name "VPUNPCKLQDQ" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VPUNPCKLWD (make-instance 'x86-asm-instruction :name "VPUNPCKLWD" :is-container t :variants (list
x64-instruction-variant-VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128 x64-instruction-variant-VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256 x64-instruction-variant-VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512)))

(defparameter x64-instruction-container-VPXORD (make-instance 'x86-asm-instruction :name "VPXORD" :is-container t :variants (list
x64-instruction-variant-VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VPXORQ (make-instance 'x86-asm-instruction :name "VPXORQ" :is-container t :variants (list
x64-instruction-variant-VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VRANGEPD (make-instance 'x86-asm-instruction :name "VRANGEPD" :is-container t :variants (list
x64-instruction-variant-VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VRANGEPS (make-instance 'x86-asm-instruction :name "VRANGEPS" :is-container t :variants (list
x64-instruction-variant-VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VRANGESD (make-instance 'x86-asm-instruction :name "VRANGESD" :is-container t :variants (list
x64-instruction-variant-VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VRANGESS (make-instance 'x86-asm-instruction :name "VRANGESS" :is-container t :variants (list
x64-instruction-variant-VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VRCP14PD (make-instance 'x86-asm-instruction :name "VRCP14PD" :is-container t :variants (list
x64-instruction-variant-VRCP14PD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VRCP14PD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VRCP14PD-zmmreg-mask-z.zmmrm512-b64)))

(defparameter x64-instruction-container-VRCP14PS (make-instance 'x86-asm-instruction :name "VRCP14PS" :is-container t :variants (list
x64-instruction-variant-VRCP14PS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VRCP14PS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VRCP14PS-zmmreg-mask-z.zmmrm512-b32)))

(defparameter x64-instruction-container-VRCP14SD (make-instance 'x86-asm-instruction :name "VRCP14SD" :is-container t :variants (list
x64-instruction-variant-VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VRCP14SS (make-instance 'x86-asm-instruction :name "VRCP14SS" :is-container t :variants (list
x64-instruction-variant-VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VRCP28PD (make-instance 'x86-asm-instruction :name "VRCP28PD" :is-container t :variants (list
x64-instruction-variant-VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VRCP28PS (make-instance 'x86-asm-instruction :name "VRCP28PS" :is-container t :variants (list
x64-instruction-variant-VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VRCP28SD (make-instance 'x86-asm-instruction :name "VRCP28SD" :is-container t :variants (list
x64-instruction-variant-VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VRCP28SS (make-instance 'x86-asm-instruction :name "VRCP28SS" :is-container t :variants (list
x64-instruction-variant-VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VREDUCEPD (make-instance 'x86-asm-instruction :name "VREDUCEPD" :is-container t :variants (list
x64-instruction-variant-VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VREDUCEPS (make-instance 'x86-asm-instruction :name "VREDUCEPS" :is-container t :variants (list
x64-instruction-variant-VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VREDUCESD (make-instance 'x86-asm-instruction :name "VREDUCESD" :is-container t :variants (list
x64-instruction-variant-VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VREDUCESS (make-instance 'x86-asm-instruction :name "VREDUCESS" :is-container t :variants (list
x64-instruction-variant-VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VRNDSCALEPD (make-instance 'x86-asm-instruction :name "VRNDSCALEPD" :is-container t :variants (list
x64-instruction-variant-VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8 x64-instruction-variant-VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8 x64-instruction-variant-VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8)))

(defparameter x64-instruction-container-VRNDSCALEPS (make-instance 'x86-asm-instruction :name "VRNDSCALEPS" :is-container t :variants (list
x64-instruction-variant-VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8 x64-instruction-variant-VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8 x64-instruction-variant-VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8)))

(defparameter x64-instruction-container-VRNDSCALESD (make-instance 'x86-asm-instruction :name "VRNDSCALESD" :is-container t :variants (list
x64-instruction-variant-VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8)))

(defparameter x64-instruction-container-VRNDSCALESS (make-instance 'x86-asm-instruction :name "VRNDSCALESS" :is-container t :variants (list
x64-instruction-variant-VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8)))

(defparameter x64-instruction-container-VRSQRT14PD (make-instance 'x86-asm-instruction :name "VRSQRT14PD" :is-container t :variants (list
x64-instruction-variant-VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64)))

(defparameter x64-instruction-container-VRSQRT14PS (make-instance 'x86-asm-instruction :name "VRSQRT14PS" :is-container t :variants (list
x64-instruction-variant-VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32)))

(defparameter x64-instruction-container-VRSQRT14SD (make-instance 'x86-asm-instruction :name "VRSQRT14SD" :is-container t :variants (list
x64-instruction-variant-VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64)))

(defparameter x64-instruction-container-VRSQRT14SS (make-instance 'x86-asm-instruction :name "VRSQRT14SS" :is-container t :variants (list
x64-instruction-variant-VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32)))

(defparameter x64-instruction-container-VRSQRT28PD (make-instance 'x86-asm-instruction :name "VRSQRT28PD" :is-container t :variants (list
x64-instruction-variant-VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae)))

(defparameter x64-instruction-container-VRSQRT28PS (make-instance 'x86-asm-instruction :name "VRSQRT28PS" :is-container t :variants (list
x64-instruction-variant-VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae)))

(defparameter x64-instruction-container-VRSQRT28SD (make-instance 'x86-asm-instruction :name "VRSQRT28SD" :is-container t :variants (list
x64-instruction-variant-VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VRSQRT28SS (make-instance 'x86-asm-instruction :name "VRSQRT28SS" :is-container t :variants (list
x64-instruction-variant-VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VSCALEFPD (make-instance 'x86-asm-instruction :name "VSCALEFPD" :is-container t :variants (list
x64-instruction-variant-VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VSCALEFPS (make-instance 'x86-asm-instruction :name "VSCALEFPS" :is-container t :variants (list
x64-instruction-variant-VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VSCALEFSD (make-instance 'x86-asm-instruction :name "VSCALEFSD" :is-container t :variants (list
x64-instruction-variant-VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VSCALEFSS (make-instance 'x86-asm-instruction :name "VSCALEFSS" :is-container t :variants (list
x64-instruction-variant-VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VSCATTERDPD (make-instance 'x86-asm-instruction :name "VSCATTERDPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERDPD-xmem64-mask.xmmreg x64-instruction-variant-VSCATTERDPD-xmem64-mask.ymmreg x64-instruction-variant-VSCATTERDPD-ymem64-mask.zmmreg)))

(defparameter x64-instruction-container-VSCATTERDPS (make-instance 'x86-asm-instruction :name "VSCATTERDPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERDPS-xmem32-mask.xmmreg x64-instruction-variant-VSCATTERDPS-ymem32-mask.ymmreg x64-instruction-variant-VSCATTERDPS-zmem32-mask.zmmreg)))

(defparameter x64-instruction-container-VSCATTERPF0DPD (make-instance 'x86-asm-instruction :name "VSCATTERPF0DPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF0DPD-ymem64-mask)))

(defparameter x64-instruction-container-VSCATTERPF0DPS (make-instance 'x86-asm-instruction :name "VSCATTERPF0DPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF0DPS-zmem32-mask)))

(defparameter x64-instruction-container-VSCATTERPF0QPD (make-instance 'x86-asm-instruction :name "VSCATTERPF0QPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF0QPD-zmem64-mask)))

(defparameter x64-instruction-container-VSCATTERPF0QPS (make-instance 'x86-asm-instruction :name "VSCATTERPF0QPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF0QPS-zmem32-mask)))

(defparameter x64-instruction-container-VSCATTERPF1DPD (make-instance 'x86-asm-instruction :name "VSCATTERPF1DPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF1DPD-ymem64-mask)))

(defparameter x64-instruction-container-VSCATTERPF1DPS (make-instance 'x86-asm-instruction :name "VSCATTERPF1DPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF1DPS-zmem32-mask)))

(defparameter x64-instruction-container-VSCATTERPF1QPD (make-instance 'x86-asm-instruction :name "VSCATTERPF1QPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF1QPD-zmem64-mask)))

(defparameter x64-instruction-container-VSCATTERPF1QPS (make-instance 'x86-asm-instruction :name "VSCATTERPF1QPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERPF1QPS-zmem32-mask)))

(defparameter x64-instruction-container-VSCATTERQPD (make-instance 'x86-asm-instruction :name "VSCATTERQPD" :is-container t :variants (list
x64-instruction-variant-VSCATTERQPD-xmem64-mask.xmmreg x64-instruction-variant-VSCATTERQPD-ymem64-mask.ymmreg x64-instruction-variant-VSCATTERQPD-zmem64-mask.zmmreg)))

(defparameter x64-instruction-container-VSCATTERQPS (make-instance 'x86-asm-instruction :name "VSCATTERQPS" :is-container t :variants (list
x64-instruction-variant-VSCATTERQPS-xmem32-mask.xmmreg x64-instruction-variant-VSCATTERQPS-ymem32-mask.xmmreg x64-instruction-variant-VSCATTERQPS-zmem32-mask.ymmreg)))

(defparameter x64-instruction-container-VSHUFF32X4 (make-instance 'x86-asm-instruction :name "VSHUFF32X4" :is-container t :variants (list
x64-instruction-variant-VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VSHUFF64X2 (make-instance 'x86-asm-instruction :name "VSHUFF64X2" :is-container t :variants (list
x64-instruction-variant-VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VSHUFI32X4 (make-instance 'x86-asm-instruction :name "VSHUFI32X4" :is-container t :variants (list
x64-instruction-variant-VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VSHUFI64X2 (make-instance 'x86-asm-instruction :name "VSHUFI64X2" :is-container t :variants (list
x64-instruction-variant-VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VSHUFPD (make-instance 'x86-asm-instruction :name "VSHUFPD" :is-container t :variants (list
x64-instruction-variant-VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 x64-instruction-variant-VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 x64-instruction-variant-VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8)))

(defparameter x64-instruction-container-VSHUFPS (make-instance 'x86-asm-instruction :name "VSHUFPS" :is-container t :variants (list
x64-instruction-variant-VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 x64-instruction-variant-VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 x64-instruction-variant-VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8)))

(defparameter x64-instruction-container-VSQRTPD (make-instance 'x86-asm-instruction :name "VSQRTPD" :is-container t :variants (list
x64-instruction-variant-VSQRTPD-xmmreg-mask-z.xmmrm128-b64 x64-instruction-variant-VSQRTPD-ymmreg-mask-z.ymmrm256-b64 x64-instruction-variant-VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VSQRTPS (make-instance 'x86-asm-instruction :name "VSQRTPS" :is-container t :variants (list
x64-instruction-variant-VSQRTPS-xmmreg-mask-z.xmmrm128-b32 x64-instruction-variant-VSQRTPS-ymmreg-mask-z.ymmrm256-b32 x64-instruction-variant-VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VSQRTSD (make-instance 'x86-asm-instruction :name "VSQRTSD" :is-container t :variants (list
x64-instruction-variant-VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VSQRTSS (make-instance 'x86-asm-instruction :name "VSQRTSS" :is-container t :variants (list
x64-instruction-variant-VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VSUBPD (make-instance 'x86-asm-instruction :name "VSUBPD" :is-container t :variants (list
x64-instruction-variant-VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er)))

(defparameter x64-instruction-container-VSUBPS (make-instance 'x86-asm-instruction :name "VSUBPS" :is-container t :variants (list
x64-instruction-variant-VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er)))

(defparameter x64-instruction-container-VSUBSD (make-instance 'x86-asm-instruction :name "VSUBSD" :is-container t :variants (list
x64-instruction-variant-VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er)))

(defparameter x64-instruction-container-VSUBSS (make-instance 'x86-asm-instruction :name "VSUBSS" :is-container t :variants (list
x64-instruction-variant-VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er)))

(defparameter x64-instruction-container-VUCOMISD (make-instance 'x86-asm-instruction :name "VUCOMISD" :is-container t :variants (list
x64-instruction-variant-VUCOMISD-xmmreg.xmmrm64-sae)))

(defparameter x64-instruction-container-VUCOMISS (make-instance 'x86-asm-instruction :name "VUCOMISS" :is-container t :variants (list
x64-instruction-variant-VUCOMISS-xmmreg.xmmrm32-sae)))

(defparameter x64-instruction-container-VUNPCKHPD (make-instance 'x86-asm-instruction :name "VUNPCKHPD" :is-container t :variants (list
x64-instruction-variant-VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VUNPCKHPS (make-instance 'x86-asm-instruction :name "VUNPCKHPS" :is-container t :variants (list
x64-instruction-variant-VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VUNPCKLPD (make-instance 'x86-asm-instruction :name "VUNPCKLPD" :is-container t :variants (list
x64-instruction-variant-VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VUNPCKLPS (make-instance 'x86-asm-instruction :name "VUNPCKLPS" :is-container t :variants (list
x64-instruction-variant-VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-VXORPD (make-instance 'x86-asm-instruction :name "VXORPD" :is-container t :variants (list
x64-instruction-variant-VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 x64-instruction-variant-VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 x64-instruction-variant-VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64)))

(defparameter x64-instruction-container-VXORPS (make-instance 'x86-asm-instruction :name "VXORPS" :is-container t :variants (list
x64-instruction-variant-VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 x64-instruction-variant-VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 x64-instruction-variant-VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32)))

(defparameter x64-instruction-container-CLFLUSHOPT (make-instance 'x86-asm-instruction :name "CLFLUSHOPT" :is-container t :variants (list
x64-instruction-variant-CLFLUSHOPT-mem)))

(defparameter x64-instruction-container-HINT_NOP0 (make-instance 'x86-asm-instruction :name "HINT_NOP0" :is-container t :variants (list
x64-instruction-variant-HINT_NOP0-rm16 x64-instruction-variant-HINT_NOP0-rm32 x64-instruction-variant-HINT_NOP0-rm64)))

(defparameter x64-instruction-container-HINT_NOP1 (make-instance 'x86-asm-instruction :name "HINT_NOP1" :is-container t :variants (list
x64-instruction-variant-HINT_NOP1-rm16 x64-instruction-variant-HINT_NOP1-rm32 x64-instruction-variant-HINT_NOP1-rm64)))

(defparameter x64-instruction-container-HINT_NOP2 (make-instance 'x86-asm-instruction :name "HINT_NOP2" :is-container t :variants (list
x64-instruction-variant-HINT_NOP2-rm16 x64-instruction-variant-HINT_NOP2-rm32 x64-instruction-variant-HINT_NOP2-rm64)))

(defparameter x64-instruction-container-HINT_NOP3 (make-instance 'x86-asm-instruction :name "HINT_NOP3" :is-container t :variants (list
x64-instruction-variant-HINT_NOP3-rm16 x64-instruction-variant-HINT_NOP3-rm32 x64-instruction-variant-HINT_NOP3-rm64)))

(defparameter x64-instruction-container-HINT_NOP4 (make-instance 'x86-asm-instruction :name "HINT_NOP4" :is-container t :variants (list
x64-instruction-variant-HINT_NOP4-rm16 x64-instruction-variant-HINT_NOP4-rm32 x64-instruction-variant-HINT_NOP4-rm64)))

(defparameter x64-instruction-container-HINT_NOP5 (make-instance 'x86-asm-instruction :name "HINT_NOP5" :is-container t :variants (list
x64-instruction-variant-HINT_NOP5-rm16 x64-instruction-variant-HINT_NOP5-rm32 x64-instruction-variant-HINT_NOP5-rm64)))

(defparameter x64-instruction-container-HINT_NOP6 (make-instance 'x86-asm-instruction :name "HINT_NOP6" :is-container t :variants (list
x64-instruction-variant-HINT_NOP6-rm16 x64-instruction-variant-HINT_NOP6-rm32 x64-instruction-variant-HINT_NOP6-rm64)))

(defparameter x64-instruction-container-HINT_NOP7 (make-instance 'x86-asm-instruction :name "HINT_NOP7" :is-container t :variants (list
x64-instruction-variant-HINT_NOP7-rm16 x64-instruction-variant-HINT_NOP7-rm32 x64-instruction-variant-HINT_NOP7-rm64)))

(defparameter x64-instruction-container-HINT_NOP8 (make-instance 'x86-asm-instruction :name "HINT_NOP8" :is-container t :variants (list
x64-instruction-variant-HINT_NOP8-rm16 x64-instruction-variant-HINT_NOP8-rm32 x64-instruction-variant-HINT_NOP8-rm64)))

(defparameter x64-instruction-container-HINT_NOP9 (make-instance 'x86-asm-instruction :name "HINT_NOP9" :is-container t :variants (list
x64-instruction-variant-HINT_NOP9-rm16 x64-instruction-variant-HINT_NOP9-rm32 x64-instruction-variant-HINT_NOP9-rm64)))

(defparameter x64-instruction-container-HINT_NOP10 (make-instance 'x86-asm-instruction :name "HINT_NOP10" :is-container t :variants (list
x64-instruction-variant-HINT_NOP10-rm16 x64-instruction-variant-HINT_NOP10-rm32 x64-instruction-variant-HINT_NOP10-rm64)))

(defparameter x64-instruction-container-HINT_NOP11 (make-instance 'x86-asm-instruction :name "HINT_NOP11" :is-container t :variants (list
x64-instruction-variant-HINT_NOP11-rm16 x64-instruction-variant-HINT_NOP11-rm32 x64-instruction-variant-HINT_NOP11-rm64)))

(defparameter x64-instruction-container-HINT_NOP12 (make-instance 'x86-asm-instruction :name "HINT_NOP12" :is-container t :variants (list
x64-instruction-variant-HINT_NOP12-rm16 x64-instruction-variant-HINT_NOP12-rm32 x64-instruction-variant-HINT_NOP12-rm64)))

(defparameter x64-instruction-container-HINT_NOP13 (make-instance 'x86-asm-instruction :name "HINT_NOP13" :is-container t :variants (list
x64-instruction-variant-HINT_NOP13-rm16 x64-instruction-variant-HINT_NOP13-rm32 x64-instruction-variant-HINT_NOP13-rm64)))

(defparameter x64-instruction-container-HINT_NOP14 (make-instance 'x86-asm-instruction :name "HINT_NOP14" :is-container t :variants (list
x64-instruction-variant-HINT_NOP14-rm16 x64-instruction-variant-HINT_NOP14-rm32 x64-instruction-variant-HINT_NOP14-rm64)))

(defparameter x64-instruction-container-HINT_NOP15 (make-instance 'x86-asm-instruction :name "HINT_NOP15" :is-container t :variants (list
x64-instruction-variant-HINT_NOP15-rm16 x64-instruction-variant-HINT_NOP15-rm32 x64-instruction-variant-HINT_NOP15-rm64)))

(defparameter x64-instruction-container-HINT_NOP16 (make-instance 'x86-asm-instruction :name "HINT_NOP16" :is-container t :variants (list
x64-instruction-variant-HINT_NOP16-rm16 x64-instruction-variant-HINT_NOP16-rm32 x64-instruction-variant-HINT_NOP16-rm64)))

(defparameter x64-instruction-container-HINT_NOP17 (make-instance 'x86-asm-instruction :name "HINT_NOP17" :is-container t :variants (list
x64-instruction-variant-HINT_NOP17-rm16 x64-instruction-variant-HINT_NOP17-rm32 x64-instruction-variant-HINT_NOP17-rm64)))

(defparameter x64-instruction-container-HINT_NOP18 (make-instance 'x86-asm-instruction :name "HINT_NOP18" :is-container t :variants (list
x64-instruction-variant-HINT_NOP18-rm16 x64-instruction-variant-HINT_NOP18-rm32 x64-instruction-variant-HINT_NOP18-rm64)))

(defparameter x64-instruction-container-HINT_NOP19 (make-instance 'x86-asm-instruction :name "HINT_NOP19" :is-container t :variants (list
x64-instruction-variant-HINT_NOP19-rm16 x64-instruction-variant-HINT_NOP19-rm32 x64-instruction-variant-HINT_NOP19-rm64)))

(defparameter x64-instruction-container-HINT_NOP20 (make-instance 'x86-asm-instruction :name "HINT_NOP20" :is-container t :variants (list
x64-instruction-variant-HINT_NOP20-rm16 x64-instruction-variant-HINT_NOP20-rm32 x64-instruction-variant-HINT_NOP20-rm64)))

(defparameter x64-instruction-container-HINT_NOP21 (make-instance 'x86-asm-instruction :name "HINT_NOP21" :is-container t :variants (list
x64-instruction-variant-HINT_NOP21-rm16 x64-instruction-variant-HINT_NOP21-rm32 x64-instruction-variant-HINT_NOP21-rm64)))

(defparameter x64-instruction-container-HINT_NOP22 (make-instance 'x86-asm-instruction :name "HINT_NOP22" :is-container t :variants (list
x64-instruction-variant-HINT_NOP22-rm16 x64-instruction-variant-HINT_NOP22-rm32 x64-instruction-variant-HINT_NOP22-rm64)))

(defparameter x64-instruction-container-HINT_NOP23 (make-instance 'x86-asm-instruction :name "HINT_NOP23" :is-container t :variants (list
x64-instruction-variant-HINT_NOP23-rm16 x64-instruction-variant-HINT_NOP23-rm32 x64-instruction-variant-HINT_NOP23-rm64)))

(defparameter x64-instruction-container-HINT_NOP24 (make-instance 'x86-asm-instruction :name "HINT_NOP24" :is-container t :variants (list
x64-instruction-variant-HINT_NOP24-rm16 x64-instruction-variant-HINT_NOP24-rm32 x64-instruction-variant-HINT_NOP24-rm64)))

(defparameter x64-instruction-container-HINT_NOP25 (make-instance 'x86-asm-instruction :name "HINT_NOP25" :is-container t :variants (list
x64-instruction-variant-HINT_NOP25-rm16 x64-instruction-variant-HINT_NOP25-rm32 x64-instruction-variant-HINT_NOP25-rm64)))

(defparameter x64-instruction-container-HINT_NOP26 (make-instance 'x86-asm-instruction :name "HINT_NOP26" :is-container t :variants (list
x64-instruction-variant-HINT_NOP26-rm16 x64-instruction-variant-HINT_NOP26-rm32 x64-instruction-variant-HINT_NOP26-rm64)))

(defparameter x64-instruction-container-HINT_NOP27 (make-instance 'x86-asm-instruction :name "HINT_NOP27" :is-container t :variants (list
x64-instruction-variant-HINT_NOP27-rm16 x64-instruction-variant-HINT_NOP27-rm32 x64-instruction-variant-HINT_NOP27-rm64)))

(defparameter x64-instruction-container-HINT_NOP28 (make-instance 'x86-asm-instruction :name "HINT_NOP28" :is-container t :variants (list
x64-instruction-variant-HINT_NOP28-rm16 x64-instruction-variant-HINT_NOP28-rm32 x64-instruction-variant-HINT_NOP28-rm64)))

(defparameter x64-instruction-container-HINT_NOP29 (make-instance 'x86-asm-instruction :name "HINT_NOP29" :is-container t :variants (list
x64-instruction-variant-HINT_NOP29-rm16 x64-instruction-variant-HINT_NOP29-rm32 x64-instruction-variant-HINT_NOP29-rm64)))

(defparameter x64-instruction-container-HINT_NOP30 (make-instance 'x86-asm-instruction :name "HINT_NOP30" :is-container t :variants (list
x64-instruction-variant-HINT_NOP30-rm16 x64-instruction-variant-HINT_NOP30-rm32 x64-instruction-variant-HINT_NOP30-rm64)))

(defparameter x64-instruction-container-HINT_NOP31 (make-instance 'x86-asm-instruction :name "HINT_NOP31" :is-container t :variants (list
x64-instruction-variant-HINT_NOP31-rm16 x64-instruction-variant-HINT_NOP31-rm32 x64-instruction-variant-HINT_NOP31-rm64)))

(defparameter x64-instruction-container-HINT_NOP32 (make-instance 'x86-asm-instruction :name "HINT_NOP32" :is-container t :variants (list
x64-instruction-variant-HINT_NOP32-rm16 x64-instruction-variant-HINT_NOP32-rm32 x64-instruction-variant-HINT_NOP32-rm64)))

(defparameter x64-instruction-container-HINT_NOP33 (make-instance 'x86-asm-instruction :name "HINT_NOP33" :is-container t :variants (list
x64-instruction-variant-HINT_NOP33-rm16 x64-instruction-variant-HINT_NOP33-rm32 x64-instruction-variant-HINT_NOP33-rm64)))

(defparameter x64-instruction-container-HINT_NOP34 (make-instance 'x86-asm-instruction :name "HINT_NOP34" :is-container t :variants (list
x64-instruction-variant-HINT_NOP34-rm16 x64-instruction-variant-HINT_NOP34-rm32 x64-instruction-variant-HINT_NOP34-rm64)))

(defparameter x64-instruction-container-HINT_NOP35 (make-instance 'x86-asm-instruction :name "HINT_NOP35" :is-container t :variants (list
x64-instruction-variant-HINT_NOP35-rm16 x64-instruction-variant-HINT_NOP35-rm32 x64-instruction-variant-HINT_NOP35-rm64)))

(defparameter x64-instruction-container-HINT_NOP36 (make-instance 'x86-asm-instruction :name "HINT_NOP36" :is-container t :variants (list
x64-instruction-variant-HINT_NOP36-rm16 x64-instruction-variant-HINT_NOP36-rm32 x64-instruction-variant-HINT_NOP36-rm64)))

(defparameter x64-instruction-container-HINT_NOP37 (make-instance 'x86-asm-instruction :name "HINT_NOP37" :is-container t :variants (list
x64-instruction-variant-HINT_NOP37-rm16 x64-instruction-variant-HINT_NOP37-rm32 x64-instruction-variant-HINT_NOP37-rm64)))

(defparameter x64-instruction-container-HINT_NOP38 (make-instance 'x86-asm-instruction :name "HINT_NOP38" :is-container t :variants (list
x64-instruction-variant-HINT_NOP38-rm16 x64-instruction-variant-HINT_NOP38-rm32 x64-instruction-variant-HINT_NOP38-rm64)))

(defparameter x64-instruction-container-HINT_NOP39 (make-instance 'x86-asm-instruction :name "HINT_NOP39" :is-container t :variants (list
x64-instruction-variant-HINT_NOP39-rm16 x64-instruction-variant-HINT_NOP39-rm32 x64-instruction-variant-HINT_NOP39-rm64)))

(defparameter x64-instruction-container-HINT_NOP40 (make-instance 'x86-asm-instruction :name "HINT_NOP40" :is-container t :variants (list
x64-instruction-variant-HINT_NOP40-rm16 x64-instruction-variant-HINT_NOP40-rm32 x64-instruction-variant-HINT_NOP40-rm64)))

(defparameter x64-instruction-container-HINT_NOP41 (make-instance 'x86-asm-instruction :name "HINT_NOP41" :is-container t :variants (list
x64-instruction-variant-HINT_NOP41-rm16 x64-instruction-variant-HINT_NOP41-rm32 x64-instruction-variant-HINT_NOP41-rm64)))

(defparameter x64-instruction-container-HINT_NOP42 (make-instance 'x86-asm-instruction :name "HINT_NOP42" :is-container t :variants (list
x64-instruction-variant-HINT_NOP42-rm16 x64-instruction-variant-HINT_NOP42-rm32 x64-instruction-variant-HINT_NOP42-rm64)))

(defparameter x64-instruction-container-HINT_NOP43 (make-instance 'x86-asm-instruction :name "HINT_NOP43" :is-container t :variants (list
x64-instruction-variant-HINT_NOP43-rm16 x64-instruction-variant-HINT_NOP43-rm32 x64-instruction-variant-HINT_NOP43-rm64)))

(defparameter x64-instruction-container-HINT_NOP44 (make-instance 'x86-asm-instruction :name "HINT_NOP44" :is-container t :variants (list
x64-instruction-variant-HINT_NOP44-rm16 x64-instruction-variant-HINT_NOP44-rm32 x64-instruction-variant-HINT_NOP44-rm64)))

(defparameter x64-instruction-container-HINT_NOP45 (make-instance 'x86-asm-instruction :name "HINT_NOP45" :is-container t :variants (list
x64-instruction-variant-HINT_NOP45-rm16 x64-instruction-variant-HINT_NOP45-rm32 x64-instruction-variant-HINT_NOP45-rm64)))

(defparameter x64-instruction-container-HINT_NOP46 (make-instance 'x86-asm-instruction :name "HINT_NOP46" :is-container t :variants (list
x64-instruction-variant-HINT_NOP46-rm16 x64-instruction-variant-HINT_NOP46-rm32 x64-instruction-variant-HINT_NOP46-rm64)))

(defparameter x64-instruction-container-HINT_NOP47 (make-instance 'x86-asm-instruction :name "HINT_NOP47" :is-container t :variants (list
x64-instruction-variant-HINT_NOP47-rm16 x64-instruction-variant-HINT_NOP47-rm32 x64-instruction-variant-HINT_NOP47-rm64)))

(defparameter x64-instruction-container-HINT_NOP48 (make-instance 'x86-asm-instruction :name "HINT_NOP48" :is-container t :variants (list
x64-instruction-variant-HINT_NOP48-rm16 x64-instruction-variant-HINT_NOP48-rm32 x64-instruction-variant-HINT_NOP48-rm64)))

(defparameter x64-instruction-container-HINT_NOP49 (make-instance 'x86-asm-instruction :name "HINT_NOP49" :is-container t :variants (list
x64-instruction-variant-HINT_NOP49-rm16 x64-instruction-variant-HINT_NOP49-rm32 x64-instruction-variant-HINT_NOP49-rm64)))

(defparameter x64-instruction-container-HINT_NOP50 (make-instance 'x86-asm-instruction :name "HINT_NOP50" :is-container t :variants (list
x64-instruction-variant-HINT_NOP50-rm16 x64-instruction-variant-HINT_NOP50-rm32 x64-instruction-variant-HINT_NOP50-rm64)))

(defparameter x64-instruction-container-HINT_NOP51 (make-instance 'x86-asm-instruction :name "HINT_NOP51" :is-container t :variants (list
x64-instruction-variant-HINT_NOP51-rm16 x64-instruction-variant-HINT_NOP51-rm32 x64-instruction-variant-HINT_NOP51-rm64)))

(defparameter x64-instruction-container-HINT_NOP52 (make-instance 'x86-asm-instruction :name "HINT_NOP52" :is-container t :variants (list
x64-instruction-variant-HINT_NOP52-rm16 x64-instruction-variant-HINT_NOP52-rm32 x64-instruction-variant-HINT_NOP52-rm64)))

(defparameter x64-instruction-container-HINT_NOP53 (make-instance 'x86-asm-instruction :name "HINT_NOP53" :is-container t :variants (list
x64-instruction-variant-HINT_NOP53-rm16 x64-instruction-variant-HINT_NOP53-rm32 x64-instruction-variant-HINT_NOP53-rm64)))

(defparameter x64-instruction-container-HINT_NOP54 (make-instance 'x86-asm-instruction :name "HINT_NOP54" :is-container t :variants (list
x64-instruction-variant-HINT_NOP54-rm16 x64-instruction-variant-HINT_NOP54-rm32 x64-instruction-variant-HINT_NOP54-rm64)))

(defparameter x64-instruction-container-HINT_NOP55 (make-instance 'x86-asm-instruction :name "HINT_NOP55" :is-container t :variants (list
x64-instruction-variant-HINT_NOP55-rm16 x64-instruction-variant-HINT_NOP55-rm32 x64-instruction-variant-HINT_NOP55-rm64)))

(defparameter x64-instruction-container-HINT_NOP56 (make-instance 'x86-asm-instruction :name "HINT_NOP56" :is-container t :variants (list
x64-instruction-variant-HINT_NOP56-rm16 x64-instruction-variant-HINT_NOP56-rm32 x64-instruction-variant-HINT_NOP56-rm64)))

(defparameter x64-instruction-container-HINT_NOP57 (make-instance 'x86-asm-instruction :name "HINT_NOP57" :is-container t :variants (list
x64-instruction-variant-HINT_NOP57-rm16 x64-instruction-variant-HINT_NOP57-rm32 x64-instruction-variant-HINT_NOP57-rm64)))

(defparameter x64-instruction-container-HINT_NOP58 (make-instance 'x86-asm-instruction :name "HINT_NOP58" :is-container t :variants (list
x64-instruction-variant-HINT_NOP58-rm16 x64-instruction-variant-HINT_NOP58-rm32 x64-instruction-variant-HINT_NOP58-rm64)))

(defparameter x64-instruction-container-HINT_NOP59 (make-instance 'x86-asm-instruction :name "HINT_NOP59" :is-container t :variants (list
x64-instruction-variant-HINT_NOP59-rm16 x64-instruction-variant-HINT_NOP59-rm32 x64-instruction-variant-HINT_NOP59-rm64)))

(defparameter x64-instruction-container-HINT_NOP60 (make-instance 'x86-asm-instruction :name "HINT_NOP60" :is-container t :variants (list
x64-instruction-variant-HINT_NOP60-rm16 x64-instruction-variant-HINT_NOP60-rm32 x64-instruction-variant-HINT_NOP60-rm64)))

(defparameter x64-instruction-container-HINT_NOP61 (make-instance 'x86-asm-instruction :name "HINT_NOP61" :is-container t :variants (list
x64-instruction-variant-HINT_NOP61-rm16 x64-instruction-variant-HINT_NOP61-rm32 x64-instruction-variant-HINT_NOP61-rm64)))

(defparameter x64-instruction-container-HINT_NOP62 (make-instance 'x86-asm-instruction :name "HINT_NOP62" :is-container t :variants (list
x64-instruction-variant-HINT_NOP62-rm16 x64-instruction-variant-HINT_NOP62-rm32 x64-instruction-variant-HINT_NOP62-rm64)))

(defparameter x64-instruction-container-HINT_NOP63 (make-instance 'x86-asm-instruction :name "HINT_NOP63" :is-container t :variants (list
x64-instruction-variant-HINT_NOP63-rm16 x64-instruction-variant-HINT_NOP63-rm32 x64-instruction-variant-HINT_NOP63-rm64)))