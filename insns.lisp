(defparameter *x86-instructions-list-from-nasm* (list
(list "DB"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DW"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DD"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DQ"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DT"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DO"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DY"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "DZ"               "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESB"             "imm"                                        "[ resb]"                                        "8086"                      )
(list "RESW"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESD"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESQ"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "REST"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESO"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESY"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "RESZ"             "ignore"                                     "ignore"                                         "ignore"                    )
(list "AAA"              "void"                                       "[ 37]"                                          "8086,NOLONG"               )
(list "AAD"              "void"                                       "[ d5 0a]"                                       "8086,NOLONG"               )
(list "AAD"              "imm"                                        "[i: d5 ib,u]"                                   "8086,SB,NOLONG"            )
(list "AAM"              "void"                                       "[ d4 0a]"                                       "8086,NOLONG"               )
(list "AAM"              "imm"                                        "[i: d4 ib,u]"                                   "8086,SB,NOLONG"            )
(list "AAS"              "void"                                       "[ 3f]"                                          "8086,NOLONG"               )
(list "ADC"              "mem,reg8"                                   "[mr: hle 10 /r]"                                "8086,SM,LOCK"              )
(list "ADC"              "reg8,reg8"                                  "[mr: 10 /r]"                                    "8086"                      )
(list "ADC"              "mem,reg16"                                  "[mr: hle o16 11 /r]"                            "8086,SM,LOCK"              )
(list "ADC"              "reg16,reg16"                                "[mr: o16 11 /r]"                                "8086"                      )
(list "ADC"              "mem,reg32"                                  "[mr: hle o32 11 /r]"                            "386,SM,LOCK"               )
(list "ADC"              "reg32,reg32"                                "[mr: o32 11 /r]"                                "386"                       )
(list "ADC"              "mem,reg64"                                  "[mr: hle o64 11 /r]"                            "X64,SM,LOCK"               )
(list "ADC"              "reg64,reg64"                                "[mr: o64 11 /r]"                                "X64"                       )
(list "ADC"              "reg8,mem"                                   "[rm: 12 /r]"                                    "8086,SM"                   )
(list "ADC"              "reg8,reg8"                                  "[rm: 12 /r]"                                    "8086"                      )
(list "ADC"              "reg16,mem"                                  "[rm: o16 13 /r]"                                "8086,SM"                   )
(list "ADC"              "reg16,reg16"                                "[rm: o16 13 /r]"                                "8086"                      )
(list "ADC"              "reg32,mem"                                  "[rm: o32 13 /r]"                                "386,SM"                    )
(list "ADC"              "reg32,reg32"                                "[rm: o32 13 /r]"                                "386"                       )
(list "ADC"              "reg64,mem"                                  "[rm: o64 13 /r]"                                "X64,SM"                    )
(list "ADC"              "reg64,reg64"                                "[rm: o64 13 /r]"                                "X64"                       )
(list "ADC"              "rm16,imm8"                                  "[mi: hle o16 83 /2 ib,s]"                       "8086,LOCK"                 )
(list "ADC"              "rm32,imm8"                                  "[mi: hle o32 83 /2 ib,s]"                       "386,LOCK"                  )
(list "ADC"              "rm64,imm8"                                  "[mi: hle o64 83 /2 ib,s]"                       "X64,LOCK"                  )
(list "ADC"              "reg_al,imm"                                 "[-i: 14 ib]"                                    "8086,SM"                   )
(list "ADC"              "reg_ax,sbyteword"                           "[mi: o16 83 /2 ib,s]"                           "8086,SM,ND"                )
(list "ADC"              "reg_ax,imm"                                 "[-i: o16 15 iw]"                                "8086,SM"                   )
(list "ADC"              "reg_eax,sbytedword"                         "[mi: o32 83 /2 ib,s]"                           "386,SM,ND"                 )
(list "ADC"              "reg_eax,imm"                                "[-i: o32 15 id]"                                "386,SM"                    )
(list "ADC"              "reg_rax,sbytedword"                         "[mi: o64 83 /2 ib,s]"                           "X64,SM,ND"                 )
(list "ADC"              "reg_rax,imm"                                "[-i: o64 15 id,s]"                              "X64,SM"                    )
(list "ADC"              "rm8,imm"                                    "[mi: hle 80 /2 ib]"                             "8086,SM,LOCK"              )
(list "ADC"              "rm16,sbyteword"                             "[mi: hle o16 83 /2 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "ADC"              "rm16,imm"                                   "[mi: hle o16 81 /2 iw]"                         "8086,SM,LOCK"              )
(list "ADC"              "rm32,sbytedword"                            "[mi: hle o32 83 /2 ib,s]"                       "386,SM,LOCK,ND"            )
(list "ADC"              "rm32,imm"                                   "[mi: hle o32 81 /2 id]"                         "386,SM,LOCK"               )
(list "ADC"              "rm64,sbytedword"                            "[mi: hle o64 83 /2 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "ADC"              "rm64,imm"                                   "[mi: hle o64 81 /2 id,s]"                       "X64,SM,LOCK"               )
(list "ADC"              "mem,imm8"                                   "[mi: hle 80 /2 ib]"                             "8086,SM,LOCK,ND"           )
(list "ADC"              "mem,sbyteword16"                            "[mi: hle o16 83 /2 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "ADC"              "mem,imm16"                                  "[mi: hle o16 81 /2 iw]"                         "8086,SM,LOCK"              )
(list "ADC"              "mem,sbytedword32"                           "[mi: hle o32 83 /2 ib,s]"                       "386,SM,LOCK,ND"            )
(list "ADC"              "mem,imm32"                                  "[mi: hle o32 81 /2 id]"                         "386,SM,LOCK"               )
(list "ADC"              "rm8,imm"                                    "[mi: hle 82 /2 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "ADD"              "mem,reg8"                                   "[mr: hle 00 /r]"                                "8086,SM,LOCK"              )
(list "ADD"              "reg8,reg8"                                  "[mr: 00 /r]"                                    "8086"                      )
(list "ADD"              "mem,reg16"                                  "[mr: hle o16 01 /r]"                            "8086,SM,LOCK"              )
(list "ADD"              "reg16,reg16"                                "[mr: o16 01 /r]"                                "8086"                      )
(list "ADD"              "mem,reg32"                                  "[mr: hle o32 01 /r]"                            "386,SM,LOCK"               )
(list "ADD"              "reg32,reg32"                                "[mr: o32 01 /r]"                                "386"                       )
(list "ADD"              "mem,reg64"                                  "[mr: hle o64 01 /r]"                            "X64,SM,LOCK"               )
(list "ADD"              "reg64,reg64"                                "[mr: o64 01 /r]"                                "X64"                       )
(list "ADD"              "reg8,mem"                                   "[rm: 02 /r]"                                    "8086,SM"                   )
(list "ADD"              "reg8,reg8"                                  "[rm: 02 /r]"                                    "8086"                      )
(list "ADD"              "reg16,mem"                                  "[rm: o16 03 /r]"                                "8086,SM"                   )
(list "ADD"              "reg16,reg16"                                "[rm: o16 03 /r]"                                "8086"                      )
(list "ADD"              "reg32,mem"                                  "[rm: o32 03 /r]"                                "386,SM"                    )
(list "ADD"              "reg32,reg32"                                "[rm: o32 03 /r]"                                "386"                       )
(list "ADD"              "reg64,mem"                                  "[rm: o64 03 /r]"                                "X64,SM"                    )
(list "ADD"              "reg64,reg64"                                "[rm: o64 03 /r]"                                "X64"                       )
(list "ADD"              "rm16,imm8"                                  "[mi: hle o16 83 /0 ib,s]"                       "8086,LOCK"                 )
(list "ADD"              "rm32,imm8"                                  "[mi: hle o32 83 /0 ib,s]"                       "386,LOCK"                  )
(list "ADD"              "rm64,imm8"                                  "[mi: hle o64 83 /0 ib,s]"                       "X64,LOCK"                  )
(list "ADD"              "reg_al,imm"                                 "[-i: 04 ib]"                                    "8086,SM"                   )
(list "ADD"              "reg_ax,sbyteword"                           "[mi: o16 83 /0 ib,s]"                           "8086,SM,ND"                )
(list "ADD"              "reg_ax,imm"                                 "[-i: o16 05 iw]"                                "8086,SM"                   )
(list "ADD"              "reg_eax,sbytedword"                         "[mi: o32 83 /0 ib,s]"                           "386,SM,ND"                 )
(list "ADD"              "reg_eax,imm"                                "[-i: o32 05 id]"                                "386,SM"                    )
(list "ADD"              "reg_rax,sbytedword"                         "[mi: o64 83 /0 ib,s]"                           "X64,SM,ND"                 )
(list "ADD"              "reg_rax,imm"                                "[-i: o64 05 id,s]"                              "X64,SM"                    )
(list "ADD"              "rm8,imm"                                    "[mi: hle 80 /0 ib]"                             "8086,SM,LOCK"              )
(list "ADD"              "rm16,sbyteword"                             "[mi: hle o16 83 /0 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "ADD"              "rm16,imm"                                   "[mi: hle o16 81 /0 iw]"                         "8086,SM,LOCK"              )
(list "ADD"              "rm32,sbytedword"                            "[mi: hle o32 83 /0 ib,s]"                       "386,SM,LOCK,ND"            )
(list "ADD"              "rm32,imm"                                   "[mi: hle o32 81 /0 id]"                         "386,SM,LOCK"               )
(list "ADD"              "rm64,sbytedword"                            "[mi: hle o64 83 /0 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "ADD"              "rm64,imm"                                   "[mi: hle o64 81 /0 id,s]"                       "X64,SM,LOCK"               )
(list "ADD"              "mem,imm8"                                   "[mi: hle 80 /0 ib]"                             "8086,SM,LOCK"              )
(list "ADD"              "mem,sbyteword16"                            "[mi: hle o16 83 /0 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "ADD"              "mem,imm16"                                  "[mi: hle o16 81 /0 iw]"                         "8086,SM,LOCK"              )
(list "ADD"              "mem,sbytedword32"                           "[mi: hle o32 83 /0 ib,s]"                       "386,SM,LOCK,ND"            )
(list "ADD"              "mem,imm32"                                  "[mi: hle o32 81 /0 id]"                         "386,SM,LOCK"               )
(list "ADD"              "rm8,imm"                                    "[mi: hle 82 /0 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "AND"              "mem,reg8"                                   "[mr: hle 20 /r]"                                "8086,SM,LOCK"              )
(list "AND"              "reg8,reg8"                                  "[mr: 20 /r]"                                    "8086"                      )
(list "AND"              "mem,reg16"                                  "[mr: hle o16 21 /r]"                            "8086,SM,LOCK"              )
(list "AND"              "reg16,reg16"                                "[mr: o16 21 /r]"                                "8086"                      )
(list "AND"              "mem,reg32"                                  "[mr: hle o32 21 /r]"                            "386,SM,LOCK"               )
(list "AND"              "reg32,reg32"                                "[mr: o32 21 /r]"                                "386"                       )
(list "AND"              "mem,reg64"                                  "[mr: hle o64 21 /r]"                            "X64,SM,LOCK"               )
(list "AND"              "reg64,reg64"                                "[mr: o64 21 /r]"                                "X64"                       )
(list "AND"              "reg8,mem"                                   "[rm: 22 /r]"                                    "8086,SM"                   )
(list "AND"              "reg8,reg8"                                  "[rm: 22 /r]"                                    "8086"                      )
(list "AND"              "reg16,mem"                                  "[rm: o16 23 /r]"                                "8086,SM"                   )
(list "AND"              "reg16,reg16"                                "[rm: o16 23 /r]"                                "8086"                      )
(list "AND"              "reg32,mem"                                  "[rm: o32 23 /r]"                                "386,SM"                    )
(list "AND"              "reg32,reg32"                                "[rm: o32 23 /r]"                                "386"                       )
(list "AND"              "reg64,mem"                                  "[rm: o64 23 /r]"                                "X64,SM"                    )
(list "AND"              "reg64,reg64"                                "[rm: o64 23 /r]"                                "X64"                       )
(list "AND"              "rm16,imm8"                                  "[mi: hle o16 83 /4 ib,s]"                       "8086,LOCK"                 )
(list "AND"              "rm32,imm8"                                  "[mi: hle o32 83 /4 ib,s]"                       "386,LOCK"                  )
(list "AND"              "rm64,imm8"                                  "[mi: hle o64 83 /4 ib,s]"                       "X64,LOCK"                  )
(list "AND"              "reg_al,imm"                                 "[-i: 24 ib]"                                    "8086,SM"                   )
(list "AND"              "reg_ax,sbyteword"                           "[mi: o16 83 /4 ib,s]"                           "8086,SM,ND"                )
(list "AND"              "reg_ax,imm"                                 "[-i: o16 25 iw]"                                "8086,SM"                   )
(list "AND"              "reg_eax,sbytedword"                         "[mi: o32 83 /4 ib,s]"                           "386,SM,ND"                 )
(list "AND"              "reg_eax,imm"                                "[-i: o32 25 id]"                                "386,SM"                    )
(list "AND"              "reg_rax,sbytedword"                         "[mi: o64 83 /4 ib,s]"                           "X64,SM,ND"                 )
(list "AND"              "reg_rax,imm"                                "[-i: o64 25 id,s]"                              "X64,SM"                    )
(list "AND"              "rm8,imm"                                    "[mi: hle 80 /4 ib]"                             "8086,SM,LOCK"              )
(list "AND"              "rm16,sbyteword"                             "[mi: hle o16 83 /4 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "AND"              "rm16,imm"                                   "[mi: hle o16 81 /4 iw]"                         "8086,SM,LOCK"              )
(list "AND"              "rm32,sbytedword"                            "[mi: hle o32 83 /4 ib,s]"                       "386,SM,LOCK,ND"            )
(list "AND"              "rm32,imm"                                   "[mi: hle o32 81 /4 id]"                         "386,SM,LOCK"               )
(list "AND"              "rm64,sbytedword"                            "[mi: hle o64 83 /4 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "AND"              "rm64,imm"                                   "[mi: hle o64 81 /4 id,s]"                       "X64,SM,LOCK"               )
(list "AND"              "mem,imm8"                                   "[mi: hle 80 /4 ib]"                             "8086,SM,LOCK"              )
(list "AND"              "mem,sbyteword16"                            "[mi: hle o16 83 /4 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "AND"              "mem,imm16"                                  "[mi: hle o16 81 /4 iw]"                         "8086,SM,LOCK"              )
(list "AND"              "mem,sbytedword32"                           "[mi: hle o32 83 /4 ib,s]"                       "386,SM,LOCK,ND"            )
(list "AND"              "mem,imm32"                                  "[mi: hle o32 81 /4 id]"                         "386,SM,LOCK"               )
(list "AND"              "rm8,imm"                                    "[mi: hle 82 /4 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "ARPL"             "mem,reg16"                                  "[mr: 63 /r]"                                    "286,PROT,SM,NOLONG"        )
(list "ARPL"             "reg16,reg16"                                "[mr: 63 /r]"                                    "286,PROT,NOLONG"           )
(list "BB0_RESET"        "void"                                       "[ 0f 3a]"                                       "PENT,CYRIX,ND"             )
(list "BB1_RESET"        "void"                                       "[ 0f 3b]"                                       "PENT,CYRIX,ND"             )
(list "BOUND"            "reg16,mem"                                  "[rm: o16 62 /r]"                                "186,NOLONG"                )
(list "BOUND"            "reg32,mem"                                  "[rm: o32 62 /r]"                                "386,NOLONG"                )
(list "BSF"              "reg16,mem"                                  "[rm: o16 nof3 0f bc /r]"                        "386,SM"                    )
(list "BSF"              "reg16,reg16"                                "[rm: o16 nof3 0f bc /r]"                        "386"                       )
(list "BSF"              "reg32,mem"                                  "[rm: o32 nof3 0f bc /r]"                        "386,SM"                    )
(list "BSF"              "reg32,reg32"                                "[rm: o32 nof3 0f bc /r]"                        "386"                       )
(list "BSF"              "reg64,mem"                                  "[rm: o64 nof3 0f bc /r]"                        "X64,SM"                    )
(list "BSF"              "reg64,reg64"                                "[rm: o64 nof3 0f bc /r]"                        "X64"                       )
(list "BSR"              "reg16,mem"                                  "[rm: o16 nof3 0f bd /r]"                        "386,SM"                    )
(list "BSR"              "reg16,reg16"                                "[rm: o16 nof3 0f bd /r]"                        "386"                       )
(list "BSR"              "reg32,mem"                                  "[rm: o32 nof3 0f bd /r]"                        "386,SM"                    )
(list "BSR"              "reg32,reg32"                                "[rm: o32 nof3 0f bd /r]"                        "386"                       )
(list "BSR"              "reg64,mem"                                  "[rm: o64 nof3 0f bd /r]"                        "X64,SM"                    )
(list "BSR"              "reg64,reg64"                                "[rm: o64 nof3 0f bd /r]"                        "X64"                       )
(list "BSWAP"            "reg32"                                      "[r: o32 0f c8+r]"                               "486"                       )
(list "BSWAP"            "reg64"                                      "[r: o64 0f c8+r]"                               "X64"                       )
(list "BT"               "mem,reg16"                                  "[mr: o16 0f a3 /r]"                             "386,SM"                    )
(list "BT"               "reg16,reg16"                                "[mr: o16 0f a3 /r]"                             "386"                       )
(list "BT"               "mem,reg32"                                  "[mr: o32 0f a3 /r]"                             "386,SM"                    )
(list "BT"               "reg32,reg32"                                "[mr: o32 0f a3 /r]"                             "386"                       )
(list "BT"               "mem,reg64"                                  "[mr: o64 0f a3 /r]"                             "X64,SM"                    )
(list "BT"               "reg64,reg64"                                "[mr: o64 0f a3 /r]"                             "X64"                       )
(list "BT"               "rm16,imm"                                   "[mi: o16 0f ba /4 ib,u]"                        "386,SB"                    )
(list "BT"               "rm32,imm"                                   "[mi: o32 0f ba /4 ib,u]"                        "386,SB"                    )
(list "BT"               "rm64,imm"                                   "[mi: o64 0f ba /4 ib,u]"                        "X64,SB"                    )
(list "BTC"              "mem,reg16"                                  "[mr: hle o16 0f bb /r]"                         "386,SM,LOCK"               )
(list "BTC"              "reg16,reg16"                                "[mr: o16 0f bb /r]"                             "386"                       )
(list "BTC"              "mem,reg32"                                  "[mr: hle o32 0f bb /r]"                         "386,SM,LOCK"               )
(list "BTC"              "reg32,reg32"                                "[mr: o32 0f bb /r]"                             "386"                       )
(list "BTC"              "mem,reg64"                                  "[mr: hle o64 0f bb /r]"                         "X64,SM,LOCK"               )
(list "BTC"              "reg64,reg64"                                "[mr: o64 0f bb /r]"                             "X64"                       )
(list "BTC"              "rm16,imm"                                   "[mi: hle o16 0f ba /7 ib,u]"                    "386,SB,LOCK"               )
(list "BTC"              "rm32,imm"                                   "[mi: hle o32 0f ba /7 ib,u]"                    "386,SB,LOCK"               )
(list "BTC"              "rm64,imm"                                   "[mi: hle o64 0f ba /7 ib,u]"                    "X64,SB,LOCK"               )
(list "BTR"              "mem,reg16"                                  "[mr: hle o16 0f b3 /r]"                         "386,SM,LOCK"               )
(list "BTR"              "reg16,reg16"                                "[mr: o16 0f b3 /r]"                             "386"                       )
(list "BTR"              "mem,reg32"                                  "[mr: hle o32 0f b3 /r]"                         "386,SM,LOCK"               )
(list "BTR"              "reg32,reg32"                                "[mr: o32 0f b3 /r]"                             "386"                       )
(list "BTR"              "mem,reg64"                                  "[mr: hle o64 0f b3 /r]"                         "X64,SM,LOCK"               )
(list "BTR"              "reg64,reg64"                                "[mr: o64 0f b3 /r]"                             "X64"                       )
(list "BTR"              "rm16,imm"                                   "[mi: hle o16 0f ba /6 ib,u]"                    "386,SB,LOCK"               )
(list "BTR"              "rm32,imm"                                   "[mi: hle o32 0f ba /6 ib,u]"                    "386,SB,LOCK"               )
(list "BTR"              "rm64,imm"                                   "[mi: hle o64 0f ba /6 ib,u]"                    "X64,SB,LOCK"               )
(list "BTS"              "mem,reg16"                                  "[mr: hle o16 0f ab /r]"                         "386,SM,LOCK"               )
(list "BTS"              "reg16,reg16"                                "[mr: o16 0f ab /r]"                             "386"                       )
(list "BTS"              "mem,reg32"                                  "[mr: hle o32 0f ab /r]"                         "386,SM,LOCK"               )
(list "BTS"              "reg32,reg32"                                "[mr: o32 0f ab /r]"                             "386"                       )
(list "BTS"              "mem,reg64"                                  "[mr: hle o64 0f ab /r]"                         "X64,SM,LOCK"               )
(list "BTS"              "reg64,reg64"                                "[mr: o64 0f ab /r]"                             "X64"                       )
(list "BTS"              "rm16,imm"                                   "[mi: hle o16 0f ba /5 ib,u]"                    "386,SB,LOCK"               )
(list "BTS"              "rm32,imm"                                   "[mi: hle o32 0f ba /5 ib,u]"                    "386,SB,LOCK"               )
(list "BTS"              "rm64,imm"                                   "[mi: hle o64 0f ba /5 ib,u]"                    "X64,SB,LOCK"               )
(list "CALL"             "imm"                                        "[i: odf e8 rel]"                                "8086,BND"                  )
(list "CALL"             "imm|near"                                   "[i: odf e8 rel]"                                "8086,ND,BND"               )
(list "CALL"             "imm|far"                                    "[i: odf 9a iwd seg]"                            "8086,ND,NOLONG"            )
(list "CALL"             "imm16"                                      "[i: o16 e8 rel]"                                "8086,NOLONG,BND"           )
(list "CALL"             "imm16|near"                                 "[i: o16 e8 rel]"                                "8086,ND,NOLONG,BND"        )
(list "CALL"             "imm16|far"                                  "[i: o16 9a iwd seg]"                            "8086,ND,NOLONG"            )
(list "CALL"             "imm32"                                      "[i: o32 e8 rel]"                                "386,NOLONG,BND"            )
(list "CALL"             "imm32|near"                                 "[i: o32 e8 rel]"                                "386,ND,NOLONG,BND"         )
(list "CALL"             "imm32|far"                                  "[i: o32 9a iwd seg]"                            "386,ND,NOLONG"             )
(list "CALL"             "imm64"                                      "[i: o64nw e8 rel]"                              "X64,BND"                   )
(list "CALL"             "imm64|near"                                 "[i: o64nw e8 rel]"                              "X64,ND,BND"                )
(list "CALL"             "imm:imm"                                    "[ji: odf 9a iwd iw]"                            "8086,NOLONG"               )
(list "CALL"             "imm16:imm"                                  "[ji: o16 9a iw iw]"                             "8086,NOLONG"               )
(list "CALL"             "imm:imm16"                                  "[ji: o16 9a iw iw]"                             "8086,NOLONG"               )
(list "CALL"             "imm32:imm"                                  "[ji: o32 9a id iw]"                             "386,NOLONG"                )
(list "CALL"             "imm:imm32"                                  "[ji: o32 9a id iw]"                             "386,NOLONG"                )
(list "CALL"             "mem|far"                                    "[m: odf ff /3]"                                 "8086,NOLONG"               )
(list "CALL"             "mem|far"                                    "[m: o64 ff /3]"                                 "X64"                       )
(list "CALL"             "mem16|far"                                  "[m: o16 ff /3]"                                 "8086"                      )
(list "CALL"             "mem32|far"                                  "[m: o32 ff /3]"                                 "386"                       )
(list "CALL"             "mem64|far"                                  "[m: o64 ff /3]"                                 "X64"                       )
(list "CALL"             "mem|near"                                   "[m: odf ff /2]"                                 "8086,ND,BND"               )
(list "CALL"             "rm16|near"                                  "[m: o16 ff /2]"                                 "8086,NOLONG,ND,BND"        )
(list "CALL"             "rm32|near"                                  "[m: o32 ff /2]"                                 "386,NOLONG,ND,BND"         )
(list "CALL"             "rm64|near"                                  "[m: o64nw ff /2]"                               "X64,ND,BND"                )
(list "CALL"             "mem"                                        "[m: odf ff /2]"                                 "8086,BND"                  )
(list "CALL"             "rm16"                                       "[m: o16 ff /2]"                                 "8086,NOLONG,BND"           )
(list "CALL"             "rm32"                                       "[m: o32 ff /2]"                                 "386,NOLONG,BND"            )
(list "CALL"             "rm64"                                       "[m: o64nw ff /2]"                               "X64,BND"                   )
(list "CBW"              "void"                                       "[ o16 98]"                                      "8086"                      )
(list "CDQ"              "void"                                       "[ o32 99]"                                      "386"                       )
(list "CDQE"             "void"                                       "[ o64 98]"                                      "X64"                       )
(list "CLC"              "void"                                       "[ f8]"                                          "8086"                      )
(list "CLD"              "void"                                       "[ fc]"                                          "8086"                      )
(list "CLI"              "void"                                       "[ fa]"                                          "8086"                      )
(list "CLTS"             "void"                                       "[ 0f 06]"                                       "286,PRIV"                  )
(list "CMC"              "void"                                       "[ f5]"                                          "8086"                      )
(list "CMP"              "mem,reg8"                                   "[mr: 38 /r]"                                    "8086,SM"                   )
(list "CMP"              "reg8,reg8"                                  "[mr: 38 /r]"                                    "8086"                      )
(list "CMP"              "mem,reg16"                                  "[mr: o16 39 /r]"                                "8086,SM"                   )
(list "CMP"              "reg16,reg16"                                "[mr: o16 39 /r]"                                "8086"                      )
(list "CMP"              "mem,reg32"                                  "[mr: o32 39 /r]"                                "386,SM"                    )
(list "CMP"              "reg32,reg32"                                "[mr: o32 39 /r]"                                "386"                       )
(list "CMP"              "mem,reg64"                                  "[mr: o64 39 /r]"                                "X64,SM"                    )
(list "CMP"              "reg64,reg64"                                "[mr: o64 39 /r]"                                "X64"                       )
(list "CMP"              "reg8,mem"                                   "[rm: 3a /r]"                                    "8086,SM"                   )
(list "CMP"              "reg8,reg8"                                  "[rm: 3a /r]"                                    "8086"                      )
(list "CMP"              "reg16,mem"                                  "[rm: o16 3b /r]"                                "8086,SM"                   )
(list "CMP"              "reg16,reg16"                                "[rm: o16 3b /r]"                                "8086"                      )
(list "CMP"              "reg32,mem"                                  "[rm: o32 3b /r]"                                "386,SM"                    )
(list "CMP"              "reg32,reg32"                                "[rm: o32 3b /r]"                                "386"                       )
(list "CMP"              "reg64,mem"                                  "[rm: o64 3b /r]"                                "X64,SM"                    )
(list "CMP"              "reg64,reg64"                                "[rm: o64 3b /r]"                                "X64"                       )
(list "CMP"              "rm16,imm8"                                  "[mi: o16 83 /7 ib,s]"                           "8086"                      )
(list "CMP"              "rm32,imm8"                                  "[mi: o32 83 /7 ib,s]"                           "386"                       )
(list "CMP"              "rm64,imm8"                                  "[mi: o64 83 /7 ib,s]"                           "X64"                       )
(list "CMP"              "reg_al,imm"                                 "[-i: 3c ib]"                                    "8086,SM"                   )
(list "CMP"              "reg_ax,sbyteword"                           "[mi: o16 83 /7 ib,s]"                           "8086,SM,ND"                )
(list "CMP"              "reg_ax,imm"                                 "[-i: o16 3d iw]"                                "8086,SM"                   )
(list "CMP"              "reg_eax,sbytedword"                         "[mi: o32 83 /7 ib,s]"                           "386,SM,ND"                 )
(list "CMP"              "reg_eax,imm"                                "[-i: o32 3d id]"                                "386,SM"                    )
(list "CMP"              "reg_rax,sbytedword"                         "[mi: o64 83 /7 ib,s]"                           "X64,SM,ND"                 )
(list "CMP"              "reg_rax,imm"                                "[-i: o64 3d id,s]"                              "X64,SM"                    )
(list "CMP"              "rm8,imm"                                    "[mi: 80 /7 ib]"                                 "8086,SM"                   )
(list "CMP"              "rm16,sbyteword"                             "[mi: o16 83 /7 ib,s]"                           "8086,SM,ND"                )
(list "CMP"              "rm16,imm"                                   "[mi: o16 81 /7 iw]"                             "8086,SM"                   )
(list "CMP"              "rm32,sbytedword"                            "[mi: o32 83 /7 ib,s]"                           "386,SM,ND"                 )
(list "CMP"              "rm32,imm"                                   "[mi: o32 81 /7 id]"                             "386,SM"                    )
(list "CMP"              "rm64,sbytedword"                            "[mi: o64 83 /7 ib,s]"                           "X64,SM,ND"                 )
(list "CMP"              "rm64,imm"                                   "[mi: o64 81 /7 id,s]"                           "X64,SM"                    )
(list "CMP"              "mem,imm8"                                   "[mi: 80 /7 ib]"                                 "8086,SM"                   )
(list "CMP"              "mem,sbyteword16"                            "[mi: o16 83 /7 ib,s]"                           "8086,SM,ND"                )
(list "CMP"              "mem,imm16"                                  "[mi: o16 81 /7 iw]"                             "8086,SM"                   )
(list "CMP"              "mem,sbytedword32"                           "[mi: o32 83 /7 ib,s]"                           "386,SM,ND"                 )
(list "CMP"              "mem,imm32"                                  "[mi: o32 81 /7 id]"                             "386,SM"                    )
(list "CMP"              "rm8,imm"                                    "[mi: 82 /7 ib]"                                 "8086,SM,ND,NOLONG"         )
(list "CMPSB"            "void"                                       "[ repe a6]"                                     "8086"                      )
(list "CMPSD"            "void"                                       "[ repe o32 a7]"                                 "386"                       )
(list "CMPSQ"            "void"                                       "[ repe o64 a7]"                                 "X64"                       )
(list "CMPSW"            "void"                                       "[ repe o16 a7]"                                 "8086"                      )
(list "CMPXCHG"          "mem,reg8"                                   "[mr: hle 0f b0 /r]"                             "PENT,SM,LOCK"              )
(list "CMPXCHG"          "reg8,reg8"                                  "[mr: 0f b0 /r]"                                 "PENT"                      )
(list "CMPXCHG"          "mem,reg16"                                  "[mr: hle o16 0f b1 /r]"                         "PENT,SM,LOCK"              )
(list "CMPXCHG"          "reg16,reg16"                                "[mr: o16 0f b1 /r]"                             "PENT"                      )
(list "CMPXCHG"          "mem,reg32"                                  "[mr: hle o32 0f b1 /r]"                         "PENT,SM,LOCK"              )
(list "CMPXCHG"          "reg32,reg32"                                "[mr: o32 0f b1 /r]"                             "PENT"                      )
(list "CMPXCHG"          "mem,reg64"                                  "[mr: hle o64 0f b1 /r]"                         "X64,SM,LOCK"               )
(list "CMPXCHG"          "reg64,reg64"                                "[mr: o64 0f b1 /r]"                             "X64"                       )
(list "CMPXCHG486"       "mem,reg8"                                   "[mr: 0f a6 /r]"                                 "486,SM,UNDOC,ND,LOCK"      )
(list "CMPXCHG486"       "reg8,reg8"                                  "[mr: 0f a6 /r]"                                 "486,UNDOC,ND"              )
(list "CMPXCHG486"       "mem,reg16"                                  "[mr: o16 0f a7 /r]"                             "486,SM,UNDOC,ND,LOCK"      )
(list "CMPXCHG486"       "reg16,reg16"                                "[mr: o16 0f a7 /r]"                             "486,UNDOC,ND"              )
(list "CMPXCHG486"       "mem,reg32"                                  "[mr: o32 0f a7 /r]"                             "486,SM,UNDOC,ND,LOCK"      )
(list "CMPXCHG486"       "reg32,reg32"                                "[mr: o32 0f a7 /r]"                             "486,UNDOC,ND"              )
(list "CMPXCHG8B"        "mem"                                        "[m: hle norexw 0f c7 /1]"                       "PENT,LOCK"                 )
(list "CMPXCHG16B"       "mem"                                        "[m: o64 0f c7 /1]"                              "X64,LOCK"                  )
(list "CPUID"            "void"                                       "[ 0f a2]"                                       "PENT"                      )
(list "CPU_READ"         "void"                                       "[ 0f 3d]"                                       "PENT,CYRIX"                )
(list "CPU_WRITE"        "void"                                       "[ 0f 3c]"                                       "PENT,CYRIX"                )
(list "CQO"              "void"                                       "[ o64 99]"                                      "X64"                       )
(list "CWD"              "void"                                       "[ o16 99]"                                      "8086"                      )
(list "CWDE"             "void"                                       "[ o32 98]"                                      "386"                       )
(list "DAA"              "void"                                       "[ 27]"                                          "8086,NOLONG"               )
(list "DAS"              "void"                                       "[ 2f]"                                          "8086,NOLONG"               )
(list "DEC"              "reg16"                                      "[r: o16 48+r]"                                  "8086,NOLONG"               )
(list "DEC"              "reg32"                                      "[r: o32 48+r]"                                  "386,NOLONG"                )
(list "DEC"              "rm8"                                        "[m: hle fe /1]"                                 "8086,LOCK"                 )
(list "DEC"              "rm16"                                       "[m: hle o16 ff /1]"                             "8086,LOCK"                 )
(list "DEC"              "rm32"                                       "[m: hle o32 ff /1]"                             "386,LOCK"                  )
(list "DEC"              "rm64"                                       "[m: hle o64 ff /1]"                             "X64,LOCK"                  )
(list "DIV"              "rm8"                                        "[m: f6 /6]"                                     "8086"                      )
(list "DIV"              "rm16"                                       "[m: o16 f7 /6]"                                 "8086"                      )
(list "DIV"              "rm32"                                       "[m: o32 f7 /6]"                                 "386"                       )
(list "DIV"              "rm64"                                       "[m: o64 f7 /6]"                                 "X64"                       )
(list "DMINT"            "void"                                       "[ 0f 39]"                                       "P6,CYRIX"                  )
(list "EMMS"             "void"                                       "[ 0f 77]"                                       "PENT,MMX"                  )
(list "ENTER"            "imm,imm"                                    "[ij: c8 iw ib,u]"                               "186"                       )
(list "EQU"              "imm"                                        "ignore"                                         "8086"                      )
(list "EQU"              "imm:imm"                                    "ignore"                                         "8086"                      )
(list "F2XM1"            "void"                                       "[ d9 f0]"                                       "8086,FPU"                  )
(list "FABS"             "void"                                       "[ d9 e1]"                                       "8086,FPU"                  )
(list "FADD"             "mem32"                                      "[m: d8 /0]"                                     "8086,FPU"                  )
(list "FADD"             "mem64"                                      "[m: dc /0]"                                     "8086,FPU"                  )
(list "FADD"             "fpureg|to"                                  "[r: dc c0+r]"                                   "8086,FPU"                  )
(list "FADD"             "fpureg"                                     "[r: d8 c0+r]"                                   "8086,FPU"                  )
(list "FADD"             "fpureg,fpu0"                                "[r-: dc c0+r]"                                  "8086,FPU"                  )
(list "FADD"             "fpu0,fpureg"                                "[-r: d8 c0+r]"                                  "8086,FPU"                  )
(list "FADD"             "void"                                       "[ de c1]"                                       "8086,FPU,ND"               )
(list "FADDP"            "fpureg"                                     "[r: de c0+r]"                                   "8086,FPU"                  )
(list "FADDP"            "fpureg,fpu0"                                "[r-: de c0+r]"                                  "8086,FPU"                  )
(list "FADDP"            "void"                                       "[ de c1]"                                       "8086,FPU,ND"               )
(list "FBLD"             "mem80"                                      "[m: df /4]"                                     "8086,FPU"                  )
(list "FBLD"             "mem"                                        "[m: df /4]"                                     "8086,FPU"                  )
(list "FBSTP"            "mem80"                                      "[m: df /6]"                                     "8086,FPU"                  )
(list "FBSTP"            "mem"                                        "[m: df /6]"                                     "8086,FPU"                  )
(list "FCHS"             "void"                                       "[ d9 e0]"                                       "8086,FPU"                  )
(list "FCLEX"            "void"                                       "[ wait db e2]"                                  "8086,FPU"                  )
(list "FCMOVB"           "fpureg"                                     "[r: da c0+r]"                                   "P6,FPU"                    )
(list "FCMOVB"           "fpu0,fpureg"                                "[-r: da c0+r]"                                  "P6,FPU"                    )
(list "FCMOVB"           "void"                                       "[ da c1]"                                       "P6,FPU,ND"                 )
(list "FCMOVBE"          "fpureg"                                     "[r: da d0+r]"                                   "P6,FPU"                    )
(list "FCMOVBE"          "fpu0,fpureg"                                "[-r: da d0+r]"                                  "P6,FPU"                    )
(list "FCMOVBE"          "void"                                       "[ da d1]"                                       "P6,FPU,ND"                 )
(list "FCMOVE"           "fpureg"                                     "[r: da c8+r]"                                   "P6,FPU"                    )
(list "FCMOVE"           "fpu0,fpureg"                                "[-r: da c8+r]"                                  "P6,FPU"                    )
(list "FCMOVE"           "void"                                       "[ da c9]"                                       "P6,FPU,ND"                 )
(list "FCMOVNB"          "fpureg"                                     "[r: db c0+r]"                                   "P6,FPU"                    )
(list "FCMOVNB"          "fpu0,fpureg"                                "[-r: db c0+r]"                                  "P6,FPU"                    )
(list "FCMOVNB"          "void"                                       "[ db c1]"                                       "P6,FPU,ND"                 )
(list "FCMOVNBE"         "fpureg"                                     "[r: db d0+r]"                                   "P6,FPU"                    )
(list "FCMOVNBE"         "fpu0,fpureg"                                "[-r: db d0+r]"                                  "P6,FPU"                    )
(list "FCMOVNBE"         "void"                                       "[ db d1]"                                       "P6,FPU,ND"                 )
(list "FCMOVNE"          "fpureg"                                     "[r: db c8+r]"                                   "P6,FPU"                    )
(list "FCMOVNE"          "fpu0,fpureg"                                "[-r: db c8+r]"                                  "P6,FPU"                    )
(list "FCMOVNE"          "void"                                       "[ db c9]"                                       "P6,FPU,ND"                 )
(list "FCMOVNU"          "fpureg"                                     "[r: db d8+r]"                                   "P6,FPU"                    )
(list "FCMOVNU"          "fpu0,fpureg"                                "[-r: db d8+r]"                                  "P6,FPU"                    )
(list "FCMOVNU"          "void"                                       "[ db d9]"                                       "P6,FPU,ND"                 )
(list "FCMOVU"           "fpureg"                                     "[r: da d8+r]"                                   "P6,FPU"                    )
(list "FCMOVU"           "fpu0,fpureg"                                "[-r: da d8+r]"                                  "P6,FPU"                    )
(list "FCMOVU"           "void"                                       "[ da d9]"                                       "P6,FPU,ND"                 )
(list "FCOM"             "mem32"                                      "[m: d8 /2]"                                     "8086,FPU"                  )
(list "FCOM"             "mem64"                                      "[m: dc /2]"                                     "8086,FPU"                  )
(list "FCOM"             "fpureg"                                     "[r: d8 d0+r]"                                   "8086,FPU"                  )
(list "FCOM"             "fpu0,fpureg"                                "[-r: d8 d0+r]"                                  "8086,FPU"                  )
(list "FCOM"             "void"                                       "[ d8 d1]"                                       "8086,FPU,ND"               )
(list "FCOMI"            "fpureg"                                     "[r: db f0+r]"                                   "P6,FPU"                    )
(list "FCOMI"            "fpu0,fpureg"                                "[-r: db f0+r]"                                  "P6,FPU"                    )
(list "FCOMI"            "void"                                       "[ db f1]"                                       "P6,FPU,ND"                 )
(list "FCOMIP"           "fpureg"                                     "[r: df f0+r]"                                   "P6,FPU"                    )
(list "FCOMIP"           "fpu0,fpureg"                                "[-r: df f0+r]"                                  "P6,FPU"                    )
(list "FCOMIP"           "void"                                       "[ df f1]"                                       "P6,FPU,ND"                 )
(list "FCOMP"            "mem32"                                      "[m: d8 /3]"                                     "8086,FPU"                  )
(list "FCOMP"            "mem64"                                      "[m: dc /3]"                                     "8086,FPU"                  )
(list "FCOMP"            "fpureg"                                     "[r: d8 d8+r]"                                   "8086,FPU"                  )
(list "FCOMP"            "fpu0,fpureg"                                "[-r: d8 d8+r]"                                  "8086,FPU"                  )
(list "FCOMP"            "void"                                       "[ d8 d9]"                                       "8086,FPU,ND"               )
(list "FCOMPP"           "void"                                       "[ de d9]"                                       "8086,FPU"                  )
(list "FCOS"             "void"                                       "[ d9 ff]"                                       "386,FPU"                   )
(list "FDECSTP"          "void"                                       "[ d9 f6]"                                       "8086,FPU"                  )
(list "FDISI"            "void"                                       "[ wait db e1]"                                  "8086,FPU"                  )
(list "FDIV"             "mem32"                                      "[m: d8 /6]"                                     "8086,FPU"                  )
(list "FDIV"             "mem64"                                      "[m: dc /6]"                                     "8086,FPU"                  )
(list "FDIV"             "fpureg|to"                                  "[r: dc f8+r]"                                   "8086,FPU"                  )
(list "FDIV"             "fpureg"                                     "[r: d8 f0+r]"                                   "8086,FPU"                  )
(list "FDIV"             "fpureg,fpu0"                                "[r-: dc f8+r]"                                  "8086,FPU"                  )
(list "FDIV"             "fpu0,fpureg"                                "[-r: d8 f0+r]"                                  "8086,FPU"                  )
(list "FDIV"             "void"                                       "[ de f9]"                                       "8086,FPU,ND"               )
(list "FDIVP"            "fpureg"                                     "[r: de f8+r]"                                   "8086,FPU"                  )
(list "FDIVP"            "fpureg,fpu0"                                "[r-: de f8+r]"                                  "8086,FPU"                  )
(list "FDIVP"            "void"                                       "[ de f9]"                                       "8086,FPU,ND"               )
(list "FDIVR"            "mem32"                                      "[m: d8 /7]"                                     "8086,FPU"                  )
(list "FDIVR"            "mem64"                                      "[m: dc /7]"                                     "8086,FPU"                  )
(list "FDIVR"            "fpureg|to"                                  "[r: dc f0+r]"                                   "8086,FPU"                  )
(list "FDIVR"            "fpureg,fpu0"                                "[r-: dc f0+r]"                                  "8086,FPU"                  )
(list "FDIVR"            "fpureg"                                     "[r: d8 f8+r]"                                   "8086,FPU"                  )
(list "FDIVR"            "fpu0,fpureg"                                "[-r: d8 f8+r]"                                  "8086,FPU"                  )
(list "FDIVR"            "void"                                       "[ de f1]"                                       "8086,FPU,ND"               )
(list "FDIVRP"           "fpureg"                                     "[r: de f0+r]"                                   "8086,FPU"                  )
(list "FDIVRP"           "fpureg,fpu0"                                "[r-: de f0+r]"                                  "8086,FPU"                  )
(list "FDIVRP"           "void"                                       "[ de f1]"                                       "8086,FPU,ND"               )
(list "FEMMS"            "void"                                       "[ 0f 0e]"                                       "PENT,3DNOW"                )
(list "FENI"             "void"                                       "[ wait db e0]"                                  "8086,FPU"                  )
(list "FFREE"            "fpureg"                                     "[r: dd c0+r]"                                   "8086,FPU"                  )
(list "FFREE"            "void"                                       "[ dd c1]"                                       "8086,FPU"                  )
(list "FFREEP"           "fpureg"                                     "[r: df c0+r]"                                   "286,FPU,UNDOC"             )
(list "FFREEP"           "void"                                       "[ df c1]"                                       "286,FPU,UNDOC"             )
(list "FIADD"            "mem32"                                      "[m: da /0]"                                     "8086,FPU"                  )
(list "FIADD"            "mem16"                                      "[m: de /0]"                                     "8086,FPU"                  )
(list "FICOM"            "mem32"                                      "[m: da /2]"                                     "8086,FPU"                  )
(list "FICOM"            "mem16"                                      "[m: de /2]"                                     "8086,FPU"                  )
(list "FICOMP"           "mem32"                                      "[m: da /3]"                                     "8086,FPU"                  )
(list "FICOMP"           "mem16"                                      "[m: de /3]"                                     "8086,FPU"                  )
(list "FIDIV"            "mem32"                                      "[m: da /6]"                                     "8086,FPU"                  )
(list "FIDIV"            "mem16"                                      "[m: de /6]"                                     "8086,FPU"                  )
(list "FIDIVR"           "mem32"                                      "[m: da /7]"                                     "8086,FPU"                  )
(list "FIDIVR"           "mem16"                                      "[m: de /7]"                                     "8086,FPU"                  )
(list "FILD"             "mem32"                                      "[m: db /0]"                                     "8086,FPU"                  )
(list "FILD"             "mem16"                                      "[m: df /0]"                                     "8086,FPU"                  )
(list "FILD"             "mem64"                                      "[m: df /5]"                                     "8086,FPU"                  )
(list "FIMUL"            "mem32"                                      "[m: da /1]"                                     "8086,FPU"                  )
(list "FIMUL"            "mem16"                                      "[m: de /1]"                                     "8086,FPU"                  )
(list "FINCSTP"          "void"                                       "[ d9 f7]"                                       "8086,FPU"                  )
(list "FINIT"            "void"                                       "[ wait db e3]"                                  "8086,FPU"                  )
(list "FIST"             "mem32"                                      "[m: db /2]"                                     "8086,FPU"                  )
(list "FIST"             "mem16"                                      "[m: df /2]"                                     "8086,FPU"                  )
(list "FISTP"            "mem32"                                      "[m: db /3]"                                     "8086,FPU"                  )
(list "FISTP"            "mem16"                                      "[m: df /3]"                                     "8086,FPU"                  )
(list "FISTP"            "mem64"                                      "[m: df /7]"                                     "8086,FPU"                  )
(list "FISTTP"           "mem16"                                      "[m: df /1]"                                     "PRESCOTT,FPU"              )
(list "FISTTP"           "mem32"                                      "[m: db /1]"                                     "PRESCOTT,FPU"              )
(list "FISTTP"           "mem64"                                      "[m: dd /1]"                                     "PRESCOTT,FPU"              )
(list "FISUB"            "mem32"                                      "[m: da /4]"                                     "8086,FPU"                  )
(list "FISUB"            "mem16"                                      "[m: de /4]"                                     "8086,FPU"                  )
(list "FISUBR"           "mem32"                                      "[m: da /5]"                                     "8086,FPU"                  )
(list "FISUBR"           "mem16"                                      "[m: de /5]"                                     "8086,FPU"                  )
(list "FLD"              "mem32"                                      "[m: d9 /0]"                                     "8086,FPU"                  )
(list "FLD"              "mem64"                                      "[m: dd /0]"                                     "8086,FPU"                  )
(list "FLD"              "mem80"                                      "[m: db /5]"                                     "8086,FPU"                  )
(list "FLD"              "fpureg"                                     "[r: d9 c0+r]"                                   "8086,FPU"                  )
(list "FLD"              "void"                                       "[ d9 c1]"                                       "8086,FPU,ND"               )
(list "FLD1"             "void"                                       "[ d9 e8]"                                       "8086,FPU"                  )
(list "FLDCW"            "mem"                                        "[m: d9 /5]"                                     "8086,FPU,SW"               )
(list "FLDENV"           "mem"                                        "[m: d9 /4]"                                     "8086,FPU"                  )
(list "FLDL2E"           "void"                                       "[ d9 ea]"                                       "8086,FPU"                  )
(list "FLDL2T"           "void"                                       "[ d9 e9]"                                       "8086,FPU"                  )
(list "FLDLG2"           "void"                                       "[ d9 ec]"                                       "8086,FPU"                  )
(list "FLDLN2"           "void"                                       "[ d9 ed]"                                       "8086,FPU"                  )
(list "FLDPI"            "void"                                       "[ d9 eb]"                                       "8086,FPU"                  )
(list "FLDZ"             "void"                                       "[ d9 ee]"                                       "8086,FPU"                  )
(list "FMUL"             "mem32"                                      "[m: d8 /1]"                                     "8086,FPU"                  )
(list "FMUL"             "mem64"                                      "[m: dc /1]"                                     "8086,FPU"                  )
(list "FMUL"             "fpureg|to"                                  "[r: dc c8+r]"                                   "8086,FPU"                  )
(list "FMUL"             "fpureg,fpu0"                                "[r-: dc c8+r]"                                  "8086,FPU"                  )
(list "FMUL"             "fpureg"                                     "[r: d8 c8+r]"                                   "8086,FPU"                  )
(list "FMUL"             "fpu0,fpureg"                                "[-r: d8 c8+r]"                                  "8086,FPU"                  )
(list "FMUL"             "void"                                       "[ de c9]"                                       "8086,FPU,ND"               )
(list "FMULP"            "fpureg"                                     "[r: de c8+r]"                                   "8086,FPU"                  )
(list "FMULP"            "fpureg,fpu0"                                "[r-: de c8+r]"                                  "8086,FPU"                  )
(list "FMULP"            "void"                                       "[ de c9]"                                       "8086,FPU,ND"               )
(list "FNCLEX"           "void"                                       "[ db e2]"                                       "8086,FPU"                  )
(list "FNDISI"           "void"                                       "[ db e1]"                                       "8086,FPU"                  )
(list "FNENI"            "void"                                       "[ db e0]"                                       "8086,FPU"                  )
(list "FNINIT"           "void"                                       "[ db e3]"                                       "8086,FPU"                  )
(list "FNOP"             "void"                                       "[ d9 d0]"                                       "8086,FPU"                  )
(list "FNSAVE"           "mem"                                        "[m: dd /6]"                                     "8086,FPU"                  )
(list "FNSTCW"           "mem"                                        "[m: d9 /7]"                                     "8086,FPU,SW"               )
(list "FNSTENV"          "mem"                                        "[m: d9 /6]"                                     "8086,FPU"                  )
(list "FNSTSW"           "mem"                                        "[m: dd /7]"                                     "8086,FPU,SW"               )
(list "FNSTSW"           "reg_ax"                                     "[-: df e0]"                                     "286,FPU"                   )
(list "FPATAN"           "void"                                       "[ d9 f3]"                                       "8086,FPU"                  )
(list "FPREM"            "void"                                       "[ d9 f8]"                                       "8086,FPU"                  )
(list "FPREM1"           "void"                                       "[ d9 f5]"                                       "386,FPU"                   )
(list "FPTAN"            "void"                                       "[ d9 f2]"                                       "8086,FPU"                  )
(list "FRNDINT"          "void"                                       "[ d9 fc]"                                       "8086,FPU"                  )
(list "FRSTOR"           "mem"                                        "[m: dd /4]"                                     "8086,FPU"                  )
(list "FSAVE"            "mem"                                        "[m: wait dd /6]"                                "8086,FPU"                  )
(list "FSCALE"           "void"                                       "[ d9 fd]"                                       "8086,FPU"                  )
(list "FSETPM"           "void"                                       "[ db e4]"                                       "286,FPU"                   )
(list "FSIN"             "void"                                       "[ d9 fe]"                                       "386,FPU"                   )
(list "FSINCOS"          "void"                                       "[ d9 fb]"                                       "386,FPU"                   )
(list "FSQRT"            "void"                                       "[ d9 fa]"                                       "8086,FPU"                  )
(list "FST"              "mem32"                                      "[m: d9 /2]"                                     "8086,FPU"                  )
(list "FST"              "mem64"                                      "[m: dd /2]"                                     "8086,FPU"                  )
(list "FST"              "fpureg"                                     "[r: dd d0+r]"                                   "8086,FPU"                  )
(list "FST"              "void"                                       "[ dd d1]"                                       "8086,FPU,ND"               )
(list "FSTCW"            "mem"                                        "[m: wait d9 /7]"                                "8086,FPU,SW"               )
(list "FSTENV"           "mem"                                        "[m: wait d9 /6]"                                "8086,FPU"                  )
(list "FSTP"             "mem32"                                      "[m: d9 /3]"                                     "8086,FPU"                  )
(list "FSTP"             "mem64"                                      "[m: dd /3]"                                     "8086,FPU"                  )
(list "FSTP"             "mem80"                                      "[m: db /7]"                                     "8086,FPU"                  )
(list "FSTP"             "fpureg"                                     "[r: dd d8+r]"                                   "8086,FPU"                  )
(list "FSTP"             "void"                                       "[ dd d9]"                                       "8086,FPU,ND"               )
(list "FSTSW"            "mem"                                        "[m: wait dd /7]"                                "8086,FPU,SW"               )
(list "FSTSW"            "reg_ax"                                     "[-: wait df e0]"                                "286,FPU"                   )
(list "FSUB"             "mem32"                                      "[m: d8 /4]"                                     "8086,FPU"                  )
(list "FSUB"             "mem64"                                      "[m: dc /4]"                                     "8086,FPU"                  )
(list "FSUB"             "fpureg|to"                                  "[r: dc e8+r]"                                   "8086,FPU"                  )
(list "FSUB"             "fpureg,fpu0"                                "[r-: dc e8+r]"                                  "8086,FPU"                  )
(list "FSUB"             "fpureg"                                     "[r: d8 e0+r]"                                   "8086,FPU"                  )
(list "FSUB"             "fpu0,fpureg"                                "[-r: d8 e0+r]"                                  "8086,FPU"                  )
(list "FSUB"             "void"                                       "[ de e9]"                                       "8086,FPU,ND"               )
(list "FSUBP"            "fpureg"                                     "[r: de e8+r]"                                   "8086,FPU"                  )
(list "FSUBP"            "fpureg,fpu0"                                "[r-: de e8+r]"                                  "8086,FPU"                  )
(list "FSUBP"            "void"                                       "[ de e9]"                                       "8086,FPU,ND"               )
(list "FSUBR"            "mem32"                                      "[m: d8 /5]"                                     "8086,FPU"                  )
(list "FSUBR"            "mem64"                                      "[m: dc /5]"                                     "8086,FPU"                  )
(list "FSUBR"            "fpureg|to"                                  "[r: dc e0+r]"                                   "8086,FPU"                  )
(list "FSUBR"            "fpureg,fpu0"                                "[r-: dc e0+r]"                                  "8086,FPU"                  )
(list "FSUBR"            "fpureg"                                     "[r: d8 e8+r]"                                   "8086,FPU"                  )
(list "FSUBR"            "fpu0,fpureg"                                "[-r: d8 e8+r]"                                  "8086,FPU"                  )
(list "FSUBR"            "void"                                       "[ de e1]"                                       "8086,FPU,ND"               )
(list "FSUBRP"           "fpureg"                                     "[r: de e0+r]"                                   "8086,FPU"                  )
(list "FSUBRP"           "fpureg,fpu0"                                "[r-: de e0+r]"                                  "8086,FPU"                  )
(list "FSUBRP"           "void"                                       "[ de e1]"                                       "8086,FPU,ND"               )
(list "FTST"             "void"                                       "[ d9 e4]"                                       "8086,FPU"                  )
(list "FUCOM"            "fpureg"                                     "[r: dd e0+r]"                                   "386,FPU"                   )
(list "FUCOM"            "fpu0,fpureg"                                "[-r: dd e0+r]"                                  "386,FPU"                   )
(list "FUCOM"            "void"                                       "[ dd e1]"                                       "386,FPU,ND"                )
(list "FUCOMI"           "fpureg"                                     "[r: db e8+r]"                                   "P6,FPU"                    )
(list "FUCOMI"           "fpu0,fpureg"                                "[-r: db e8+r]"                                  "P6,FPU"                    )
(list "FUCOMI"           "void"                                       "[ db e9]"                                       "P6,FPU,ND"                 )
(list "FUCOMIP"          "fpureg"                                     "[r: df e8+r]"                                   "P6,FPU"                    )
(list "FUCOMIP"          "fpu0,fpureg"                                "[-r: df e8+r]"                                  "P6,FPU"                    )
(list "FUCOMIP"          "void"                                       "[ df e9]"                                       "P6,FPU,ND"                 )
(list "FUCOMP"           "fpureg"                                     "[r: dd e8+r]"                                   "386,FPU"                   )
(list "FUCOMP"           "fpu0,fpureg"                                "[-r: dd e8+r]"                                  "386,FPU"                   )
(list "FUCOMP"           "void"                                       "[ dd e9]"                                       "386,FPU,ND"                )
(list "FUCOMPP"          "void"                                       "[ da e9]"                                       "386,FPU"                   )
(list "FXAM"             "void"                                       "[ d9 e5]"                                       "8086,FPU"                  )
(list "FXCH"             "fpureg"                                     "[r: d9 c8+r]"                                   "8086,FPU"                  )
(list "FXCH"             "fpureg,fpu0"                                "[r-: d9 c8+r]"                                  "8086,FPU"                  )
(list "FXCH"             "fpu0,fpureg"                                "[-r: d9 c8+r]"                                  "8086,FPU"                  )
(list "FXCH"             "void"                                       "[ d9 c9]"                                       "8086,FPU,ND"               )
(list "FXTRACT"          "void"                                       "[ d9 f4]"                                       "8086,FPU"                  )
(list "FYL2X"            "void"                                       "[ d9 f1]"                                       "8086,FPU"                  )
(list "FYL2XP1"          "void"                                       "[ d9 f9]"                                       "8086,FPU"                  )
(list "HLT"              "void"                                       "[ f4]"                                          "8086,PRIV"                 )
(list "IBTS"             "mem,reg16"                                  "[mr: o16 0f a7 /r]"                             "386,SW,UNDOC,ND"           )
(list "IBTS"             "reg16,reg16"                                "[mr: o16 0f a7 /r]"                             "386,UNDOC,ND"              )
(list "IBTS"             "mem,reg32"                                  "[mr: o32 0f a7 /r]"                             "386,SD,UNDOC,ND"           )
(list "IBTS"             "reg32,reg32"                                "[mr: o32 0f a7 /r]"                             "386,UNDOC,ND"              )
(list "ICEBP"            "void"                                       "[ f1]"                                          "386,ND"                    )
(list "IDIV"             "rm8"                                        "[m: f6 /7]"                                     "8086"                      )
(list "IDIV"             "rm16"                                       "[m: o16 f7 /7]"                                 "8086"                      )
(list "IDIV"             "rm32"                                       "[m: o32 f7 /7]"                                 "386"                       )
(list "IDIV"             "rm64"                                       "[m: o64 f7 /7]"                                 "X64"                       )
(list "IMUL"             "rm8"                                        "[m: f6 /5]"                                     "8086"                      )
(list "IMUL"             "rm16"                                       "[m: o16 f7 /5]"                                 "8086"                      )
(list "IMUL"             "rm32"                                       "[m: o32 f7 /5]"                                 "386"                       )
(list "IMUL"             "rm64"                                       "[m: o64 f7 /5]"                                 "X64"                       )
(list "IMUL"             "reg16,mem"                                  "[rm: o16 0f af /r]"                             "386,SM"                    )
(list "IMUL"             "reg16,reg16"                                "[rm: o16 0f af /r]"                             "386"                       )
(list "IMUL"             "reg32,mem"                                  "[rm: o32 0f af /r]"                             "386,SM"                    )
(list "IMUL"             "reg32,reg32"                                "[rm: o32 0f af /r]"                             "386"                       )
(list "IMUL"             "reg64,mem"                                  "[rm: o64 0f af /r]"                             "X64,SM"                    )
(list "IMUL"             "reg64,reg64"                                "[rm: o64 0f af /r]"                             "X64"                       )
(list "IMUL"             "reg16,mem,imm8"                             "[rmi: o16 6b /r ib,s]"                          "186,SM"                    )
(list "IMUL"             "reg16,mem,sbyteword"                        "[rmi: o16 6b /r ib,s]"                          "186,SM,ND"                 )
(list "IMUL"             "reg16,mem,imm16"                            "[rmi: o16 69 /r iw]"                            "186,SM"                    )
(list "IMUL"             "reg16,mem,imm"                              "[rmi: o16 69 /r iw]"                            "186,SM,ND"                 )
(list "IMUL"             "reg16,reg16,imm8"                           "[rmi: o16 6b /r ib,s]"                          "186"                       )
(list "IMUL"             "reg16,reg16,sbyteword"                      "[rmi: o16 6b /r ib,s]"                          "186,SM,ND"                 )
(list "IMUL"             "reg16,reg16,imm16"                          "[rmi: o16 69 /r iw]"                            "186"                       )
(list "IMUL"             "reg16,reg16,imm"                            "[rmi: o16 69 /r iw]"                            "186,SM,ND"                 )
(list "IMUL"             "reg32,mem,imm8"                             "[rmi: o32 6b /r ib,s]"                          "386,SM"                    )
(list "IMUL"             "reg32,mem,sbytedword"                       "[rmi: o32 6b /r ib,s]"                          "386,SM,ND"                 )
(list "IMUL"             "reg32,mem,imm32"                            "[rmi: o32 69 /r id]"                            "386,SM"                    )
(list "IMUL"             "reg32,mem,imm"                              "[rmi: o32 69 /r id]"                            "386,SM,ND"                 )
(list "IMUL"             "reg32,reg32,imm8"                           "[rmi: o32 6b /r ib,s]"                          "386"                       )
(list "IMUL"             "reg32,reg32,sbytedword"                     "[rmi: o32 6b /r ib,s]"                          "386,SM,ND"                 )
(list "IMUL"             "reg32,reg32,imm32"                          "[rmi: o32 69 /r id]"                            "386"                       )
(list "IMUL"             "reg32,reg32,imm"                            "[rmi: o32 69 /r id]"                            "386,SM,ND"                 )
(list "IMUL"             "reg64,mem,imm8"                             "[rmi: o64 6b /r ib,s]"                          "X64,SM"                    )
(list "IMUL"             "reg64,mem,sbytedword"                       "[rmi: o64 6b /r ib,s]"                          "X64,SM,ND"                 )
(list "IMUL"             "reg64,mem,imm32"                            "[rmi: o64 69 /r id]"                            "X64,SM"                    )
(list "IMUL"             "reg64,mem,imm"                              "[rmi: o64 69 /r id,s]"                          "X64,SM,ND"                 )
(list "IMUL"             "reg64,reg64,imm8"                           "[rmi: o64 6b /r ib,s]"                          "X64"                       )
(list "IMUL"             "reg64,reg64,sbytedword"                     "[rmi: o64 6b /r ib,s]"                          "X64,SM,ND"                 )
(list "IMUL"             "reg64,reg64,imm32"                          "[rmi: o64 69 /r id]"                            "X64"                       )
(list "IMUL"             "reg64,reg64,imm"                            "[rmi: o64 69 /r id,s]"                          "X64,SM,ND"                 )
(list "IMUL"             "reg16,imm8"                                 "[r+mi: o16 6b /r ib,s]"                         "186"                       )
(list "IMUL"             "reg16,sbyteword"                            "[r+mi: o16 6b /r ib,s]"                         "186,SM,ND"                 )
(list "IMUL"             "reg16,imm16"                                "[r+mi: o16 69 /r iw]"                           "186"                       )
(list "IMUL"             "reg16,imm"                                  "[r+mi: o16 69 /r iw]"                           "186,SM,ND"                 )
(list "IMUL"             "reg32,imm8"                                 "[r+mi: o32 6b /r ib,s]"                         "386"                       )
(list "IMUL"             "reg32,sbytedword"                           "[r+mi: o32 6b /r ib,s]"                         "386,SM,ND"                 )
(list "IMUL"             "reg32,imm32"                                "[r+mi: o32 69 /r id]"                           "386"                       )
(list "IMUL"             "reg32,imm"                                  "[r+mi: o32 69 /r id]"                           "386,SM,ND"                 )
(list "IMUL"             "reg64,imm8"                                 "[r+mi: o64 6b /r ib,s]"                         "X64"                       )
(list "IMUL"             "reg64,sbytedword"                           "[r+mi: o64 6b /r ib,s]"                         "X64,SM,ND"                 )
(list "IMUL"             "reg64,imm32"                                "[r+mi: o64 69 /r id,s]"                         "X64"                       )
(list "IMUL"             "reg64,imm"                                  "[r+mi: o64 69 /r id,s]"                         "X64,SM,ND"                 )
(list "IN"               "reg_al,imm"                                 "[-i: e4 ib,u]"                                  "8086,SB"                   )
(list "IN"               "reg_ax,imm"                                 "[-i: o16 e5 ib,u]"                              "8086,SB"                   )
(list "IN"               "reg_eax,imm"                                "[-i: o32 e5 ib,u]"                              "386,SB"                    )
(list "IN"               "reg_al,reg_dx"                              "[--: ec]"                                       "8086"                      )
(list "IN"               "reg_ax,reg_dx"                              "[--: o16 ed]"                                   "8086"                      )
(list "IN"               "reg_eax,reg_dx"                             "[--: o32 ed]"                                   "386"                       )
(list "INC"              "reg16"                                      "[r: o16 40+r]"                                  "8086,NOLONG"               )
(list "INC"              "reg32"                                      "[r: o32 40+r]"                                  "386,NOLONG"                )
(list "INC"              "rm8"                                        "[m: hle fe /0]"                                 "8086,LOCK"                 )
(list "INC"              "rm16"                                       "[m: hle o16 ff /0]"                             "8086,LOCK"                 )
(list "INC"              "rm32"                                       "[m: hle o32 ff /0]"                             "386,LOCK"                  )
(list "INC"              "rm64"                                       "[m: hle o64 ff /0]"                             "X64,LOCK"                  )
(list "INCBIN"           "ignore"                                     "ignore"                                         "ignore"                    )
(list "INSB"             "void"                                       "[ 6c]"                                          "186"                       )
(list "INSD"             "void"                                       "[ o32 6d]"                                      "386"                       )
(list "INSW"             "void"                                       "[ o16 6d]"                                      "186"                       )
(list "INT"              "imm"                                        "[i: cd ib,u]"                                   "8086,SB"                   )
(list "INT01"            "void"                                       "[ f1]"                                          "386,ND"                    )
(list "INT1"             "void"                                       "[ f1]"                                          "386"                       )
(list "INT03"            "void"                                       "[ cc]"                                          "8086,ND"                   )
(list "INT3"             "void"                                       "[ cc]"                                          "8086"                      )
(list "INTO"             "void"                                       "[ ce]"                                          "8086,NOLONG"               )
(list "INVD"             "void"                                       "[ 0f 08]"                                       "486,PRIV"                  )
(list "INVPCID"          "reg32,mem128"                               "[rm: 66 0f 38 82 /r]"                           "FUTURE,INVPCID,PRIV,NOLONG")
(list "INVPCID"          "reg64,mem128"                               "[rm: 66 0f 38 82 /r]"                           "FUTURE,INVPCID,PRIV,LONG"  )
(list "INVLPG"           "mem"                                        "[m: 0f 01 /7]"                                  "486,PRIV"                  )
(list "INVLPGA"          "reg_ax,reg_ecx"                             "[--: a16 0f 01 df]"                             "X86_64,AMD,NOLONG"         )
(list "INVLPGA"          "reg_eax,reg_ecx"                            "[--: a32 0f 01 df]"                             "X86_64,AMD"                )
(list "INVLPGA"          "reg_rax,reg_ecx"                            "[--: o64nw a64 0f 01 df]"                       "X64,AMD"                   )
(list "INVLPGA"          "void"                                       "[ 0f 01 df]"                                    "X86_64,AMD"                )
(list "IRET"             "void"                                       "[ odf cf]"                                      "8086"                      )
(list "IRETD"            "void"                                       "[ o32 cf]"                                      "386"                       )
(list "IRETQ"            "void"                                       "[ o64 cf]"                                      "X64"                       )
(list "IRETW"            "void"                                       "[ o16 cf]"                                      "8086"                      )
(list "JCXZ"             "imm"                                        "[i: a16 e3 rel8]"                               "8086,NOLONG"               )
(list "JECXZ"            "imm"                                        "[i: a32 e3 rel8]"                               "386"                       )
(list "JRCXZ"            "imm"                                        "[i: a64 e3 rel8]"                               "X64"                       )
(list "JMP"              "imm|short"                                  "[i: eb rel8]"                                   "8086"                      )
(list "JMP"              "imm"                                        "[i: jmp8 eb rel8]"                              "8086,ND"                   )
(list "JMP"              "imm"                                        "[i: odf e9 rel]"                                "8086,BND"                  )
(list "JMP"              "imm|near"                                   "[i: odf e9 rel]"                                "8086,ND,BND"               )
(list "JMP"              "imm|far"                                    "[i: odf ea iwd seg]"                            "8086,ND,NOLONG"            )
(list "JMP"              "imm16"                                      "[i: o16 e9 rel]"                                "8086,NOLONG,BND"           )
(list "JMP"              "imm16|near"                                 "[i: o16 e9 rel]"                                "8086,ND,NOLONG,BND"        )
(list "JMP"              "imm16|far"                                  "[i: o16 ea iwd seg]"                            "8086,ND,NOLONG"            )
(list "JMP"              "imm32"                                      "[i: o32 e9 rel]"                                "386,NOLONG,BND"            )
(list "JMP"              "imm32|near"                                 "[i: o32 e9 rel]"                                "386,ND,NOLONG,BND"         )
(list "JMP"              "imm32|far"                                  "[i: o32 ea iwd seg]"                            "386,ND,NOLONG"             )
(list "JMP"              "imm64"                                      "[i: o64nw e9 rel]"                              "X64,BND"                   )
(list "JMP"              "imm64|near"                                 "[i: o64nw e9 rel]"                              "X64,ND,BND"                )
(list "JMP"              "imm:imm"                                    "[ji: odf ea iwd iw]"                            "8086,NOLONG"               )
(list "JMP"              "imm16:imm"                                  "[ji: o16 ea iw iw]"                             "8086,NOLONG"               )
(list "JMP"              "imm:imm16"                                  "[ji: o16 ea iw iw]"                             "8086,NOLONG"               )
(list "JMP"              "imm32:imm"                                  "[ji: o32 ea id iw]"                             "386,NOLONG"                )
(list "JMP"              "imm:imm32"                                  "[ji: o32 ea id iw]"                             "386,NOLONG"                )
(list "JMP"              "mem|far"                                    "[m: odf ff /5]"                                 "8086,NOLONG"               )
(list "JMP"              "mem|far"                                    "[m: o64 ff /5]"                                 "X64"                       )
(list "JMP"              "mem16|far"                                  "[m: o16 ff /5]"                                 "8086"                      )
(list "JMP"              "mem32|far"                                  "[m: o32 ff /5]"                                 "386"                       )
(list "JMP"              "mem64|far"                                  "[m: o64 ff /5]"                                 "X64"                       )
(list "JMP"              "mem|near"                                   "[m: odf ff /4]"                                 "8086,ND,BND"               )
(list "JMP"              "rm16|near"                                  "[m: o16 ff /4]"                                 "8086,NOLONG,ND,BND"        )
(list "JMP"              "rm32|near"                                  "[m: o32 ff /4]"                                 "386,NOLONG,ND,BND"         )
(list "JMP"              "rm64|near"                                  "[m: o64nw ff /4]"                               "X64,ND,BND"                )
(list "JMP"              "mem"                                        "[m: odf ff /4]"                                 "8086,BND"                  )
(list "JMP"              "rm16"                                       "[m: o16 ff /4]"                                 "8086,NOLONG,BND"           )
(list "JMP"              "rm32"                                       "[m: o32 ff /4]"                                 "386,NOLONG,BND"            )
(list "JMP"              "rm64"                                       "[m: o64nw ff /4]"                               "X64,BND"                   )
(list "JMPE"             "imm"                                        "[i: odf 0f b8 rel]"                             "IA64"                      )
(list "JMPE"             "imm16"                                      "[i: o16 0f b8 rel]"                             "IA64"                      )
(list "JMPE"             "imm32"                                      "[i: o32 0f b8 rel]"                             "IA64"                      )
(list "JMPE"             "rm16"                                       "[m: o16 0f 00 /6]"                              "IA64"                      )
(list "JMPE"             "rm32"                                       "[m: o32 0f 00 /6]"                              "IA64"                      )
(list "LAHF"             "void"                                       "[ 9f]"                                          "8086"                      )
(list "LAR"              "reg16,mem"                                  "[rm: o16 0f 02 /r]"                             "286,PROT,SW"               )
(list "LAR"              "reg16,reg16"                                "[rm: o16 0f 02 /r]"                             "286,PROT"                  )
(list "LAR"              "reg16,reg32"                                "[rm: o16 0f 02 /r]"                             "386,PROT"                  )
(list "LAR"              "reg16,reg64"                                "[rm: o16 o64nw 0f 02 /r]"                       "X64,PROT,ND"               )
(list "LAR"              "reg32,mem"                                  "[rm: o32 0f 02 /r]"                             "386,PROT,SW"               )
(list "LAR"              "reg32,reg16"                                "[rm: o32 0f 02 /r]"                             "386,PROT"                  )
(list "LAR"              "reg32,reg32"                                "[rm: o32 0f 02 /r]"                             "386,PROT"                  )
(list "LAR"              "reg32,reg64"                                "[rm: o32 o64nw 0f 02 /r]"                       "X64,PROT,ND"               )
(list "LAR"              "reg64,mem"                                  "[rm: o64 0f 02 /r]"                             "X64,PROT,SW"               )
(list "LAR"              "reg64,reg16"                                "[rm: o64 0f 02 /r]"                             "X64,PROT"                  )
(list "LAR"              "reg64,reg32"                                "[rm: o64 0f 02 /r]"                             "X64,PROT"                  )
(list "LAR"              "reg64,reg64"                                "[rm: o64 0f 02 /r]"                             "X64,PROT"                  )
(list "LDS"              "reg16,mem"                                  "[rm: o16 c5 /r]"                                "8086,NOLONG"               )
(list "LDS"              "reg32,mem"                                  "[rm: o32 c5 /r]"                                "386,NOLONG"                )
(list "LEA"              "reg16,mem"                                  "[rm: o16 8d /r]"                                "8086"                      )
(list "LEA"              "reg32,mem"                                  "[rm: o32 8d /r]"                                "386"                       )
(list "LEA"              "reg64,mem"                                  "[rm: o64 8d /r]"                                "X64"                       )
(list "LEAVE"            "void"                                       "[ c9]"                                          "186"                       )
(list "LES"              "reg16,mem"                                  "[rm: o16 c4 /r]"                                "8086,NOLONG"               )
(list "LES"              "reg32,mem"                                  "[rm: o32 c4 /r]"                                "386,NOLONG"                )
(list "LFENCE"           "void"                                       "[ np 0f ae e8]"                                 "X64,AMD"                   )
(list "LFS"              "reg16,mem"                                  "[rm: o16 0f b4 /r]"                             "386"                       )
(list "LFS"              "reg32,mem"                                  "[rm: o32 0f b4 /r]"                             "386"                       )
(list "LFS"              "reg64,mem"                                  "[rm: o64 0f b4 /r]"                             "X64"                       )
(list "LGDT"             "mem"                                        "[m: 0f 01 /2]"                                  "286,PRIV"                  )
(list "LGS"              "reg16,mem"                                  "[rm: o16 0f b5 /r]"                             "386"                       )
(list "LGS"              "reg32,mem"                                  "[rm: o32 0f b5 /r]"                             "386"                       )
(list "LGS"              "reg64,mem"                                  "[rm: o64 0f b5 /r]"                             "X64"                       )
(list "LIDT"             "mem"                                        "[m: 0f 01 /3]"                                  "286,PRIV"                  )
(list "LLDT"             "mem"                                        "[m: 0f 00 /2]"                                  "286,PROT,PRIV"             )
(list "LLDT"             "mem16"                                      "[m: 0f 00 /2]"                                  "286,PROT,PRIV"             )
(list "LLDT"             "reg16"                                      "[m: 0f 00 /2]"                                  "286,PROT,PRIV"             )
(list "LMSW"             "mem"                                        "[m: 0f 01 /6]"                                  "286,PRIV"                  )
(list "LMSW"             "mem16"                                      "[m: 0f 01 /6]"                                  "286,PRIV"                  )
(list "LMSW"             "reg16"                                      "[m: 0f 01 /6]"                                  "286,PRIV"                  )
(list "LOADALL"          "void"                                       "[ 0f 07]"                                       "386,UNDOC,ND"              )
(list "LOADALL286"       "void"                                       "[ 0f 05]"                                       "286,UNDOC,ND"              )
(list "LODSB"            "void"                                       "[ ac]"                                          "8086"                      )
(list "LODSD"            "void"                                       "[ o32 ad]"                                      "386"                       )
(list "LODSQ"            "void"                                       "[ o64 ad]"                                      "X64"                       )
(list "LODSW"            "void"                                       "[ o16 ad]"                                      "8086"                      )
(list "LOOP"             "imm"                                        "[i: adf e2 rel8]"                               "8086"                      )
(list "LOOP"             "imm,reg_cx"                                 "[i-: a16 e2 rel8]"                              "8086,NOLONG"               )
(list "LOOP"             "imm,reg_ecx"                                "[i-: a32 e2 rel8]"                              "386"                       )
(list "LOOP"             "imm,reg_rcx"                                "[i-: a64 e2 rel8]"                              "X64"                       )
(list "LOOPE"            "imm"                                        "[i: adf e1 rel8]"                               "8086"                      )
(list "LOOPE"            "imm,reg_cx"                                 "[i-: a16 e1 rel8]"                              "8086,NOLONG"               )
(list "LOOPE"            "imm,reg_ecx"                                "[i-: a32 e1 rel8]"                              "386"                       )
(list "LOOPE"            "imm,reg_rcx"                                "[i-: a64 e1 rel8]"                              "X64"                       )
(list "LOOPNE"           "imm"                                        "[i: adf e0 rel8]"                               "8086"                      )
(list "LOOPNE"           "imm,reg_cx"                                 "[i-: a16 e0 rel8]"                              "8086,NOLONG"               )
(list "LOOPNE"           "imm,reg_ecx"                                "[i-: a32 e0 rel8]"                              "386"                       )
(list "LOOPNE"           "imm,reg_rcx"                                "[i-: a64 e0 rel8]"                              "X64"                       )
(list "LOOPNZ"           "imm"                                        "[i: adf e0 rel8]"                               "8086"                      )
(list "LOOPNZ"           "imm,reg_cx"                                 "[i-: a16 e0 rel8]"                              "8086,NOLONG"               )
(list "LOOPNZ"           "imm,reg_ecx"                                "[i-: a32 e0 rel8]"                              "386"                       )
(list "LOOPNZ"           "imm,reg_rcx"                                "[i-: a64 e0 rel8]"                              "X64"                       )
(list "LOOPZ"            "imm"                                        "[i: adf e1 rel8]"                               "8086"                      )
(list "LOOPZ"            "imm,reg_cx"                                 "[i-: a16 e1 rel8]"                              "8086,NOLONG"               )
(list "LOOPZ"            "imm,reg_ecx"                                "[i-: a32 e1 rel8]"                              "386"                       )
(list "LOOPZ"            "imm,reg_rcx"                                "[i-: a64 e1 rel8]"                              "X64"                       )
(list "LSL"              "reg16,mem"                                  "[rm: o16 0f 03 /r]"                             "286,PROT,SW"               )
(list "LSL"              "reg16,reg16"                                "[rm: o16 0f 03 /r]"                             "286,PROT"                  )
(list "LSL"              "reg16,reg32"                                "[rm: o16 0f 03 /r]"                             "386,PROT"                  )
(list "LSL"              "reg16,reg64"                                "[rm: o16 o64nw 0f 03 /r]"                       "X64,PROT,ND"               )
(list "LSL"              "reg32,mem"                                  "[rm: o32 0f 03 /r]"                             "386,PROT,SW"               )
(list "LSL"              "reg32,reg16"                                "[rm: o32 0f 03 /r]"                             "386,PROT"                  )
(list "LSL"              "reg32,reg32"                                "[rm: o32 0f 03 /r]"                             "386,PROT"                  )
(list "LSL"              "reg32,reg64"                                "[rm: o32 o64nw 0f 03 /r]"                       "X64,PROT,ND"               )
(list "LSL"              "reg64,mem"                                  "[rm: o64 0f 03 /r]"                             "X64,PROT,SW"               )
(list "LSL"              "reg64,reg16"                                "[rm: o64 0f 03 /r]"                             "X64,PROT"                  )
(list "LSL"              "reg64,reg32"                                "[rm: o64 0f 03 /r]"                             "X64,PROT"                  )
(list "LSL"              "reg64,reg64"                                "[rm: o64 0f 03 /r]"                             "X64,PROT"                  )
(list "LSS"              "reg16,mem"                                  "[rm: o16 0f b2 /r]"                             "386"                       )
(list "LSS"              "reg32,mem"                                  "[rm: o32 0f b2 /r]"                             "386"                       )
(list "LSS"              "reg64,mem"                                  "[rm: o64 0f b2 /r]"                             "X64"                       )
(list "LTR"              "mem"                                        "[m: 0f 00 /3]"                                  "286,PROT,PRIV"             )
(list "LTR"              "mem16"                                      "[m: 0f 00 /3]"                                  "286,PROT,PRIV"             )
(list "LTR"              "reg16"                                      "[m: 0f 00 /3]"                                  "286,PROT,PRIV"             )
(list "MFENCE"           "void"                                       "[ np 0f ae f0]"                                 "X64,AMD"                   )
(list "MONITOR"          "void"                                       "[ 0f 01 c8]"                                    "PRESCOTT"                  )
(list "MONITOR"          "reg_eax,reg_ecx,reg_edx"                    "[---: 0f 01 c8]"                                "PRESCOTT,NOLONG,ND"        )
(list "MONITOR"          "reg_rax,reg_ecx,reg_edx"                    "[---: 0f 01 c8]"                                "X64,ND"                    )
(list "MOV"              "mem,reg_sreg"                               "[mr: 8c /r]"                                    "8086,SW"                   )
(list "MOV"              "reg16,reg_sreg"                             "[mr: o16 8c /r]"                                "8086"                      )
(list "MOV"              "reg32,reg_sreg"                             "[mr: o32 8c /r]"                                "386"                       )
(list "MOV"              "reg64,reg_sreg"                             "[mr: o64nw 8c /r]"                              "X64,OPT,ND"                )
(list "MOV"              "rm64,reg_sreg"                              "[mr: o64 8c /r]"                                "X64"                       )
(list "MOV"              "reg_sreg,mem"                               "[rm: 8e /r]"                                    "8086,SW"                   )
(list "MOV"              "reg_sreg,reg16"                             "[rm: 8e /r]"                                    "8086,OPT,ND"               )
(list "MOV"              "reg_sreg,reg32"                             "[rm: 8e /r]"                                    "386,OPT,ND"                )
(list "MOV"              "reg_sreg,reg64"                             "[rm: o64nw 8e /r]"                              "X64,OPT,ND"                )
(list "MOV"              "reg_sreg,reg16"                             "[rm: o16 8e /r]"                                "8086"                      )
(list "MOV"              "reg_sreg,reg32"                             "[rm: o32 8e /r]"                                "386"                       )
(list "MOV"              "reg_sreg,rm64"                              "[rm: o64 8e /r]"                                "X64"                       )
(list "MOV"              "reg_al,mem_offs"                            "[-i: a0 iwdq]"                                  "8086,SM"                   )
(list "MOV"              "reg_ax,mem_offs"                            "[-i: o16 a1 iwdq]"                              "8086,SM"                   )
(list "MOV"              "reg_eax,mem_offs"                           "[-i: o32 a1 iwdq]"                              "386,SM"                    )
(list "MOV"              "reg_rax,mem_offs"                           "[-i: o64 a1 iwdq]"                              "X64,SM"                    )
(list "MOV"              "mem_offs,reg_al"                            "[i-: a2 iwdq]"                                  "8086,SM,NOHLE"             )
(list "MOV"              "mem_offs,reg_ax"                            "[i-: o16 a3 iwdq]"                              "8086,SM,NOHLE"             )
(list "MOV"              "mem_offs,reg_eax"                           "[i-: o32 a3 iwdq]"                              "386,SM,NOHLE"              )
(list "MOV"              "mem_offs,reg_rax"                           "[i-: o64 a3 iwdq]"                              "X64,SM,NOHLE"              )
(list "MOV"              "reg32,reg_creg"                             "[mr: rex.l 0f 20 /r]"                           "386,PRIV,NOLONG"           )
(list "MOV"              "reg64,reg_creg"                             "[mr: o64nw 0f 20 /r]"                           "X64,PRIV"                  )
(list "MOV"              "reg_creg,reg32"                             "[rm: rex.l 0f 22 /r]"                           "386,PRIV,NOLONG"           )
(list "MOV"              "reg_creg,reg64"                             "[rm: o64nw 0f 22 /r]"                           "X64,PRIV"                  )
(list "MOV"              "reg32,reg_dreg"                             "[mr: 0f 21 /r]"                                 "386,PRIV,NOLONG"           )
(list "MOV"              "reg64,reg_dreg"                             "[mr: o64nw 0f 21 /r]"                           "X64,PRIV"                  )
(list "MOV"              "reg_dreg,reg32"                             "[rm: 0f 23 /r]"                                 "386,PRIV,NOLONG"           )
(list "MOV"              "reg_dreg,reg64"                             "[rm: o64nw 0f 23 /r]"                           "X64,PRIV"                  )
(list "MOV"              "reg32,reg_treg"                             "[mr: 0f 24 /r]"                                 "386,NOLONG,ND"             )
(list "MOV"              "reg_treg,reg32"                             "[rm: 0f 26 /r]"                                 "386,NOLONG,ND"             )
(list "MOV"              "mem,reg8"                                   "[mr: hlexr 88 /r]"                              "8086,SM"                   )
(list "MOV"              "reg8,reg8"                                  "[mr: 88 /r]"                                    "8086"                      )
(list "MOV"              "mem,reg16"                                  "[mr: hlexr o16 89 /r]"                          "8086,SM"                   )
(list "MOV"              "reg16,reg16"                                "[mr: o16 89 /r]"                                "8086"                      )
(list "MOV"              "mem,reg32"                                  "[mr: hlexr o32 89 /r]"                          "386,SM"                    )
(list "MOV"              "reg32,reg32"                                "[mr: o32 89 /r]"                                "386"                       )
(list "MOV"              "mem,reg64"                                  "[mr: hlexr o64 89 /r]"                          "X64,SM"                    )
(list "MOV"              "reg64,reg64"                                "[mr: o64 89 /r]"                                "X64"                       )
(list "MOV"              "reg8,mem"                                   "[rm: 8a /r]"                                    "8086,SM"                   )
(list "MOV"              "reg8,reg8"                                  "[rm: 8a /r]"                                    "8086"                      )
(list "MOV"              "reg16,mem"                                  "[rm: o16 8b /r]"                                "8086,SM"                   )
(list "MOV"              "reg16,reg16"                                "[rm: o16 8b /r]"                                "8086"                      )
(list "MOV"              "reg32,mem"                                  "[rm: o32 8b /r]"                                "386,SM"                    )
(list "MOV"              "reg32,reg32"                                "[rm: o32 8b /r]"                                "386"                       )
(list "MOV"              "reg64,mem"                                  "[rm: o64 8b /r]"                                "X64,SM"                    )
(list "MOV"              "reg64,reg64"                                "[rm: o64 8b /r]"                                "X64"                       )
(list "MOV"              "reg8,imm"                                   "[ri: b0+r ib]"                                  "8086,SM"                   )
(list "MOV"              "reg16,imm"                                  "[ri: o16 b8+r iw]"                              "8086,SM"                   )
(list "MOV"              "reg32,imm"                                  "[ri: o32 b8+r id]"                              "386,SM"                    )
(list "MOV"              "reg64,udword"                               "[ri: o64nw b8+r id]"                            "X64,SM,OPT,ND"             )
(list "MOV"              "reg64,sdword"                               "[mi: o64 c7 /0 id,s]"                           "X64,SM,OPT,ND"             )
(list "MOV"              "reg64,imm"                                  "[ri: o64 b8+r iq]"                              "X64,SM"                    )
(list "MOV"              "rm8,imm"                                    "[mi: hlexr c6 /0 ib]"                           "8086,SM"                   )
(list "MOV"              "rm16,imm"                                   "[mi: hlexr o16 c7 /0 iw]"                       "8086,SM"                   )
(list "MOV"              "rm32,imm"                                   "[mi: hlexr o32 c7 /0 id]"                       "386,SM"                    )
(list "MOV"              "rm64,imm"                                   "[mi: hlexr o64 c7 /0 id,s]"                     "X64,SM"                    )
(list "MOV"              "rm64,imm32"                                 "[mi: hlexr o64 c7 /0 id,s]"                     "X64"                       )
(list "MOV"              "mem,imm8"                                   "[mi: hlexr c6 /0 ib]"                           "8086,SM"                   )
(list "MOV"              "mem,imm16"                                  "[mi: hlexr o16 c7 /0 iw]"                       "8086,SM"                   )
(list "MOV"              "mem,imm32"                                  "[mi: hlexr o32 c7 /0 id]"                       "386,SM"                    )
(list "MOVD"             "mmxreg,rm32"                                "[rm: np 0f 6e /r]"                              "PENT,MMX,SD"               )
(list "MOVD"             "rm32,mmxreg"                                "[mr: np 0f 7e /r]"                              "PENT,MMX,SD"               )
(list "MOVD"             "mmxreg,rm64"                                "[rm: np o64 0f 6e /r]"                          "X64,MMX,SX,ND"             )
(list "MOVD"             "rm64,mmxreg"                                "[mr: np o64 0f 7e /r]"                          "X64,MMX,SX,ND"             )
(list "MOVQ"             "mmxreg,mmxrm"                               "[rm: np 0f 6f /r]"                              "PENT,MMX,SQ"               )
(list "MOVQ"             "mmxrm,mmxreg"                               "[mr: np 0f 7f /r]"                              "PENT,MMX,SQ"               )
(list "MOVQ"             "mmxreg,rm64"                                "[rm: np o64 0f 6e /r]"                          "X64,MMX"                   )
(list "MOVQ"             "rm64,mmxreg"                                "[mr: np o64 0f 7e /r]"                          "X64,MMX"                   )
(list "MOVSB"            "void"                                       "[ a4]"                                          "8086"                      )
(list "MOVSD"            "void"                                       "[ o32 a5]"                                      "386"                       )
(list "MOVSQ"            "void"                                       "[ o64 a5]"                                      "X64"                       )
(list "MOVSW"            "void"                                       "[ o16 a5]"                                      "8086"                      )
(list "MOVSX"            "reg16,mem"                                  "[rm: o16 0f be /r]"                             "386,SB"                    )
(list "MOVSX"            "reg16,reg8"                                 "[rm: o16 0f be /r]"                             "386"                       )
(list "MOVSX"            "reg32,rm8"                                  "[rm: o32 0f be /r]"                             "386"                       )
(list "MOVSX"            "reg32,rm16"                                 "[rm: o32 0f bf /r]"                             "386"                       )
(list "MOVSX"            "reg64,rm8"                                  "[rm: o64 0f be /r]"                             "X64"                       )
(list "MOVSX"            "reg64,rm16"                                 "[rm: o64 0f bf /r]"                             "X64"                       )
(list "MOVSXD"           "reg64,rm32"                                 "[rm: o64 63 /r]"                                "X64"                       )
(list "MOVSX"            "reg64,rm32"                                 "[rm: o64 63 /r]"                                "X64,ND"                    )
(list "MOVZX"            "reg16,mem"                                  "[rm: o16 0f b6 /r]"                             "386,SB"                    )
(list "MOVZX"            "reg16,reg8"                                 "[rm: o16 0f b6 /r]"                             "386"                       )
(list "MOVZX"            "reg32,rm8"                                  "[rm: o32 0f b6 /r]"                             "386"                       )
(list "MOVZX"            "reg32,rm16"                                 "[rm: o32 0f b7 /r]"                             "386"                       )
(list "MOVZX"            "reg64,rm8"                                  "[rm: o64 0f b6 /r]"                             "X64"                       )
(list "MOVZX"            "reg64,rm16"                                 "[rm: o64 0f b7 /r]"                             "X64"                       )
(list "MUL"              "rm8"                                        "[m: f6 /4]"                                     "8086"                      )
(list "MUL"              "rm16"                                       "[m: o16 f7 /4]"                                 "8086"                      )
(list "MUL"              "rm32"                                       "[m: o32 f7 /4]"                                 "386"                       )
(list "MUL"              "rm64"                                       "[m: o64 f7 /4]"                                 "X64"                       )
(list "MWAIT"            "void"                                       "[ 0f 01 c9]"                                    "PRESCOTT"                  )
(list "MWAIT"            "reg_eax,reg_ecx"                            "[--: 0f 01 c9]"                                 "PRESCOTT,ND"               )
(list "NEG"              "rm8"                                        "[m: hle f6 /3]"                                 "8086,LOCK"                 )
(list "NEG"              "rm16"                                       "[m: hle o16 f7 /3]"                             "8086,LOCK"                 )
(list "NEG"              "rm32"                                       "[m: hle o32 f7 /3]"                             "386,LOCK"                  )
(list "NEG"              "rm64"                                       "[m: hle o64 f7 /3]"                             "X64,LOCK"                  )
(list "NOP"              "void"                                       "[ norexb nof3 90]"                              "8086"                      )
(list "NOP"              "rm16"                                       "[m: o16 0f 1f /0]"                              "P6"                        )
(list "NOP"              "rm32"                                       "[m: o32 0f 1f /0]"                              "P6"                        )
(list "NOP"              "rm64"                                       "[m: o64 0f 1f /0]"                              "X64"                       )
(list "NOT"              "rm8"                                        "[m: hle f6 /2]"                                 "8086,LOCK"                 )
(list "NOT"              "rm16"                                       "[m: hle o16 f7 /2]"                             "8086,LOCK"                 )
(list "NOT"              "rm32"                                       "[m: hle o32 f7 /2]"                             "386,LOCK"                  )
(list "NOT"              "rm64"                                       "[m: hle o64 f7 /2]"                             "X64,LOCK"                  )
(list "OR"               "mem,reg8"                                   "[mr: hle 08 /r]"                                "8086,SM,LOCK"              )
(list "OR"               "reg8,reg8"                                  "[mr: 08 /r]"                                    "8086"                      )
(list "OR"               "mem,reg16"                                  "[mr: hle o16 09 /r]"                            "8086,SM,LOCK"              )
(list "OR"               "reg16,reg16"                                "[mr: o16 09 /r]"                                "8086"                      )
(list "OR"               "mem,reg32"                                  "[mr: hle o32 09 /r]"                            "386,SM,LOCK"               )
(list "OR"               "reg32,reg32"                                "[mr: o32 09 /r]"                                "386"                       )
(list "OR"               "mem,reg64"                                  "[mr: hle o64 09 /r]"                            "X64,SM,LOCK"               )
(list "OR"               "reg64,reg64"                                "[mr: o64 09 /r]"                                "X64"                       )
(list "OR"               "reg8,mem"                                   "[rm: 0a /r]"                                    "8086,SM"                   )
(list "OR"               "reg8,reg8"                                  "[rm: 0a /r]"                                    "8086"                      )
(list "OR"               "reg16,mem"                                  "[rm: o16 0b /r]"                                "8086,SM"                   )
(list "OR"               "reg16,reg16"                                "[rm: o16 0b /r]"                                "8086"                      )
(list "OR"               "reg32,mem"                                  "[rm: o32 0b /r]"                                "386,SM"                    )
(list "OR"               "reg32,reg32"                                "[rm: o32 0b /r]"                                "386"                       )
(list "OR"               "reg64,mem"                                  "[rm: o64 0b /r]"                                "X64,SM"                    )
(list "OR"               "reg64,reg64"                                "[rm: o64 0b /r]"                                "X64"                       )
(list "OR"               "rm16,imm8"                                  "[mi: hle o16 83 /1 ib,s]"                       "8086,LOCK"                 )
(list "OR"               "rm32,imm8"                                  "[mi: hle o32 83 /1 ib,s]"                       "386,LOCK"                  )
(list "OR"               "rm64,imm8"                                  "[mi: hle o64 83 /1 ib,s]"                       "X64,LOCK"                  )
(list "OR"               "reg_al,imm"                                 "[-i: 0c ib]"                                    "8086,SM"                   )
(list "OR"               "reg_ax,sbyteword"                           "[mi: o16 83 /1 ib,s]"                           "8086,SM,ND"                )
(list "OR"               "reg_ax,imm"                                 "[-i: o16 0d iw]"                                "8086,SM"                   )
(list "OR"               "reg_eax,sbytedword"                         "[mi: o32 83 /1 ib,s]"                           "386,SM,ND"                 )
(list "OR"               "reg_eax,imm"                                "[-i: o32 0d id]"                                "386,SM"                    )
(list "OR"               "reg_rax,sbytedword"                         "[mi: o64 83 /1 ib,s]"                           "X64,SM,ND"                 )
(list "OR"               "reg_rax,imm"                                "[-i: o64 0d id,s]"                              "X64,SM"                    )
(list "OR"               "rm8,imm"                                    "[mi: hle 80 /1 ib]"                             "8086,SM,LOCK"              )
(list "OR"               "rm16,sbyteword"                             "[mi: hle o16 83 /1 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "OR"               "rm16,imm"                                   "[mi: hle o16 81 /1 iw]"                         "8086,SM,LOCK"              )
(list "OR"               "rm32,sbytedword"                            "[mi: hle o32 83 /1 ib,s]"                       "386,SM,LOCK,ND"            )
(list "OR"               "rm32,imm"                                   "[mi: hle o32 81 /1 id]"                         "386,SM,LOCK"               )
(list "OR"               "rm64,sbytedword"                            "[mi: hle o64 83 /1 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "OR"               "rm64,imm"                                   "[mi: hle o64 81 /1 id,s]"                       "X64,SM,LOCK"               )
(list "OR"               "mem,imm8"                                   "[mi: hle 80 /1 ib]"                             "8086,SM,LOCK"              )
(list "OR"               "mem,sbyteword16"                            "[mi: hle o16 83 /1 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "OR"               "mem,imm16"                                  "[mi: hle o16 81 /1 iw]"                         "8086,SM,LOCK"              )
(list "OR"               "mem,sbytedword32"                           "[mi: hle o32 83 /1 ib,s]"                       "386,SM,LOCK,ND"            )
(list "OR"               "mem,imm32"                                  "[mi: hle o32 81 /1 id]"                         "386,SM,LOCK"               )
(list "OR"               "rm8,imm"                                    "[mi: hle 82 /1 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "OUT"              "imm,reg_al"                                 "[i-: e6 ib,u]"                                  "8086,SB"                   )
(list "OUT"              "imm,reg_ax"                                 "[i-: o16 e7 ib,u]"                              "8086,SB"                   )
(list "OUT"              "imm,reg_eax"                                "[i-: o32 e7 ib,u]"                              "386,SB"                    )
(list "OUT"              "reg_dx,reg_al"                              "[--: ee]"                                       "8086"                      )
(list "OUT"              "reg_dx,reg_ax"                              "[--: o16 ef]"                                   "8086"                      )
(list "OUT"              "reg_dx,reg_eax"                             "[--: o32 ef]"                                   "386"                       )
(list "OUTSB"            "void"                                       "[ 6e]"                                          "186"                       )
(list "OUTSD"            "void"                                       "[ o32 6f]"                                      "386"                       )
(list "OUTSW"            "void"                                       "[ o16 6f]"                                      "186"                       )
(list "PACKSSDW"         "mmxreg,mmxrm"                               "[rm: np o64nw 0f 6b /r]"                        "PENT,MMX,SQ"               )
(list "PACKSSWB"         "mmxreg,mmxrm"                               "[rm: np o64nw 0f 63 /r]"                        "PENT,MMX,SQ"               )
(list "PACKUSWB"         "mmxreg,mmxrm"                               "[rm: np o64nw 0f 67 /r]"                        "PENT,MMX,SQ"               )
(list "PADDB"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f fc /r]"                        "PENT,MMX,SQ"               )
(list "PADDD"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f fe /r]"                        "PENT,MMX,SQ"               )
(list "PADDSB"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f ec /r]"                        "PENT,MMX,SQ"               )
(list "PADDSIW"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 51 /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PADDSW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f ed /r]"                        "PENT,MMX,SQ"               )
(list "PADDUSB"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f dc /r]"                        "PENT,MMX,SQ"               )
(list "PADDUSW"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f dd /r]"                        "PENT,MMX,SQ"               )
(list "PADDW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f fd /r]"                        "PENT,MMX,SQ"               )
(list "PAND"             "mmxreg,mmxrm"                               "[rm: np o64nw 0f db /r]"                        "PENT,MMX,SQ"               )
(list "PANDN"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f df /r]"                        "PENT,MMX,SQ"               )
(list "PAUSE"            "void"                                       "[ f3i 90]"                                      "8086"                      )
(list "PAVEB"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 50 /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PAVGUSB"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r bf]"                        "PENT,3DNOW,SQ"             )
(list "PCMPEQB"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 74 /r]"                        "PENT,MMX,SQ"               )
(list "PCMPEQD"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 76 /r]"                        "PENT,MMX,SQ"               )
(list "PCMPEQW"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 75 /r]"                        "PENT,MMX,SQ"               )
(list "PCMPGTB"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 64 /r]"                        "PENT,MMX,SQ"               )
(list "PCMPGTD"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 66 /r]"                        "PENT,MMX,SQ"               )
(list "PCMPGTW"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f 65 /r]"                        "PENT,MMX,SQ"               )
(list "PDISTIB"          "mmxreg,mem"                                 "[rm: 0f 54 /r]"                                 "PENT,MMX,SM,CYRIX"         )
(list "PF2ID"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 1d]"                        "PENT,3DNOW,SQ"             )
(list "PFACC"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r ae]"                        "PENT,3DNOW,SQ"             )
(list "PFADD"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 9e]"                        "PENT,3DNOW,SQ"             )
(list "PFCMPEQ"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r b0]"                        "PENT,3DNOW,SQ"             )
(list "PFCMPGE"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 90]"                        "PENT,3DNOW,SQ"             )
(list "PFCMPGT"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r a0]"                        "PENT,3DNOW,SQ"             )
(list "PFMAX"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r a4]"                        "PENT,3DNOW,SQ"             )
(list "PFMIN"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 94]"                        "PENT,3DNOW,SQ"             )
(list "PFMUL"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r b4]"                        "PENT,3DNOW,SQ"             )
(list "PFRCP"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 96]"                        "PENT,3DNOW,SQ"             )
(list "PFRCPIT1"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r a6]"                        "PENT,3DNOW,SQ"             )
(list "PFRCPIT2"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r b6]"                        "PENT,3DNOW,SQ"             )
(list "PFRSQIT1"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r a7]"                        "PENT,3DNOW,SQ"             )
(list "PFRSQRT"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 97]"                        "PENT,3DNOW,SQ"             )
(list "PFSUB"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 9a]"                        "PENT,3DNOW,SQ"             )
(list "PFSUBR"           "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r aa]"                        "PENT,3DNOW,SQ"             )
(list "PI2FD"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 0d]"                        "PENT,3DNOW,SQ"             )
(list "PMACHRIW"         "mmxreg,mem"                                 "[rm: 0f 5e /r]"                                 "PENT,MMX,SM,CYRIX"         )
(list "PMADDWD"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f f5 /r]"                        "PENT,MMX,SQ"               )
(list "PMAGW"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 52 /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PMULHRIW"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 5d /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PMULHRWA"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r b7]"                        "PENT,3DNOW,SQ"             )
(list "PMULHRWC"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 59 /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PMULHW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f e5 /r]"                        "PENT,MMX,SQ"               )
(list "PMULLW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f d5 /r]"                        "PENT,MMX,SQ"               )
(list "PMVGEZB"          "mmxreg,mem"                                 "[rm: 0f 5c /r]"                                 "PENT,MMX,SQ,CYRIX"         )
(list "PMVLZB"           "mmxreg,mem"                                 "[rm: 0f 5b /r]"                                 "PENT,MMX,SQ,CYRIX"         )
(list "PMVNZB"           "mmxreg,mem"                                 "[rm: 0f 5a /r]"                                 "PENT,MMX,SQ,CYRIX"         )
(list "PMVZB"            "mmxreg,mem"                                 "[rm: 0f 58 /r]"                                 "PENT,MMX,SQ,CYRIX"         )
(list "POP"              "reg16"                                      "[r: o16 58+r]"                                  "8086"                      )
(list "POP"              "reg32"                                      "[r: o32 58+r]"                                  "386,NOLONG"                )
(list "POP"              "reg64"                                      "[r: o64nw 58+r]"                                "X64"                       )
(list "POP"              "rm16"                                       "[m: o16 8f /0]"                                 "8086"                      )
(list "POP"              "rm32"                                       "[m: o32 8f /0]"                                 "386,NOLONG"                )
(list "POP"              "rm64"                                       "[m: o64nw 8f /0]"                               "X64"                       )
(list "POP"              "reg_es"                                     "[-: 07]"                                        "8086,NOLONG"               )
(list "POP"              "reg_cs"                                     "[-: 0f]"                                        "8086,UNDOC,ND"             )
(list "POP"              "reg_ss"                                     "[-: 17]"                                        "8086,NOLONG"               )
(list "POP"              "reg_ds"                                     "[-: 1f]"                                        "8086,NOLONG"               )
(list "POP"              "reg_fs"                                     "[-: 0f a1]"                                     "386"                       )
(list "POP"              "reg_gs"                                     "[-: 0f a9]"                                     "386"                       )
(list "POPA"             "void"                                       "[ odf 61]"                                      "186,NOLONG"                )
(list "POPAD"            "void"                                       "[ o32 61]"                                      "386,NOLONG"                )
(list "POPAW"            "void"                                       "[ o16 61]"                                      "186,NOLONG"                )
(list "POPF"             "void"                                       "[ odf 9d]"                                      "8086"                      )
(list "POPFD"            "void"                                       "[ o32 9d]"                                      "386,NOLONG"                )
(list "POPFQ"            "void"                                       "[ o32 9d]"                                      "X64"                       )
(list "POPFW"            "void"                                       "[ o16 9d]"                                      "8086"                      )
(list "POR"              "mmxreg,mmxrm"                               "[rm: np o64nw 0f eb /r]"                        "PENT,MMX,SQ"               )
(list "PREFETCH"         "mem"                                        "[m: 0f 0d /0]"                                  "PENT,3DNOW,SQ"             )
(list "PREFETCHW"        "mem"                                        "[m: 0f 0d /1]"                                  "PENT,3DNOW,SQ"             )
(list "PSLLD"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f f2 /r]"                        "PENT,MMX,SQ"               )
(list "PSLLD"            "mmxreg,imm"                                 "[mi: np 0f 72 /6 ib,u]"                         "PENT,MMX"                  )
(list "PSLLQ"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f f3 /r]"                        "PENT,MMX,SQ"               )
(list "PSLLQ"            "mmxreg,imm"                                 "[mi: np 0f 73 /6 ib,u]"                         "PENT,MMX"                  )
(list "PSLLW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f f1 /r]"                        "PENT,MMX,SQ"               )
(list "PSLLW"            "mmxreg,imm"                                 "[mi: np 0f 71 /6 ib,u]"                         "PENT,MMX"                  )
(list "PSRAD"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f e2 /r]"                        "PENT,MMX,SQ"               )
(list "PSRAD"            "mmxreg,imm"                                 "[mi: np 0f 72 /4 ib,u]"                         "PENT,MMX"                  )
(list "PSRAW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f e1 /r]"                        "PENT,MMX,SQ"               )
(list "PSRAW"            "mmxreg,imm"                                 "[mi: np 0f 71 /4 ib,u]"                         "PENT,MMX"                  )
(list "PSRLD"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f d2 /r]"                        "PENT,MMX,SQ"               )
(list "PSRLD"            "mmxreg,imm"                                 "[mi: np 0f 72 /2 ib,u]"                         "PENT,MMX"                  )
(list "PSRLQ"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f d3 /r]"                        "PENT,MMX,SQ"               )
(list "PSRLQ"            "mmxreg,imm"                                 "[mi: np 0f 73 /2 ib,u]"                         "PENT,MMX"                  )
(list "PSRLW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f d1 /r]"                        "PENT,MMX,SQ"               )
(list "PSRLW"            "mmxreg,imm"                                 "[mi: np 0f 71 /2 ib,u]"                         "PENT,MMX"                  )
(list "PSUBB"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f f8 /r]"                        "PENT,MMX,SQ"               )
(list "PSUBD"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f fa /r]"                        "PENT,MMX,SQ"               )
(list "PSUBSB"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f e8 /r]"                        "PENT,MMX,SQ"               )
(list "PSUBSIW"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 55 /r]"                           "PENT,MMX,SQ,CYRIX"         )
(list "PSUBSW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f e9 /r]"                        "PENT,MMX,SQ"               )
(list "PSUBUSB"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f d8 /r]"                        "PENT,MMX,SQ"               )
(list "PSUBUSW"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f d9 /r]"                        "PENT,MMX,SQ"               )
(list "PSUBW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f f9 /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKHBW"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 68 /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKHDQ"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 6a /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKHWD"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 69 /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKLBW"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 60 /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKLDQ"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 62 /r]"                        "PENT,MMX,SQ"               )
(list "PUNPCKLWD"        "mmxreg,mmxrm"                               "[rm: np o64nw 0f 61 /r]"                        "PENT,MMX,SQ"               )
(list "PUSH"             "reg16"                                      "[r: o16 50+r]"                                  "8086"                      )
(list "PUSH"             "reg32"                                      "[r: o32 50+r]"                                  "386,NOLONG"                )
(list "PUSH"             "reg64"                                      "[r: o64nw 50+r]"                                "X64"                       )
(list "PUSH"             "rm16"                                       "[m: o16 ff /6]"                                 "8086"                      )
(list "PUSH"             "rm32"                                       "[m: o32 ff /6]"                                 "386,NOLONG"                )
(list "PUSH"             "rm64"                                       "[m: o64nw ff /6]"                               "X64"                       )
(list "PUSH"             "reg_es"                                     "[-: 06]"                                        "8086,NOLONG"               )
(list "PUSH"             "reg_cs"                                     "[-: 0e]"                                        "8086,NOLONG"               )
(list "PUSH"             "reg_ss"                                     "[-: 16]"                                        "8086,NOLONG"               )
(list "PUSH"             "reg_ds"                                     "[-: 1e]"                                        "8086,NOLONG"               )
(list "PUSH"             "reg_fs"                                     "[-: 0f a0]"                                     "386"                       )
(list "PUSH"             "reg_gs"                                     "[-: 0f a8]"                                     "386"                       )
(list "PUSH"             "imm8"                                       "[i: 6a ib,s]"                                   "186"                       )
(list "PUSH"             "sbyteword16"                                "[i: o16 6a ib,s]"                               "186,AR0,SIZE,ND"           )
(list "PUSH"             "imm16"                                      "[i: o16 68 iw]"                                 "186,AR0,SIZE"              )
(list "PUSH"             "sbytedword32"                               "[i: o32 6a ib,s]"                               "386,NOLONG,AR0,SIZE,ND"    )
(list "PUSH"             "imm32"                                      "[i: o32 68 id]"                                 "386,NOLONG,AR0,SIZE"       )
(list "PUSH"             "sbytedword32"                               "[i: o32 6a ib,s]"                               "386,NOLONG,SD,ND"          )
(list "PUSH"             "imm32"                                      "[i: o32 68 id]"                                 "386,NOLONG,SD"             )
(list "PUSH"             "sbytedword64"                               "[i: o64nw 6a ib,s]"                             "X64,AR0,SIZE,ND"           )
(list "PUSH"             "imm64"                                      "[i: o64nw 68 id,s]"                             "X64,AR0,SIZE"              )
(list "PUSH"             "sbytedword32"                               "[i: o64nw 6a ib,s]"                             "X64,AR0,SIZE,ND"           )
(list "PUSH"             "imm32"                                      "[i: o64nw 68 id,s]"                             "X64,AR0,SIZE"              )
(list "PUSHA"            "void"                                       "[ odf 60]"                                      "186,NOLONG"                )
(list "PUSHAD"           "void"                                       "[ o32 60]"                                      "386,NOLONG"                )
(list "PUSHAW"           "void"                                       "[ o16 60]"                                      "186,NOLONG"                )
(list "PUSHF"            "void"                                       "[ odf 9c]"                                      "8086"                      )
(list "PUSHFD"           "void"                                       "[ o32 9c]"                                      "386,NOLONG"                )
(list "PUSHFQ"           "void"                                       "[ o32 9c]"                                      "X64"                       )
(list "PUSHFW"           "void"                                       "[ o16 9c]"                                      "8086"                      )
(list "PXOR"             "mmxreg,mmxrm"                               "[rm: np o64nw 0f ef /r]"                        "PENT,MMX,SQ"               )
(list "RCL"              "rm8,unity"                                  "[m-: d0 /2]"                                    "8086"                      )
(list "RCL"              "rm8,reg_cl"                                 "[m-: d2 /2]"                                    "8086"                      )
(list "RCL"              "rm8,imm8"                                   "[mi: c0 /2 ib,u]"                               "186"                       )
(list "RCL"              "rm16,unity"                                 "[m-: o16 d1 /2]"                                "8086"                      )
(list "RCL"              "rm16,reg_cl"                                "[m-: o16 d3 /2]"                                "8086"                      )
(list "RCL"              "rm16,imm8"                                  "[mi: o16 c1 /2 ib,u]"                           "186"                       )
(list "RCL"              "rm32,unity"                                 "[m-: o32 d1 /2]"                                "386"                       )
(list "RCL"              "rm32,reg_cl"                                "[m-: o32 d3 /2]"                                "386"                       )
(list "RCL"              "rm32,imm8"                                  "[mi: o32 c1 /2 ib,u]"                           "386"                       )
(list "RCL"              "rm64,unity"                                 "[m-: o64 d1 /2]"                                "X64"                       )
(list "RCL"              "rm64,reg_cl"                                "[m-: o64 d3 /2]"                                "X64"                       )
(list "RCL"              "rm64,imm8"                                  "[mi: o64 c1 /2 ib,u]"                           "X64"                       )
(list "RCR"              "rm8,unity"                                  "[m-: d0 /3]"                                    "8086"                      )
(list "RCR"              "rm8,reg_cl"                                 "[m-: d2 /3]"                                    "8086"                      )
(list "RCR"              "rm8,imm8"                                   "[mi: c0 /3 ib,u]"                               "186"                       )
(list "RCR"              "rm16,unity"                                 "[m-: o16 d1 /3]"                                "8086"                      )
(list "RCR"              "rm16,reg_cl"                                "[m-: o16 d3 /3]"                                "8086"                      )
(list "RCR"              "rm16,imm8"                                  "[mi: o16 c1 /3 ib,u]"                           "186"                       )
(list "RCR"              "rm32,unity"                                 "[m-: o32 d1 /3]"                                "386"                       )
(list "RCR"              "rm32,reg_cl"                                "[m-: o32 d3 /3]"                                "386"                       )
(list "RCR"              "rm32,imm8"                                  "[mi: o32 c1 /3 ib,u]"                           "386"                       )
(list "RCR"              "rm64,unity"                                 "[m-: o64 d1 /3]"                                "X64"                       )
(list "RCR"              "rm64,reg_cl"                                "[m-: o64 d3 /3]"                                "X64"                       )
(list "RCR"              "rm64,imm8"                                  "[mi: o64 c1 /3 ib,u]"                           "X64"                       )
(list "RDSHR"            "rm32"                                       "[m: o32 0f 36 /0]"                              "P6,CYRIX,SMM"              )
(list "RDMSR"            "void"                                       "[ 0f 32]"                                       "PENT,PRIV"                 )
(list "RDPMC"            "void"                                       "[ 0f 33]"                                       "P6"                        )
(list "RDTSC"            "void"                                       "[ 0f 31]"                                       "PENT"                      )
(list "RDTSCP"           "void"                                       "[ 0f 01 f9]"                                    "X86_64"                    )
(list "RET"              "void"                                       "[ c3]"                                          "8086,BND"                  )
(list "RET"              "imm"                                        "[i: c2 iw]"                                     "8086,SW,BND"               )
(list "RETF"             "void"                                       "[ cb]"                                          "8086"                      )
(list "RETF"             "imm"                                        "[i: ca iw]"                                     "8086,SW"                   )
(list "RETN"             "void"                                       "[ c3]"                                          "8086,BND"                  )
(list "RETN"             "imm"                                        "[i: c2 iw]"                                     "8086,SW,BND"               )
(list "ROL"              "rm8,unity"                                  "[m-: d0 /0]"                                    "8086"                      )
(list "ROL"              "rm8,reg_cl"                                 "[m-: d2 /0]"                                    "8086"                      )
(list "ROL"              "rm8,imm8"                                   "[mi: c0 /0 ib,u]"                               "186"                       )
(list "ROL"              "rm16,unity"                                 "[m-: o16 d1 /0]"                                "8086"                      )
(list "ROL"              "rm16,reg_cl"                                "[m-: o16 d3 /0]"                                "8086"                      )
(list "ROL"              "rm16,imm8"                                  "[mi: o16 c1 /0 ib,u]"                           "186"                       )
(list "ROL"              "rm32,unity"                                 "[m-: o32 d1 /0]"                                "386"                       )
(list "ROL"              "rm32,reg_cl"                                "[m-: o32 d3 /0]"                                "386"                       )
(list "ROL"              "rm32,imm8"                                  "[mi: o32 c1 /0 ib,u]"                           "386"                       )
(list "ROL"              "rm64,unity"                                 "[m-: o64 d1 /0]"                                "X64"                       )
(list "ROL"              "rm64,reg_cl"                                "[m-: o64 d3 /0]"                                "X64"                       )
(list "ROL"              "rm64,imm8"                                  "[mi: o64 c1 /0 ib,u]"                           "X64"                       )
(list "ROR"              "rm8,unity"                                  "[m-: d0 /1]"                                    "8086"                      )
(list "ROR"              "rm8,reg_cl"                                 "[m-: d2 /1]"                                    "8086"                      )
(list "ROR"              "rm8,imm8"                                   "[mi: c0 /1 ib,u]"                               "186"                       )
(list "ROR"              "rm16,unity"                                 "[m-: o16 d1 /1]"                                "8086"                      )
(list "ROR"              "rm16,reg_cl"                                "[m-: o16 d3 /1]"                                "8086"                      )
(list "ROR"              "rm16,imm8"                                  "[mi: o16 c1 /1 ib,u]"                           "186"                       )
(list "ROR"              "rm32,unity"                                 "[m-: o32 d1 /1]"                                "386"                       )
(list "ROR"              "rm32,reg_cl"                                "[m-: o32 d3 /1]"                                "386"                       )
(list "ROR"              "rm32,imm8"                                  "[mi: o32 c1 /1 ib,u]"                           "386"                       )
(list "ROR"              "rm64,unity"                                 "[m-: o64 d1 /1]"                                "X64"                       )
(list "ROR"              "rm64,reg_cl"                                "[m-: o64 d3 /1]"                                "X64"                       )
(list "ROR"              "rm64,imm8"                                  "[mi: o64 c1 /1 ib,u]"                           "X64"                       )
(list "RDM"              "void"                                       "[ 0f 3a]"                                       "P6,CYRIX,ND"               )
(list "RSDC"             "reg_sreg,mem80"                             "[rm: 0f 79 /r]"                                 "486,CYRIX,SMM"             )
(list "RSLDT"            "mem80"                                      "[m: 0f 7b /0]"                                  "486,CYRIX,SMM"             )
(list "RSM"              "void"                                       "[ 0f aa]"                                       "PENT,SMM"                  )
(list "RSTS"             "mem80"                                      "[m: 0f 7d /0]"                                  "486,CYRIX,SMM"             )
(list "SAHF"             "void"                                       "[ 9e]"                                          "8086"                      )
(list "SAL"              "rm8,unity"                                  "[m-: d0 /4]"                                    "8086,ND"                   )
(list "SAL"              "rm8,reg_cl"                                 "[m-: d2 /4]"                                    "8086,ND"                   )
(list "SAL"              "rm8,imm8"                                   "[mi: c0 /4 ib,u]"                               "186,ND"                    )
(list "SAL"              "rm16,unity"                                 "[m-: o16 d1 /4]"                                "8086,ND"                   )
(list "SAL"              "rm16,reg_cl"                                "[m-: o16 d3 /4]"                                "8086,ND"                   )
(list "SAL"              "rm16,imm8"                                  "[mi: o16 c1 /4 ib,u]"                           "186,ND"                    )
(list "SAL"              "rm32,unity"                                 "[m-: o32 d1 /4]"                                "386,ND"                    )
(list "SAL"              "rm32,reg_cl"                                "[m-: o32 d3 /4]"                                "386,ND"                    )
(list "SAL"              "rm32,imm8"                                  "[mi: o32 c1 /4 ib,u]"                           "386,ND"                    )
(list "SAL"              "rm64,unity"                                 "[m-: o64 d1 /4]"                                "X64,ND"                    )
(list "SAL"              "rm64,reg_cl"                                "[m-: o64 d3 /4]"                                "X64,ND"                    )
(list "SAL"              "rm64,imm8"                                  "[mi: o64 c1 /4 ib,u]"                           "X64,ND"                    )
(list "SALC"             "void"                                       "[ d6]"                                          "8086,UNDOC"                )
(list "SAR"              "rm8,unity"                                  "[m-: d0 /7]"                                    "8086"                      )
(list "SAR"              "rm8,reg_cl"                                 "[m-: d2 /7]"                                    "8086"                      )
(list "SAR"              "rm8,imm8"                                   "[mi: c0 /7 ib,u]"                               "186"                       )
(list "SAR"              "rm16,unity"                                 "[m-: o16 d1 /7]"                                "8086"                      )
(list "SAR"              "rm16,reg_cl"                                "[m-: o16 d3 /7]"                                "8086"                      )
(list "SAR"              "rm16,imm8"                                  "[mi: o16 c1 /7 ib,u]"                           "186"                       )
(list "SAR"              "rm32,unity"                                 "[m-: o32 d1 /7]"                                "386"                       )
(list "SAR"              "rm32,reg_cl"                                "[m-: o32 d3 /7]"                                "386"                       )
(list "SAR"              "rm32,imm8"                                  "[mi: o32 c1 /7 ib,u]"                           "386"                       )
(list "SAR"              "rm64,unity"                                 "[m-: o64 d1 /7]"                                "X64"                       )
(list "SAR"              "rm64,reg_cl"                                "[m-: o64 d3 /7]"                                "X64"                       )
(list "SAR"              "rm64,imm8"                                  "[mi: o64 c1 /7 ib,u]"                           "X64"                       )
(list "SBB"              "mem,reg8"                                   "[mr: hle 18 /r]"                                "8086,SM,LOCK"              )
(list "SBB"              "reg8,reg8"                                  "[mr: 18 /r]"                                    "8086"                      )
(list "SBB"              "mem,reg16"                                  "[mr: hle o16 19 /r]"                            "8086,SM,LOCK"              )
(list "SBB"              "reg16,reg16"                                "[mr: o16 19 /r]"                                "8086"                      )
(list "SBB"              "mem,reg32"                                  "[mr: hle o32 19 /r]"                            "386,SM,LOCK"               )
(list "SBB"              "reg32,reg32"                                "[mr: o32 19 /r]"                                "386"                       )
(list "SBB"              "mem,reg64"                                  "[mr: hle o64 19 /r]"                            "X64,SM,LOCK"               )
(list "SBB"              "reg64,reg64"                                "[mr: o64 19 /r]"                                "X64"                       )
(list "SBB"              "reg8,mem"                                   "[rm: 1a /r]"                                    "8086,SM"                   )
(list "SBB"              "reg8,reg8"                                  "[rm: 1a /r]"                                    "8086"                      )
(list "SBB"              "reg16,mem"                                  "[rm: o16 1b /r]"                                "8086,SM"                   )
(list "SBB"              "reg16,reg16"                                "[rm: o16 1b /r]"                                "8086"                      )
(list "SBB"              "reg32,mem"                                  "[rm: o32 1b /r]"                                "386,SM"                    )
(list "SBB"              "reg32,reg32"                                "[rm: o32 1b /r]"                                "386"                       )
(list "SBB"              "reg64,mem"                                  "[rm: o64 1b /r]"                                "X64,SM"                    )
(list "SBB"              "reg64,reg64"                                "[rm: o64 1b /r]"                                "X64"                       )
(list "SBB"              "rm16,imm8"                                  "[mi: hle o16 83 /3 ib,s]"                       "8086,LOCK"                 )
(list "SBB"              "rm32,imm8"                                  "[mi: hle o32 83 /3 ib,s]"                       "386,LOCK"                  )
(list "SBB"              "rm64,imm8"                                  "[mi: hle o64 83 /3 ib,s]"                       "X64,LOCK"                  )
(list "SBB"              "reg_al,imm"                                 "[-i: 1c ib]"                                    "8086,SM"                   )
(list "SBB"              "reg_ax,sbyteword"                           "[mi: o16 83 /3 ib,s]"                           "8086,SM,ND"                )
(list "SBB"              "reg_ax,imm"                                 "[-i: o16 1d iw]"                                "8086,SM"                   )
(list "SBB"              "reg_eax,sbytedword"                         "[mi: o32 83 /3 ib,s]"                           "386,SM,ND"                 )
(list "SBB"              "reg_eax,imm"                                "[-i: o32 1d id]"                                "386,SM"                    )
(list "SBB"              "reg_rax,sbytedword"                         "[mi: o64 83 /3 ib,s]"                           "X64,SM,ND"                 )
(list "SBB"              "reg_rax,imm"                                "[-i: o64 1d id,s]"                              "X64,SM"                    )
(list "SBB"              "rm8,imm"                                    "[mi: hle 80 /3 ib]"                             "8086,SM,LOCK"              )
(list "SBB"              "rm16,sbyteword"                             "[mi: hle o16 83 /3 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "SBB"              "rm16,imm"                                   "[mi: hle o16 81 /3 iw]"                         "8086,SM,LOCK"              )
(list "SBB"              "rm32,sbytedword"                            "[mi: hle o32 83 /3 ib,s]"                       "386,SM,LOCK,ND"            )
(list "SBB"              "rm32,imm"                                   "[mi: hle o32 81 /3 id]"                         "386,SM,LOCK"               )
(list "SBB"              "rm64,sbytedword"                            "[mi: hle o64 83 /3 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "SBB"              "rm64,imm"                                   "[mi: hle o64 81 /3 id,s]"                       "X64,SM,LOCK"               )
(list "SBB"              "mem,imm8"                                   "[mi: hle 80 /3 ib]"                             "8086,SM,LOCK"              )
(list "SBB"              "mem,sbyteword16"                            "[mi: hle o16 83 /3 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "SBB"              "mem,imm16"                                  "[mi: hle o16 81 /3 iw]"                         "8086,SM,LOCK"              )
(list "SBB"              "mem,sbytedword32"                           "[mi: hle o32 83 /3 ib,s]"                       "386,SM,LOCK,ND"            )
(list "SBB"              "mem,imm32"                                  "[mi: hle o32 81 /3 id]"                         "386,SM,LOCK"               )
(list "SBB"              "rm8,imm"                                    "[mi: hle 82 /3 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "SCASB"            "void"                                       "[ repe ae]"                                     "8086"                      )
(list "SCASD"            "void"                                       "[ repe o32 af]"                                 "386"                       )
(list "SCASQ"            "void"                                       "[ repe o64 af]"                                 "X64"                       )
(list "SCASW"            "void"                                       "[ repe o16 af]"                                 "8086"                      )
(list "SFENCE"           "void"                                       "[ np 0f ae f8]"                                 "X64,AMD"                   )
(list "SGDT"             "mem"                                        "[m: 0f 01 /0]"                                  "286"                       )
(list "SHL"              "rm8,unity"                                  "[m-: d0 /4]"                                    "8086"                      )
(list "SHL"              "rm8,reg_cl"                                 "[m-: d2 /4]"                                    "8086"                      )
(list "SHL"              "rm8,imm8"                                   "[mi: c0 /4 ib,u]"                               "186"                       )
(list "SHL"              "rm16,unity"                                 "[m-: o16 d1 /4]"                                "8086"                      )
(list "SHL"              "rm16,reg_cl"                                "[m-: o16 d3 /4]"                                "8086"                      )
(list "SHL"              "rm16,imm8"                                  "[mi: o16 c1 /4 ib,u]"                           "186"                       )
(list "SHL"              "rm32,unity"                                 "[m-: o32 d1 /4]"                                "386"                       )
(list "SHL"              "rm32,reg_cl"                                "[m-: o32 d3 /4]"                                "386"                       )
(list "SHL"              "rm32,imm8"                                  "[mi: o32 c1 /4 ib,u]"                           "386"                       )
(list "SHL"              "rm64,unity"                                 "[m-: o64 d1 /4]"                                "X64"                       )
(list "SHL"              "rm64,reg_cl"                                "[m-: o64 d3 /4]"                                "X64"                       )
(list "SHL"              "rm64,imm8"                                  "[mi: o64 c1 /4 ib,u]"                           "X64"                       )
(list "SHLD"             "mem,reg16,imm"                              "[mri: o16 0f a4 /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHLD"             "reg16,reg16,imm"                            "[mri: o16 0f a4 /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHLD"             "mem,reg32,imm"                              "[mri: o32 0f a4 /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHLD"             "reg32,reg32,imm"                            "[mri: o32 0f a4 /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHLD"             "mem,reg64,imm"                              "[mri: o64 0f a4 /r ib,u]"                       "X64,SM2,SB,AR2"            )
(list "SHLD"             "reg64,reg64,imm"                            "[mri: o64 0f a4 /r ib,u]"                       "X64,SM2,SB,AR2"            )
(list "SHLD"             "mem,reg16,reg_cl"                           "[mr-: o16 0f a5 /r]"                            "386,SM"                    )
(list "SHLD"             "reg16,reg16,reg_cl"                         "[mr-: o16 0f a5 /r]"                            "386"                       )
(list "SHLD"             "mem,reg32,reg_cl"                           "[mr-: o32 0f a5 /r]"                            "386,SM"                    )
(list "SHLD"             "reg32,reg32,reg_cl"                         "[mr-: o32 0f a5 /r]"                            "386"                       )
(list "SHLD"             "mem,reg64,reg_cl"                           "[mr-: o64 0f a5 /r]"                            "X64,SM"                    )
(list "SHLD"             "reg64,reg64,reg_cl"                         "[mr-: o64 0f a5 /r]"                            "X64"                       )
(list "SHR"              "rm8,unity"                                  "[m-: d0 /5]"                                    "8086"                      )
(list "SHR"              "rm8,reg_cl"                                 "[m-: d2 /5]"                                    "8086"                      )
(list "SHR"              "rm8,imm8"                                   "[mi: c0 /5 ib,u]"                               "186"                       )
(list "SHR"              "rm16,unity"                                 "[m-: o16 d1 /5]"                                "8086"                      )
(list "SHR"              "rm16,reg_cl"                                "[m-: o16 d3 /5]"                                "8086"                      )
(list "SHR"              "rm16,imm8"                                  "[mi: o16 c1 /5 ib,u]"                           "186"                       )
(list "SHR"              "rm32,unity"                                 "[m-: o32 d1 /5]"                                "386"                       )
(list "SHR"              "rm32,reg_cl"                                "[m-: o32 d3 /5]"                                "386"                       )
(list "SHR"              "rm32,imm8"                                  "[mi: o32 c1 /5 ib,u]"                           "386"                       )
(list "SHR"              "rm64,unity"                                 "[m-: o64 d1 /5]"                                "X64"                       )
(list "SHR"              "rm64,reg_cl"                                "[m-: o64 d3 /5]"                                "X64"                       )
(list "SHR"              "rm64,imm8"                                  "[mi: o64 c1 /5 ib,u]"                           "X64"                       )
(list "SHRD"             "mem,reg16,imm"                              "[mri: o16 0f ac /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHRD"             "reg16,reg16,imm"                            "[mri: o16 0f ac /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHRD"             "mem,reg32,imm"                              "[mri: o32 0f ac /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHRD"             "reg32,reg32,imm"                            "[mri: o32 0f ac /r ib,u]"                       "386,SM2,SB,AR2"            )
(list "SHRD"             "mem,reg64,imm"                              "[mri: o64 0f ac /r ib,u]"                       "X64,SM2,SB,AR2"            )
(list "SHRD"             "reg64,reg64,imm"                            "[mri: o64 0f ac /r ib,u]"                       "X64,SM2,SB,AR2"            )
(list "SHRD"             "mem,reg16,reg_cl"                           "[mr-: o16 0f ad /r]"                            "386,SM"                    )
(list "SHRD"             "reg16,reg16,reg_cl"                         "[mr-: o16 0f ad /r]"                            "386"                       )
(list "SHRD"             "mem,reg32,reg_cl"                           "[mr-: o32 0f ad /r]"                            "386,SM"                    )
(list "SHRD"             "reg32,reg32,reg_cl"                         "[mr-: o32 0f ad /r]"                            "386"                       )
(list "SHRD"             "mem,reg64,reg_cl"                           "[mr-: o64 0f ad /r]"                            "X64,SM"                    )
(list "SHRD"             "reg64,reg64,reg_cl"                         "[mr-: o64 0f ad /r]"                            "X64"                       )
(list "SIDT"             "mem"                                        "[m: 0f 01 /1]"                                  "286"                       )
(list "SLDT"             "mem"                                        "[m: 0f 00 /0]"                                  "286"                       )
(list "SLDT"             "mem16"                                      "[m: 0f 00 /0]"                                  "286"                       )
(list "SLDT"             "reg16"                                      "[m: o16 0f 00 /0]"                              "286"                       )
(list "SLDT"             "reg32"                                      "[m: o32 0f 00 /0]"                              "386"                       )
(list "SLDT"             "reg64"                                      "[m: o64nw 0f 00 /0]"                            "X64,ND"                    )
(list "SLDT"             "reg64"                                      "[m: o64 0f 00 /0]"                              "X64"                       )
(list "SKINIT"           "void"                                       "[ 0f 01 de]"                                    "X64"                       )
(list "SMI"              "void"                                       "[ f1]"                                          "386,UNDOC"                 )
(list "SMINT"            "void"                                       "[ 0f 38]"                                       "P6,CYRIX,ND"               )
(list "SMINTOLD"         "void"                                       "[ 0f 7e]"                                       "486,CYRIX,ND"              )
(list "SMSW"             "mem"                                        "[m: 0f 01 /4]"                                  "286"                       )
(list "SMSW"             "mem16"                                      "[m: 0f 01 /4]"                                  "286"                       )
(list "SMSW"             "reg16"                                      "[m: o16 0f 01 /4]"                              "286"                       )
(list "SMSW"             "reg32"                                      "[m: o32 0f 01 /4]"                              "386"                       )
(list "STC"              "void"                                       "[ f9]"                                          "8086"                      )
(list "STD"              "void"                                       "[ fd]"                                          "8086"                      )
(list "STI"              "void"                                       "[ fb]"                                          "8086"                      )
(list "STOSB"            "void"                                       "[ aa]"                                          "8086"                      )
(list "STOSD"            "void"                                       "[ o32 ab]"                                      "386"                       )
(list "STOSQ"            "void"                                       "[ o64 ab]"                                      "X64"                       )
(list "STOSW"            "void"                                       "[ o16 ab]"                                      "8086"                      )
(list "STR"              "mem"                                        "[m: 0f 00 /1]"                                  "286,PROT"                  )
(list "STR"              "mem16"                                      "[m: 0f 00 /1]"                                  "286,PROT"                  )
(list "STR"              "reg16"                                      "[m: o16 0f 00 /1]"                              "286,PROT"                  )
(list "STR"              "reg32"                                      "[m: o32 0f 00 /1]"                              "386,PROT"                  )
(list "STR"              "reg64"                                      "[m: o64 0f 00 /1]"                              "X64"                       )
(list "SUB"              "mem,reg8"                                   "[mr: hle 28 /r]"                                "8086,SM,LOCK"              )
(list "SUB"              "reg8,reg8"                                  "[mr: 28 /r]"                                    "8086"                      )
(list "SUB"              "mem,reg16"                                  "[mr: hle o16 29 /r]"                            "8086,SM,LOCK"              )
(list "SUB"              "reg16,reg16"                                "[mr: o16 29 /r]"                                "8086"                      )
(list "SUB"              "mem,reg32"                                  "[mr: hle o32 29 /r]"                            "386,SM,LOCK"               )
(list "SUB"              "reg32,reg32"                                "[mr: o32 29 /r]"                                "386"                       )
(list "SUB"              "mem,reg64"                                  "[mr: hle o64 29 /r]"                            "X64,SM,LOCK"               )
(list "SUB"              "reg64,reg64"                                "[mr: o64 29 /r]"                                "X64"                       )
(list "SUB"              "reg8,mem"                                   "[rm: 2a /r]"                                    "8086,SM"                   )
(list "SUB"              "reg8,reg8"                                  "[rm: 2a /r]"                                    "8086"                      )
(list "SUB"              "reg16,mem"                                  "[rm: o16 2b /r]"                                "8086,SM"                   )
(list "SUB"              "reg16,reg16"                                "[rm: o16 2b /r]"                                "8086"                      )
(list "SUB"              "reg32,mem"                                  "[rm: o32 2b /r]"                                "386,SM"                    )
(list "SUB"              "reg32,reg32"                                "[rm: o32 2b /r]"                                "386"                       )
(list "SUB"              "reg64,mem"                                  "[rm: o64 2b /r]"                                "X64,SM"                    )
(list "SUB"              "reg64,reg64"                                "[rm: o64 2b /r]"                                "X64"                       )
(list "SUB"              "rm16,imm8"                                  "[mi: hle o16 83 /5 ib,s]"                       "8086,LOCK"                 )
(list "SUB"              "rm32,imm8"                                  "[mi: hle o32 83 /5 ib,s]"                       "386,LOCK"                  )
(list "SUB"              "rm64,imm8"                                  "[mi: hle o64 83 /5 ib,s]"                       "X64,LOCK"                  )
(list "SUB"              "reg_al,imm"                                 "[-i: 2c ib]"                                    "8086,SM"                   )
(list "SUB"              "reg_ax,sbyteword"                           "[mi: o16 83 /5 ib,s]"                           "8086,SM,ND"                )
(list "SUB"              "reg_ax,imm"                                 "[-i: o16 2d iw]"                                "8086,SM"                   )
(list "SUB"              "reg_eax,sbytedword"                         "[mi: o32 83 /5 ib,s]"                           "386,SM,ND"                 )
(list "SUB"              "reg_eax,imm"                                "[-i: o32 2d id]"                                "386,SM"                    )
(list "SUB"              "reg_rax,sbytedword"                         "[mi: o64 83 /5 ib,s]"                           "X64,SM,ND"                 )
(list "SUB"              "reg_rax,imm"                                "[-i: o64 2d id,s]"                              "X64,SM"                    )
(list "SUB"              "rm8,imm"                                    "[mi: hle 80 /5 ib]"                             "8086,SM,LOCK"              )
(list "SUB"              "rm16,sbyteword"                             "[mi: hle o16 83 /5 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "SUB"              "rm16,imm"                                   "[mi: hle o16 81 /5 iw]"                         "8086,SM,LOCK"              )
(list "SUB"              "rm32,sbytedword"                            "[mi: hle o32 83 /5 ib,s]"                       "386,SM,LOCK,ND"            )
(list "SUB"              "rm32,imm"                                   "[mi: hle o32 81 /5 id]"                         "386,SM,LOCK"               )
(list "SUB"              "rm64,sbytedword"                            "[mi: hle o64 83 /5 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "SUB"              "rm64,imm"                                   "[mi: hle o64 81 /5 id,s]"                       "X64,SM,LOCK"               )
(list "SUB"              "mem,imm8"                                   "[mi: hle 80 /5 ib]"                             "8086,SM,LOCK"              )
(list "SUB"              "mem,sbyteword16"                            "[mi: hle o16 83 /5 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "SUB"              "mem,imm16"                                  "[mi: hle o16 81 /5 iw]"                         "8086,SM,LOCK"              )
(list "SUB"              "mem,sbytedword32"                           "[mi: hle o32 83 /5 ib,s]"                       "386,SM,LOCK,ND"            )
(list "SUB"              "mem,imm32"                                  "[mi: hle o32 81 /5 id]"                         "386,SM,LOCK"               )
(list "SUB"              "rm8,imm"                                    "[mi: hle 82 /5 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "SVDC"             "mem80,reg_sreg"                             "[mr: 0f 78 /r]"                                 "486,CYRIX,SMM"             )
(list "SVLDT"            "mem80"                                      "[m: 0f 7a /0]"                                  "486,CYRIX,SMM,ND"          )
(list "SVTS"             "mem80"                                      "[m: 0f 7c /0]"                                  "486,CYRIX,SMM"             )
(list "SWAPGS"           "void"                                       "[ 0f 01 f8]"                                    "X64"                       )
(list "SYSCALL"          "void"                                       "[ 0f 05]"                                       "P6,AMD"                    )
(list "SYSENTER"         "void"                                       "[ 0f 34]"                                       "P6"                        )
(list "SYSEXIT"          "void"                                       "[ 0f 35]"                                       "P6,PRIV"                   )
(list "SYSRET"           "void"                                       "[ 0f 07]"                                       "P6,PRIV,AMD"               )
(list "TEST"             "mem,reg8"                                   "[mr: 84 /r]"                                    "8086,SM"                   )
(list "TEST"             "reg8,reg8"                                  "[mr: 84 /r]"                                    "8086"                      )
(list "TEST"             "mem,reg16"                                  "[mr: o16 85 /r]"                                "8086,SM"                   )
(list "TEST"             "reg16,reg16"                                "[mr: o16 85 /r]"                                "8086"                      )
(list "TEST"             "mem,reg32"                                  "[mr: o32 85 /r]"                                "386,SM"                    )
(list "TEST"             "reg32,reg32"                                "[mr: o32 85 /r]"                                "386"                       )
(list "TEST"             "mem,reg64"                                  "[mr: o64 85 /r]"                                "X64,SM"                    )
(list "TEST"             "reg64,reg64"                                "[mr: o64 85 /r]"                                "X64"                       )
(list "TEST"             "reg8,mem"                                   "[rm: 84 /r]"                                    "8086,SM"                   )
(list "TEST"             "reg16,mem"                                  "[rm: o16 85 /r]"                                "8086,SM"                   )
(list "TEST"             "reg32,mem"                                  "[rm: o32 85 /r]"                                "386,SM"                    )
(list "TEST"             "reg64,mem"                                  "[rm: o64 85 /r]"                                "X64,SM"                    )
(list "TEST"             "reg_al,imm"                                 "[-i: a8 ib]"                                    "8086,SM"                   )
(list "TEST"             "reg_ax,imm"                                 "[-i: o16 a9 iw]"                                "8086,SM"                   )
(list "TEST"             "reg_eax,imm"                                "[-i: o32 a9 id]"                                "386,SM"                    )
(list "TEST"             "reg_rax,imm"                                "[-i: o64 a9 id,s]"                              "X64,SM"                    )
(list "TEST"             "rm8,imm"                                    "[mi: f6 /0 ib]"                                 "8086,SM"                   )
(list "TEST"             "rm16,imm"                                   "[mi: o16 f7 /0 iw]"                             "8086,SM"                   )
(list "TEST"             "rm32,imm"                                   "[mi: o32 f7 /0 id]"                             "386,SM"                    )
(list "TEST"             "rm64,imm"                                   "[mi: o64 f7 /0 id,s]"                           "X64,SM"                    )
(list "TEST"             "mem,imm8"                                   "[mi: f6 /0 ib]"                                 "8086,SM"                   )
(list "TEST"             "mem,imm16"                                  "[mi: o16 f7 /0 iw]"                             "8086,SM"                   )
(list "TEST"             "mem,imm32"                                  "[mi: o32 f7 /0 id]"                             "386,SM"                    )
(list "UD0"              "void"                                       "[ 0f ff]"                                       "186,UNDOC"                 )
(list "UD1"              "void"                                       "[ 0f b9]"                                       "186,UNDOC"                 )
(list "UD2B"             "void"                                       "[ 0f b9]"                                       "186,UNDOC,ND"              )
(list "UD2"              "void"                                       "[ 0f 0b]"                                       "186"                       )
(list "UD2A"             "void"                                       "[ 0f 0b]"                                       "186,ND"                    )
(list "UMOV"             "mem,reg8"                                   "[mr: np 0f 10 /r]"                              "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg8,reg8"                                  "[mr: np 0f 10 /r]"                              "386,UNDOC,ND"              )
(list "UMOV"             "mem,reg16"                                  "[mr: np o16 0f 11 /r]"                          "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg16,reg16"                                "[mr: np o16 0f 11 /r]"                          "386,UNDOC,ND"              )
(list "UMOV"             "mem,reg32"                                  "[mr: np o32 0f 11 /r]"                          "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg32,reg32"                                "[mr: np o32 0f 11 /r]"                          "386,UNDOC,ND"              )
(list "UMOV"             "reg8,mem"                                   "[rm: np 0f 12 /r]"                              "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg8,reg8"                                  "[rm: np 0f 12 /r]"                              "386,UNDOC,ND"              )
(list "UMOV"             "reg16,mem"                                  "[rm: np o16 0f 13 /r]"                          "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg16,reg16"                                "[rm: np o16 0f 13 /r]"                          "386,UNDOC,ND"              )
(list "UMOV"             "reg32,mem"                                  "[rm: np o32 0f 13 /r]"                          "386,UNDOC,SM,ND"           )
(list "UMOV"             "reg32,reg32"                                "[rm: np o32 0f 13 /r]"                          "386,UNDOC,ND"              )
(list "VERR"             "mem"                                        "[m: 0f 00 /4]"                                  "286,PROT"                  )
(list "VERR"             "mem16"                                      "[m: 0f 00 /4]"                                  "286,PROT"                  )
(list "VERR"             "reg16"                                      "[m: 0f 00 /4]"                                  "286,PROT"                  )
(list "VERW"             "mem"                                        "[m: 0f 00 /5]"                                  "286,PROT"                  )
(list "VERW"             "mem16"                                      "[m: 0f 00 /5]"                                  "286,PROT"                  )
(list "VERW"             "reg16"                                      "[m: 0f 00 /5]"                                  "286,PROT"                  )
(list "FWAIT"            "void"                                       "[ wait]"                                        "8086"                      )
(list "WBINVD"           "void"                                       "[ 0f 09]"                                       "486,PRIV"                  )
(list "WRSHR"            "rm32"                                       "[m: o32 0f 37 /0]"                              "P6,CYRIX,SMM"              )
(list "WRMSR"            "void"                                       "[ 0f 30]"                                       "PENT,PRIV"                 )
(list "XADD"             "mem,reg8"                                   "[mr: hle 0f c0 /r]"                             "486,SM,LOCK"               )
(list "XADD"             "reg8,reg8"                                  "[mr: 0f c0 /r]"                                 "486"                       )
(list "XADD"             "mem,reg16"                                  "[mr: hle o16 0f c1 /r]"                         "486,SM,LOCK"               )
(list "XADD"             "reg16,reg16"                                "[mr: o16 0f c1 /r]"                             "486"                       )
(list "XADD"             "mem,reg32"                                  "[mr: hle o32 0f c1 /r]"                         "486,SM,LOCK"               )
(list "XADD"             "reg32,reg32"                                "[mr: o32 0f c1 /r]"                             "486"                       )
(list "XADD"             "mem,reg64"                                  "[mr: hle o64 0f c1 /r]"                         "X64,SM,LOCK"               )
(list "XADD"             "reg64,reg64"                                "[mr: o64 0f c1 /r]"                             "X64"                       )
(list "XBTS"             "reg16,mem"                                  "[rm: o16 0f a6 /r]"                             "386,SW,UNDOC,ND"           )
(list "XBTS"             "reg16,reg16"                                "[rm: o16 0f a6 /r]"                             "386,UNDOC,ND"              )
(list "XBTS"             "reg32,mem"                                  "[rm: o32 0f a6 /r]"                             "386,SD,UNDOC,ND"           )
(list "XBTS"             "reg32,reg32"                                "[rm: o32 0f a6 /r]"                             "386,UNDOC,ND"              )
(list "XCHG"             "reg_ax,reg16"                               "[-r: o16 90+r]"                                 "8086"                      )
(list "XCHG"             "reg_eax,reg32na"                            "[-r: o32 90+r]"                                 "386"                       )
(list "XCHG"             "reg_rax,reg64"                              "[-r: o64 90+r]"                                 "X64"                       )
(list "XCHG"             "reg16,reg_ax"                               "[r-: o16 90+r]"                                 "8086"                      )
(list "XCHG"             "reg32na,reg_eax"                            "[r-: o32 90+r]"                                 "386"                       )
(list "XCHG"             "reg64,reg_rax"                              "[r-: o64 90+r]"                                 "X64"                       )
(list "XCHG"             "reg_eax,reg_eax"                            "[--: o32 90]"                                   "386,NOLONG"                )
(list "XCHG"             "reg8,mem"                                   "[rm: hlenl 86 /r]"                              "8086,SM,LOCK"              )
(list "XCHG"             "reg8,reg8"                                  "[rm: 86 /r]"                                    "8086"                      )
(list "XCHG"             "reg16,mem"                                  "[rm: hlenl o16 87 /r]"                          "8086,SM,LOCK"              )
(list "XCHG"             "reg16,reg16"                                "[rm: o16 87 /r]"                                "8086"                      )
(list "XCHG"             "reg32,mem"                                  "[rm: hlenl o32 87 /r]"                          "386,SM,LOCK"               )
(list "XCHG"             "reg32,reg32"                                "[rm: o32 87 /r]"                                "386"                       )
(list "XCHG"             "reg64,mem"                                  "[rm: hlenl o64 87 /r]"                          "X64,SM,LOCK"               )
(list "XCHG"             "reg64,reg64"                                "[rm: o64 87 /r]"                                "X64"                       )
(list "XCHG"             "mem,reg8"                                   "[mr: hlenl 86 /r]"                              "8086,SM,LOCK"              )
(list "XCHG"             "reg8,reg8"                                  "[mr: 86 /r]"                                    "8086"                      )
(list "XCHG"             "mem,reg16"                                  "[mr: hlenl o16 87 /r]"                          "8086,SM,LOCK"              )
(list "XCHG"             "reg16,reg16"                                "[mr: o16 87 /r]"                                "8086"                      )
(list "XCHG"             "mem,reg32"                                  "[mr: hlenl o32 87 /r]"                          "386,SM,LOCK"               )
(list "XCHG"             "reg32,reg32"                                "[mr: o32 87 /r]"                                "386"                       )
(list "XCHG"             "mem,reg64"                                  "[mr: hlenl o64 87 /r]"                          "X64,SM,LOCK"               )
(list "XCHG"             "reg64,reg64"                                "[mr: o64 87 /r]"                                "X64"                       )
(list "XLATB"            "void"                                       "[ d7]"                                          "8086"                      )
(list "XLAT"             "void"                                       "[ d7]"                                          "8086"                      )
(list "XOR"              "mem,reg8"                                   "[mr: hle 30 /r]"                                "8086,SM,LOCK"              )
(list "XOR"              "reg8,reg8"                                  "[mr: 30 /r]"                                    "8086"                      )
(list "XOR"              "mem,reg16"                                  "[mr: hle o16 31 /r]"                            "8086,SM,LOCK"              )
(list "XOR"              "reg16,reg16"                                "[mr: o16 31 /r]"                                "8086"                      )
(list "XOR"              "mem,reg32"                                  "[mr: hle o32 31 /r]"                            "386,SM,LOCK"               )
(list "XOR"              "reg32,reg32"                                "[mr: o32 31 /r]"                                "386"                       )
(list "XOR"              "mem,reg64"                                  "[mr: hle o64 31 /r]"                            "X64,SM,LOCK"               )
(list "XOR"              "reg64,reg64"                                "[mr: o64 31 /r]"                                "X64"                       )
(list "XOR"              "reg8,mem"                                   "[rm: 32 /r]"                                    "8086,SM"                   )
(list "XOR"              "reg8,reg8"                                  "[rm: 32 /r]"                                    "8086"                      )
(list "XOR"              "reg16,mem"                                  "[rm: o16 33 /r]"                                "8086,SM"                   )
(list "XOR"              "reg16,reg16"                                "[rm: o16 33 /r]"                                "8086"                      )
(list "XOR"              "reg32,mem"                                  "[rm: o32 33 /r]"                                "386,SM"                    )
(list "XOR"              "reg32,reg32"                                "[rm: o32 33 /r]"                                "386"                       )
(list "XOR"              "reg64,mem"                                  "[rm: o64 33 /r]"                                "X64,SM"                    )
(list "XOR"              "reg64,reg64"                                "[rm: o64 33 /r]"                                "X64"                       )
(list "XOR"              "rm16,imm8"                                  "[mi: hle o16 83 /6 ib,s]"                       "8086,LOCK"                 )
(list "XOR"              "rm32,imm8"                                  "[mi: hle o32 83 /6 ib,s]"                       "386,LOCK"                  )
(list "XOR"              "rm64,imm8"                                  "[mi: hle o64 83 /6 ib,s]"                       "X64,LOCK"                  )
(list "XOR"              "reg_al,imm"                                 "[-i: 34 ib]"                                    "8086,SM"                   )
(list "XOR"              "reg_ax,sbyteword"                           "[mi: o16 83 /6 ib,s]"                           "8086,SM,ND"                )
(list "XOR"              "reg_ax,imm"                                 "[-i: o16 35 iw]"                                "8086,SM"                   )
(list "XOR"              "reg_eax,sbytedword"                         "[mi: o32 83 /6 ib,s]"                           "386,SM,ND"                 )
(list "XOR"              "reg_eax,imm"                                "[-i: o32 35 id]"                                "386,SM"                    )
(list "XOR"              "reg_rax,sbytedword"                         "[mi: o64 83 /6 ib,s]"                           "X64,SM,ND"                 )
(list "XOR"              "reg_rax,imm"                                "[-i: o64 35 id,s]"                              "X64,SM"                    )
(list "XOR"              "rm8,imm"                                    "[mi: hle 80 /6 ib]"                             "8086,SM,LOCK"              )
(list "XOR"              "rm16,sbyteword"                             "[mi: hle o16 83 /6 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "XOR"              "rm16,imm"                                   "[mi: hle o16 81 /6 iw]"                         "8086,SM,LOCK"              )
(list "XOR"              "rm32,sbytedword"                            "[mi: hle o32 83 /6 ib,s]"                       "386,SM,LOCK,ND"            )
(list "XOR"              "rm32,imm"                                   "[mi: hle o32 81 /6 id]"                         "386,SM,LOCK"               )
(list "XOR"              "rm64,sbytedword"                            "[mi: hle o64 83 /6 ib,s]"                       "X64,SM,LOCK,ND"            )
(list "XOR"              "rm64,imm"                                   "[mi: hle o64 81 /6 id,s]"                       "X64,SM,LOCK"               )
(list "XOR"              "mem,imm8"                                   "[mi: hle 80 /6 ib]"                             "8086,SM,LOCK"              )
(list "XOR"              "mem,sbyteword16"                            "[mi: hle o16 83 /6 ib,s]"                       "8086,SM,LOCK,ND"           )
(list "XOR"              "mem,imm16"                                  "[mi: hle o16 81 /6 iw]"                         "8086,SM,LOCK"              )
(list "XOR"              "mem,sbytedword32"                           "[mi: hle o32 83 /6 ib,s]"                       "386,SM,LOCK,ND"            )
(list "XOR"              "mem,imm32"                                  "[mi: hle o32 81 /6 id]"                         "386,SM,LOCK"               )
(list "XOR"              "rm8,imm"                                    "[mi: hle 82 /6 ib]"                             "8086,SM,LOCK,ND,NOLONG"    )
(list "CMOVcc"           "reg16,mem"                                  "[rm: o16 0f 40+c /r]"                           "P6,SM"                     )
(list "CMOVcc"           "reg16,reg16"                                "[rm: o16 0f 40+c /r]"                           "P6"                        )
(list "CMOVcc"           "reg32,mem"                                  "[rm: o32 0f 40+c /r]"                           "P6,SM"                     )
(list "CMOVcc"           "reg32,reg32"                                "[rm: o32 0f 40+c /r]"                           "P6"                        )
(list "CMOVcc"           "reg64,mem"                                  "[rm: o64 0f 40+c /r]"                           "X64,SM"                    )
(list "CMOVcc"           "reg64,reg64"                                "[rm: o64 0f 40+c /r]"                           "X64"                       )
(list "Jcc"              "imm|near"                                   "[i: odf 0f 80+c rel]"                           "386,BND"                   )
(list "Jcc"              "imm16|near"                                 "[i: o16 0f 80+c rel]"                           "386,NOLONG,BND"            )
(list "Jcc"              "imm32|near"                                 "[i: o32 0f 80+c rel]"                           "386,NOLONG,BND"            )
(list "Jcc"              "imm64|near"                                 "[i: o64nw 0f 80+c rel]"                         "X64,BND"                   )
(list "Jcc"              "imm|short"                                  "[i: 70+c rel8]"                                 "8086,ND,BND"               )
(list "Jcc"              "imm"                                        "[i: jcc8 70+c rel8]"                            "8086,ND,BND"               )
(list "Jcc"              "imm"                                        "[i: 0f 80+c rel]"                               "386,ND,BND"                )
(list "Jcc"              "imm"                                        "[i: 71+c jlen e9 rel]"                          "8086,ND,BND"               )
(list "Jcc"              "imm"                                        "[i: 70+c rel8]"                                 "8086,BND"                  )
(list "SETcc"            "mem"                                        "[m: 0f 90+c /0]"                                "386,SB"                    )
(list "SETcc"            "reg8"                                       "[m: 0f 90+c /0]"                                "386"                       )
(list "ADDPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 58 /r]"                              "KATMAI,SSE"                )
(list "ADDSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 58 /r]"                              "KATMAI,SSE"                )
(list "ANDNPS"           "xmmreg,xmmrm128"                            "[rm: np 0f 55 /r]"                              "KATMAI,SSE"                )
(list "ANDPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 54 /r]"                              "KATMAI,SSE"                )
(list "CMPEQPS"          "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 00]"                           "KATMAI,SSE"                )
(list "CMPEQSS"          "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 00]"                           "KATMAI,SSE"                )
(list "CMPLEPS"          "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 02]"                           "KATMAI,SSE"                )
(list "CMPLESS"          "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 02]"                           "KATMAI,SSE"                )
(list "CMPLTPS"          "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 01]"                           "KATMAI,SSE"                )
(list "CMPLTSS"          "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 01]"                           "KATMAI,SSE"                )
(list "CMPNEQPS"         "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 04]"                           "KATMAI,SSE"                )
(list "CMPNEQSS"         "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 04]"                           "KATMAI,SSE"                )
(list "CMPNLEPS"         "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 06]"                           "KATMAI,SSE"                )
(list "CMPNLESS"         "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 06]"                           "KATMAI,SSE"                )
(list "CMPNLTPS"         "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 05]"                           "KATMAI,SSE"                )
(list "CMPNLTSS"         "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 05]"                           "KATMAI,SSE"                )
(list "CMPORDPS"         "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 07]"                           "KATMAI,SSE"                )
(list "CMPORDSS"         "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 07]"                           "KATMAI,SSE"                )
(list "CMPUNORDPS"       "xmmreg,xmmrm128"                            "[rm: np 0f c2 /r 03]"                           "KATMAI,SSE"                )
(list "CMPUNORDSS"       "xmmreg,xmmrm32"                             "[rm: f3 0f c2 /r 03]"                           "KATMAI,SSE"                )
(list "CMPPS"            "xmmreg,mem,imm"                             "[rmi: np 0f c2 /r ib,u]"                        "KATMAI,SSE,SB,AR2"         )
(list "CMPPS"            "xmmreg,xmmreg,imm"                          "[rmi: np 0f c2 /r ib,u]"                        "KATMAI,SSE,SB,AR2"         )
(list "CMPSS"            "xmmreg,mem,imm"                             "[rmi: f3 0f c2 /r ib,u]"                        "KATMAI,SSE,SB,AR2"         )
(list "CMPSS"            "xmmreg,xmmreg,imm"                          "[rmi: f3 0f c2 /r ib,u]"                        "KATMAI,SSE,SB,AR2"         )
(list "COMISS"           "xmmreg,xmmrm32"                             "[rm: np 0f 2f /r]"                              "KATMAI,SSE"                )
(list "CVTPI2PS"         "xmmreg,mmxrm64"                             "[rm: np 0f 2a /r]"                              "KATMAI,SSE,MMX"            )
(list "CVTPS2PI"         "mmxreg,xmmrm64"                             "[rm: np 0f 2d /r]"                              "KATMAI,SSE,MMX"            )
(list "CVTSI2SS"         "xmmreg,mem"                                 "[rm: f3 0f 2a /r]"                              "KATMAI,SSE,SD,AR1,ND"      )
(list "CVTSI2SS"         "xmmreg,rm32"                                "[rm: f3 0f 2a /r]"                              "KATMAI,SSE,SD,AR1"         )
(list "CVTSI2SS"         "xmmreg,rm64"                                "[rm: o64 f3 0f 2a /r]"                          "X64,SSE,SQ,AR1"            )
(list "CVTSS2SI"         "reg32,xmmreg"                               "[rm: f3 0f 2d /r]"                              "KATMAI,SSE,SD,AR1"         )
(list "CVTSS2SI"         "reg32,mem"                                  "[rm: f3 0f 2d /r]"                              "KATMAI,SSE,SD,AR1"         )
(list "CVTSS2SI"         "reg64,xmmreg"                               "[rm: o64 f3 0f 2d /r]"                          "X64,SSE,SD,AR1"            )
(list "CVTSS2SI"         "reg64,mem"                                  "[rm: o64 f3 0f 2d /r]"                          "X64,SSE,SD,AR1"            )
(list "CVTTPS2PI"        "mmxreg,xmmrm"                               "[rm: np 0f 2c /r]"                              "KATMAI,SSE,MMX,SQ"         )
(list "CVTTSS2SI"        "reg32,xmmrm"                                "[rm: f3 0f 2c /r]"                              "KATMAI,SSE,SD,AR1"         )
(list "CVTTSS2SI"        "reg64,xmmrm"                                "[rm: o64 f3 0f 2c /r]"                          "X64,SSE,SD,AR1"            )
(list "DIVPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 5e /r]"                              "KATMAI,SSE"                )
(list "DIVSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 5e /r]"                              "KATMAI,SSE"                )
(list "LDMXCSR"          "mem32"                                      "[m: np 0f ae /2]"                               "KATMAI,SSE"                )
(list "MAXPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 5f /r]"                              "KATMAI,SSE"                )
(list "MAXSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 5f /r]"                              "KATMAI,SSE"                )
(list "MINPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 5d /r]"                              "KATMAI,SSE"                )
(list "MINSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 5d /r]"                              "KATMAI,SSE"                )
(list "MOVAPS"           "xmmreg,xmmrm128"                            "[rm: np 0f 28 /r]"                              "KATMAI,SSE"                )
(list "MOVAPS"           "xmmrm128,xmmreg"                            "[mr: np 0f 29 /r]"                              "KATMAI,SSE"                )
(list "MOVHPS"           "xmmreg,mem64"                               "[rm: np 0f 16 /r]"                              "KATMAI,SSE"                )
(list "MOVHPS"           "mem64,xmmreg"                               "[mr: np 0f 17 /r]"                              "KATMAI,SSE"                )
(list "MOVLHPS"          "xmmreg,xmmreg"                              "[rm: np 0f 16 /r]"                              "KATMAI,SSE"                )
(list "MOVLPS"           "xmmreg,mem64"                               "[rm: np 0f 12 /r]"                              "KATMAI,SSE"                )
(list "MOVLPS"           "mem64,xmmreg"                               "[mr: np 0f 13 /r]"                              "KATMAI,SSE"                )
(list "MOVHLPS"          "xmmreg,xmmreg"                              "[rm: np 0f 12 /r]"                              "KATMAI,SSE"                )
(list "MOVMSKPS"         "reg32,xmmreg"                               "[rm: np 0f 50 /r]"                              "KATMAI,SSE"                )
(list "MOVMSKPS"         "reg64,xmmreg"                               "[rm: np o64 0f 50 /r]"                          "X64,SSE"                   )
(list "MOVNTPS"          "mem128,xmmreg"                              "[mr: np 0f 2b /r]"                              "KATMAI,SSE"                )
(list "MOVSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 10 /r]"                              "KATMAI,SSE"                )
(list "MOVSS"            "mem32,xmmreg"                               "[mr: f3 0f 11 /r]"                              "KATMAI,SSE"                )
(list "MOVSS"            "xmmreg,xmmreg"                              "[rm: f3 0f 10 /r]"                              "KATMAI,SSE"                )
(list "MOVUPS"           "xmmreg,xmmrm128"                            "[rm: np 0f 10 /r]"                              "KATMAI,SSE"                )
(list "MOVUPS"           "xmmrm128,xmmreg"                            "[mr: np 0f 11 /r]"                              "KATMAI,SSE"                )
(list "MULPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 59 /r]"                              "KATMAI,SSE"                )
(list "MULSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 59 /r]"                              "KATMAI,SSE"                )
(list "ORPS"             "xmmreg,xmmrm128"                            "[rm: np 0f 56 /r]"                              "KATMAI,SSE"                )
(list "RCPPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 53 /r]"                              "KATMAI,SSE"                )
(list "RCPSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 53 /r]"                              "KATMAI,SSE"                )
(list "RSQRTPS"          "xmmreg,xmmrm128"                            "[rm: np 0f 52 /r]"                              "KATMAI,SSE"                )
(list "RSQRTSS"          "xmmreg,xmmrm32"                             "[rm: f3 0f 52 /r]"                              "KATMAI,SSE"                )
(list "SHUFPS"           "xmmreg,xmmrm128,imm8"                       "[rmi: np 0f c6 /r ib,u]"                        "KATMAI,SSE"                )
(list "SQRTPS"           "xmmreg,xmmrm128"                            "[rm: np 0f 51 /r]"                              "KATMAI,SSE"                )
(list "SQRTSS"           "xmmreg,xmmrm32"                             "[rm: f3 0f 51 /r]"                              "KATMAI,SSE"                )
(list "STMXCSR"          "mem32"                                      "[m: np 0f ae /3]"                               "KATMAI,SSE"                )
(list "SUBPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 5c /r]"                              "KATMAI,SSE"                )
(list "SUBSS"            "xmmreg,xmmrm32"                             "[rm: f3 0f 5c /r]"                              "KATMAI,SSE"                )
(list "UCOMISS"          "xmmreg,xmmrm32"                             "[rm: np 0f 2e /r]"                              "KATMAI,SSE"                )
(list "UNPCKHPS"         "xmmreg,xmmrm128"                            "[rm: np 0f 15 /r]"                              "KATMAI,SSE"                )
(list "UNPCKLPS"         "xmmreg,xmmrm128"                            "[rm: np 0f 14 /r]"                              "KATMAI,SSE"                )
(list "XORPS"            "xmmreg,xmmrm128"                            "[rm: np 0f 57 /r]"                              "KATMAI,SSE"                )
(list "FXRSTOR"          "mem"                                        "[m: np 0f ae /1]"                               "P6,SSE,FPU"                )
(list "FXRSTOR64"        "mem"                                        "[m: o64 np 0f ae /1]"                           "X64,SSE,FPU"               )
(list "FXSAVE"           "mem"                                        "[m: np 0f ae /0]"                               "P6,SSE,FPU"                )
(list "FXSAVE64"         "mem"                                        "[m: o64 np 0f ae /0]"                           "X64,SSE,FPU"               )
(list "XGETBV"           "void"                                       "[ 0f 01 d0]"                                    "NEHALEM"                   )
(list "XSETBV"           "void"                                       "[ 0f 01 d1]"                                    "NEHALEM,PRIV"              )
(list "XSAVE"            "mem"                                        "[m: np 0f ae /4]"                               "NEHALEM"                   )
(list "XSAVE64"          "mem"                                        "[m: o64 np 0f ae /4]"                           "LONG,NEHALEM"              )
(list "XSAVEC"           "mem"                                        "[m: np 0f c7 /4]"                               "FUTURE"                    )
(list "XSAVEC64"         "mem"                                        "[m: o64 np 0f c7 /4]"                           "LONG,FUTURE"               )
(list "XSAVEOPT"         "mem"                                        "[m: np 0f ae /6]"                               "FUTURE"                    )
(list "XSAVEOPT64"       "mem"                                        "[m: o64 np 0f ae /6]"                           "LONG,FUTURE"               )
(list "XSAVES"           "mem"                                        "[m: np 0f c7 /5]"                               "FUTURE"                    )
(list "XSAVES64"         "mem"                                        "[m: o64 np 0f c7 /5]"                           "LONG,FUTURE"               )
(list "XRSTOR"           "mem"                                        "[m: np 0f ae /5]"                               "NEHALEM"                   )
(list "XRSTOR64"         "mem"                                        "[m: o64 np 0f ae /5]"                           "LONG,NEHALEM"              )
(list "XRSTORS"          "mem"                                        "[m: np 0f c7 /3]"                               "FUTURE"                    )
(list "XRSTORS64"        "mem"                                        "[m: o64 np 0f c7 /3]"                           "LONG,FUTURE"               )
(list "PREFETCHNTA"      "mem8"                                       "[m: 0f 18 /0]"                                  "KATMAI"                    )
(list "PREFETCHT0"       "mem8"                                       "[m: 0f 18 /1]"                                  "KATMAI"                    )
(list "PREFETCHT1"       "mem8"                                       "[m: 0f 18 /2]"                                  "KATMAI"                    )
(list "PREFETCHT2"       "mem8"                                       "[m: 0f 18 /3]"                                  "KATMAI"                    )
(list "SFENCE"           "void"                                       "[ np 0f ae f8]"                                 "KATMAI"                    )
(list "MASKMOVQ"         "mmxreg,mmxreg"                              "[rm: np 0f f7 /r]"                              "KATMAI,MMX"                )
(list "MOVNTQ"           "mem,mmxreg"                                 "[mr: np 0f e7 /r]"                              "KATMAI,MMX,SQ"             )
(list "PAVGB"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f e0 /r]"                        "KATMAI,MMX,SQ"             )
(list "PAVGW"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f e3 /r]"                        "KATMAI,MMX,SQ"             )
(list "PEXTRW"           "reg32,mmxreg,imm"                           "[rmi: np 0f c5 /r ib,u]"                        "KATMAI,MMX,SB,AR2"         )
(list "PINSRW"           "mmxreg,mem,imm"                             "[rmi: np 0f c4 /r ib,u]"                        "KATMAI,MMX,SB,AR2"         )
(list "PINSRW"           "mmxreg,rm16,imm"                            "[rmi: np 0f c4 /r ib,u]"                        "KATMAI,MMX,SB,AR2"         )
(list "PINSRW"           "mmxreg,reg32,imm"                           "[rmi: np 0f c4 /r ib,u]"                        "KATMAI,MMX,SB,AR2"         )
(list "PMAXSW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f ee /r]"                        "KATMAI,MMX,SQ"             )
(list "PMAXUB"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f de /r]"                        "KATMAI,MMX,SQ"             )
(list "PMINSW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f ea /r]"                        "KATMAI,MMX,SQ"             )
(list "PMINUB"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f da /r]"                        "KATMAI,MMX,SQ"             )
(list "PMOVMSKB"         "reg32,mmxreg"                               "[rm: np 0f d7 /r]"                              "KATMAI,MMX"                )
(list "PMULHUW"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f e4 /r]"                        "KATMAI,MMX,SQ"             )
(list "PSADBW"           "mmxreg,mmxrm"                               "[rm: np o64nw 0f f6 /r]"                        "KATMAI,MMX,SQ"             )
(list "PSHUFW"           "mmxreg,mmxrm,imm"                           "[rmi: np o64nw 0f 70 /r ib]"                    "KATMAI,MMX,SM2,SB,AR2"     )
(list "PF2IW"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 1c]"                        "PENT,3DNOW,SQ"             )
(list "PFNACC"           "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 8a]"                        "PENT,3DNOW,SQ"             )
(list "PFPNACC"          "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 8e]"                        "PENT,3DNOW,SQ"             )
(list "PI2FW"            "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 0c]"                        "PENT,3DNOW,SQ"             )
(list "PSWAPD"           "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r bb]"                        "PENT,3DNOW,SQ"             )
(list "MASKMOVDQU"       "xmmreg,xmmreg"                              "[rm: 66 0f f7 /r]"                              "WILLAMETTE,SSE2"           )
(list "CLFLUSH"          "mem"                                        "[m: np 0f ae /7]"                               "WILLAMETTE,SSE2"           )
(list "MOVNTDQ"          "mem,xmmreg"                                 "[mr: 66 0f e7 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVNTI"           "mem,reg32"                                  "[mr: np 0f c3 /r]"                              "WILLAMETTE,SD"             )
(list "MOVNTI"           "mem,reg64"                                  "[mr: o64 np 0f c3 /r]"                          "X64,SQ"                    )
(list "MOVNTPD"          "mem,xmmreg"                                 "[mr: 66 0f 2b /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "LFENCE"           "void"                                       "[ np 0f ae e8]"                                 "WILLAMETTE,SSE2"           )
(list "MFENCE"           "void"                                       "[ np 0f ae f0]"                                 "WILLAMETTE,SSE2"           )
(list "MOVD"             "mem,xmmreg"                                 "[mr: 66 norexw 0f 7e /r]"                       "WILLAMETTE,SSE2,SD"        )
(list "MOVD"             "xmmreg,mem"                                 "[rm: 66 norexw 0f 6e /r]"                       "WILLAMETTE,SSE2,SD"        )
(list "MOVD"             "xmmreg,rm32"                                "[rm: 66 norexw 0f 6e /r]"                       "WILLAMETTE,SSE2"           )
(list "MOVD"             "rm32,xmmreg"                                "[mr: 66 norexw 0f 7e /r]"                       "WILLAMETTE,SSE2"           )
(list "MOVDQA"           "xmmreg,xmmreg"                              "[rm: 66 0f 6f /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVDQA"           "mem,xmmreg"                                 "[mr: 66 0f 7f /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVDQA"           "xmmreg,mem"                                 "[rm: 66 0f 6f /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVDQA"           "xmmreg,xmmreg"                              "[mr: 66 0f 7f /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVDQU"           "xmmreg,xmmreg"                              "[rm: f3 0f 6f /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVDQU"           "mem,xmmreg"                                 "[mr: f3 0f 7f /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVDQU"           "xmmreg,mem"                                 "[rm: f3 0f 6f /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVDQU"           "xmmreg,xmmreg"                              "[mr: f3 0f 7f /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVDQ2Q"          "mmxreg,xmmreg"                              "[rm: f2 0f d6 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVQ"             "xmmreg,xmmreg"                              "[rm: f3 0f 7e /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVQ"             "xmmreg,xmmreg"                              "[mr: 66 0f d6 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVQ"             "mem,xmmreg"                                 "[mr: 66 0f d6 /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "MOVQ"             "xmmreg,mem"                                 "[rm: f3 0f 7e /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "MOVQ"             "xmmreg,rm64"                                "[rm: 66 o64 0f 6e /r]"                          "X64,SSE2"                  )
(list "MOVQ"             "rm64,xmmreg"                                "[mr: 66 o64 0f 7e /r]"                          "X64,SSE2"                  )
(list "MOVQ2DQ"          "xmmreg,mmxreg"                              "[rm: f3 0f d6 /r]"                              "WILLAMETTE,SSE2"           )
(list "PACKSSWB"         "xmmreg,xmmrm"                               "[rm: 66 0f 63 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PACKSSDW"         "xmmreg,xmmrm"                               "[rm: 66 0f 6b /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PACKUSWB"         "xmmreg,xmmrm"                               "[rm: 66 0f 67 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDB"            "xmmreg,xmmrm"                               "[rm: 66 0f fc /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDW"            "xmmreg,xmmrm"                               "[rm: 66 0f fd /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDD"            "xmmreg,xmmrm"                               "[rm: 66 0f fe /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDQ"            "mmxreg,mmxrm"                               "[rm: np 0f d4 /r]"                              "WILLAMETTE,MMX,SQ"         )
(list "PADDQ"            "xmmreg,xmmrm"                               "[rm: 66 0f d4 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDSB"           "xmmreg,xmmrm"                               "[rm: 66 0f ec /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDSW"           "xmmreg,xmmrm"                               "[rm: 66 0f ed /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDUSB"          "xmmreg,xmmrm"                               "[rm: 66 0f dc /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PADDUSW"          "xmmreg,xmmrm"                               "[rm: 66 0f dd /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PAND"             "xmmreg,xmmrm"                               "[rm: 66 0f db /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PANDN"            "xmmreg,xmmrm"                               "[rm: 66 0f df /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PAVGB"            "xmmreg,xmmrm"                               "[rm: 66 0f e0 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PAVGW"            "xmmreg,xmmrm"                               "[rm: 66 0f e3 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPEQB"          "xmmreg,xmmrm"                               "[rm: 66 0f 74 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPEQW"          "xmmreg,xmmrm"                               "[rm: 66 0f 75 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPEQD"          "xmmreg,xmmrm"                               "[rm: 66 0f 76 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPGTB"          "xmmreg,xmmrm"                               "[rm: 66 0f 64 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPGTW"          "xmmreg,xmmrm"                               "[rm: 66 0f 65 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PCMPGTD"          "xmmreg,xmmrm"                               "[rm: 66 0f 66 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PEXTRW"           "reg32,xmmreg,imm"                           "[rmi: 66 0f c5 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2"    )
(list "PINSRW"           "xmmreg,reg16,imm"                           "[rmi: 66 0f c4 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2"    )
(list "PINSRW"           "xmmreg,reg32,imm"                           "[rmi: 66 0f c4 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2,ND" )
(list "PINSRW"           "xmmreg,mem,imm"                             "[rmi: 66 0f c4 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2"    )
(list "PINSRW"           "xmmreg,mem16,imm"                           "[rmi: 66 0f c4 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2"    )
(list "PMADDWD"          "xmmreg,xmmrm"                               "[rm: 66 0f f5 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMAXSW"           "xmmreg,xmmrm"                               "[rm: 66 0f ee /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMAXUB"           "xmmreg,xmmrm"                               "[rm: 66 0f de /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMINSW"           "xmmreg,xmmrm"                               "[rm: 66 0f ea /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMINUB"           "xmmreg,xmmrm"                               "[rm: 66 0f da /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMOVMSKB"         "reg32,xmmreg"                               "[rm: 66 0f d7 /r]"                              "WILLAMETTE,SSE2"           )
(list "PMULHUW"          "xmmreg,xmmrm"                               "[rm: 66 0f e4 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMULHW"           "xmmreg,xmmrm"                               "[rm: 66 0f e5 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMULLW"           "xmmreg,xmmrm"                               "[rm: 66 0f d5 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PMULUDQ"          "mmxreg,mmxrm"                               "[rm: np o64nw 0f f4 /r]"                        "WILLAMETTE,SSE2,SO"        )
(list "PMULUDQ"          "xmmreg,xmmrm"                               "[rm: 66 0f f4 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "POR"              "xmmreg,xmmrm"                               "[rm: 66 0f eb /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSADBW"           "xmmreg,xmmrm"                               "[rm: 66 0f f6 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSHUFD"           "xmmreg,xmmreg,imm"                          "[rmi: 66 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SB,AR2"    )
(list "PSHUFD"           "xmmreg,mem,imm"                             "[rmi: 66 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SM2,SB,AR2")
(list "PSHUFHW"          "xmmreg,xmmreg,imm"                          "[rmi: f3 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SB,AR2"    )
(list "PSHUFHW"          "xmmreg,mem,imm"                             "[rmi: f3 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SM2,SB,AR2")
(list "PSHUFLW"          "xmmreg,xmmreg,imm"                          "[rmi: f2 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SB,AR2"    )
(list "PSHUFLW"          "xmmreg,mem,imm"                             "[rmi: f2 0f 70 /r ib]"                          "WILLAMETTE,SSE2,SM2,SB,AR2")
(list "PSLLDQ"           "xmmreg,imm"                                 "[mi: 66 0f 73 /7 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSLLW"            "xmmreg,xmmrm"                               "[rm: 66 0f f1 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSLLW"            "xmmreg,imm"                                 "[mi: 66 0f 71 /6 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSLLD"            "xmmreg,xmmrm"                               "[rm: 66 0f f2 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSLLD"            "xmmreg,imm"                                 "[mi: 66 0f 72 /6 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSLLQ"            "xmmreg,xmmrm"                               "[rm: 66 0f f3 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSLLQ"            "xmmreg,imm"                                 "[mi: 66 0f 73 /6 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRAW"            "xmmreg,xmmrm"                               "[rm: 66 0f e1 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSRAW"            "xmmreg,imm"                                 "[mi: 66 0f 71 /4 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRAD"            "xmmreg,xmmrm"                               "[rm: 66 0f e2 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSRAD"            "xmmreg,imm"                                 "[mi: 66 0f 72 /4 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRLDQ"           "xmmreg,imm"                                 "[mi: 66 0f 73 /3 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRLW"            "xmmreg,xmmrm"                               "[rm: 66 0f d1 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSRLW"            "xmmreg,imm"                                 "[mi: 66 0f 71 /2 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRLD"            "xmmreg,xmmrm"                               "[rm: 66 0f d2 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSRLD"            "xmmreg,imm"                                 "[mi: 66 0f 72 /2 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSRLQ"            "xmmreg,xmmrm"                               "[rm: 66 0f d3 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSRLQ"            "xmmreg,imm"                                 "[mi: 66 0f 73 /2 ib,u]"                         "WILLAMETTE,SSE2,SB,AR1"    )
(list "PSUBB"            "xmmreg,xmmrm"                               "[rm: 66 0f f8 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBW"            "xmmreg,xmmrm"                               "[rm: 66 0f f9 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBD"            "xmmreg,xmmrm"                               "[rm: 66 0f fa /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBQ"            "mmxreg,mmxrm"                               "[rm: np o64nw 0f fb /r]"                        "WILLAMETTE,SSE2,SO"        )
(list "PSUBQ"            "xmmreg,xmmrm"                               "[rm: 66 0f fb /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBSB"           "xmmreg,xmmrm"                               "[rm: 66 0f e8 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBSW"           "xmmreg,xmmrm"                               "[rm: 66 0f e9 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBUSB"          "xmmreg,xmmrm"                               "[rm: 66 0f d8 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PSUBUSW"          "xmmreg,xmmrm"                               "[rm: 66 0f d9 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKHBW"        "xmmreg,xmmrm"                               "[rm: 66 0f 68 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKHWD"        "xmmreg,xmmrm"                               "[rm: 66 0f 69 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKHDQ"        "xmmreg,xmmrm"                               "[rm: 66 0f 6a /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKHQDQ"       "xmmreg,xmmrm"                               "[rm: 66 0f 6d /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKLBW"        "xmmreg,xmmrm"                               "[rm: 66 0f 60 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKLWD"        "xmmreg,xmmrm"                               "[rm: 66 0f 61 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKLDQ"        "xmmreg,xmmrm"                               "[rm: 66 0f 62 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PUNPCKLQDQ"       "xmmreg,xmmrm"                               "[rm: 66 0f 6c /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "PXOR"             "xmmreg,xmmrm"                               "[rm: 66 0f ef /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "ADDPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 58 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "ADDSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 58 /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "ANDNPD"           "xmmreg,xmmrm"                               "[rm: 66 0f 55 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "ANDPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 54 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CMPEQPD"          "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 00]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPEQSD"          "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 00]"                           "WILLAMETTE,SSE2"           )
(list "CMPLEPD"          "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 02]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPLESD"          "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 02]"                           "WILLAMETTE,SSE2"           )
(list "CMPLTPD"          "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 01]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPLTSD"          "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 01]"                           "WILLAMETTE,SSE2"           )
(list "CMPNEQPD"         "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 04]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPNEQSD"         "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 04]"                           "WILLAMETTE,SSE2"           )
(list "CMPNLEPD"         "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 06]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPNLESD"         "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 06]"                           "WILLAMETTE,SSE2"           )
(list "CMPNLTPD"         "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 05]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPNLTSD"         "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 05]"                           "WILLAMETTE,SSE2"           )
(list "CMPORDPD"         "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 07]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPORDSD"         "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 07]"                           "WILLAMETTE,SSE2"           )
(list "CMPUNORDPD"       "xmmreg,xmmrm"                               "[rm: 66 0f c2 /r 03]"                           "WILLAMETTE,SSE2,SO"        )
(list "CMPUNORDSD"       "xmmreg,xmmrm"                               "[rm: f2 0f c2 /r 03]"                           "WILLAMETTE,SSE2"           )
(list "CMPPD"            "xmmreg,xmmrm128,imm8"                       "[rmi: 66 0f c2 /r ib,u]"                        "WILLAMETTE,SSE2"           )
(list "CMPSD"            "xmmreg,xmmrm128,imm8"                       "[rmi: f2 0f c2 /r ib,u]"                        "WILLAMETTE,SSE2"           )
(list "COMISD"           "xmmreg,xmmrm"                               "[rm: 66 0f 2f /r]"                              "WILLAMETTE,SSE2"           )
(list "CVTDQ2PD"         "xmmreg,xmmrm"                               "[rm: f3 0f e6 /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "CVTDQ2PS"         "xmmreg,xmmrm"                               "[rm: np 0f 5b /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTPD2DQ"         "xmmreg,xmmrm"                               "[rm: f2 0f e6 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTPD2PI"         "mmxreg,xmmrm"                               "[rm: 66 0f 2d /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTPD2PS"         "xmmreg,xmmrm"                               "[rm: 66 0f 5a /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTPI2PD"         "xmmreg,mmxrm"                               "[rm: 66 0f 2a /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "CVTPS2DQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 5b /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTPS2PD"         "xmmreg,xmmrm"                               "[rm: np 0f 5a /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "CVTSD2SI"         "reg32,xmmreg"                               "[rm: norexw f2 0f 2d /r]"                       "WILLAMETTE,SSE2,SQ,AR1"    )
(list "CVTSD2SI"         "reg32,mem"                                  "[rm: norexw f2 0f 2d /r]"                       "WILLAMETTE,SSE2,SQ,AR1"    )
(list "CVTSD2SI"         "reg64,xmmreg"                               "[rm: o64 f2 0f 2d /r]"                          "X64,SSE2,SQ,AR1"           )
(list "CVTSD2SI"         "reg64,mem"                                  "[rm: o64 f2 0f 2d /r]"                          "X64,SSE2,SQ,AR1"           )
(list "CVTSD2SS"         "xmmreg,xmmrm"                               "[rm: f2 0f 5a /r]"                              "WILLAMETTE,SSE2,SQ"        )
(list "CVTSI2SD"         "xmmreg,mem"                                 "[rm: f2 0f 2a /r]"                              "WILLAMETTE,SSE2,SD,AR1,ND" )
(list "CVTSI2SD"         "xmmreg,rm32"                                "[rm: norexw f2 0f 2a /r]"                       "WILLAMETTE,SSE2,SD,AR1"    )
(list "CVTSI2SD"         "xmmreg,rm64"                                "[rm: o64 f2 0f 2a /r]"                          "X64,SSE2,SQ,AR1"           )
(list "CVTSS2SD"         "xmmreg,xmmrm"                               "[rm: f3 0f 5a /r]"                              "WILLAMETTE,SSE2,SD"        )
(list "CVTTPD2PI"        "mmxreg,xmmrm"                               "[rm: 66 0f 2c /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTTPD2DQ"        "xmmreg,xmmrm"                               "[rm: 66 0f e6 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTTPS2DQ"        "xmmreg,xmmrm"                               "[rm: f3 0f 5b /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "CVTTSD2SI"        "reg32,xmmreg"                               "[rm: norexw f2 0f 2c /r]"                       "WILLAMETTE,SSE2,SQ,AR1"    )
(list "CVTTSD2SI"        "reg32,mem"                                  "[rm: norexw f2 0f 2c /r]"                       "WILLAMETTE,SSE2,SQ,AR1"    )
(list "CVTTSD2SI"        "reg64,xmmreg"                               "[rm: o64 f2 0f 2c /r]"                          "X64,SSE2,SQ,AR1"           )
(list "CVTTSD2SI"        "reg64,mem"                                  "[rm: o64 f2 0f 2c /r]"                          "X64,SSE2,SQ,AR1"           )
(list "DIVPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 5e /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "DIVSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 5e /r]"                              "WILLAMETTE,SSE2"           )
(list "MAXPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 5f /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MAXSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 5f /r]"                              "WILLAMETTE,SSE2"           )
(list "MINPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 5d /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MINSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 5d /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVAPD"           "xmmreg,xmmreg"                              "[rm: 66 0f 28 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVAPD"           "xmmreg,xmmreg"                              "[mr: 66 0f 29 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVAPD"           "mem,xmmreg"                                 "[mr: 66 0f 29 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVAPD"           "xmmreg,mem"                                 "[rm: 66 0f 28 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVHPD"           "mem,xmmreg"                                 "[mr: 66 0f 17 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVHPD"           "xmmreg,mem"                                 "[rm: 66 0f 16 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVLPD"           "mem64,xmmreg"                               "[mr: 66 0f 13 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVLPD"           "xmmreg,mem64"                               "[rm: 66 0f 12 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVMSKPD"         "reg32,xmmreg"                               "[rm: 66 0f 50 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVMSKPD"         "reg64,xmmreg"                               "[rm: 66 o64 0f 50 /r]"                          "X64,SSE2"                  )
(list "MOVSD"            "xmmreg,xmmreg"                              "[rm: f2 0f 10 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVSD"            "xmmreg,xmmreg"                              "[mr: f2 0f 11 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVSD"            "mem64,xmmreg"                               "[mr: f2 0f 11 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVSD"            "xmmreg,mem64"                               "[rm: f2 0f 10 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVUPD"           "xmmreg,xmmreg"                              "[rm: 66 0f 10 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVUPD"           "xmmreg,xmmreg"                              "[mr: 66 0f 11 /r]"                              "WILLAMETTE,SSE2"           )
(list "MOVUPD"           "mem,xmmreg"                                 "[mr: 66 0f 11 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MOVUPD"           "xmmreg,mem"                                 "[rm: 66 0f 10 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MULPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 59 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "MULSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 59 /r]"                              "WILLAMETTE,SSE2"           )
(list "ORPD"             "xmmreg,xmmrm"                               "[rm: 66 0f 56 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "SHUFPD"           "xmmreg,xmmreg,imm"                          "[rmi: 66 0f c6 /r ib,u]"                        "WILLAMETTE,SSE2,SB,AR2"    )
(list "SHUFPD"           "xmmreg,mem,imm"                             "[rmi: 66 0f c6 /r ib,u]"                        "WILLAMETTE,SSE2,SM,SB,AR2" )
(list "SQRTPD"           "xmmreg,xmmrm"                               "[rm: 66 0f 51 /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "SQRTSD"           "xmmreg,xmmrm"                               "[rm: f2 0f 51 /r]"                              "WILLAMETTE,SSE2"           )
(list "SUBPD"            "xmmreg,xmmrm"                               "[rm: 66 0f 5c /r]"                              "WILLAMETTE,SSE2,SO"        )
(list "SUBSD"            "xmmreg,xmmrm"                               "[rm: f2 0f 5c /r]"                              "WILLAMETTE,SSE2"           )
(list "UCOMISD"          "xmmreg,xmmrm"                               "[rm: 66 0f 2e /r]"                              "WILLAMETTE,SSE2"           )
(list "UNPCKHPD"         "xmmreg,xmmrm128"                            "[rm: 66 0f 15 /r]"                              "WILLAMETTE,SSE2"           )
(list "UNPCKLPD"         "xmmreg,xmmrm128"                            "[rm: 66 0f 14 /r]"                              "WILLAMETTE,SSE2"           )
(list "XORPD"            "xmmreg,xmmrm128"                            "[rm: 66 0f 57 /r]"                              "WILLAMETTE,SSE2"           )
(list "ADDSUBPD"         "xmmreg,xmmrm"                               "[rm: 66 0f d0 /r]"                              "PRESCOTT,SSE3,SO"          )
(list "ADDSUBPS"         "xmmreg,xmmrm"                               "[rm: f2 0f d0 /r]"                              "PRESCOTT,SSE3,SO"          )
(list "HADDPD"           "xmmreg,xmmrm"                               "[rm: 66 0f 7c /r]"                              "PRESCOTT,SSE3,SO"          )
(list "HADDPS"           "xmmreg,xmmrm"                               "[rm: f2 0f 7c /r]"                              "PRESCOTT,SSE3,SO"          )
(list "HSUBPD"           "xmmreg,xmmrm"                               "[rm: 66 0f 7d /r]"                              "PRESCOTT,SSE3,SO"          )
(list "HSUBPS"           "xmmreg,xmmrm"                               "[rm: f2 0f 7d /r]"                              "PRESCOTT,SSE3,SO"          )
(list "LDDQU"            "xmmreg,mem"                                 "[rm: f2 0f f0 /r]"                              "PRESCOTT,SSE3,SO"          )
(list "MOVDDUP"          "xmmreg,xmmrm"                               "[rm: f2 0f 12 /r]"                              "PRESCOTT,SSE3"             )
(list "MOVSHDUP"         "xmmreg,xmmrm"                               "[rm: f3 0f 16 /r]"                              "PRESCOTT,SSE3"             )
(list "MOVSLDUP"         "xmmreg,xmmrm"                               "[rm: f3 0f 12 /r]"                              "PRESCOTT,SSE3"             )
(list "CLGI"             "void"                                       "[ 0f 01 dd]"                                    "VMX,AMD"                   )
(list "STGI"             "void"                                       "[ 0f 01 dc]"                                    "VMX,AMD"                   )
(list "VMCALL"           "void"                                       "[ 0f 01 c1]"                                    "VMX"                       )
(list "VMCLEAR"          "mem"                                        "[m: 66 0f c7 /6]"                               "VMX"                       )
(list "VMFUNC"           "void"                                       "[ 0f 01 d4]"                                    "VMX"                       )
(list "VMLAUNCH"         "void"                                       "[ 0f 01 c2]"                                    "VMX"                       )
(list "VMLOAD"           "void"                                       "[ 0f 01 da]"                                    "VMX,AMD"                   )
(list "VMMCALL"          "void"                                       "[ 0f 01 d9]"                                    "VMX,AMD"                   )
(list "VMPTRLD"          "mem"                                        "[m: np 0f c7 /6]"                               "VMX"                       )
(list "VMPTRST"          "mem"                                        "[m: np 0f c7 /7]"                               "VMX"                       )
(list "VMREAD"           "rm32,reg32"                                 "[mr: np 0f 78 /r]"                              "VMX,NOLONG,SD"             )
(list "VMREAD"           "rm64,reg64"                                 "[mr: o64nw np 0f 78 /r]"                        "X64,VMX,SQ"                )
(list "VMRESUME"         "void"                                       "[ 0f 01 c3]"                                    "VMX"                       )
(list "VMRUN"            "void"                                       "[ 0f 01 d8]"                                    "VMX,AMD"                   )
(list "VMSAVE"           "void"                                       "[ 0f 01 db]"                                    "VMX,AMD"                   )
(list "VMWRITE"          "reg32,rm32"                                 "[rm: np 0f 79 /r]"                              "VMX,NOLONG,SD"             )
(list "VMWRITE"          "reg64,rm64"                                 "[rm: o64nw np 0f 79 /r]"                        "X64,VMX,SQ"                )
(list "VMXOFF"           "void"                                       "[ 0f 01 c4]"                                    "VMX"                       )
(list "VMXON"            "mem"                                        "[m: f3 0f c7 /6]"                               "VMX"                       )
(list "INVEPT"           "reg32,mem"                                  "[rm: 66 0f 38 80 /r]"                           "VMX,SO,NOLONG"             )
(list "INVEPT"           "reg64,mem"                                  "[rm: o64nw 66 0f 38 80 /r]"                     "VMX,SO,LONG"               )
(list "INVVPID"          "reg32,mem"                                  "[rm: 66 0f 38 81 /r]"                           "VMX,SO,NOLONG"             )
(list "INVVPID"          "reg64,mem"                                  "[rm: o64nw 66 0f 38 81 /r]"                     "VMX,SO,LONG"               )
(list "PABSB"            "mmxreg,mmxrm"                               "[rm: np 0f 38 1c /r]"                           "SSSE3,MMX,SQ"              )
(list "PABSB"            "xmmreg,xmmrm"                               "[rm: 66 0f 38 1c /r]"                           "SSSE3"                     )
(list "PABSW"            "mmxreg,mmxrm"                               "[rm: np 0f 38 1d /r]"                           "SSSE3,MMX,SQ"              )
(list "PABSW"            "xmmreg,xmmrm"                               "[rm: 66 0f 38 1d /r]"                           "SSSE3"                     )
(list "PABSD"            "mmxreg,mmxrm"                               "[rm: np 0f 38 1e /r]"                           "SSSE3,MMX,SQ"              )
(list "PABSD"            "xmmreg,xmmrm"                               "[rm: 66 0f 38 1e /r]"                           "SSSE3"                     )
(list "PALIGNR"          "mmxreg,mmxrm,imm"                           "[rmi: np 0f 3a 0f /r ib,u]"                     "SSSE3,MMX,SQ"              )
(list "PALIGNR"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0f /r ib,u]"                     "SSSE3"                     )
(list "PHADDW"           "mmxreg,mmxrm"                               "[rm: np 0f 38 01 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHADDW"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 01 /r]"                           "SSSE3"                     )
(list "PHADDD"           "mmxreg,mmxrm"                               "[rm: np 0f 38 02 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHADDD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 02 /r]"                           "SSSE3"                     )
(list "PHADDSW"          "mmxreg,mmxrm"                               "[rm: np 0f 38 03 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHADDSW"          "xmmreg,xmmrm"                               "[rm: 66 0f 38 03 /r]"                           "SSSE3"                     )
(list "PHSUBW"           "mmxreg,mmxrm"                               "[rm: np 0f 38 05 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHSUBW"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 05 /r]"                           "SSSE3"                     )
(list "PHSUBD"           "mmxreg,mmxrm"                               "[rm: np 0f 38 06 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHSUBD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 06 /r]"                           "SSSE3"                     )
(list "PHSUBSW"          "mmxreg,mmxrm"                               "[rm: np 0f 38 07 /r]"                           "SSSE3,MMX,SQ"              )
(list "PHSUBSW"          "xmmreg,xmmrm"                               "[rm: 66 0f 38 07 /r]"                           "SSSE3"                     )
(list "PMADDUBSW"        "mmxreg,mmxrm"                               "[rm: np 0f 38 04 /r]"                           "SSSE3,MMX,SQ"              )
(list "PMADDUBSW"        "xmmreg,xmmrm"                               "[rm: 66 0f 38 04 /r]"                           "SSSE3"                     )
(list "PMULHRSW"         "mmxreg,mmxrm"                               "[rm: np 0f 38 0b /r]"                           "SSSE3,MMX,SQ"              )
(list "PMULHRSW"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 0b /r]"                           "SSSE3"                     )
(list "PSHUFB"           "mmxreg,mmxrm"                               "[rm: np 0f 38 00 /r]"                           "SSSE3,MMX,SQ"              )
(list "PSHUFB"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 00 /r]"                           "SSSE3"                     )
(list "PSIGNB"           "mmxreg,mmxrm"                               "[rm: np 0f 38 08 /r]"                           "SSSE3,MMX,SQ"              )
(list "PSIGNB"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 08 /r]"                           "SSSE3"                     )
(list "PSIGNW"           "mmxreg,mmxrm"                               "[rm: np 0f 38 09 /r]"                           "SSSE3,MMX,SQ"              )
(list "PSIGNW"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 09 /r]"                           "SSSE3"                     )
(list "PSIGND"           "mmxreg,mmxrm"                               "[rm: np 0f 38 0a /r]"                           "SSSE3,MMX,SQ"              )
(list "PSIGND"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 0a /r]"                           "SSSE3"                     )
(list "EXTRQ"            "xmmreg,imm,imm"                             "[mij: 66 0f 78 /0 ib,u ib,u]"                   "SSE4A,AMD"                 )
(list "EXTRQ"            "xmmreg,xmmreg"                              "[rm: 66 0f 79 /r]"                              "SSE4A,AMD"                 )
(list "INSERTQ"          "xmmreg,xmmreg,imm,imm"                      "[rmij: f2 0f 78 /r ib,u ib,u]"                  "SSE4A,AMD"                 )
(list "INSERTQ"          "xmmreg,xmmreg"                              "[rm: f2 0f 79 /r]"                              "SSE4A,AMD"                 )
(list "MOVNTSD"          "mem,xmmreg"                                 "[mr: f2 0f 2b /r]"                              "SSE4A,AMD,SQ"              )
(list "MOVNTSS"          "mem,xmmreg"                                 "[mr: f3 0f 2b /r]"                              "SSE4A,AMD,SD"              )
(list "LZCNT"            "reg16,rm16"                                 "[rm: o16 f3i 0f bd /r]"                         "P6,AMD"                    )
(list "LZCNT"            "reg32,rm32"                                 "[rm: o32 f3i 0f bd /r]"                         "P6,AMD"                    )
(list "LZCNT"            "reg64,rm64"                                 "[rm: o64 f3i 0f bd /r]"                         "X64,AMD"                   )
(list "BLENDPD"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0d /r ib,u]"                     "SSE41"                     )
(list "BLENDPS"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0c /r ib,u]"                     "SSE41"                     )
(list "BLENDVPD"         "xmmreg,xmmrm,xmm0"                          "[rm-: 66 0f 38 15 /r]"                          "SSE41"                     )
(list "BLENDVPD"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 15 /r]"                           "SSE41"                     )
(list "BLENDVPS"         "xmmreg,xmmrm,xmm0"                          "[rm-: 66 0f 38 14 /r]"                          "SSE41"                     )
(list "BLENDVPS"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 14 /r]"                           "SSE41"                     )
(list "DPPD"             "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 41 /r ib,u]"                     "SSE41"                     )
(list "DPPS"             "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 40 /r ib,u]"                     "SSE41"                     )
(list "EXTRACTPS"        "rm32,xmmreg,imm"                            "[mri: 66 0f 3a 17 /r ib,u]"                     "SSE41"                     )
(list "EXTRACTPS"        "reg64,xmmreg,imm"                           "[mri: o64 66 0f 3a 17 /r ib,u]"                 "SSE41,X64"                 )
(list "INSERTPS"         "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 21 /r ib,u]"                     "SSE41,SD"                  )
(list "MOVNTDQA"         "xmmreg,mem128"                              "[rm: 66 0f 38 2a /r]"                           "SSE41"                     )
(list "MPSADBW"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 42 /r ib,u]"                     "SSE41"                     )
(list "PACKUSDW"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 2b /r]"                           "SSE41"                     )
(list "PBLENDVB"         "xmmreg,xmmrm,xmm0"                          "[rm-: 66 0f 38 10 /r]"                          "SSE41"                     )
(list "PBLENDVB"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 10 /r]"                           "SSE41"                     )
(list "PBLENDW"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0e /r ib,u]"                     "SSE41"                     )
(list "PCMPEQQ"          "xmmreg,xmmrm"                               "[rm: 66 0f 38 29 /r]"                           "SSE41"                     )
(list "PEXTRB"           "reg32,xmmreg,imm"                           "[mri: 66 0f 3a 14 /r ib,u]"                     "SSE41"                     )
(list "PEXTRB"           "mem8,xmmreg,imm"                            "[mri: 66 0f 3a 14 /r ib,u]"                     "SSE41"                     )
(list "PEXTRB"           "reg64,xmmreg,imm"                           "[mri: o64 66 0f 3a 14 /r ib,u]"                 "SSE41,X64"                 )
(list "PEXTRD"           "rm32,xmmreg,imm"                            "[mri: norexw 66 0f 3a 16 /r ib,u]"              "SSE41"                     )
(list "PEXTRQ"           "rm64,xmmreg,imm"                            "[mri: o64 66 0f 3a 16 /r ib,u]"                 "SSE41,X64"                 )
(list "PEXTRW"           "reg32,xmmreg,imm"                           "[mri: 66 0f 3a 15 /r ib,u]"                     "SSE41"                     )
(list "PEXTRW"           "mem16,xmmreg,imm"                           "[mri: 66 0f 3a 15 /r ib,u]"                     "SSE41"                     )
(list "PEXTRW"           "reg64,xmmreg,imm"                           "[mri: o64 66 0f 3a 15 /r ib,u]"                 "SSE41,X64"                 )
(list "PHMINPOSUW"       "xmmreg,xmmrm"                               "[rm: 66 0f 38 41 /r]"                           "SSE41"                     )
(list "PINSRB"           "xmmreg,mem,imm"                             "[rmi: 66 0f 3a 20 /r ib,u]"                     "SSE41,SB,AR2"              )
(list "PINSRB"           "xmmreg,rm8,imm"                             "[rmi: nohi 66 0f 3a 20 /r ib,u]"                "SSE41,SB,AR2"              )
(list "PINSRB"           "xmmreg,reg32,imm"                           "[rmi: 66 0f 3a 20 /r ib,u]"                     "SSE41,SB,AR2"              )
(list "PINSRD"           "xmmreg,mem,imm"                             "[rmi: norexw 66 0f 3a 22 /r ib,u]"              "SSE41,SB,AR2"              )
(list "PINSRD"           "xmmreg,rm32,imm"                            "[rmi: norexw 66 0f 3a 22 /r ib,u]"              "SSE41,SB,AR2"              )
(list "PINSRQ"           "xmmreg,mem,imm"                             "[rmi: o64 66 0f 3a 22 /r ib,u]"                 "SSE41,X64,SB,AR2"          )
(list "PINSRQ"           "xmmreg,rm64,imm"                            "[rmi: o64 66 0f 3a 22 /r ib,u]"                 "SSE41,X64,SB,AR2"          )
(list "PMAXSB"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3c /r]"                           "SSE41"                     )
(list "PMAXSD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3d /r]"                           "SSE41"                     )
(list "PMAXUD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3f /r]"                           "SSE41"                     )
(list "PMAXUW"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3e /r]"                           "SSE41"                     )
(list "PMINSB"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 38 /r]"                           "SSE41"                     )
(list "PMINSD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 39 /r]"                           "SSE41"                     )
(list "PMINUD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3b /r]"                           "SSE41"                     )
(list "PMINUW"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 3a /r]"                           "SSE41"                     )
(list "PMOVSXBW"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 20 /r]"                           "SSE41,SQ"                  )
(list "PMOVSXBD"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 21 /r]"                           "SSE41,SD"                  )
(list "PMOVSXBQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 22 /r]"                           "SSE41,SW"                  )
(list "PMOVSXWD"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 23 /r]"                           "SSE41,SQ"                  )
(list "PMOVSXWQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 24 /r]"                           "SSE41,SD"                  )
(list "PMOVSXDQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 25 /r]"                           "SSE41,SQ"                  )
(list "PMOVZXBW"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 30 /r]"                           "SSE41,SQ"                  )
(list "PMOVZXBD"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 31 /r]"                           "SSE41,SD"                  )
(list "PMOVZXBQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 32 /r]"                           "SSE41,SW"                  )
(list "PMOVZXWD"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 33 /r]"                           "SSE41,SQ"                  )
(list "PMOVZXWQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 34 /r]"                           "SSE41,SD"                  )
(list "PMOVZXDQ"         "xmmreg,xmmrm"                               "[rm: 66 0f 38 35 /r]"                           "SSE41,SQ"                  )
(list "PMULDQ"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 28 /r]"                           "SSE41"                     )
(list "PMULLD"           "xmmreg,xmmrm"                               "[rm: 66 0f 38 40 /r]"                           "SSE41"                     )
(list "PTEST"            "xmmreg,xmmrm"                               "[rm: 66 0f 38 17 /r]"                           "SSE41"                     )
(list "ROUNDPD"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 09 /r ib,u]"                     "SSE41"                     )
(list "ROUNDPS"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 08 /r ib,u]"                     "SSE41"                     )
(list "ROUNDSD"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0b /r ib,u]"                     "SSE41"                     )
(list "ROUNDSS"          "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 0a /r ib,u]"                     "SSE41"                     )
(list "CRC32"            "reg32,rm8"                                  "[rm: f2i 0f 38 f0 /r]"                          "SSE42"                     )
(list "CRC32"            "reg32,rm16"                                 "[rm: o16 f2i 0f 38 f1 /r]"                      "SSE42"                     )
(list "CRC32"            "reg32,rm32"                                 "[rm: o32 f2i 0f 38 f1 /r]"                      "SSE42"                     )
(list "CRC32"            "reg64,rm8"                                  "[rm: o64 f2i 0f 38 f0 /r]"                      "SSE42,X64"                 )
(list "CRC32"            "reg64,rm64"                                 "[rm: o64 f2i 0f 38 f1 /r]"                      "SSE42,X64"                 )
(list "PCMPESTRI"        "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 61 /r ib,u]"                     "SSE42"                     )
(list "PCMPESTRM"        "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 60 /r ib,u]"                     "SSE42"                     )
(list "PCMPISTRI"        "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 63 /r ib,u]"                     "SSE42"                     )
(list "PCMPISTRM"        "xmmreg,xmmrm,imm"                           "[rmi: 66 0f 3a 62 /r ib,u]"                     "SSE42"                     )
(list "PCMPGTQ"          "xmmreg,xmmrm"                               "[rm: 66 0f 38 37 /r]"                           "SSE42"                     )
(list "POPCNT"           "reg16,rm16"                                 "[rm: o16 f3i 0f b8 /r]"                         "NEHALEM,SW"                )
(list "POPCNT"           "reg32,rm32"                                 "[rm: o32 f3i 0f b8 /r]"                         "NEHALEM,SD"                )
(list "POPCNT"           "reg64,rm64"                                 "[rm: o64 f3i 0f b8 /r]"                         "NEHALEM,SQ,X64"            )
(list "GETSEC"           "void"                                       "[ 0f 37]"                                       "KATMAI"                    )
(list "PFRCPV"           "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 86]"                        "PENT,3DNOW,SQ,CYRIX"       )
(list "PFRSQRTV"         "mmxreg,mmxrm"                               "[rm: o64nw 0f 0f /r 87]"                        "PENT,3DNOW,SQ,CYRIX"       )
(list "MOVBE"            "reg16,mem16"                                "[rm: o16 norep 0f 38 f0 /r]"                    "NEHALEM,SM"                )
(list "MOVBE"            "reg32,mem32"                                "[rm: o32 norep 0f 38 f0 /r]"                    "NEHALEM,SM"                )
(list "MOVBE"            "reg64,mem64"                                "[rm: o64 norep 0f 38 f0 /r]"                    "NEHALEM,SM"                )
(list "MOVBE"            "mem16,reg16"                                "[mr: o16 norep 0f 38 f1 /r]"                    "NEHALEM,SM"                )
(list "MOVBE"            "mem32,reg32"                                "[mr: o32 norep 0f 38 f1 /r]"                    "NEHALEM,SM"                )
(list "MOVBE"            "mem64,reg64"                                "[mr: o64 norep 0f 38 f1 /r]"                    "NEHALEM,SM"                )
(list "AESENC"           "xmmreg,xmmrm128"                            "[rm: 66 0f 38 dc /r]"                           "SSE,WESTMERE"              )
(list "AESENCLAST"       "xmmreg,xmmrm128"                            "[rm: 66 0f 38 dd /r]"                           "SSE,WESTMERE"              )
(list "AESDEC"           "xmmreg,xmmrm128"                            "[rm: 66 0f 38 de /r]"                           "SSE,WESTMERE"              )
(list "AESDECLAST"       "xmmreg,xmmrm128"                            "[rm: 66 0f 38 df /r]"                           "SSE,WESTMERE"              )
(list "AESIMC"           "xmmreg,xmmrm128"                            "[rm: 66 0f 38 db /r]"                           "SSE,WESTMERE"              )
(list "AESKEYGENASSIST"  "xmmreg,xmmrm128,imm8"                       "[rmi: 66 0f 3a df /r ib]"                       "SSE,WESTMERE"              )
(list "VAESENC"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 dc /r]"               "AVX,SANDYBRIDGE"           )
(list "VAESENCLAST"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 dd /r]"               "AVX,SANDYBRIDGE"           )
(list "VAESDEC"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 de /r]"               "AVX,SANDYBRIDGE"           )
(list "VAESDECLAST"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 df /r]"               "AVX,SANDYBRIDGE"           )
(list "VAESIMC"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 db /r]"                    "AVX,SANDYBRIDGE"           )
(list "VAESKEYGENASSIST" "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a df /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VADDPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 58 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 58 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 58 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VADDPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 58 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VADDSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 58 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 58 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDSUBPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d0 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDSUBPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f d0 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDSUBPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.f2.0f d0 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VADDSUBPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.f2.0f d0 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VANDPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 54 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VANDPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 54 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VANDPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 54 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VANDPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 54 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VANDNPD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 55 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VANDNPD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 55 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VANDNPS"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 55 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VANDNPS"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 55 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VBLENDPD"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 0d /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VBLENDPD"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 0d /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VBLENDPS"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 0c /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VBLENDPS"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 0c /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VBLENDVPD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.nds.128.66.0f3a.w0 4b /r /is4]"      "AVX,SANDYBRIDGE"           )
(list "VBLENDVPD"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.nds.256.66.0f3a.w0 4b /r /is4]"      "AVX,SANDYBRIDGE"           )
(list "VBLENDVPS"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.nds.128.66.0f3a.w0 4a /r /is4]"      "AVX,SANDYBRIDGE"           )
(list "VBLENDVPS"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.nds.256.66.0f3a.w0 4a /r /is4]"      "AVX,SANDYBRIDGE"           )
(list "VBROADCASTSS"     "xmmreg,mem32"                               "[rm: vex.128.66.0f38.w0 18 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VBROADCASTSS"     "ymmreg,mem32"                               "[rm: vex.256.66.0f38.w0 18 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VBROADCASTSD"     "ymmreg,mem64"                               "[rm: vex.256.66.0f38.w0 19 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VBROADCASTF128"   "ymmreg,mem128"                              "[rm: vex.256.66.0f38.w0 1a /r]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQPD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 00]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQPD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 00]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLTPD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLTPD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLEPD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLEPD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QPD"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QPD"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLTPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLTPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLEPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLEPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORDPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORDPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 08]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 08]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGEPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGEPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGTPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGTPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQPD"   "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQPD"   "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSEPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSEPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGEPD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGEPD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGTPD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGTPD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQPD"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQPD"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUEPD"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUEPD"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 11]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 11]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 12]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 12]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SPD"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 13]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SPD"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 13]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 14]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 14]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 15]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 15]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 16]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 16]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 17]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 17]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 18]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 18]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 19]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 19]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSPD"   "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSPD"   "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSPD"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSPD"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQPD"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQPD"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USPD"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f c2 /r 1f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USPD"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f c2 /r 1f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPPD"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f c2 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VCMPPD"           "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f c2 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 10]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 10]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQPS"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 00]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQPS"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 00]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 01]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 01]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLTPS"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 01]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLTPS"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 01]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 02]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 02]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLEPS"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 02]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLEPS"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 02]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QPS"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 03]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QPS"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 03]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 03]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 03]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 04]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 04]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 04]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 04]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 05]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 05]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLTPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 05]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLTPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 05]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 06]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 06]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLEPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 06]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLEPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 06]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 07]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 07]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORDPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 07]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORDPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 07]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 08]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 08]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 09]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 09]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGEPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 09]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGEPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 09]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGTPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGTPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQPS"   "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQPS"   "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSEPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSEPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0c]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0c]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGEPS"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGEPS"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGTPS"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGTPS"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQPS"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQPS"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUEPS"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 0f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUEPS"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 0f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 10]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 10]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 11]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 11]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 12]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 12]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SPS"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 13]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SPS"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 13]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 14]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 14]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 15]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 15]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 16]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 16]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 17]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 17]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 18]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 18]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 19]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 19]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1a]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSPS"   "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSPS"   "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1b]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSPS"     "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1c]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSPS"     "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1c]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1d]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQPS"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQPS"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1e]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USPS"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f c2 /r 1f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USPS"    "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f c2 /r 1f]"                 "AVX,SANDYBRIDGE"           )
(list "VCMPPS"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.0f c2 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VCMPPS"           "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.0f c2 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQSD"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 00]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLTSD"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLESD"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QSD"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQSD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLTSD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLESD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORDSD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 08]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGESD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGTSD"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQSD"   "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSESD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGESD"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGTSD"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQSD"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUESD"       "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 11]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 12]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SSD"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 13]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 14]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 15]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 16]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 17]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 18]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 19]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSSD"   "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSSD"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQSD"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USSD"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f c2 /r 1f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPSD"           "xmmreg,xmmreg*,xmmrm64,imm8"                "[rvmi: vex.nds.lig.f2.0f c2 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQSS"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 00]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLTSS"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 01]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLESS"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 02]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_QSS"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORDSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 03]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_UQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQSS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 04]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_USSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLTSS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 05]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_USSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLESS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 06]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_QSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORDSS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 07]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_UQSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 08]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_USSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGESS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 09]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_USSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGTSS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OQSS"   "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSESS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGESS"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGTSS"         "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_UQSS"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUESS"       "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 0f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_OSSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 10]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLT_OQSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 11]"              "AVX,SANDYBRIDGE"           )
(list "VCMPLE_OQSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 12]"              "AVX,SANDYBRIDGE"           )
(list "VCMPUNORD_SSS"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 13]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_USSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 14]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLT_UQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 15]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNLE_UQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 16]"              "AVX,SANDYBRIDGE"           )
(list "VCMPORD_SSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 17]"              "AVX,SANDYBRIDGE"           )
(list "VCMPEQ_USSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 18]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGE_UQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 19]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNGT_UQSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1a]"              "AVX,SANDYBRIDGE"           )
(list "VCMPFALSE_OSSS"   "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1b]"              "AVX,SANDYBRIDGE"           )
(list "VCMPNEQ_OSSS"     "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1c]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGE_OQSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1d]"              "AVX,SANDYBRIDGE"           )
(list "VCMPGT_OQSS"      "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1e]"              "AVX,SANDYBRIDGE"           )
(list "VCMPTRUE_USSS"    "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f3.0f c2 /r 1f]"              "AVX,SANDYBRIDGE"           )
(list "VCMPSS"           "xmmreg,xmmreg*,xmmrm64,imm8"                "[rvmi: vex.nds.lig.f3.0f c2 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VCOMISD"          "xmmreg,xmmrm64"                             "[rm: vex.lig.66.0f 2f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCOMISS"          "xmmreg,xmmrm32"                             "[rm: vex.lig.0f 2f /r]"                         "AVX,SANDYBRIDGE"           )
(list "VCVTDQ2PD"        "xmmreg,xmmrm64"                             "[rm: vex.128.f3.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTDQ2PD"        "ymmreg,xmmrm128"                            "[rm: vex.256.f3.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTDQ2PS"        "xmmreg,xmmrm128"                            "[rm: vex.128.0f 5b /r]"                         "AVX,SANDYBRIDGE"           )
(list "VCVTDQ2PS"        "ymmreg,ymmrm256"                            "[rm: vex.256.0f 5b /r]"                         "AVX,SANDYBRIDGE"           )
(list "VCVTPD2DQ"        "xmmreg,xmmreg"                              "[rm: vex.128.f2.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPD2DQ"        "xmmreg,mem128"                              "[rm: vex.128.f2.0f e6 /r]"                      "AVX,SANDYBRIDGE,SO"        )
(list "VCVTPD2DQ"        "xmmreg,ymmreg"                              "[rm: vex.256.f2.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPD2DQ"        "xmmreg,mem256"                              "[rm: vex.256.f2.0f e6 /r]"                      "AVX,SANDYBRIDGE,SY"        )
(list "VCVTPD2PS"        "xmmreg,xmmreg"                              "[rm: vex.128.66.0f 5a /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPD2PS"        "xmmreg,mem128"                              "[rm: vex.128.66.0f 5a /r]"                      "AVX,SANDYBRIDGE,SO"        )
(list "VCVTPD2PS"        "xmmreg,ymmreg"                              "[rm: vex.256.66.0f 5a /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPD2PS"        "xmmreg,mem256"                              "[rm: vex.256.66.0f 5a /r]"                      "AVX,SANDYBRIDGE,SY"        )
(list "VCVTPS2DQ"        "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f 5b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPS2DQ"        "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f 5b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTPS2PD"        "xmmreg,xmmrm64"                             "[rm: vex.128.0f 5a /r]"                         "AVX,SANDYBRIDGE"           )
(list "VCVTPS2PD"        "ymmreg,xmmrm128"                            "[rm: vex.256.0f 5a /r]"                         "AVX,SANDYBRIDGE"           )
(list "VCVTSD2SI"        "reg32,xmmrm64"                              "[rm: vex.lig.f2.0f.w0 2d /r]"                   "AVX,SANDYBRIDGE"           )
(list "VCVTSD2SI"        "reg64,xmmrm64"                              "[rm: vex.lig.f2.0f.w1 2d /r]"                   "AVX,SANDYBRIDGE,LONG"      )
(list "VCVTSD2SS"        "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 5a /r]"                 "AVX,SANDYBRIDGE"           )
(list "VCVTSI2SD"        "xmmreg,xmmreg*,rm32"                        "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"              "AVX,SANDYBRIDGE,SD"        )
(list "VCVTSI2SD"        "xmmreg,xmmreg*,mem32"                       "[rvm: vex.nds.lig.f2.0f.w0 2a /r]"              "AVX,SANDYBRIDGE,ND,SD"     )
(list "VCVTSI2SD"        "xmmreg,xmmreg*,rm64"                        "[rvm: vex.nds.lig.f2.0f.w1 2a /r]"              "AVX,SANDYBRIDGE,LONG,SQ"   )
(list "VCVTSI2SS"        "xmmreg,xmmreg*,rm32"                        "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"              "AVX,SANDYBRIDGE,SD"        )
(list "VCVTSI2SS"        "xmmreg,xmmreg*,mem32"                       "[rvm: vex.nds.lig.f3.0f.w0 2a /r]"              "AVX,SANDYBRIDGE,ND,SD"     )
(list "VCVTSI2SS"        "xmmreg,xmmreg*,rm64"                        "[rvm: vex.nds.lig.f3.0f.w1 2a /r]"              "AVX,SANDYBRIDGE,LONG,SQ"   )
(list "VCVTSS2SD"        "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 5a /r]"                 "AVX,SANDYBRIDGE"           )
(list "VCVTSS2SI"        "reg32,xmmrm32"                              "[rm: vex.lig.f3.0f.w0 2d /r]"                   "AVX,SANDYBRIDGE"           )
(list "VCVTSS2SI"        "reg64,xmmrm32"                              "[rm: vex.lig.f3.0f.w1 2d /r]"                   "AVX,SANDYBRIDGE,LONG"      )
(list "VCVTTPD2DQ"       "xmmreg,xmmreg"                              "[rm: vex.128.66.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTTPD2DQ"       "xmmreg,mem128"                              "[rm: vex.128.66.0f e6 /r]"                      "AVX,SANDYBRIDGE,SO"        )
(list "VCVTTPD2DQ"       "xmmreg,ymmreg"                              "[rm: vex.256.66.0f e6 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTTPD2DQ"       "xmmreg,mem256"                              "[rm: vex.256.66.0f e6 /r]"                      "AVX,SANDYBRIDGE,SY"        )
(list "VCVTTPS2DQ"       "xmmreg,xmmrm128"                            "[rm: vex.128.f3.0f 5b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTTPS2DQ"       "ymmreg,ymmrm256"                            "[rm: vex.256.f3.0f 5b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VCVTTSD2SI"       "reg32,xmmrm64"                              "[rm: vex.lig.f2.0f.w0 2c /r]"                   "AVX,SANDYBRIDGE"           )
(list "VCVTTSD2SI"       "reg64,xmmrm64"                              "[rm: vex.lig.f2.0f.w1 2c /r]"                   "AVX,SANDYBRIDGE,LONG"      )
(list "VCVTTSS2SI"       "reg32,xmmrm32"                              "[rm: vex.lig.f3.0f.w0 2c /r]"                   "AVX,SANDYBRIDGE"           )
(list "VCVTTSS2SI"       "reg64,xmmrm32"                              "[rm: vex.lig.f3.0f.w1 2c /r]"                   "AVX,SANDYBRIDGE,LONG"      )
(list "VDIVPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 5e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VDIVPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 5e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VDIVPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 5e /r]"                    "AVX,SANDYBRIDGE"           )
(list "VDIVPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 5e /r]"                    "AVX,SANDYBRIDGE"           )
(list "VDIVSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 5e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VDIVSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 5e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VDPPD"            "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 41 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VDPPS"            "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 40 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VDPPS"            "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 40 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VEXTRACTF128"     "xmmrm128,ymmreg,imm8"                       "[mri: vex.256.66.0f3a.w0 19 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VEXTRACTPS"       "rm32,xmmreg,imm8"                           "[mri: vex.128.66.0f3a 17 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VHADDPD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 7c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHADDPD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 7c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHADDPS"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.f2.0f 7c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHADDPS"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.f2.0f 7c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHSUBPD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 7d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHSUBPD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 7d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHSUBPS"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.f2.0f 7d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VHSUBPS"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.f2.0f 7d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VINSERTF128"      "ymmreg,ymmreg,xmmrm128,imm8"                "[rvmi: vex.nds.256.66.0f3a.w0 18 /r ib]"        "AVX,SANDYBRIDGE"           )
(list "VINSERTPS"        "xmmreg,xmmreg*,xmmrm32,imm8"                "[rvmi: vex.nds.128.66.0f3a 21 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VLDDQU"           "xmmreg,mem128"                              "[rm: vex.128.f2.0f f0 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VLDQQU"           "ymmreg,mem256"                              "[rm: vex.256.f2.0f f0 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VLDDQU"           "ymmreg,mem256"                              "[rm: vex.256.f2.0f f0 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VLDMXCSR"         "mem32"                                      "[m: vex.lz.0f ae /2]"                           "AVX,SANDYBRIDGE"           )
(list "VMASKMOVDQU"      "xmmreg,xmmreg"                              "[rm: vex.128.66.0f f7 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPS"       "xmmreg,xmmreg,mem128"                       "[rvm: vex.nds.128.66.0f38.w0 2c /r]"            "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPS"       "ymmreg,ymmreg,mem256"                       "[rvm: vex.nds.256.66.0f38.w0 2c /r]"            "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPS"       "mem128,xmmreg,xmmreg"                       "[mvr: vex.nds.128.66.0f38.w0 2e /r]"            "AVX,SANDYBRIDGE,SO"        )
(list "VMASKMOVPS"       "mem256,ymmreg,ymmreg"                       "[mvr: vex.nds.256.66.0f38.w0 2e /r]"            "AVX,SANDYBRIDGE,SY"        )
(list "VMASKMOVPD"       "xmmreg,xmmreg,mem128"                       "[rvm: vex.nds.128.66.0f38.w0 2d /r]"            "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPD"       "ymmreg,ymmreg,mem256"                       "[rvm: vex.nds.256.66.0f38.w0 2d /r]"            "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPD"       "mem128,xmmreg,xmmreg"                       "[mvr: vex.nds.128.66.0f38.w0 2f /r]"            "AVX,SANDYBRIDGE"           )
(list "VMASKMOVPD"       "mem256,ymmreg,ymmreg"                       "[mvr: vex.nds.256.66.0f38.w0 2f /r]"            "AVX,SANDYBRIDGE"           )
(list "VMAXPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 5f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMAXPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 5f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMAXPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 5f /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMAXPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 5f /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMAXSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 5f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMAXSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 5f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMINPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 5d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMINPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 5d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMINPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 5d /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMINPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 5d /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMINSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 5d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMINSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 5d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVAPD"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f 28 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVAPD"          "xmmrm128,xmmreg"                            "[mr: vex.128.66.0f 29 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVAPD"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f 28 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVAPD"          "ymmrm256,ymmreg"                            "[mr: vex.256.66.0f 29 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVAPS"          "xmmreg,xmmrm128"                            "[rm: vex.128.0f 28 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVAPS"          "xmmrm128,xmmreg"                            "[mr: vex.128.0f 29 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVAPS"          "ymmreg,ymmrm256"                            "[rm: vex.256.0f 28 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVAPS"          "ymmrm256,ymmreg"                            "[mr: vex.256.0f 29 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVD"            "xmmreg,rm32"                                "[rm: vex.128.66.0f.w0 6e /r]"                   "AVX,SANDYBRIDGE"           )
(list "VMOVD"            "rm32,xmmreg"                                "[mr: vex.128.66.0f.w0 7e /r]"                   "AVX,SANDYBRIDGE"           )
(list "VMOVQ"            "xmmreg,xmmrm64"                             "[rm: vex.128.f3.0f 7e /r]"                      "AVX,SANDYBRIDGE,SQ"        )
(list "VMOVQ"            "xmmrm64,xmmreg"                             "[mr: vex.128.66.0f d6 /r]"                      "AVX,SANDYBRIDGE,SQ"        )
(list "VMOVQ"            "xmmreg,rm64"                                "[rm: vex.128.66.0f.w1 6e /r]"                   "AVX,SANDYBRIDGE,LONG,SQ"   )
(list "VMOVQ"            "rm64,xmmreg"                                "[mr: vex.128.66.0f.w1 7e /r]"                   "AVX,SANDYBRIDGE,LONG,SQ"   )
(list "VMOVDDUP"         "xmmreg,xmmrm64"                             "[rm: vex.128.f2.0f 12 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDDUP"         "ymmreg,ymmrm256"                            "[rm: vex.256.f2.0f 12 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQA"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQA"          "xmmrm128,xmmreg"                            "[mr: vex.128.66.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVQQA"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVQQA"          "ymmrm256,ymmreg"                            "[mr: vex.256.66.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQA"          "ymmreg,ymmrm"                               "[rm: vex.256.66.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQA"          "ymmrm256,ymmreg"                            "[mr: vex.256.66.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQU"          "xmmreg,xmmrm128"                            "[rm: vex.128.f3.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQU"          "xmmrm128,xmmreg"                            "[mr: vex.128.f3.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVQQU"          "ymmreg,ymmrm256"                            "[rm: vex.256.f3.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVQQU"          "ymmrm256,ymmreg"                            "[mr: vex.256.f3.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQU"          "ymmreg,ymmrm256"                            "[rm: vex.256.f3.0f 6f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVDQU"          "ymmrm256,ymmreg"                            "[mr: vex.256.f3.0f 7f /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVHLPS"         "xmmreg,xmmreg*,xmmreg"                      "[rvm: vex.nds.128.0f 12 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMOVHPD"          "xmmreg,xmmreg*,mem64"                       "[rvm: vex.nds.128.66.0f 16 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVHPD"          "mem64,xmmreg"                               "[mr: vex.128.66.0f 17 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVHPS"          "xmmreg,xmmreg*,mem64"                       "[rvm: vex.nds.128.0f 16 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMOVHPS"          "mem64,xmmreg"                               "[mr: vex.128.0f 17 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVLHPS"         "xmmreg,xmmreg*,xmmreg"                      "[rvm: vex.nds.128.0f 16 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMOVLPD"          "xmmreg,xmmreg*,mem64"                       "[rvm: vex.nds.128.66.0f 12 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVLPD"          "mem64,xmmreg"                               "[mr: vex.128.66.0f 13 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVLPS"          "xmmreg,xmmreg*,mem64"                       "[rvm: vex.nds.128.0f 12 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMOVLPS"          "mem64,xmmreg"                               "[mr: vex.128.0f 13 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVMSKPD"        "reg64,xmmreg"                               "[rm: vex.128.66.0f 50 /r]"                      "AVX,SANDYBRIDGE,LONG"      )
(list "VMOVMSKPD"        "reg32,xmmreg"                               "[rm: vex.128.66.0f 50 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVMSKPD"        "reg64,ymmreg"                               "[rm: vex.256.66.0f 50 /r]"                      "AVX,SANDYBRIDGE,LONG"      )
(list "VMOVMSKPD"        "reg32,ymmreg"                               "[rm: vex.256.66.0f 50 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVMSKPS"        "reg64,xmmreg"                               "[rm: vex.128.0f 50 /r]"                         "AVX,SANDYBRIDGE,LONG"      )
(list "VMOVMSKPS"        "reg32,xmmreg"                               "[rm: vex.128.0f 50 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVMSKPS"        "reg64,ymmreg"                               "[rm: vex.256.0f 50 /r]"                         "AVX,SANDYBRIDGE,LONG"      )
(list "VMOVMSKPS"        "reg32,ymmreg"                               "[rm: vex.256.0f 50 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVNTDQ"         "mem128,xmmreg"                              "[mr: vex.128.66.0f e7 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVNTQQ"         "mem256,ymmreg"                              "[mr: vex.256.66.0f e7 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVNTDQ"         "mem256,ymmreg"                              "[mr: vex.256.66.0f e7 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVNTDQA"        "xmmreg,mem128"                              "[rm: vex.128.66.0f38 2a /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMOVNTPD"         "mem128,xmmreg"                              "[mr: vex.128.66.0f 2b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVNTPD"         "mem256,ymmreg"                              "[mr: vex.256.66.0f 2b /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVNTPS"         "mem128,xmmreg"                              "[mr: vex.128.0f 2b /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVNTPS"         "mem128,ymmreg"                              "[mr: vex.256.0f 2b /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVSD"           "xmmreg,xmmreg*,xmmreg"                      "[rvm: vex.nds.lig.f2.0f 10 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVSD"           "xmmreg,mem64"                               "[rm: vex.lig.f2.0f 10 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSD"           "xmmreg,xmmreg*,xmmreg"                      "[mvr: vex.nds.lig.f2.0f 11 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVSD"           "mem64,xmmreg"                               "[mr: vex.lig.f2.0f 11 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSHDUP"        "xmmreg,xmmrm128"                            "[rm: vex.128.f3.0f 16 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSHDUP"        "ymmreg,ymmrm256"                            "[rm: vex.256.f3.0f 16 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSLDUP"        "xmmreg,xmmrm128"                            "[rm: vex.128.f3.0f 12 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSLDUP"        "ymmreg,ymmrm256"                            "[rm: vex.256.f3.0f 12 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSS"           "xmmreg,xmmreg*,xmmreg"                      "[rvm: vex.nds.lig.f3.0f 10 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVSS"           "xmmreg,mem32"                               "[rm: vex.lig.f3.0f 10 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVSS"           "xmmreg,xmmreg*,xmmreg"                      "[mvr: vex.nds.lig.f3.0f 11 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMOVSS"           "mem32,xmmreg"                               "[mr: vex.lig.f3.0f 11 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVUPD"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f 10 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVUPD"          "xmmrm128,xmmreg"                            "[mr: vex.128.66.0f 11 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVUPD"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f 10 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVUPD"          "ymmrm256,ymmreg"                            "[mr: vex.256.66.0f 11 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VMOVUPS"          "xmmreg,xmmrm128"                            "[rm: vex.128.0f 10 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVUPS"          "xmmrm128,xmmreg"                            "[mr: vex.128.0f 11 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVUPS"          "ymmreg,ymmrm256"                            "[rm: vex.256.0f 10 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMOVUPS"          "ymmrm256,ymmreg"                            "[mr: vex.256.0f 11 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VMPSADBW"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 42 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VMULPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 59 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMULPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 59 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMULPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 59 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMULPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 59 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VMULSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 59 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VMULSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 59 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VORPD"            "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 56 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VORPD"            "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 56 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VORPS"            "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 56 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VORPS"            "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 56 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPABSB"           "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 1c /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPABSW"           "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 1d /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPABSD"           "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 1e /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPACKSSWB"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 63 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPACKSSDW"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 6b /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPACKUSWB"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 67 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPACKUSDW"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 2b /r]"               "AVX,SANDYBRIDGE"           )
(list "VPADDB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f fc /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f fd /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f fe /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d4 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDSB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f ec /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDSW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f ed /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDUSB"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f dc /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPADDUSW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f dd /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPALIGNR"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 0f /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VPAND"            "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f db /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPANDN"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f df /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPAVGB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e0 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPAVGW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e3 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPBLENDVB"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.nds.128.66.0f3a.w0 4c /r /is4]"      "AVX,SANDYBRIDGE"           )
(list "VPBLENDW"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 0e /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VPCMPESTRI"       "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 61 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VPCMPESTRM"       "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 60 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VPCMPISTRI"       "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 63 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VPCMPISTRM"       "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 62 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VPCMPEQB"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 74 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPEQW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 75 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPEQD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 76 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPEQQ"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 29 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPCMPGTB"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 64 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPGTW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 65 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPGTD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 66 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPCMPGTQ"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 37 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPERMILPD"        "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.nds.128.66.0f38.w0 0d /r]"            "AVX,SANDYBRIDGE"           )
(list "VPERMILPD"        "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.nds.256.66.0f38.w0 0d /r]"            "AVX,SANDYBRIDGE"           )
(list "VPERMILPD"        "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a.w0 05 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPERMILPD"        "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a.w0 05 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPERMILPS"        "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.nds.128.66.0f38.w0 0c /r]"            "AVX,SANDYBRIDGE"           )
(list "VPERMILPS"        "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.nds.256.66.0f38.w0 0c /r]"            "AVX,SANDYBRIDGE"           )
(list "VPERMILPS"        "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a.w0 04 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPERMILPS"        "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a.w0 04 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPERM2F128"       "ymmreg,ymmreg,ymmrm256,imm8"                "[rvmi: vex.nds.256.66.0f3a.w0 06 /r ib]"        "AVX,SANDYBRIDGE"           )
(list "VPEXTRB"          "reg64,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 14 /r ib]"             "AVX,SANDYBRIDGE,LONG"      )
(list "VPEXTRB"          "reg32,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 14 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPEXTRB"          "mem8,xmmreg,imm8"                           "[mri: vex.128.66.0f3a.w0 14 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPEXTRW"          "reg64,xmmreg,imm8"                          "[rmi: vex.128.66.0f.w0 c5 /r ib]"               "AVX,SANDYBRIDGE,LONG"      )
(list "VPEXTRW"          "reg32,xmmreg,imm8"                          "[rmi: vex.128.66.0f.w0 c5 /r ib]"               "AVX,SANDYBRIDGE"           )
(list "VPEXTRW"          "reg64,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 15 /r ib]"             "AVX,SANDYBRIDGE,LONG"      )
(list "VPEXTRW"          "reg32,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 15 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPEXTRW"          "mem16,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 15 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPEXTRD"          "reg64,xmmreg,imm8"                          "[mri: vex.128.66.0f3a.w0 16 /r ib]"             "AVX,SANDYBRIDGE,LONG"      )
(list "VPEXTRD"          "rm32,xmmreg,imm8"                           "[mri: vex.128.66.0f3a.w0 16 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPEXTRQ"          "rm64,xmmreg,imm8"                           "[mri: vex.128.66.0f3a.w1 16 /r ib]"             "AVX,SANDYBRIDGE,LONG"      )
(list "VPHADDW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 01 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPHADDD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 02 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPHADDSW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 03 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPHMINPOSUW"      "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 41 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPHSUBW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 05 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPHSUBD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 06 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPHSUBSW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 07 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPINSRB"          "xmmreg,xmmreg*,mem8,imm8"                   "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VPINSRB"          "xmmreg,xmmreg*,rm8,imm8"                    "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VPINSRB"          "xmmreg,xmmreg*,reg32,imm8"                  "[rvmi: vex.nds.128.66.0f3a 20 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VPINSRW"          "xmmreg,xmmreg*,mem16,imm8"                  "[rvmi: vex.nds.128.66.0f c4 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPINSRW"          "xmmreg,xmmreg*,rm16,imm8"                   "[rvmi: vex.nds.128.66.0f c4 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPINSRW"          "xmmreg,xmmreg*,reg32,imm8"                  "[rvmi: vex.nds.128.66.0f c4 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VPINSRD"          "xmmreg,xmmreg*,mem32,imm8"                  "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"        "AVX,SANDYBRIDGE"           )
(list "VPINSRD"          "xmmreg,xmmreg*,rm32,imm8"                   "[rvmi: vex.nds.128.66.0f3a.w0 22 /r ib]"        "AVX,SANDYBRIDGE"           )
(list "VPINSRQ"          "xmmreg,xmmreg*,mem64,imm8"                  "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"        "AVX,SANDYBRIDGE,LONG"      )
(list "VPINSRQ"          "xmmreg,xmmreg*,rm64,imm8"                   "[rvmi: vex.nds.128.66.0f3a.w1 22 /r ib]"        "AVX,SANDYBRIDGE,LONG"      )
(list "VPMADDWD"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f5 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMADDUBSW"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 04 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMAXSB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3c /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMAXSW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f ee /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMAXSD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3d /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMAXUB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f de /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMAXUW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3e /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMAXUD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3f /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMINSB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 38 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMINSW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f ea /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMINSD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 39 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMINUB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f da /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMINUW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3a /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMINUD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 3b /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMOVMSKB"        "reg64,xmmreg"                               "[rm: vex.128.66.0f d7 /r]"                      "AVX,SANDYBRIDGE,LONG"      )
(list "VPMOVMSKB"        "reg32,xmmreg"                               "[rm: vex.128.66.0f d7 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VPMOVSXBW"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 20 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVSXBD"        "xmmreg,xmmrm32"                             "[rm: vex.128.66.0f38 21 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVSXBQ"        "xmmreg,xmmrm16"                             "[rm: vex.128.66.0f38 22 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVSXWD"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 23 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVSXWQ"        "xmmreg,xmmrm32"                             "[rm: vex.128.66.0f38 24 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVSXDQ"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 25 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXBW"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 30 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXBD"        "xmmreg,xmmrm32"                             "[rm: vex.128.66.0f38 31 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXBQ"        "xmmreg,xmmrm16"                             "[rm: vex.128.66.0f38 32 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXWD"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 33 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXWQ"        "xmmreg,xmmrm32"                             "[rm: vex.128.66.0f38 34 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMOVZXDQ"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38 35 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPMULHUW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e4 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMULHRSW"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 0b /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMULHW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e5 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMULLW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d5 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMULLD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 40 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPMULUDQ"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f4 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPMULDQ"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 28 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPOR"             "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f eb /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSADBW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f6 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSHUFB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 00 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPSHUFD"          "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f 70 /r ib]"                  "AVX,SANDYBRIDGE"           )
(list "VPSHUFHW"         "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.f3.0f 70 /r ib]"                  "AVX,SANDYBRIDGE"           )
(list "VPSHUFLW"         "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.f2.0f 70 /r ib]"                  "AVX,SANDYBRIDGE"           )
(list "VPSIGNB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 08 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPSIGNW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 09 /r]"               "AVX,SANDYBRIDGE"           )
(list "VPSIGND"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38 0a /r]"               "AVX,SANDYBRIDGE"           )
(list "VPSLLDQ"          "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 73 /7 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRLDQ"          "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 73 /3 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSLLW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f1 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSLLW"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 71 /6 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSLLD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f2 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSLLD"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 72 /6 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSLLQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f3 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSLLQ"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 73 /6 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRAW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e1 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSRAW"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 71 /4 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRAD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e2 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSRAD"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 72 /4 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRLW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d1 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSRLW"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 71 /2 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRLD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d2 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSRLD"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 72 /2 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPSRLQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d3 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSRLQ"           "xmmreg,xmmreg*,imm8"                        "[vmi: vex.ndd.128.66.0f 73 /2 ib]"              "AVX,SANDYBRIDGE"           )
(list "VPTEST"           "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38 17 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPTEST"           "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38 17 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VPSUBB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f8 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f f9 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f fa /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f fb /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBSB"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e8 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBSW"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f e9 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBUSB"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d8 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPSUBUSW"         "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f d9 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKHBW"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 68 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKHWD"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 69 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKHDQ"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 6a /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKHQDQ"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 6d /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKLBW"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 60 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKLWD"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 61 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKLDQ"       "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 62 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPUNPCKLQDQ"      "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 6c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VPXOR"            "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f ef /r]"                 "AVX,SANDYBRIDGE"           )
(list "VRCPPS"           "xmmreg,xmmrm128"                            "[rm: vex.128.0f 53 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VRCPPS"           "ymmreg,ymmrm256"                            "[rm: vex.256.0f 53 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VRCPSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 53 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VRSQRTPS"         "xmmreg,xmmrm128"                            "[rm: vex.128.0f 52 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VRSQRTPS"         "ymmreg,ymmrm256"                            "[rm: vex.256.0f 52 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VRSQRTSS"         "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 52 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VROUNDPD"         "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 09 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VROUNDPD"         "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a 09 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VROUNDPS"         "xmmreg,xmmrm128,imm8"                       "[rmi: vex.128.66.0f3a 08 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VROUNDPS"         "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a 08 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VROUNDSD"         "xmmreg,xmmreg*,xmmrm64,imm8"                "[rvmi: vex.nds.128.66.0f3a 0b /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VROUNDSS"         "xmmreg,xmmreg*,xmmrm32,imm8"                "[rvmi: vex.nds.128.66.0f3a 0a /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VSHUFPD"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f c6 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VSHUFPD"          "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f c6 /r ib]"             "AVX,SANDYBRIDGE"           )
(list "VSHUFPS"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.0f c6 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VSHUFPS"          "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.0f c6 /r ib]"                "AVX,SANDYBRIDGE"           )
(list "VSQRTPD"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f 51 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VSQRTPD"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f 51 /r]"                      "AVX,SANDYBRIDGE"           )
(list "VSQRTPS"          "xmmreg,xmmrm128"                            "[rm: vex.128.0f 51 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VSQRTPS"          "ymmreg,ymmrm256"                            "[rm: vex.256.0f 51 /r]"                         "AVX,SANDYBRIDGE"           )
(list "VSQRTSD"          "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 51 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VSQRTSS"          "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 51 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VSTMXCSR"         "mem32"                                      "[m: vex.128.0f ae /3]"                          "AVX,SANDYBRIDGE"           )
(list "VSUBPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 5c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VSUBPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 5c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VSUBPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 5c /r]"                    "AVX,SANDYBRIDGE"           )
(list "VSUBPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 5c /r]"                    "AVX,SANDYBRIDGE"           )
(list "VSUBSD"           "xmmreg,xmmreg*,xmmrm64"                     "[rvm: vex.nds.lig.f2.0f 5c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VSUBSS"           "xmmreg,xmmreg*,xmmrm32"                     "[rvm: vex.nds.lig.f3.0f 5c /r]"                 "AVX,SANDYBRIDGE"           )
(list "VTESTPS"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38.w0 0e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VTESTPS"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38.w0 0e /r]"                 "AVX,SANDYBRIDGE"           )
(list "VTESTPD"          "xmmreg,xmmrm128"                            "[rm: vex.128.66.0f38.w0 0f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VTESTPD"          "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38.w0 0f /r]"                 "AVX,SANDYBRIDGE"           )
(list "VUCOMISD"         "xmmreg,xmmrm64"                             "[rm: vex.lig.66.0f 2e /r]"                      "AVX,SANDYBRIDGE"           )
(list "VUCOMISS"         "xmmreg,xmmrm32"                             "[rm: vex.lig.0f 2e /r]"                         "AVX,SANDYBRIDGE"           )
(list "VUNPCKHPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 15 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VUNPCKHPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 15 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VUNPCKHPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 15 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VUNPCKHPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 15 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VUNPCKLPD"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 14 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VUNPCKLPD"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 14 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VUNPCKLPS"        "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 14 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VUNPCKLPS"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 14 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VXORPD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f 57 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VXORPD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 57 /r]"                 "AVX,SANDYBRIDGE"           )
(list "VXORPS"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.0f 57 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VXORPS"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.0f 57 /r]"                    "AVX,SANDYBRIDGE"           )
(list "VZEROALL"         "void"                                       "[ vex.256.0f.w0 77]"                            "AVX,SANDYBRIDGE"           )
(list "VZEROUPPER"       "void"                                       "[ vex.128.0f.w0 77]"                            "AVX,SANDYBRIDGE"           )
(list "PCLMULLQLQDQ"     "xmmreg,xmmrm128"                            "[rm: 66 0f 3a 44 /r 00]"                        "SSE,WESTMERE"              )
(list "PCLMULHQLQDQ"     "xmmreg,xmmrm128"                            "[rm: 66 0f 3a 44 /r 01]"                        "SSE,WESTMERE"              )
(list "PCLMULLQHQDQ"     "xmmreg,xmmrm128"                            "[rm: 66 0f 3a 44 /r 10]"                        "SSE,WESTMERE"              )
(list "PCLMULHQHQDQ"     "xmmreg,xmmrm128"                            "[rm: 66 0f 3a 44 /r 11]"                        "SSE,WESTMERE"              )
(list "PCLMULQDQ"        "xmmreg,xmmrm128,imm8"                       "[rmi: 66 0f 3a 44 /r ib]"                       "SSE,WESTMERE"              )
(list "VPCLMULLQLQDQ"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f3a 44 /r 00]"            "AVX,SANDYBRIDGE"           )
(list "VPCLMULHQLQDQ"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f3a 44 /r 01]"            "AVX,SANDYBRIDGE"           )
(list "VPCLMULLQHQDQ"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f3a 44 /r 10]"            "AVX,SANDYBRIDGE"           )
(list "VPCLMULHQHQDQ"    "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f3a 44 /r 11]"            "AVX,SANDYBRIDGE"           )
(list "VPCLMULQDQ"       "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a 44 /r ib]"           "AVX,SANDYBRIDGE"           )
(list "VFMADD132PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD132PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD132PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD132PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD312PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD312PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD312PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD312PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 98 /r]"            "FMA,FUTURE"                )
(list "VFMADD213PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD213PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD213PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD213PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD123PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD123PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD123PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD123PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a8 /r]"            "FMA,FUTURE"                )
(list "VFMADD231PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD231PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD231PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD231PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD321PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD321PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD321PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADD321PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b8 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB132PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB132PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB132PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB132PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB312PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB312PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB312PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB312PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 96 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB213PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB213PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB213PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB213PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB123PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB123PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB123PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB123PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB231PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB231PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB231PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB231PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB321PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB321PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB321PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b6 /r]"            "FMA,FUTURE"                )
(list "VFMADDSUB321PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b6 /r]"            "FMA,FUTURE"                )
(list "VFMSUB132PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB132PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB132PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB132PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB312PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB312PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB312PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB312PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9a /r]"            "FMA,FUTURE"                )
(list "VFMSUB213PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB213PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB213PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB213PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB123PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB123PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB123PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB123PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 aa /r]"            "FMA,FUTURE"                )
(list "VFMSUB231PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB231PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB231PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB231PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB321PS"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB321PS"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB321PD"      "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUB321PD"      "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ba /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD132PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD132PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD132PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD132PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD312PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD312PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD312PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD312PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 97 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD213PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD213PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD213PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD213PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD123PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD123PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD123PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD123PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 a7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD231PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD231PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD231PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD231PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD321PS"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD321PS"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD321PD"   "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 b7 /r]"            "FMA,FUTURE"                )
(list "VFMSUBADD321PD"   "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 b7 /r]"            "FMA,FUTURE"                )
(list "VFNMADD132PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD132PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD132PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD132PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD312PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD312PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD312PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD312PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9c /r]"            "FMA,FUTURE"                )
(list "VFNMADD213PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD213PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD213PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD213PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD123PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD123PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD123PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD123PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ac /r]"            "FMA,FUTURE"                )
(list "VFNMADD231PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD231PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD231PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD231PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD321PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD321PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD321PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 bc /r]"            "FMA,FUTURE"                )
(list "VFNMADD321PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 bc /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 9e /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 ae /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321PS"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w0 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321PS"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w0 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321PD"     "xmmreg,xmmreg,xmmrm128"                     "[rvm: vex.dds.128.66.0f38.w1 be /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321PD"     "ymmreg,ymmreg,ymmrm256"                     "[rvm: vex.dds.256.66.0f38.w1 be /r]"            "FMA,FUTURE"                )
(list "VFMADD132SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 99 /r]"            "FMA,FUTURE"                )
(list "VFMADD132SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 99 /r]"            "FMA,FUTURE"                )
(list "VFMADD312SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 99 /r]"            "FMA,FUTURE"                )
(list "VFMADD312SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 99 /r]"            "FMA,FUTURE"                )
(list "VFMADD213SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"            "FMA,FUTURE"                )
(list "VFMADD213SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"            "FMA,FUTURE"                )
(list "VFMADD123SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 a9 /r]"            "FMA,FUTURE"                )
(list "VFMADD123SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 a9 /r]"            "FMA,FUTURE"                )
(list "VFMADD231SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"            "FMA,FUTURE"                )
(list "VFMADD231SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"            "FMA,FUTURE"                )
(list "VFMADD321SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 b9 /r]"            "FMA,FUTURE"                )
(list "VFMADD321SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 b9 /r]"            "FMA,FUTURE"                )
(list "VFMSUB132SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9b /r]"            "FMA,FUTURE"                )
(list "VFMSUB132SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9b /r]"            "FMA,FUTURE"                )
(list "VFMSUB312SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9b /r]"            "FMA,FUTURE"                )
(list "VFMSUB312SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9b /r]"            "FMA,FUTURE"                )
(list "VFMSUB213SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 ab /r]"            "FMA,FUTURE"                )
(list "VFMSUB213SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 ab /r]"            "FMA,FUTURE"                )
(list "VFMSUB123SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 ab /r]"            "FMA,FUTURE"                )
(list "VFMSUB123SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 ab /r]"            "FMA,FUTURE"                )
(list "VFMSUB231SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bb /r]"            "FMA,FUTURE"                )
(list "VFMSUB231SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bb /r]"            "FMA,FUTURE"                )
(list "VFMSUB321SS"      "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bb /r]"            "FMA,FUTURE"                )
(list "VFMSUB321SD"      "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bb /r]"            "FMA,FUTURE"                )
(list "VFNMADD132SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9d /r]"            "FMA,FUTURE"                )
(list "VFNMADD132SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9d /r]"            "FMA,FUTURE"                )
(list "VFNMADD312SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9d /r]"            "FMA,FUTURE"                )
(list "VFNMADD312SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9d /r]"            "FMA,FUTURE"                )
(list "VFNMADD213SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 ad /r]"            "FMA,FUTURE"                )
(list "VFNMADD213SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 ad /r]"            "FMA,FUTURE"                )
(list "VFNMADD123SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 ad /r]"            "FMA,FUTURE"                )
(list "VFNMADD123SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 ad /r]"            "FMA,FUTURE"                )
(list "VFNMADD231SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bd /r]"            "FMA,FUTURE"                )
(list "VFNMADD231SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bd /r]"            "FMA,FUTURE"                )
(list "VFNMADD321SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bd /r]"            "FMA,FUTURE"                )
(list "VFNMADD321SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bd /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9f /r]"            "FMA,FUTURE"                )
(list "VFNMSUB132SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9f /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 9f /r]"            "FMA,FUTURE"                )
(list "VFNMSUB312SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 9f /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 af /r]"            "FMA,FUTURE"                )
(list "VFNMSUB213SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 af /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 af /r]"            "FMA,FUTURE"                )
(list "VFNMSUB123SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 af /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bf /r]"            "FMA,FUTURE"                )
(list "VFNMSUB231SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bf /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321SS"     "xmmreg,xmmreg,xmmrm32"                      "[rvm: vex.dds.128.66.0f38.w0 bf /r]"            "FMA,FUTURE"                )
(list "VFNMSUB321SD"     "xmmreg,xmmreg,xmmrm64"                      "[rvm: vex.dds.128.66.0f38.w1 bf /r]"            "FMA,FUTURE"                )
(list "RDFSBASE"         "reg32"                                      "[m: norexw f3 0f ae /0]"                        "LONG,FUTURE"               )
(list "RDFSBASE"         "reg64"                                      "[m: o64 f3 0f ae /0]"                           "LONG,FUTURE"               )
(list "RDGSBASE"         "reg32"                                      "[m: norexw f3 0f ae /1]"                        "LONG,FUTURE"               )
(list "RDGSBASE"         "reg64"                                      "[m: o64 f3 0f ae /1]"                           "LONG,FUTURE"               )
(list "RDRAND"           "reg16"                                      "[m: o16 0f c7 /6]"                              "FUTURE"                    )
(list "RDRAND"           "reg32"                                      "[m: o32 0f c7 /6]"                              "FUTURE"                    )
(list "RDRAND"           "reg64"                                      "[m: o64 0f c7 /6]"                              "LONG,FUTURE"               )
(list "WRFSBASE"         "reg32"                                      "[m: norexw f3 0f ae /2]"                        "LONG,FUTURE"               )
(list "WRFSBASE"         "reg64"                                      "[m: o64 f3 0f ae /2]"                           "LONG,FUTURE"               )
(list "WRGSBASE"         "reg32"                                      "[m: norexw f3 0f ae /3]"                        "LONG,FUTURE"               )
(list "WRGSBASE"         "reg64"                                      "[m: o64 f3 0f ae /3]"                           "LONG,FUTURE"               )
(list "VCVTPH2PS"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38.w0 13 /r]"                 "AVX,FUTURE"                )
(list "VCVTPH2PS"        "xmmreg,xmmrm64"                             "[rm: vex.128.66.0f38.w0 13 /r]"                 "AVX,FUTURE"                )
(list "VCVTPS2PH"        "xmmrm128,ymmreg,imm8"                       "[mri: vex.256.66.0f3a.w0 1d /r ib]"             "AVX,FUTURE"                )
(list "VCVTPS2PH"        "xmmrm64,xmmreg,imm8"                        "[mri: vex.128.66.0f3a.w0 1d /r ib]"             "AVX,FUTURE"                )
(list "ADCX"             "reg32,rm32"                                 "[rm: norexw 66 0f 38 f6 /r]"                    "FUTURE"                    )
(list "ADCX"             "reg64,rm64"                                 "[rm: o64 66 0f 38 f6 /r]"                       "LONG,FUTURE"               )
(list "ADOX"             "reg32,rm32"                                 "[rm: norexw f3 0f 38 f6 /r]"                    "FUTURE"                    )
(list "ADOX"             "reg64,rm64"                                 "[rm: o64 f3 0f 38 f6 /r]"                       "LONG,FUTURE"               )
(list "RDSEED"           "reg16"                                      "[m: o16 0f c7 /7]"                              "FUTURE"                    )
(list "RDSEED"           "reg32"                                      "[m: o32 0f c7 /7]"                              "FUTURE"                    )
(list "RDSEED"           "reg64"                                      "[m: o64 0f c7 /7]"                              "LONG,FUTURE"               )
(list "CLAC"             "void"                                       "[ 0f 01 ca]"                                    "PRIV,FUTURE"               )
(list "STAC"             "void"                                       "[ 0f 01 cb]"                                    "PRIV,FUTURE"               )
(list "XSTORE"           "void"                                       "[ 0f a7 c0]"                                    "PENT,CYRIX"                )
(list "XCRYPTECB"        "void"                                       "[ mustrep 0f a7 c8]"                            "PENT,CYRIX"                )
(list "XCRYPTCBC"        "void"                                       "[ mustrep 0f a7 d0]"                            "PENT,CYRIX"                )
(list "XCRYPTCTR"        "void"                                       "[ mustrep 0f a7 d8]"                            "PENT,CYRIX"                )
(list "XCRYPTCFB"        "void"                                       "[ mustrep 0f a7 e0]"                            "PENT,CYRIX"                )
(list "XCRYPTOFB"        "void"                                       "[ mustrep 0f a7 e8]"                            "PENT,CYRIX"                )
(list "MONTMUL"          "void"                                       "[ mustrep 0f a6 c0]"                            "PENT,CYRIX"                )
(list "XSHA1"            "void"                                       "[ mustrep 0f a6 c8]"                            "PENT,CYRIX"                )
(list "XSHA256"          "void"                                       "[ mustrep 0f a6 d0]"                            "PENT,CYRIX"                )
(list "LLWPCB"           "reg32"                                      "[m: xop.m9.w0.l0.p0 12 /0]"                     "AMD,386"                   )
(list "LLWPCB"           "reg64"                                      "[m: xop.m9.w1.l0.p0 12 /0]"                     "AMD,X64"                   )
(list "SLWPCB"           "reg32"                                      "[m: xop.m9.w0.l0.p0 12 /1]"                     "AMD,386"                   )
(list "SLWPCB"           "reg64"                                      "[m: xop.m9.w1.l0.p0 12 /1]"                     "AMD,X64"                   )
(list "LWPVAL"           "reg32,rm32,imm32"                           "[vmi: xop.m10.w0.ndd.l0.p0 12 /1 id]"           "AMD,386"                   )
(list "LWPVAL"           "reg64,rm32,imm32"                           "[vmi: xop.m10.w1.ndd.l0.p0 12 /1 id]"           "AMD,X64"                   )
(list "LWPINS"           "reg32,rm32,imm32"                           "[vmi: xop.m10.w0.ndd.l0.p0 12 /0 id]"           "AMD,386"                   )
(list "LWPINS"           "reg64,rm32,imm32"                           "[vmi: xop.m10.w1.ndd.l0.p0 12 /0 id]"           "AMD,X64"                   )
(list "VFMADDPD"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 69 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPD"         "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 69 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPD"         "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 69 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPD"         "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 69 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPS"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 68 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPS"         "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 68 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPS"         "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 68 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDPS"         "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 68 /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSD"         "xmmreg,xmmreg*,xmmrm64,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 6b /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSD"         "xmmreg,xmmreg*,xmmreg,xmmrm64"              "[rvsm: vex.m3.w1.nds.l0.p1 6b /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSS"         "xmmreg,xmmreg*,xmmrm32,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 6a /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSS"         "xmmreg,xmmreg*,xmmreg,xmmrm32"              "[rvsm: vex.m3.w1.nds.l0.p1 6a /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPD"      "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 5d /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPD"      "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 5d /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPD"      "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 5d /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPD"      "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 5d /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPS"      "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 5c /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPS"      "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 5c /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPS"      "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 5c /r /is4]"         "AMD,SSE5"                  )
(list "VFMADDSUBPS"      "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 5c /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPD"      "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 5f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPD"      "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 5f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPD"      "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 5f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPD"      "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 5f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPS"      "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 5e /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPS"      "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 5e /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPS"      "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 5e /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBADDPS"      "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 5e /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPD"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 6d /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPD"         "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 6d /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPD"         "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 6d /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPD"         "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 6d /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPS"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 6c /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPS"         "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 6c /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPS"         "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 6c /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBPS"         "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 6c /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBSD"         "xmmreg,xmmreg*,xmmrm64,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 6f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBSD"         "xmmreg,xmmreg*,xmmreg,xmmrm64"              "[rvsm: vex.m3.w1.nds.l0.p1 6f /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBSS"         "xmmreg,xmmreg*,xmmrm32,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 6e /r /is4]"         "AMD,SSE5"                  )
(list "VFMSUBSS"         "xmmreg,xmmreg*,xmmreg,xmmrm32"              "[rvsm: vex.m3.w1.nds.l0.p1 6e /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 79 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPD"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 79 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPD"        "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 79 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPD"        "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 79 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPS"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 78 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPS"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 78 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPS"        "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 78 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDPS"        "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 78 /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDSD"        "xmmreg,xmmreg*,xmmrm64,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 7b /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDSD"        "xmmreg,xmmreg*,xmmreg,xmmrm64"              "[rvsm: vex.m3.w1.nds.l0.p1 7b /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDSS"        "xmmreg,xmmreg*,xmmrm32,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 7a /r /is4]"         "AMD,SSE5"                  )
(list "VFNMADDSS"        "xmmreg,xmmreg*,xmmreg,xmmrm32"              "[rvsm: vex.m3.w1.nds.l0.p1 7a /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 7d /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPD"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 7d /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPD"        "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 7d /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPD"        "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 7d /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPS"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: vex.m3.w0.nds.l0.p1 7c /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPS"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.m3.w0.nds.l1.p1 7c /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPS"        "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: vex.m3.w1.nds.l0.p1 7c /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBPS"        "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: vex.m3.w1.nds.l1.p1 7c /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBSD"        "xmmreg,xmmreg*,xmmrm64,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 7f /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBSD"        "xmmreg,xmmreg*,xmmreg,xmmrm64"              "[rvsm: vex.m3.w1.nds.l0.p1 7f /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBSS"        "xmmreg,xmmreg*,xmmrm32,xmmreg"              "[rvms: vex.m3.w0.nds.l0.p1 7e /r /is4]"         "AMD,SSE5"                  )
(list "VFNMSUBSS"        "xmmreg,xmmreg*,xmmreg,xmmrm32"              "[rvsm: vex.m3.w1.nds.l0.p1 7e /r /is4]"         "AMD,SSE5"                  )
(list "VFRCZPD"          "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 81 /r]"                    "AMD,SSE5"                  )
(list "VFRCZPD"          "ymmreg,ymmrm256*"                           "[rm: xop.m9.w0.l1.p0 81 /r]"                    "AMD,SSE5"                  )
(list "VFRCZPS"          "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 80 /r]"                    "AMD,SSE5"                  )
(list "VFRCZPS"          "ymmreg,ymmrm256*"                           "[rm: xop.m9.w0.l1.p0 80 /r]"                    "AMD,SSE5"                  )
(list "VFRCZSD"          "xmmreg,xmmrm64*"                            "[rm: xop.m9.w0.l0.p0 83 /r]"                    "AMD,SSE5"                  )
(list "VFRCZSS"          "xmmreg,xmmrm32*"                            "[rm: xop.m9.w0.l0.p0 82 /r]"                    "AMD,SSE5"                  )
(list "VPCMOV"           "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 a2 /r /is4]"         "AMD,SSE5"                  )
(list "VPCMOV"           "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: xop.m8.w0.nds.l1.p0 a2 /r /is4]"         "AMD,SSE5"                  )
(list "VPCMOV"           "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: xop.m8.w1.nds.l0.p0 a2 /r /is4]"         "AMD,SSE5"                  )
(list "VPCMOV"           "ymmreg,ymmreg*,ymmreg,ymmrm256"             "[rvsm: xop.m8.w1.nds.l1.p0 a2 /r /is4]"         "AMD,SSE5"                  )
(list "VPCOMB"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 cc /r ib]"           "AMD,SSE5"                  )
(list "VPCOMD"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 ce /r ib]"           "AMD,SSE5"                  )
(list "VPCOMQ"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 cf /r ib]"           "AMD,SSE5"                  )
(list "VPCOMUB"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 ec /r ib]"           "AMD,SSE5"                  )
(list "VPCOMUD"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 ee /r ib]"           "AMD,SSE5"                  )
(list "VPCOMUQ"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 ef /r ib]"           "AMD,SSE5"                  )
(list "VPCOMUW"          "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 ed /r ib]"           "AMD,SSE5"                  )
(list "VPCOMW"           "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: xop.m8.w0.nds.l0.p0 cd /r ib]"           "AMD,SSE5"                  )
(list "VPHADDBD"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 c2 /r]"                    "AMD,SSE5"                  )
(list "VPHADDBQ"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 c3 /r]"                    "AMD,SSE5"                  )
(list "VPHADDBW"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 c1 /r]"                    "AMD,SSE5"                  )
(list "VPHADDDQ"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 cb /r]"                    "AMD,SSE5"                  )
(list "VPHADDUBD"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 d2 /r]"                    "AMD,SSE5"                  )
(list "VPHADDUBQ"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 d3 /r]"                    "AMD,SSE5"                  )
(list "VPHADDUBW"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 d1 /r]"                    "AMD,SSE5"                  )
(list "VPHADDUDQ"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 db /r]"                    "AMD,SSE5"                  )
(list "VPHADDUWD"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 d6 /r]"                    "AMD,SSE5"                  )
(list "VPHADDUWQ"        "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 d7 /r]"                    "AMD,SSE5"                  )
(list "VPHADDWD"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 c6 /r]"                    "AMD,SSE5"                  )
(list "VPHADDWQ"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 c7 /r]"                    "AMD,SSE5"                  )
(list "VPHSUBBW"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 e1 /r]"                    "AMD,SSE5"                  )
(list "VPHSUBDQ"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 e3 /r]"                    "AMD,SSE5"                  )
(list "VPHSUBWD"         "xmmreg,xmmrm128*"                           "[rm: xop.m9.w0.l0.p0 e2 /r]"                    "AMD,SSE5"                  )
(list "VPMACSDD"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 9e /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSDQH"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 9f /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSDQL"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 97 /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSSDD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 8e /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSSDQH"       "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 8f /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSSDQL"       "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 87 /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSSWD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 86 /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSSWW"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 85 /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSWD"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 96 /r /is4]"         "AMD,SSE5"                  )
(list "VPMACSWW"         "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 95 /r /is4]"         "AMD,SSE5"                  )
(list "VPMADCSSWD"       "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 a6 /r /is4]"         "AMD,SSE5"                  )
(list "VPMADCSWD"        "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 b6 /r /is4]"         "AMD,SSE5"                  )
(list "VPPERM"           "xmmreg,xmmreg*,xmmreg,xmmrm128"             "[rvsm: xop.m8.w1.nds.l0.p0 a3 /r /is4]"         "AMD,SSE5"                  )
(list "VPPERM"           "xmmreg,xmmreg*,xmmrm128,xmmreg"             "[rvms: xop.m8.w0.nds.l0.p0 a3 /r /is4]"         "AMD,SSE5"                  )
(list "VPROTB"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 90 /r]"               "AMD,SSE5"                  )
(list "VPROTB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 90 /r]"               "AMD,SSE5"                  )
(list "VPROTB"           "xmmreg,xmmrm128*,imm8"                      "[rmi: xop.m8.w0.l0.p0 c0 /r ib]"                "AMD,SSE5"                  )
(list "VPROTD"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 92 /r]"               "AMD,SSE5"                  )
(list "VPROTD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 92 /r]"               "AMD,SSE5"                  )
(list "VPROTD"           "xmmreg,xmmrm128*,imm8"                      "[rmi: xop.m8.w0.l0.p0 c2 /r ib]"                "AMD,SSE5"                  )
(list "VPROTQ"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 93 /r]"               "AMD,SSE5"                  )
(list "VPROTQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 93 /r]"               "AMD,SSE5"                  )
(list "VPROTQ"           "xmmreg,xmmrm128*,imm8"                      "[rmi: xop.m8.w0.l0.p0 c3 /r ib]"                "AMD,SSE5"                  )
(list "VPROTW"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 91 /r]"               "AMD,SSE5"                  )
(list "VPROTW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 91 /r]"               "AMD,SSE5"                  )
(list "VPROTW"           "xmmreg,xmmrm128*,imm8"                      "[rmi: xop.m8.w0.l0.p0 c1 /r ib]"                "AMD,SSE5"                  )
(list "VPSHAB"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 98 /r]"               "AMD,SSE5"                  )
(list "VPSHAB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 98 /r]"               "AMD,SSE5"                  )
(list "VPSHAD"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 9a /r]"               "AMD,SSE5"                  )
(list "VPSHAD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 9a /r]"               "AMD,SSE5"                  )
(list "VPSHAQ"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 9b /r]"               "AMD,SSE5"                  )
(list "VPSHAQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 9b /r]"               "AMD,SSE5"                  )
(list "VPSHAW"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 99 /r]"               "AMD,SSE5"                  )
(list "VPSHAW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 99 /r]"               "AMD,SSE5"                  )
(list "VPSHLB"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 94 /r]"               "AMD,SSE5"                  )
(list "VPSHLB"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 94 /r]"               "AMD,SSE5"                  )
(list "VPSHLD"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 96 /r]"               "AMD,SSE5"                  )
(list "VPSHLD"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 96 /r]"               "AMD,SSE5"                  )
(list "VPSHLQ"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 97 /r]"               "AMD,SSE5"                  )
(list "VPSHLQ"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 97 /r]"               "AMD,SSE5"                  )
(list "VPSHLW"           "xmmreg,xmmrm128*,xmmreg"                    "[rmv: xop.m9.w0.nds.l0.p0 95 /r]"               "AMD,SSE5"                  )
(list "VPSHLW"           "xmmreg,xmmreg*,xmmrm128"                    "[rvm: xop.m9.w1.nds.l0.p0 95 /r]"               "AMD,SSE5"                  )
(list "VMPSADBW"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 42 /r ib]"           "FUTURE,AVX2"               )
(list "VPABSB"           "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38 1c /r]"                    "FUTURE,AVX2"               )
(list "VPABSW"           "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38 1d /r]"                    "FUTURE,AVX2"               )
(list "VPABSD"           "ymmreg,ymmrm256"                            "[rm: vex.256.66.0f38 1e /r]"                    "FUTURE,AVX2"               )
(list "VPACKSSWB"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 63 /r]"                 "FUTURE,AVX2"               )
(list "VPACKSSDW"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 6b /r]"                 "FUTURE,AVX2"               )
(list "VPACKUSDW"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 2b /r]"               "FUTURE,AVX2"               )
(list "VPACKUSWB"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 67 /r]"                 "FUTURE,AVX2"               )
(list "VPADDB"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f fc /r]"                 "FUTURE,AVX2"               )
(list "VPADDW"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f fd /r]"                 "FUTURE,AVX2"               )
(list "VPADDD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f fe /r]"                 "FUTURE,AVX2"               )
(list "VPADDQ"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f d4 /r]"                 "FUTURE,AVX2"               )
(list "VPADDSB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f ec /r]"                 "FUTURE,AVX2"               )
(list "VPADDSW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f ed /r]"                 "FUTURE,AVX2"               )
(list "VPADDUSB"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f dc /r]"                 "FUTURE,AVX2"               )
(list "VPADDUSW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f dd /r]"                 "FUTURE,AVX2"               )
(list "VPALIGNR"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 0f /r ib]"           "FUTURE,AVX2"               )
(list "VPAND"            "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f db /r]"                 "FUTURE,AVX2"               )
(list "VPANDN"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f df /r]"                 "FUTURE,AVX2"               )
(list "VPAVGB"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e0 /r]"                 "FUTURE,AVX2"               )
(list "VPAVGW"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e3 /r]"                 "FUTURE,AVX2"               )
(list "VPBLENDVB"        "ymmreg,ymmreg*,ymmrm256,ymmreg"             "[rvms: vex.nds.256.66.0f3a 4c /r /is4]"         "FUTURE,AVX2"               )
(list "VPBLENDW"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a 0e /r ib]"           "FUTURE,AVX2"               )
(list "VPCMPEQB"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 74 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPEQW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 75 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPEQD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 76 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPEQQ"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 29 /r]"               "FUTURE,AVX2"               )
(list "VPCMPGTB"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 64 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPGTW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 65 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPGTD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 66 /r]"                 "FUTURE,AVX2"               )
(list "VPCMPGTQ"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 37 /r]"               "FUTURE,AVX2"               )
(list "VPHADDW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 01 /r]"               "FUTURE,AVX2"               )
(list "VPHADDD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 02 /r]"               "FUTURE,AVX2"               )
(list "VPHADDSW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 03 /r]"               "FUTURE,AVX2"               )
(list "VPHSUBW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 05 /r]"               "FUTURE,AVX2"               )
(list "VPHSUBD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 06 /r]"               "FUTURE,AVX2"               )
(list "VPHSUBSW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 07 /r]"               "FUTURE,AVX2"               )
(list "VPMADDUBSW"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 04 /r]"               "FUTURE,AVX2"               )
(list "VPMADDWD"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f f5 /r]"                 "FUTURE,AVX2"               )
(list "VPMAXSB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3c /r]"               "FUTURE,AVX2"               )
(list "VPMAXSW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f ee /r]"                 "FUTURE,AVX2"               )
(list "VPMAXSD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3d /r]"               "FUTURE,AVX2"               )
(list "VPMAXUB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f de /r]"                 "FUTURE,AVX2"               )
(list "VPMAXUW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3e /r]"               "FUTURE,AVX2"               )
(list "VPMAXUD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3f /r]"               "FUTURE,AVX2"               )
(list "VPMINSB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 38 /r]"               "FUTURE,AVX2"               )
(list "VPMINSW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f ea /r]"                 "FUTURE,AVX2"               )
(list "VPMINSD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 39 /r]"               "FUTURE,AVX2"               )
(list "VPMINUB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f da /r]"                 "FUTURE,AVX2"               )
(list "VPMINUW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3a /r]"               "FUTURE,AVX2"               )
(list "VPMINUD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 3b /r]"               "FUTURE,AVX2"               )
(list "VPMOVMSKB"        "reg32,ymmreg"                               "[rm: vex.256.66.0f d7 /r]"                      "FUTURE,AVX2"               )
(list "VPMOVMSKB"        "reg64,ymmreg"                               "[rm: vex.256.66.0f d7 /r]"                      "FUTURE,AVX2"               )
(list "VPMOVSXBW"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 20 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXBD"        "ymmreg,mem64"                               "[rm: vex.256.66.0f38 21 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXBD"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 21 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXBQ"        "ymmreg,mem32"                               "[rm: vex.256.66.0f38 22 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXBQ"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 22 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXWD"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 23 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXWQ"        "ymmreg,mem64"                               "[rm: vex.256.66.0f38 24 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXWQ"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 24 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVSXDQ"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 25 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXBW"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 30 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXBD"        "ymmreg,mem64"                               "[rm: vex.256.66.0f38 31 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXBD"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 31 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXBQ"        "ymmreg,mem32"                               "[rm: vex.256.66.0f38 32 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXBQ"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 32 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXWD"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 33 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXWQ"        "ymmreg,mem64"                               "[rm: vex.256.66.0f38 34 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXWQ"        "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38 34 /r]"                    "FUTURE,AVX2"               )
(list "VPMOVZXDQ"        "ymmreg,xmmrm128"                            "[rm: vex.256.66.0f38 35 /r]"                    "FUTURE,AVX2"               )
(list "VPMULDQ"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 28 /r]"               "FUTURE,AVX2"               )
(list "VPMULHRSW"        "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 0b /r]"               "FUTURE,AVX2"               )
(list "VPMULHUW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e4 /r]"                 "FUTURE,AVX2"               )
(list "VPMULHW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e5 /r]"                 "FUTURE,AVX2"               )
(list "VPMULLW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f d5 /r]"                 "FUTURE,AVX2"               )
(list "VPMULLD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 40 /r]"               "FUTURE,AVX2"               )
(list "VPMULUDQ"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f f4 /r]"                 "FUTURE,AVX2"               )
(list "VPOR"             "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f eb /r]"                 "FUTURE,AVX2"               )
(list "VPSADBW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f f6 /r]"                 "FUTURE,AVX2"               )
(list "VPSHUFB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 00 /r]"               "FUTURE,AVX2"               )
(list "VPSHUFD"          "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f 70 /r ib]"                  "FUTURE,AVX2"               )
(list "VPSHUFHW"         "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.f3.0f 70 /r ib]"                  "FUTURE,AVX2"               )
(list "VPSHUFLW"         "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.f2.0f 70 /r ib]"                  "FUTURE,AVX2"               )
(list "VPSIGNB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 08 /r]"               "FUTURE,AVX2"               )
(list "VPSIGNW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 09 /r]"               "FUTURE,AVX2"               )
(list "VPSIGND"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38 0a /r]"               "FUTURE,AVX2"               )
(list "VPSLLDQ"          "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 73 /7 ib]"              "FUTURE,AVX2"               )
(list "VPSLLW"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f f1 /r]"                 "FUTURE,AVX2"               )
(list "VPSLLW"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 71 /6 ib]"              "FUTURE,AVX2"               )
(list "VPSLLD"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f f2 /r]"                 "FUTURE,AVX2"               )
(list "VPSLLD"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 72 /6 ib]"              "FUTURE,AVX2"               )
(list "VPSLLQ"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f f3 /r]"                 "FUTURE,AVX2"               )
(list "VPSLLQ"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 73 /6 ib]"              "FUTURE,AVX2"               )
(list "VPSRAW"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f e1 /r]"                 "FUTURE,AVX2"               )
(list "VPSRAW"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 71 /4 ib]"              "FUTURE,AVX2"               )
(list "VPSRAD"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f e2 /r]"                 "FUTURE,AVX2"               )
(list "VPSRAD"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 72 /4 ib]"              "FUTURE,AVX2"               )
(list "VPSRLDQ"          "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 73 /3 ib]"              "FUTURE,AVX2"               )
(list "VPSRLW"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f d1 /r]"                 "FUTURE,AVX2"               )
(list "VPSRLW"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 71 /2 ib]"              "FUTURE,AVX2"               )
(list "VPSRLD"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f d2 /r]"                 "FUTURE,AVX2"               )
(list "VPSRLD"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f 72 /2 ib]"              "FUTURE,AVX2"               )
(list "VPSRLQ"           "ymmreg,ymmreg*,xmmrm128"                    "[rvm: vex.nds.256.66.0f d3 /r]"                 "FUTURE,AVX2"               )
(list "VPSRLQ"           "ymmreg,ymmreg*,imm8"                        "[vmi: vex.ndd.256.66.0f.wig 73 /2 ib]"          "FUTURE,AVX2"               )
(list "VPSUBB"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f f8 /r]"                 "FUTURE,AVX2"               )
(list "VPSUBW"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f f9 /r]"                 "FUTURE,AVX2"               )
(list "VPSUBD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f fa /r]"                 "FUTURE,AVX2"               )
(list "VPSUBQ"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f fb /r]"                 "FUTURE,AVX2"               )
(list "VPSUBSB"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e8 /r]"                 "FUTURE,AVX2"               )
(list "VPSUBSW"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f e9 /r]"                 "FUTURE,AVX2"               )
(list "VPSUBUSB"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f d8 /r]"                 "FUTURE,AVX2"               )
(list "VPSUBUSW"         "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f d9 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKHBW"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 68 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKHWD"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 69 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKHDQ"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 6a /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKHQDQ"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 6d /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKLBW"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 60 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKLWD"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 61 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKLDQ"       "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 62 /r]"                 "FUTURE,AVX2"               )
(list "VPUNPCKLQDQ"      "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f 6c /r]"                 "FUTURE,AVX2"               )
(list "VPXOR"            "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f ef /r]"                 "FUTURE,AVX2"               )
(list "VMOVNTDQA"        "ymmreg,mem256"                              "[rm: vex.256.66.0f38 2a /r]"                    "FUTURE,AVX2"               )
(list "VBROADCASTSS"     "xmmreg,xmmreg"                              "[rm: vex.128.66.0f38.w0 18 /r]"                 "FUTURE,AVX2"               )
(list "VBROADCASTSS"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 18 /r]"                 "FUTURE,AVX2"               )
(list "VBROADCASTSD"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 19 /r]"                 "FUTURE,AVX2"               )
(list "VBROADCASTI128"   "ymmreg,mem128"                              "[rm: vex.256.66.0f38.w0 5a /r]"                 "FUTURE,AVX2"               )
(list "VPBLENDD"         "xmmreg,xmmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.128.66.0f3a.w0 02 /r ib]"        "FUTURE,AVX2"               )
(list "VPBLENDD"         "ymmreg,ymmreg*,ymmrm256,imm8"               "[rvmi: vex.nds.256.66.0f3a.w0 02 /r ib]"        "FUTURE,AVX2"               )
(list "VPBROADCASTB"     "xmmreg,mem8"                                "[rm: vex.128.66.0f38.w0 78 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTB"     "xmmreg,xmmreg"                              "[rm: vex.128.66.0f38.w0 78 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTB"     "ymmreg,mem8"                                "[rm: vex.256.66.0f38.w0 78 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTB"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 78 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTW"     "xmmreg,mem16"                               "[rm: vex.128.66.0f38.w0 79 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTW"     "xmmreg,xmmreg"                              "[rm: vex.128.66.0f38.w0 79 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTW"     "ymmreg,mem16"                               "[rm: vex.256.66.0f38.w0 79 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTW"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 79 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTD"     "xmmreg,mem32"                               "[rm: vex.128.66.0f38.w0 58 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTD"     "xmmreg,xmmreg"                              "[rm: vex.128.66.0f38.w0 58 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTD"     "ymmreg,mem32"                               "[rm: vex.256.66.0f38.w0 58 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTD"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 58 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTQ"     "xmmreg,mem64"                               "[rm: vex.128.66.0f38.w0 59 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTQ"     "xmmreg,xmmreg"                              "[rm: vex.128.66.0f38.w0 59 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTQ"     "ymmreg,mem64"                               "[rm: vex.256.66.0f38.w0 59 /r]"                 "FUTURE,AVX2"               )
(list "VPBROADCASTQ"     "ymmreg,xmmreg"                              "[rm: vex.256.66.0f38.w0 59 /r]"                 "FUTURE,AVX2"               )
(list "VPERMD"           "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w0 36 /r]"            "FUTURE,AVX2"               )
(list "VPERMPD"          "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a.w1 01 /r ib]"             "FUTURE,AVX2"               )
(list "VPERMPS"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w0 16 /r]"            "FUTURE,AVX2"               )
(list "VPERMQ"           "ymmreg,ymmrm256,imm8"                       "[rmi: vex.256.66.0f3a.w1 00 /r ib]"             "FUTURE,AVX2"               )
(list "VPERM2I128"       "ymmreg,ymmreg,ymmrm256,imm8"                "[rvmi: vex.nds.256.66.0f3a.w0 46 /r ib]"        "FUTURE,AVX2"               )
(list "VEXTRACTI128"     "xmmrm128,ymmreg,imm8"                       "[mri: vex.256.66.0f3a.w0 39 /r ib]"             "FUTURE,AVX2"               )
(list "VINSERTI128"      "ymmreg,ymmreg*,xmmrm128,imm8"               "[rvmi: vex.nds.256.66.0f3a.w0 38 /r ib]"        "FUTURE,AVX2"               )
(list "VPMASKMOVD"       "xmmreg,xmmreg*,mem128"                      "[rvm: vex.nds.128.66.0f38.w0 8c /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVD"       "ymmreg,ymmreg*,mem256"                      "[rvm: vex.nds.256.66.0f38.w0 8c /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVQ"       "xmmreg,xmmreg*,mem128"                      "[rvm: vex.nds.128.66.0f38.w1 8c /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVQ"       "ymmreg,ymmreg*,mem256"                      "[rvm: vex.nds.256.66.0f38.w1 8c /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVD"       "mem128,xmmreg*,xmmreg"                      "[mvr: vex.nds.128.66.0f38.w0 8e /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVD"       "mem256,ymmreg*,ymmreg"                      "[mvr: vex.nds.256.66.0f38.w0 8e /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVQ"       "mem128,xmmreg*,xmmreg"                      "[mvr: vex.nds.128.66.0f38.w1 8e /r]"            "FUTURE,AVX2"               )
(list "VPMASKMOVQ"       "mem256,ymmreg*,ymmreg"                      "[mvr: vex.nds.256.66.0f38.w1 8e /r]"            "FUTURE,AVX2"               )
(list "VPSLLVD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38.w0 47 /r]"            "FUTURE,AVX2"               )
(list "VPSLLVQ"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38.w1 47 /r]"            "FUTURE,AVX2"               )
(list "VPSLLVD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w0 47 /r]"            "FUTURE,AVX2"               )
(list "VPSLLVQ"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w1 47 /r]"            "FUTURE,AVX2"               )
(list "VPSRAVD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38.w0 46 /r]"            "FUTURE,AVX2"               )
(list "VPSRAVD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w0 46 /r]"            "FUTURE,AVX2"               )
(list "VPSRLVD"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38.w0 45 /r]"            "FUTURE,AVX2"               )
(list "VPSRLVQ"          "xmmreg,xmmreg*,xmmrm128"                    "[rvm: vex.nds.128.66.0f38.w1 45 /r]"            "FUTURE,AVX2"               )
(list "VPSRLVD"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w0 45 /r]"            "FUTURE,AVX2"               )
(list "VPSRLVQ"          "ymmreg,ymmreg*,ymmrm256"                    "[rvm: vex.nds.256.66.0f38.w1 45 /r]"            "FUTURE,AVX2"               )
(list "VGATHERDPD"       "xmmreg,xmem64,xmmreg"                       "[rmv: vm32x vex.dds.128.66.0f38.w1 92 /r]"      "FUTURE,AVX2"               )
(list "VGATHERQPD"       "xmmreg,xmem64,xmmreg"                       "[rmv: vm64x vex.dds.128.66.0f38.w1 93 /r]"      "FUTURE,AVX2"               )
(list "VGATHERDPD"       "ymmreg,xmem64,ymmreg"                       "[rmv: vm32x vex.dds.256.66.0f38.w1 92 /r]"      "FUTURE,AVX2"               )
(list "VGATHERQPD"       "ymmreg,ymem64,ymmreg"                       "[rmv: vm64y vex.dds.256.66.0f38.w1 93 /r]"      "FUTURE,AVX2"               )
(list "VGATHERDPS"       "xmmreg,xmem32,xmmreg"                       "[rmv: vm32x vex.dds.128.66.0f38.w0 92 /r]"      "FUTURE,AVX2"               )
(list "VGATHERQPS"       "xmmreg,xmem32,xmmreg"                       "[rmv: vm64x vex.dds.128.66.0f38.w0 93 /r]"      "FUTURE,AVX2"               )
(list "VGATHERDPS"       "ymmreg,ymem32,ymmreg"                       "[rmv: vm32y vex.dds.256.66.0f38.w0 92 /r]"      "FUTURE,AVX2"               )
(list "VGATHERQPS"       "xmmreg,ymem32,xmmreg"                       "[rmv: vm64y vex.dds.256.66.0f38.w0 93 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERDD"       "xmmreg,xmem32,xmmreg"                       "[rmv: vm32x vex.dds.128.66.0f38.w0 90 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERQD"       "xmmreg,xmem32,xmmreg"                       "[rmv: vm64x vex.dds.128.66.0f38.w0 91 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERDD"       "ymmreg,ymem32,ymmreg"                       "[rmv: vm32y vex.dds.256.66.0f38.w0 90 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERQD"       "xmmreg,ymem32,xmmreg"                       "[rmv: vm64y vex.dds.256.66.0f38.w0 91 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERDQ"       "xmmreg,xmem64,xmmreg"                       "[rmv: vm32x vex.dds.128.66.0f38.w1 90 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERQQ"       "xmmreg,xmem64,xmmreg"                       "[rmv: vm64x vex.dds.128.66.0f38.w1 91 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERDQ"       "ymmreg,xmem64,ymmreg"                       "[rmv: vm32x vex.dds.256.66.0f38.w1 90 /r]"      "FUTURE,AVX2"               )
(list "VPGATHERQQ"       "ymmreg,ymem64,ymmreg"                       "[rmv: vm64y vex.dds.256.66.0f38.w1 91 /r]"      "FUTURE,AVX2"               )
(list "XABORT"           "imm"                                        "[i: c6 f8 ib]"                                  "FUTURE,RTM"                )
(list "XABORT"           "imm8"                                       "[i: c6 f8 ib]"                                  "FUTURE,RTM"                )
(list "XBEGIN"           "imm"                                        "[i: odf c7 f8 rel]"                             "FUTURE,RTM"                )
(list "XBEGIN"           "imm|near"                                   "[i: odf c7 f8 rel]"                             "FUTURE,RTM,ND"             )
(list "XBEGIN"           "imm16"                                      "[i: o16 c7 f8 rel]"                             "FUTURE,RTM,NOLONG"         )
(list "XBEGIN"           "imm16|near"                                 "[i: o16 c7 f8 rel]"                             "FUTURE,RTM,NOLONG,ND"      )
(list "XBEGIN"           "imm32"                                      "[i: o32 c7 f8 rel]"                             "FUTURE,RTM,NOLONG"         )
(list "XBEGIN"           "imm32|near"                                 "[i: o32 c7 f8 rel]"                             "FUTURE,RTM,NOLONG,ND"      )
(list "XBEGIN"           "imm64"                                      "[i: o64nw c7 f8 rel]"                           "FUTURE,RTM,LONG"           )
(list "XBEGIN"           "imm64|near"                                 "[i: o64nw c7 f8 rel]"                           "FUTURE,RTM,LONG,ND"        )
(list "XEND"             "void"                                       "[ 0f 01 d5]"                                    "FUTURE,RTM"                )
(list "XTEST"            "void"                                       "[ 0f 01 d6]"                                    "FUTURE,HLE,RTM"            )
(list "ANDN"             "reg32,reg32,rm32"                           "[rvm: vex.nds.lz.0f38.w0 f2 /r]"                "FUTURE,BMI1"               )
(list "ANDN"             "reg64,reg64,rm64"                           "[rvm: vex.nds.lz.0f38.w1 f2 /r]"                "LONG,FUTURE,BMI1"          )
(list "BEXTR"            "reg32,rm32,reg32"                           "[rmv: vex.nds.lz.0f38.w0 f7 /r]"                "FUTURE,BMI1"               )
(list "BEXTR"            "reg64,rm64,reg64"                           "[rmv: vex.nds.lz.0f38.w1 f7 /r]"                "LONG,FUTURE,BMI1"          )
(list "BEXTR"            "reg32,rm32,imm32"                           "[rmi: xop.m10.lz.w0 10 /r id]"                  "FUTURE,TBM"                )
(list "BEXTR"            "reg64,rm64,imm32"                           "[rmi: xop.m10.lz.w1 10 /r id]"                  "LONG,FUTURE,TBM"           )
(list "BLCI"             "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 02 /6]"                   "FUTURE,TBM"                )
(list "BLCI"             "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 02 /6]"                   "LONG,FUTURE,TBM"           )
(list "BLCIC"            "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /5]"                   "FUTURE,TBM"                )
(list "BLCIC"            "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /5]"                   "LONG,FUTURE,TBM"           )
(list "BLSI"             "reg32,rm32"                                 "[vm: vex.ndd.lz.0f38.w0 f3 /3]"                 "FUTURE,BMI1"               )
(list "BLSI"             "reg64,rm64"                                 "[vm: vex.ndd.lz.0f38.w1 f3 /3]"                 "LONG,FUTURE,BMI1"          )
(list "BLSIC"            "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /6]"                   "FUTURE,TBM"                )
(list "BLSIC"            "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /6]"                   "LONG,FUTURE,TBM"           )
(list "BLCFILL"          "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /1]"                   "FUTURE,TBM"                )
(list "BLCFILL"          "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /1]"                   "LONG,FUTURE,TBM"           )
(list "BLSFILL"          "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /2]"                   "FUTURE,TBM"                )
(list "BLSFILL"          "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /2]"                   "LONG,FUTURE,TBM"           )
(list "BLCMSK"           "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 02 /1]"                   "FUTURE,TBM"                )
(list "BLCMSK"           "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 02 /1]"                   "LONG,FUTURE,TBM"           )
(list "BLSMSK"           "reg32,rm32"                                 "[vm: vex.ndd.lz.0f38.w0 f3 /2]"                 "FUTURE,BMI1"               )
(list "BLSMSK"           "reg64,rm64"                                 "[vm: vex.ndd.lz.0f38.w1 f3 /2]"                 "LONG,FUTURE,BMI1"          )
(list "BLSR"             "reg32,rm32"                                 "[vm: vex.ndd.lz.0f38.w0 f3 /1]"                 "FUTURE,BMI1"               )
(list "BLSR"             "reg64,rm64"                                 "[vm: vex.ndd.lz.0f38.w1 f3 /1]"                 "LONG,FUTURE,BMI1"          )
(list "BLCS"             "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /3]"                   "FUTURE,TBM"                )
(list "BLCS"             "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /3]"                   "LONG,FUTURE,TBM"           )
(list "BZHI"             "reg32,rm32,reg32"                           "[rmv: vex.nds.lz.0f38.w0 f5 /r]"                "FUTURE,BMI2"               )
(list "BZHI"             "reg64,rm64,reg64"                           "[rmv: vex.nds.lz.0f38.w1 f5 /r]"                "LONG,FUTURE,BMI2"          )
(list "MULX"             "reg32,reg32,rm32"                           "[rvm: vex.ndd.lz.f2.0f38.w0 f6 /r]"             "FUTURE,BMI2"               )
(list "MULX"             "reg64,reg64,rm64"                           "[rvm: vex.ndd.lz.f2.0f38.w1 f6 /r]"             "LONG,FUTURE,BMI2"          )
(list "PDEP"             "reg32,reg32,rm32"                           "[rvm: vex.nds.lz.f2.0f38.w0 f5 /r]"             "FUTURE,BMI2"               )
(list "PDEP"             "reg64,reg64,rm64"                           "[rvm: vex.nds.lz.f2.0f38.w1 f5 /r]"             "LONG,FUTURE,BMI2"          )
(list "PEXT"             "reg32,reg32,rm32"                           "[rvm: vex.nds.lz.f3.0f38.w0 f5 /r]"             "FUTURE,BMI2"               )
(list "PEXT"             "reg64,reg64,rm64"                           "[rvm: vex.nds.lz.f3.0f38.w1 f5 /r]"             "LONG,FUTURE,BMI2"          )
(list "RORX"             "reg32,rm32,imm8"                            "[rmi: vex.lz.f2.0f3a.w0 f0 /r ib]"              "FUTURE,BMI2"               )
(list "RORX"             "reg64,rm64,imm8"                            "[rmi: vex.lz.f2.0f3a.w1 f0 /r ib]"              "LONG,FUTURE,BMI2"          )
(list "SARX"             "reg32,rm32,reg32"                           "[rmv: vex.nds.lz.f3.0f38.w0 f7 /r]"             "FUTURE,BMI2"               )
(list "SARX"             "reg64,rm64,reg64"                           "[rmv: vex.nds.lz.f3.0f38.w1 f7 /r]"             "LONG,FUTURE,BMI2"          )
(list "SHLX"             "reg32,rm32,reg32"                           "[rmv: vex.nds.lz.66.0f38.w0 f7 /r]"             "FUTURE,BMI2"               )
(list "SHLX"             "reg64,rm64,reg64"                           "[rmv: vex.nds.lz.66.0f38.w1 f7 /r]"             "LONG,FUTURE,BMI2"          )
(list "SHRX"             "reg32,rm32,reg32"                           "[rmv: vex.nds.lz.f2.0f38.w0 f7 /r]"             "FUTURE,BMI2"               )
(list "SHRX"             "reg64,rm64,reg64"                           "[rmv: vex.nds.lz.f2.0f38.w1 f7 /r]"             "LONG,FUTURE,BMI2"          )
(list "TZCNT"            "reg16,rm16"                                 "[rm: o16 f3i 0f bc /r]"                         "FUTURE,BMI1"               )
(list "TZCNT"            "reg32,rm32"                                 "[rm: o32 f3i 0f bc /r]"                         "FUTURE,BMI1"               )
(list "TZCNT"            "reg64,rm64"                                 "[rm: o64 f3i 0f bc /r]"                         "LONG,FUTURE,BMI1"          )
(list "TZMSK"            "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /4]"                   "FUTURE,TBM"                )
(list "TZMSK"            "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /4]"                   "LONG,FUTURE,TBM"           )
(list "T1MSKC"           "reg32,rm32"                                 "[vm: xop.ndd.lz.m9.w0 01 /7]"                   "FUTURE,TBM"                )
(list "T1MSKC"           "reg64,rm64"                                 "[vm: xop.ndd.lz.m9.w1 01 /7]"                   "LONG,FUTURE,TBM"           )
(list "PREFETCHWT1"      "mem8"                                       "[m: 0f 0d /2 ]"                                 "PREFETCHWT1,FUTURE"        )
(list "BNDMK"            "bndreg,mem"                                 "[rm: f3 0f 1b /r ]"                             "MPX,MIB,FUTURE"            )
(list "BNDCL"            "bndreg,mem"                                 "[rm: f3 0f 1a /r ]"                             "MPX,FUTURE"                )
(list "BNDCL"            "bndreg,reg32"                               "[rm: f3 0f 1a /r ]"                             "MPX,NOLONG,FUTURE"         )
(list "BNDCL"            "bndreg,reg64"                               "[rm: o64nw f3 0f 1a /r ]"                       "MPX,LONG,FUTURE"           )
(list "BNDCU"            "bndreg,mem"                                 "[rm: f2 0f 1a /r ]"                             "MPX,FUTURE"                )
(list "BNDCU"            "bndreg,reg32"                               "[rm: f2 0f 1a /r ]"                             "MPX,NOLONG,FUTURE"         )
(list "BNDCU"            "bndreg,reg64"                               "[rm: o64nw f2 0f 1a /r ]"                       "MPX,LONG,FUTURE"           )
(list "BNDCN"            "bndreg,mem"                                 "[rm: f2 0f 1b /r ]"                             "MPX,FUTURE"                )
(list "BNDCN"            "bndreg,reg32"                               "[rm: f2 0f 1b /r ]"                             "MPX,NOLONG,FUTURE"         )
(list "BNDCN"            "bndreg,reg64"                               "[rm: o64nw f2 0f 1b /r ]"                       "MPX,LONG,FUTURE"           )
(list "BNDMOV"           "bndreg,bndreg"                              "[rm: 66 0f 1a /r ]"                             "MPX,FUTURE"                )
(list "BNDMOV"           "bndreg,mem"                                 "[rm: 66 0f 1a /r ]"                             "MPX,FUTURE"                )
(list "BNDMOV"           "bndreg,bndreg"                              "[mr: 66 0f 1b /r ]"                             "MPX,FUTURE"                )
(list "BNDMOV"           "mem,bndreg"                                 "[mr: 66 0f 1b /r ]"                             "MPX,FUTURE"                )
(list "BNDLDX"           "bndreg,mem"                                 "[rm: 0f 1a /r ]"                                "MPX,MIB,FUTURE"            )
(list "BNDLDX"           "bndreg,mem,reg32"                           "[rmx: 0f 1a /r ]"                               "MPX,MIB,NOLONG,FUTURE"     )
(list "BNDLDX"           "bndreg,mem,reg64"                           "[rmx: 0f 1a /r ]"                               "MPX,MIB,LONG,FUTURE"       )
(list "BNDSTX"           "mem,bndreg"                                 "[mr: 0f 1b /r ]"                                "MPX,MIB,FUTURE"            )
(list "BNDSTX"           "mem,reg32,bndreg"                           "[mxr: 0f 1b /r ]"                               "MPX,MIB,NOLONG,FUTURE"     )
(list "BNDSTX"           "mem,reg64,bndreg"                           "[mxr: 0f 1b /r ]"                               "MPX,MIB,LONG,FUTURE"       )
(list "BNDSTX"           "mem,bndreg,reg32"                           "[mrx: 0f 1b /r ]"                               "MPX,MIB,NOLONG,FUTURE"     )
(list "BNDSTX"           "mem,bndreg,reg64"                           "[mrx: 0f 1b /r ]"                               "MPX,MIB,LONG,FUTURE"       )
(list "KADDB"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 4a /r ]"              "FUTURE"                    )
(list "KADDD"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 4a /r ]"              "FUTURE"                    )
(list "KADDQ"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 4a /r ]"                 "FUTURE"                    )
(list "KADDW"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 4a /r ]"                 "FUTURE"                    )
(list "KANDB"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 41 /r ]"              "FUTURE"                    )
(list "KANDD"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 41 /r ]"              "FUTURE"                    )
(list "KANDNB"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 42 /r ]"              "FUTURE"                    )
(list "KANDND"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 42 /r ]"              "FUTURE"                    )
(list "KANDNQ"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 42 /r ]"                 "FUTURE"                    )
(list "KANDNW"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 42 /r ]"                 "FUTURE"                    )
(list "KANDQ"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 41 /r ]"                 "FUTURE"                    )
(list "KANDW"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 41 /r ]"                 "FUTURE"                    )
(list "KMOVB"            "kreg,krm8"                                  "[rm: vex.l0.66.0f.w0 90 /r ]"                   "FUTURE"                    )
(list "KMOVB"            "mem8,kreg"                                  "[mr: vex.l0.66.0f.w0 91 /r ]"                   "FUTURE"                    )
(list "KMOVB"            "kreg,reg32"                                 "[rm: vex.l0.66.0f.w0 92 /r ]"                   "FUTURE"                    )
(list "KMOVB"            "reg32,kreg"                                 "[rm: vex.l0.66.0f.w0 93 /r ]"                   "FUTURE"                    )
(list "KMOVD"            "kreg,krm32"                                 "[rm: vex.l0.66.0f.w1 90 /r ]"                   "FUTURE"                    )
(list "KMOVD"            "mem32,kreg"                                 "[mr: vex.l0.66.0f.w1 91 /r ]"                   "FUTURE"                    )
(list "KMOVD"            "kreg,reg32"                                 "[rm: vex.l0.f2.0f.w0 92 /r ]"                   "FUTURE"                    )
(list "KMOVD"            "reg32,kreg"                                 "[rm: vex.l0.f2.0f.w0 93 /r ]"                   "FUTURE"                    )
(list "KMOVQ"            "kreg,krm64"                                 "[rm: vex.l0.0f.w1 90 /r ]"                      "FUTURE"                    )
(list "KMOVQ"            "mem64,kreg"                                 "[mr: vex.l0.0f.w1 91 /r ]"                      "FUTURE"                    )
(list "KMOVQ"            "kreg,reg64"                                 "[rm: vex.l0.f2.0f.w1 92 /r ]"                   "FUTURE"                    )
(list "KMOVQ"            "reg64,kreg"                                 "[rm: vex.l0.f2.0f.w1 93 /r ]"                   "FUTURE"                    )
(list "KMOVW"            "kreg,krm16"                                 "[rm: vex.l0.0f.w0 90 /r ]"                      "FUTURE"                    )
(list "KMOVW"            "mem16,kreg"                                 "[mr: vex.l0.0f.w0 91 /r ]"                      "FUTURE"                    )
(list "KMOVW"            "kreg,reg32"                                 "[rm: vex.l0.0f.w0 92 /r ]"                      "FUTURE"                    )
(list "KMOVW"            "reg32,kreg"                                 "[rm: vex.l0.0f.w0 93 /r ]"                      "FUTURE"                    )
(list "KNOTB"            "kreg,kreg"                                  "[rm: vex.l0.66.0f.w0 44 /r ]"                   "FUTURE"                    )
(list "KNOTD"            "kreg,kreg"                                  "[rm: vex.l0.66.0f.w1 44 /r ]"                   "FUTURE"                    )
(list "KNOTQ"            "kreg,kreg"                                  "[rm: vex.l0.0f.w1 44 /r ]"                      "FUTURE"                    )
(list "KNOTW"            "kreg,kreg"                                  "[rm: vex.l0.0f.w0 44 /r ]"                      "FUTURE"                    )
(list "KORB"             "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 45 /r ]"              "FUTURE"                    )
(list "KORD"             "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 45 /r ]"              "FUTURE"                    )
(list "KORQ"             "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 45 /r ]"                 "FUTURE"                    )
(list "KORTESTB"         "kreg,kreg"                                  "[rm: vex.l0.66.0f.w0 98 /r ]"                   "FUTURE"                    )
(list "KORTESTD"         "kreg,kreg"                                  "[rm: vex.l0.66.0f.w1 98 /r ]"                   "FUTURE"                    )
(list "KORTESTQ"         "kreg,kreg"                                  "[rm: vex.l0.0f.w1 98 /r ]"                      "FUTURE"                    )
(list "KORTESTW"         "kreg,kreg"                                  "[rm: vex.l0.0f.w0 98 /r ]"                      "FUTURE"                    )
(list "KORW"             "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 45 /r ]"                 "FUTURE"                    )
(list "KSHIFTLB"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w0 32 /r ib ]"             "FUTURE"                    )
(list "KSHIFTLD"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w0 33 /r ib ]"             "FUTURE"                    )
(list "KSHIFTLQ"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w1 33 /r ib ]"             "FUTURE"                    )
(list "KSHIFTLW"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w1 32 /r ib ]"             "FUTURE"                    )
(list "KSHIFTRB"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w0 30 /r ib ]"             "FUTURE"                    )
(list "KSHIFTRD"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w0 31 /r ib ]"             "FUTURE"                    )
(list "KSHIFTRQ"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w1 31 /r ib ]"             "FUTURE"                    )
(list "KSHIFTRW"         "kreg,kreg,imm8"                             "[rmi: vex.l0.66.0f3a.w1 30 /r ib ]"             "FUTURE"                    )
(list "KTESTB"           "kreg,kreg"                                  "[rm: vex.l0.66.0f.w0 99 /r ]"                   "FUTURE"                    )
(list "KTESTD"           "kreg,kreg"                                  "[rm: vex.l0.66.0f.w1 99 /r ]"                   "FUTURE"                    )
(list "KTESTQ"           "kreg,kreg"                                  "[rm: vex.l0.0f.w1 99 /r ]"                      "FUTURE"                    )
(list "KTESTW"           "kreg,kreg"                                  "[rm: vex.l0.0f.w0 99 /r ]"                      "FUTURE"                    )
(list "KUNPCKBW"         "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 4b /r ]"              "FUTURE"                    )
(list "KUNPCKDQ"         "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 4b /r ]"                 "FUTURE"                    )
(list "KUNPCKWD"         "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 4b /r ]"                 "FUTURE"                    )
(list "KXNORB"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 46 /r ]"              "FUTURE"                    )
(list "KXNORD"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 46 /r ]"              "FUTURE"                    )
(list "KXNORQ"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 46 /r ]"                 "FUTURE"                    )
(list "KXNORW"           "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 46 /r ]"                 "FUTURE"                    )
(list "KXORB"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w0 47 /r ]"              "FUTURE"                    )
(list "KXORD"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.66.0f.w1 47 /r ]"              "FUTURE"                    )
(list "KXORQ"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w1 47 /r ]"                 "FUTURE"                    )
(list "KXORW"            "kreg,kreg,kreg"                             "[rvm: vex.nds.l1.0f.w0 47 /r ]"                 "FUTURE"                    )
(list "SHA1MSG1"         "xmmreg,xmmrm128"                            "[rm: 0f 38 c9 /r ]"                             "SHA,FUTURE"                )
(list "SHA1MSG2"         "xmmreg,xmmrm128"                            "[rm: 0f 38 ca /r ]"                             "SHA,FUTURE"                )
(list "SHA1NEXTE"        "xmmreg,xmmrm128"                            "[rm: 0f 38 c8 /r ]"                             "SHA,FUTURE"                )
(list "SHA1RNDS4"        "xmmreg,xmmrm128,imm8"                       "[rmi: 0f 3a cc /r ib ]"                         "SHA,FUTURE"                )
(list "SHA256MSG1"       "xmmreg,xmmrm128"                            "[rm: 0f 38 cc /r ]"                             "SHA,FUTURE"                )
(list "SHA256MSG2"       "xmmreg,xmmrm128"                            "[rm: 0f 38 cd /r ]"                             "SHA,FUTURE"                )
(list "SHA256RNDS2"      "xmmreg,xmmrm128,xmm0"                       "[rm-: 0f 38 cb /r ]"                            "SHA,FUTURE"                )
(list "VADDPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 58 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VADDPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 58 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VADDPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f.w1 58 /r ]"         "AVX512,FUTURE"             )
(list "VADDPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 58 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VADDPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 58 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VADDPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.0f.w0 58 /r ]"            "AVX512,FUTURE"             )
(list "VADDSD"           "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 58 /r ]"        "AVX512,FUTURE"             )
(list "VADDSS"           "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.f3.0f.w0 58 /r ]"        "AVX512,FUTURE"             )
(list "VALIGND"          "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w0 03 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VALIGND"          "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 03 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VALIGND"          "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w0 03 /r ib ]"   "AVX512,FUTURE"             )
(list "VALIGNQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w1 03 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VALIGNQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 03 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VALIGNQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w1 03 /r ib ]"   "AVX512,FUTURE"             )
(list "VANDNPD"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 55 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDNPD"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 55 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDNPD"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 55 /r ]"         "AVX512DQ,FUTURE"           )
(list "VANDNPS"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 55 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDNPS"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 55 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDNPS"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 55 /r ]"            "AVX512DQ,FUTURE"           )
(list "VANDPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 54 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 54 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 54 /r ]"         "AVX512DQ,FUTURE"           )
(list "VANDPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 54 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 54 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VANDPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 54 /r ]"            "AVX512DQ,FUTURE"           )
(list "VBLENDMPD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 65 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VBLENDMPD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 65 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VBLENDMPD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 65 /r ]"       "AVX512,FUTURE"             )
(list "VBLENDMPS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 65 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VBLENDMPS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 65 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VBLENDMPS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 65 /r ]"       "AVX512,FUTURE"             )
(list "VBROADCASTF32X2"  "ymmreg|mask|z,xmmrm64"                      "[rm:t2: evex.256.66.0f38.w0 19 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VBROADCASTF32X2"  "zmmreg|mask|z,xmmrm64"                      "[rm:t2: evex.512.66.0f38.w0 19 /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTF32X4"  "ymmreg|mask|z,mem128"                       "[rm:t4: evex.256.66.0f38.w0 1a /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTF32X4"  "zmmreg|mask|z,mem128"                       "[rm:t4: evex.512.66.0f38.w0 1a /r ]"            "AVX512,FUTURE"             )
(list "VBROADCASTF32X8"  "zmmreg|mask|z,mem256"                       "[rm:t8: evex.512.66.0f38.w0 1b /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTF64X2"  "ymmreg|mask|z,mem128"                       "[rm:t2: evex.256.66.0f38.w1 1a /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VBROADCASTF64X2"  "zmmreg|mask|z,mem128"                       "[rm:t2: evex.512.66.0f38.w1 1a /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTF64X4"  "zmmreg|mask|z,mem256"                       "[rm:t4: evex.512.66.0f38.w1 1b /r ]"            "AVX512,FUTURE"             )
(list "VBROADCASTI32X2"  "xmmreg|mask|z,xmmrm64"                      "[rm:t2: evex.128.66.0f38.w0 59 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VBROADCASTI32X2"  "ymmreg|mask|z,xmmrm64"                      "[rm:t2: evex.256.66.0f38.w0 59 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VBROADCASTI32X2"  "zmmreg|mask|z,xmmrm64"                      "[rm:t2: evex.512.66.0f38.w0 59 /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTI32X4"  "ymmreg|mask|z,mem128"                       "[rm:t4: evex.256.66.0f38.w0 5a /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTI32X4"  "zmmreg|mask|z,mem128"                       "[rm:t4: evex.512.66.0f38.w0 5a /r ]"            "AVX512,FUTURE"             )
(list "VBROADCASTI32X8"  "zmmreg|mask|z,mem256"                       "[rm:t8: evex.512.66.0f38.w0 5b /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTI64X2"  "ymmreg|mask|z,mem128"                       "[rm:t2: evex.256.66.0f38.w1 5a /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VBROADCASTI64X2"  "zmmreg|mask|z,mem128"                       "[rm:t2: evex.512.66.0f38.w1 5a /r ]"            "AVX512DQ,FUTURE"           )
(list "VBROADCASTI64X4"  "zmmreg|mask|z,mem256"                       "[rm:t4: evex.512.66.0f38.w1 5b /r ]"            "AVX512,FUTURE"             )
(list "VBROADCASTSD"     "ymmreg|mask|z,mem64"                        "[rm:t1s: evex.256.66.0f38.w1 19 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSD"     "zmmreg|mask|z,mem64"                        "[rm:t1s: evex.512.66.0f38.w1 19 /r ]"           "AVX512,FUTURE"             )
(list "VBROADCASTSD"     "ymmreg|mask|z,xmmreg"                       "[rm: evex.256.66.0f38.w1 19 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSD"     "zmmreg|mask|z,xmmreg"                       "[rm: evex.512.66.0f38.w1 19 /r ]"               "AVX512,FUTURE"             )
(list "VBROADCASTSS"     "xmmreg|mask|z,mem32"                        "[rm:t1s: evex.128.66.0f38.w0 18 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSS"     "ymmreg|mask|z,mem32"                        "[rm:t1s: evex.256.66.0f38.w0 18 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSS"     "zmmreg|mask|z,mem32"                        "[rm:t1s: evex.512.66.0f38.w0 18 /r ]"           "AVX512,FUTURE"             )
(list "VBROADCASTSS"     "xmmreg|mask|z,xmmreg"                       "[rm: evex.128.66.0f38.w0 18 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSS"     "ymmreg|mask|z,xmmreg"                       "[rm: evex.256.66.0f38.w0 18 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VBROADCASTSS"     "zmmreg|mask|z,xmmreg"                       "[rm: evex.512.66.0f38.w0 18 /r ]"               "AVX512,FUTURE"             )
(list "VCMPPD"           "kreg|mask,xmmreg,xmmrm128|b64,imm8"         "[rvmi:fv: evex.nds.128.66.0f.w1 c2 /r ib ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VCMPPD"           "kreg|mask,ymmreg,ymmrm256|b64,imm8"         "[rvmi:fv: evex.nds.256.66.0f.w1 c2 /r ib ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VCMPPD"           "kreg|mask,zmmreg,zmmrm512|b64|sae,imm8"     "[rvmi:fv: evex.nds.512.66.0f.w1 c2 /r ib ]"     "AVX512,FUTURE"             )
(list "VCMPPS"           "kreg|mask,xmmreg,xmmrm128|b32,imm8"         "[rvmi:fv: evex.nds.128.0f.w0 c2 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VCMPPS"           "kreg|mask,ymmreg,ymmrm256|b32,imm8"         "[rvmi:fv: evex.nds.256.0f.w0 c2 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VCMPPS"           "kreg|mask,zmmreg,zmmrm512|b32|sae,imm8"     "[rvmi:fv: evex.nds.512.0f.w0 c2 /r ib ]"        "AVX512,FUTURE"             )
(list "VCMPSD"           "kreg|mask,xmmreg,xmmrm64|sae,imm8"          "[rvmi:t1s: evex.nds.128.f2.0f.w1 c2 /r ib ]"    "AVX512,FUTURE"             )
(list "VCMPSS"           "kreg|mask,xmmreg,xmmrm32|sae,imm8"          "[rvmi:t1s: evex.nds.128.f3.0f.w0 c2 /r ib ]"    "AVX512,FUTURE"             )
(list "VCOMISD"          "xmmreg,xmmrm64|sae"                         "[rm:t1s: evex.128.66.0f.w1 2f /r ]"             "AVX512,FUTURE"             )
(list "VCOMISS"          "xmmreg,xmmrm32|sae"                         "[rm:t1s: evex.128.0f.w0 2f /r ]"                "AVX512,FUTURE"             )
(list "VCOMPRESSPD"      "mem128|mask,xmmreg"                         "[mr:t1s: evex.128.66.0f38.w1 8a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPD"      "mem256|mask,ymmreg"                         "[mr:t1s: evex.256.66.0f38.w1 8a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPD"      "mem512|mask,zmmreg"                         "[mr:t1s: evex.512.66.0f38.w1 8a /r ]"           "AVX512,FUTURE"             )
(list "VCOMPRESSPD"      "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f38.w1 8a /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPD"      "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f38.w1 8a /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPD"      "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f38.w1 8a /r ]"               "AVX512,FUTURE"             )
(list "VCOMPRESSPS"      "mem128|mask,xmmreg"                         "[mr:t1s: evex.128.66.0f38.w0 8a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPS"      "mem256|mask,ymmreg"                         "[mr:t1s: evex.256.66.0f38.w0 8a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPS"      "mem512|mask,zmmreg"                         "[mr:t1s: evex.512.66.0f38.w0 8a /r ]"           "AVX512,FUTURE"             )
(list "VCOMPRESSPS"      "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f38.w0 8a /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPS"      "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f38.w0 8a /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VCOMPRESSPS"      "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f38.w0 8a /r ]"               "AVX512,FUTURE"             )
(list "VCVTDQ2PD"        "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.f3.0f.w0 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTDQ2PD"        "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.f3.0f.w0 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTDQ2PD"        "zmmreg|mask|z,ymmrm256|b32|er"              "[rm:hv: evex.512.f3.0f.w0 e6 /r ]"              "AVX512,FUTURE"             )
(list "VCVTDQ2PS"        "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.0f.w0 5b /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTDQ2PS"        "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.0f.w0 5b /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTDQ2PS"        "zmmreg|mask|z,zmmrm512|b32|er"              "[rm:fv: evex.512.0f.w0 5b /r ]"                 "AVX512,FUTURE"             )
(list "VCVTPD2DQ"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.f2.0f.w1 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2DQ"        "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.f2.0f.w1 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2DQ"        "ymmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.f2.0f.w1 e6 /r ]"              "AVX512,FUTURE"             )
(list "VCVTPD2PS"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 5a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2PS"        "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 5a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2PS"        "ymmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.66.0f.w1 5a /r ]"              "AVX512,FUTURE"             )
(list "VCVTPD2QQ"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 7b /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPD2QQ"        "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 7b /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPD2QQ"        "zmmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.66.0f.w1 7b /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTPD2UDQ"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.0f.w1 79 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2UDQ"       "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.0f.w1 79 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPD2UDQ"       "ymmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.0f.w1 79 /r ]"                 "AVX512,FUTURE"             )
(list "VCVTPD2UQQ"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 79 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPD2UQQ"       "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 79 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPD2UQQ"       "zmmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.66.0f.w1 79 /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTPH2PS"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.w0 13 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPH2PS"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.w0 13 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPH2PS"        "zmmreg|mask|z,ymmrm256|sae"                 "[rm:hvm: evex.512.66.0f38.w0 13 /r ]"           "AVX512,FUTURE"             )
(list "VCVTPS2DQ"        "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f.w0 5b /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2DQ"        "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f.w0 5b /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2DQ"        "zmmreg|mask|z,zmmrm512|b32|er"              "[rm:fv: evex.512.66.0f.w0 5b /r ]"              "AVX512,FUTURE"             )
(list "VCVTPS2PD"        "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.0f.w0 5a /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PD"        "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.0f.w0 5a /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PD"        "zmmreg|mask|z,ymmrm256|b32|sae"             "[rm:hv: evex.512.0f.w0 5a /r ]"                 "AVX512,FUTURE"             )
(list "VCVTPS2PH"        "xmmreg|mask|z,xmmreg,imm8"                  "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PH"        "xmmreg|mask|z,ymmreg,imm8"                  "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PH"        "ymmreg|mask|z,zmmreg|sae,imm8"              "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"       "AVX512,FUTURE"             )
(list "VCVTPS2PH"        "mem64|mask,xmmreg,imm8"                     "[mri:hvm: evex.128.66.0f3a.w0 1d /r ib ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PH"        "mem128|mask,ymmreg,imm8"                    "[mri:hvm: evex.256.66.0f3a.w0 1d /r ib ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2PH"        "mem256|mask,zmmreg|sae,imm8"                "[mri:hvm: evex.512.66.0f3a.w0 1d /r ib ]"       "AVX512,FUTURE"             )
(list "VCVTPS2QQ"        "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.66.0f.w0 7b /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPS2QQ"        "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.66.0f.w0 7b /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPS2QQ"        "zmmreg|mask|z,ymmrm256|b32|er"              "[rm:hv: evex.512.66.0f.w0 7b /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTPS2UDQ"       "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.0f.w0 79 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2UDQ"       "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.0f.w0 79 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTPS2UDQ"       "zmmreg|mask|z,zmmrm512|b32|er"              "[rm:fv: evex.512.0f.w0 79 /r ]"                 "AVX512,FUTURE"             )
(list "VCVTPS2UQQ"       "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.66.0f.w0 79 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPS2UQQ"       "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.66.0f.w0 79 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTPS2UQQ"       "zmmreg|mask|z,ymmrm256|b32|er"              "[rm:hv: evex.512.66.0f.w0 79 /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTQQ2PD"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.f3.0f.w1 e6 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTQQ2PD"        "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.f3.0f.w1 e6 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTQQ2PD"        "zmmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.f3.0f.w1 e6 /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTQQ2PS"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.0f.w1 5b /r ]"                 "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTQQ2PS"        "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.0f.w1 5b /r ]"                 "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTQQ2PS"        "ymmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.0f.w1 5b /r ]"                 "AVX512DQ,FUTURE"           )
(list "VCVTSD2SI"        "reg32,xmmrm64|er"                           "[rm:t1f64: evex.128.f2.0f.w0 2d /r ]"           "AVX512,FUTURE"             )
(list "VCVTSD2SI"        "reg64,xmmrm64|er"                           "[rm:t1f64: evex.128.f2.0f.w1 2d /r ]"           "AVX512,FUTURE"             )
(list "VCVTSD2SS"        "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 5a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSD2USI"       "reg32,xmmrm64|er"                           "[rm:t1f64: evex.128.f2.0f.w0 79 /r ]"           "AVX512,FUTURE"             )
(list "VCVTSD2USI"       "reg64,xmmrm64|er"                           "[rm:t1f64: evex.128.f2.0f.w1 79 /r ]"           "AVX512,FUTURE"             )
(list "VCVTSI2SD"        "xmmreg,xmmreg|er,rm32"                      "[rvm:t1s: evex.nds.128.f2.0f.w0 2a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSI2SD"        "xmmreg,xmmreg|er,rm64"                      "[rvm:t1s: evex.nds.128.f2.0f.w1 2a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSI2SS"        "xmmreg,xmmreg|er,rm32"                      "[rvm:t1s: evex.nds.128.f3.0f.w0 2a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSI2SS"        "xmmreg,xmmreg|er,rm64"                      "[rvm:t1s: evex.nds.128.f3.0f.w1 2a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSS2SD"        "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.f3.0f.w0 5a /r ]"        "AVX512,FUTURE"             )
(list "VCVTSS2SI"        "reg32,xmmrm32|er"                           "[rm:t1f32: evex.128.f3.0f.w0 2d /r ]"           "AVX512,FUTURE"             )
(list "VCVTSS2SI"        "reg64,xmmrm32|er"                           "[rm:t1f32: evex.128.f3.0f.w1 2d /r ]"           "AVX512,FUTURE"             )
(list "VCVTSS2USI"       "reg32,xmmrm32|er"                           "[rm:t1f32: evex.128.f3.0f.w0 79 /r ]"           "AVX512,FUTURE"             )
(list "VCVTSS2USI"       "reg64,xmmrm32|er"                           "[rm:t1f32: evex.128.f3.0f.w1 79 /r ]"           "AVX512,FUTURE"             )
(list "VCVTTPD2DQ"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPD2DQ"       "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 e6 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPD2DQ"       "ymmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f.w1 e6 /r ]"              "AVX512,FUTURE"             )
(list "VCVTTPD2QQ"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPD2QQ"       "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPD2QQ"       "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f.w1 7a /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTTPD2UDQ"      "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.0f.w1 78 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPD2UDQ"      "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.0f.w1 78 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPD2UDQ"      "ymmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.0f.w1 78 /r ]"                 "AVX512,FUTURE"             )
(list "VCVTTPD2UQQ"      "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 78 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPD2UQQ"      "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 78 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPD2UQQ"      "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f.w1 78 /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTTPS2DQ"       "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.f3.0f.w0 5b /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPS2DQ"       "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.f3.0f.w0 5b /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPS2DQ"       "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.f3.0f.w0 5b /r ]"              "AVX512,FUTURE"             )
(list "VCVTTPS2QQ"       "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.66.0f.w0 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPS2QQ"       "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.66.0f.w0 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPS2QQ"       "zmmreg|mask|z,ymmrm256|b32|sae"             "[rm:hv: evex.512.66.0f.w0 7a /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTTPS2UDQ"      "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.0f.w0 78 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPS2UDQ"      "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.0f.w0 78 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VCVTTPS2UDQ"      "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.0f.w0 78 /r ]"                 "AVX512,FUTURE"             )
(list "VCVTTPS2UQQ"      "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.66.0f.w0 78 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPS2UQQ"      "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.66.0f.w0 78 /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTTPS2UQQ"      "zmmreg|mask|z,ymmrm256|b32|sae"             "[rm:hv: evex.512.66.0f.w0 78 /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTTSD2SI"       "reg32,xmmrm64|sae"                          "[rm:t1f64: evex.128.f2.0f.w0 2c /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSD2SI"       "reg64,xmmrm64|sae"                          "[rm:t1f64: evex.128.f2.0f.w1 2c /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSD2USI"      "reg32,xmmrm64|sae"                          "[rm:t1f64: evex.128.f2.0f.w0 78 /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSD2USI"      "reg64,xmmrm64|sae"                          "[rm:t1f64: evex.128.f2.0f.w1 78 /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSS2SI"       "reg32,xmmrm32|sae"                          "[rm:t1f32: evex.128.f3.0f.w0 2c /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSS2SI"       "reg64,xmmrm32|sae"                          "[rm:t1f32: evex.128.f3.0f.w1 2c /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSS2USI"      "reg32,xmmrm32|sae"                          "[rm:t1f32: evex.128.f3.0f.w0 78 /r ]"           "AVX512,FUTURE"             )
(list "VCVTTSS2USI"      "reg64,xmmrm32|sae"                          "[rm:t1f32: evex.128.f3.0f.w1 78 /r ]"           "AVX512,FUTURE"             )
(list "VCVTUDQ2PD"       "xmmreg|mask|z,xmmrm64|b32"                  "[rm:hv: evex.128.f3.0f.w0 7a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTUDQ2PD"       "ymmreg|mask|z,xmmrm128|b32"                 "[rm:hv: evex.256.f3.0f.w0 7a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTUDQ2PD"       "zmmreg|mask|z,ymmrm256|b32|er"              "[rm:hv: evex.512.f3.0f.w0 7a /r ]"              "AVX512,FUTURE"             )
(list "VCVTUDQ2PS"       "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.f2.0f.w0 7a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTUDQ2PS"       "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.f2.0f.w0 7a /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VCVTUDQ2PS"       "zmmreg|mask|z,zmmrm512|b32|er"              "[rm:fv: evex.512.f2.0f.w0 7a /r ]"              "AVX512,FUTURE"             )
(list "VCVTUQQ2PD"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.f3.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTUQQ2PD"       "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.f3.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTUQQ2PD"       "zmmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.f3.0f.w1 7a /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTUQQ2PS"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.f2.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTUQQ2PS"       "xmmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.f2.0f.w1 7a /r ]"              "AVX512VL,AVX512DQ,FUTURE"  )
(list "VCVTUQQ2PS"       "ymmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.f2.0f.w1 7a /r ]"              "AVX512DQ,FUTURE"           )
(list "VCVTUSI2SD"       "xmmreg,xmmreg|er,rm32"                      "[rvm:t1s: evex.nds.128.f2.0f.w0 7b /r ]"        "AVX512,FUTURE"             )
(list "VCVTUSI2SD"       "xmmreg,xmmreg|er,rm64"                      "[rvm:t1s: evex.nds.128.f2.0f.w1 7b /r ]"        "AVX512,FUTURE"             )
(list "VCVTUSI2SS"       "xmmreg,xmmreg|er,rm32"                      "[rvm:t1s: evex.nds.128.f3.0f.w0 7b /r ]"        "AVX512,FUTURE"             )
(list "VCVTUSI2SS"       "xmmreg,xmmreg|er,rm64"                      "[rvm:t1s: evex.nds.128.f3.0f.w1 7b /r ]"        "AVX512,FUTURE"             )
(list "VDBPSADBW"        "xmmreg|mask|z,xmmreg,xmmrm128,imm8"         "[rvmi:fvm: evex.nds.128.66.0f3a.w0 42 /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VDBPSADBW"        "ymmreg|mask|z,ymmreg,ymmrm256,imm8"         "[rvmi:fvm: evex.nds.256.66.0f3a.w0 42 /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VDBPSADBW"        "zmmreg|mask|z,zmmreg,zmmrm512,imm8"         "[rvmi:fvm: evex.nds.512.66.0f3a.w0 42 /r ib ]"  "AVX512BW,FUTURE"           )
(list "VDIVPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 5e /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VDIVPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 5e /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VDIVPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f.w1 5e /r ]"         "AVX512,FUTURE"             )
(list "VDIVPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 5e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VDIVPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 5e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VDIVPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.0f.w0 5e /r ]"            "AVX512,FUTURE"             )
(list "VDIVSD"           "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 5e /r ]"        "AVX512,FUTURE"             )
(list "VDIVSS"           "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.f3.0f.w0 5e /r ]"        "AVX512,FUTURE"             )
(list "VEXP2PD"          "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f38.w1 c8 /r ]"            "AVX512ER,FUTURE"           )
(list "VEXP2PS"          "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.66.0f38.w0 c8 /r ]"            "AVX512ER,FUTURE"           )
(list "VEXPANDPD"        "xmmreg|mask|z,mem128"                       "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPD"        "ymmreg|mask|z,mem256"                       "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPD"        "zmmreg|mask|z,mem512"                       "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"           "AVX512,FUTURE"             )
(list "VEXPANDPD"        "xmmreg|mask|z,xmmreg"                       "[rm:t1s: evex.128.66.0f38.w1 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPD"        "ymmreg|mask|z,ymmreg"                       "[rm:t1s: evex.256.66.0f38.w1 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPD"        "zmmreg|mask|z,zmmreg"                       "[rm:t1s: evex.512.66.0f38.w1 88 /r ]"           "AVX512,FUTURE"             )
(list "VEXPANDPS"        "xmmreg|mask|z,mem128"                       "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPS"        "ymmreg|mask|z,mem256"                       "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPS"        "zmmreg|mask|z,mem512"                       "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"           "AVX512,FUTURE"             )
(list "VEXPANDPS"        "xmmreg|mask|z,xmmreg"                       "[rm:t1s: evex.128.66.0f38.w0 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPS"        "ymmreg|mask|z,ymmreg"                       "[rm:t1s: evex.256.66.0f38.w0 88 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXPANDPS"        "zmmreg|mask|z,zmmreg"                       "[rm:t1s: evex.512.66.0f38.w0 88 /r ]"           "AVX512,FUTURE"             )
(list "VEXTRACTF32X4"    "xmmreg|mask|z,ymmreg,imm8"                  "[mri: evex.256.66.0f3a.w0 19 /r ib ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXTRACTF32X4"    "xmmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w0 19 /r ib ]"           "AVX512,FUTURE"             )
(list "VEXTRACTF32X4"    "mem128|mask,ymmreg,imm8"                    "[mri:t4: evex.256.66.0f3a.w0 19 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VEXTRACTF32X4"    "mem128|mask,zmmreg,imm8"                    "[mri:t4: evex.512.66.0f3a.w0 19 /r ib ]"        "AVX512,FUTURE"             )
(list "VEXTRACTF32X8"    "ymmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w0 1b /r ib ]"           "AVX512DQ,FUTURE"           )
(list "VEXTRACTF32X8"    "mem256|mask,zmmreg,imm8"                    "[mri:t8: evex.512.66.0f3a.w0 1b /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VEXTRACTF64X2"    "xmmreg|mask|z,ymmreg,imm8"                  "[mri: evex.256.66.0f3a.w1 19 /r ib ]"           "AVX512VL,AVX512DQ,FUTURE"  )
(list "VEXTRACTF64X2"    "xmmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w1 19 /r ib ]"           "AVX512DQ,FUTURE"           )
(list "VEXTRACTF64X2"    "mem128|mask,ymmreg,imm8"                    "[mri:t2: evex.256.66.0f3a.w1 19 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VEXTRACTF64X2"    "mem128|mask,zmmreg,imm8"                    "[mri:t2: evex.512.66.0f3a.w1 19 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VEXTRACTF64X4"    "ymmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w1 1b /r ib ]"           "AVX512,FUTURE"             )
(list "VEXTRACTF64X4"    "mem256|mask,zmmreg,imm8"                    "[mri:t4: evex.512.66.0f3a.w1 1b /r ib ]"        "AVX512,FUTURE"             )
(list "VEXTRACTI32X4"    "xmmreg|mask|z,ymmreg,imm8"                  "[mri: evex.256.66.0f3a.w0 39 /r ib ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VEXTRACTI32X4"    "xmmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w0 39 /r ib ]"           "AVX512,FUTURE"             )
(list "VEXTRACTI32X4"    "mem128|mask,ymmreg,imm8"                    "[mri:t4: evex.256.66.0f3a.w0 39 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VEXTRACTI32X4"    "mem128|mask,zmmreg,imm8"                    "[mri:t4: evex.512.66.0f3a.w0 39 /r ib ]"        "AVX512,FUTURE"             )
(list "VEXTRACTI32X8"    "ymmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w0 3b /r ib ]"           "AVX512DQ,FUTURE"           )
(list "VEXTRACTI32X8"    "mem256|mask,zmmreg,imm8"                    "[mri:t8: evex.512.66.0f3a.w0 3b /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VEXTRACTI64X2"    "xmmreg|mask|z,ymmreg,imm8"                  "[mri: evex.256.66.0f3a.w1 39 /r ib ]"           "AVX512VL,AVX512DQ,FUTURE"  )
(list "VEXTRACTI64X2"    "xmmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w1 39 /r ib ]"           "AVX512DQ,FUTURE"           )
(list "VEXTRACTI64X2"    "mem128|mask,ymmreg,imm8"                    "[mri:t2: evex.256.66.0f3a.w1 39 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VEXTRACTI64X2"    "mem128|mask,zmmreg,imm8"                    "[mri:t2: evex.512.66.0f3a.w1 39 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VEXTRACTI64X4"    "ymmreg|mask|z,zmmreg,imm8"                  "[mri: evex.512.66.0f3a.w1 3b /r ib ]"           "AVX512,FUTURE"             )
(list "VEXTRACTI64X4"    "mem256|mask,zmmreg,imm8"                    "[mri:t4: evex.512.66.0f3a.w1 3b /r ib ]"        "AVX512,FUTURE"             )
(list "VEXTRACTPS"       "reg32,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"      "AVX512,FUTURE"             )
(list "VEXTRACTPS"       "reg64,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"      "AVX512,FUTURE"             )
(list "VEXTRACTPS"       "mem32,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 17 /r ib ]"      "AVX512,FUTURE"             )
(list "VFIXUPIMMPD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w1 54 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VFIXUPIMMPD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 54 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VFIXUPIMMPD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8" "[rvmi:fv: evex.nds.512.66.0f3a.w1 54 /r ib ]"   "AVX512,FUTURE"             )
(list "VFIXUPIMMPS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w0 54 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VFIXUPIMMPS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 54 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VFIXUPIMMPS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8" "[rvmi:fv: evex.nds.512.66.0f3a.w0 54 /r ib ]"   "AVX512,FUTURE"             )
(list "VFIXUPIMMSD"      "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w1 55 /r ib ]"  "AVX512,FUTURE"             )
(list "VFIXUPIMMSS"      "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w0 55 /r ib ]"  "AVX512,FUTURE"             )
(list "VFMADD132PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 98 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD132PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 98 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD132PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 98 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD132PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 98 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD132PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 98 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD132PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 98 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD132SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 99 /r ]"      "AVX512,FUTURE"             )
(list "VFMADD132SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 99 /r ]"      "AVX512,FUTURE"             )
(list "VFMADD213PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 a8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD213PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 a8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD213PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 a8 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD213PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 a8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD213PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 a8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD213PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 a8 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD213SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 a9 /r ]"      "AVX512,FUTURE"             )
(list "VFMADD213SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 a9 /r ]"      "AVX512,FUTURE"             )
(list "VFMADD231PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 b8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD231PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 b8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD231PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 b8 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD231PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 b8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD231PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 b8 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADD231PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 b8 /r ]"       "AVX512,FUTURE"             )
(list "VFMADD231SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 b9 /r ]"      "AVX512,FUTURE"             )
(list "VFMADD231SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 b9 /r ]"      "AVX512,FUTURE"             )
(list "VFMADDSUB132PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 96 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB132PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 96 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB132PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 96 /r ]"       "AVX512,FUTURE"             )
(list "VFMADDSUB132PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 96 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB132PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 96 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB132PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 96 /r ]"       "AVX512,FUTURE"             )
(list "VFMADDSUB213PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 a6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB213PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 a6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB213PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 a6 /r ]"       "AVX512,FUTURE"             )
(list "VFMADDSUB213PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 a6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB213PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 a6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB213PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 a6 /r ]"       "AVX512,FUTURE"             )
(list "VFMADDSUB231PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 b6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB231PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 b6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB231PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 b6 /r ]"       "AVX512,FUTURE"             )
(list "VFMADDSUB231PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 b6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB231PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 b6 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMADDSUB231PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 b6 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB132PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 9a /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB132PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 9a /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB132PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 9a /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB132PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 9a /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB132PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 9a /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB132PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 9a /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB132SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 9b /r ]"      "AVX512,FUTURE"             )
(list "VFMSUB132SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 9b /r ]"      "AVX512,FUTURE"             )
(list "VFMSUB213PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 aa /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB213PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 aa /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB213PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 aa /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB213PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 aa /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB213PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 aa /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB213PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 aa /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB213SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 ab /r ]"      "AVX512,FUTURE"             )
(list "VFMSUB213SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 ab /r ]"      "AVX512,FUTURE"             )
(list "VFMSUB231PD"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 ba /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB231PD"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 ba /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB231PD"      "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 ba /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB231PS"      "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 ba /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB231PS"      "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 ba /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUB231PS"      "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 ba /r ]"       "AVX512,FUTURE"             )
(list "VFMSUB231SD"      "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 bb /r ]"      "AVX512,FUTURE"             )
(list "VFMSUB231SS"      "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 bb /r ]"      "AVX512,FUTURE"             )
(list "VFMSUBADD132PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 97 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD132PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 97 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD132PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 97 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUBADD132PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 97 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD132PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 97 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD132PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 97 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUBADD213PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 a7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD213PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 a7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD213PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 a7 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUBADD213PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 a7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD213PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 a7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD213PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 a7 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUBADD231PD"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 b7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD231PD"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 b7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD231PD"   "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 b7 /r ]"       "AVX512,FUTURE"             )
(list "VFMSUBADD231PS"   "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 b7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD231PS"   "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 b7 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFMSUBADD231PS"   "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 b7 /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD132PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 9c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD132PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 9c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD132PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 9c /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD132PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 9c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD132PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 9c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD132PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 9c /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD132SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 9d /r ]"      "AVX512,FUTURE"             )
(list "VFNMADD132SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 9d /r ]"      "AVX512,FUTURE"             )
(list "VFNMADD213PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 ac /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD213PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 ac /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD213PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 ac /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD213PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 ac /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD213PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 ac /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD213PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 ac /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD213SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 ad /r ]"      "AVX512,FUTURE"             )
(list "VFNMADD213SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 ad /r ]"      "AVX512,FUTURE"             )
(list "VFNMADD231PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 bc /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD231PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 bc /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD231PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 bc /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD231PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 bc /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD231PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 bc /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMADD231PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 bc /r ]"       "AVX512,FUTURE"             )
(list "VFNMADD231SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 bd /r ]"      "AVX512,FUTURE"             )
(list "VFNMADD231SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 bd /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB132PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 9e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB132PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 9e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB132PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 9e /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB132PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 9e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB132PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 9e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB132PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 9e /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB132SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 9f /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB132SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 9f /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB213PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 ae /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB213PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 ae /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB213PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 ae /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB213PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 ae /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB213PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 ae /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB213PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 ae /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB213SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 af /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB213SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 af /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB231PD"     "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 be /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB231PD"     "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 be /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB231PD"     "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 be /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB231PS"     "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 be /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB231PS"     "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 be /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VFNMSUB231PS"     "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 be /r ]"       "AVX512,FUTURE"             )
(list "VFNMSUB231SD"     "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 bf /r ]"      "AVX512,FUTURE"             )
(list "VFNMSUB231SS"     "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 bf /r ]"      "AVX512,FUTURE"             )
(list "VFPCLASSPD"       "kreg|mask,xmmrm128|b64,imm8"                "[rmi:fv: evex.128.66.0f3a.w1 66 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VFPCLASSPD"       "kreg|mask,ymmrm256|b64,imm8"                "[rmi:fv: evex.256.66.0f3a.w1 66 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VFPCLASSPD"       "kreg|mask,zmmrm512|b64,imm8"                "[rmi:fv: evex.512.66.0f3a.w1 66 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VFPCLASSPS"       "kreg|mask,xmmrm128|b32,imm8"                "[rmi:fv: evex.128.66.0f3a.w0 66 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VFPCLASSPS"       "kreg|mask,ymmrm256|b32,imm8"                "[rmi:fv: evex.256.66.0f3a.w0 66 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VFPCLASSPS"       "kreg|mask,zmmrm512|b32,imm8"                "[rmi:fv: evex.512.66.0f3a.w0 66 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VFPCLASSSD"       "kreg|mask,xmmrm64,imm8"                     "[rmi:t1s: evex.128.66.0f3a.w1 67 /r ib ]"       "AVX512DQ,FUTURE"           )
(list "VFPCLASSSS"       "kreg|mask,xmmrm32,imm8"                     "[rmi:t1s: evex.128.66.0f3a.w0 67 /r ib ]"       "AVX512DQ,FUTURE"           )
(list "VGATHERDPD"       "xmmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.128.66.0f38.w1 92 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERDPD"       "ymmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.256.66.0f38.w1 92 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERDPD"       "zmmreg|mask,ymem64"                         "[rm:t1s: vsiby evex.512.66.0f38.w1 92 /r ]"     "AVX512,FUTURE"             )
(list "VGATHERDPS"       "xmmreg|mask,xmem32"                         "[rm:t1s: vsibx evex.128.66.0f38.w0 92 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERDPS"       "ymmreg|mask,ymem32"                         "[rm:t1s: vsiby evex.256.66.0f38.w0 92 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERDPS"       "zmmreg|mask,zmem32"                         "[rm:t1s: vsibz evex.512.66.0f38.w0 92 /r ]"     "AVX512,FUTURE"             )
(list "VGATHERPF0DPD"    "ymem64|mask"                                "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /1 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF0DPS"    "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /1 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF0QPD"    "zmem64|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /1 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF0QPS"    "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /1 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF1DPD"    "ymem64|mask"                                "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /2 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF1DPS"    "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /2 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF1QPD"    "zmem64|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /2 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERPF1QPS"    "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /2 ]"      "AVX512PF,FUTURE"           )
(list "VGATHERQPD"       "xmmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.128.66.0f38.w1 93 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERQPD"       "ymmreg|mask,ymem64"                         "[rm:t1s: vsiby evex.256.66.0f38.w1 93 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERQPD"       "zmmreg|mask,zmem64"                         "[rm:t1s: vsibz evex.512.66.0f38.w1 93 /r ]"     "AVX512,FUTURE"             )
(list "VGATHERQPS"       "xmmreg|mask,xmem32"                         "[rm:t1s: vsibx evex.128.66.0f38.w0 93 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERQPS"       "xmmreg|mask,ymem32"                         "[rm:t1s: vsiby evex.256.66.0f38.w0 93 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VGATHERQPS"       "ymmreg|mask,zmem32"                         "[rm:t1s: vsibz evex.512.66.0f38.w0 93 /r ]"     "AVX512,FUTURE"             )
(list "VGETEXPPD"        "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 42 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VGETEXPPD"        "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 42 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VGETEXPPD"        "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f38.w1 42 /r ]"            "AVX512,FUTURE"             )
(list "VGETEXPPS"        "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 42 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VGETEXPPS"        "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 42 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VGETEXPPS"        "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.66.0f38.w0 42 /r ]"            "AVX512,FUTURE"             )
(list "VGETEXPSD"        "xmmreg|mask|z,xmmreg,xmmrm64|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w1 43 /r ]"      "AVX512,FUTURE"             )
(list "VGETEXPSS"        "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w0 43 /r ]"      "AVX512,FUTURE"             )
(list "VGETMANTPD"       "xmmreg|mask|z,xmmrm128|b64,imm8"            "[rmi:fv: evex.128.66.0f3a.w1 26 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VGETMANTPD"       "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 26 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VGETMANTPD"       "zmmreg|mask|z,zmmrm512|b64|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w1 26 /r ib ]"        "AVX512,FUTURE"             )
(list "VGETMANTPS"       "xmmreg|mask|z,xmmrm128|b32,imm8"            "[rmi:fv: evex.128.66.0f3a.w0 26 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VGETMANTPS"       "ymmreg|mask|z,ymmrm256|b32,imm8"            "[rmi:fv: evex.256.66.0f3a.w0 26 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VGETMANTPS"       "zmmreg|mask|z,zmmrm512|b32|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w0 26 /r ib ]"        "AVX512,FUTURE"             )
(list "VGETMANTSD"       "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w1 27 /r ib ]"  "AVX512,FUTURE"             )
(list "VGETMANTSS"       "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w0 27 /r ib ]"  "AVX512,FUTURE"             )
(list "VINSERTF32X4"     "ymmreg|mask|z,ymmreg,xmmrm128,imm8"         "[rvmi:t4: evex.nds.256.66.0f3a.w0 18 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VINSERTF32X4"     "zmmreg|mask|z,zmmreg,xmmrm128,imm8"         "[rvmi:t4: evex.nds.512.66.0f3a.w0 18 /r ib ]"   "AVX512,FUTURE"             )
(list "VINSERTF32X8"     "zmmreg|mask|z,zmmreg,ymmrm256,imm8"         "[rvmi:t8: evex.nds.512.66.0f3a.w0 1a /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VINSERTF64X2"     "ymmreg|mask|z,ymmreg,xmmrm128,imm8"         "[rvmi:t2: evex.nds.256.66.0f3a.w1 18 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VINSERTF64X2"     "zmmreg|mask|z,zmmreg,xmmrm128,imm8"         "[rvmi:t2: evex.nds.512.66.0f3a.w1 18 /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VINSERTF64X4"     "zmmreg|mask|z,zmmreg,ymmrm256,imm8"         "[rvmi:t4: evex.nds.512.66.0f3a.w1 1a /r ib ]"   "AVX512,FUTURE"             )
(list "VINSERTI32X4"     "ymmreg|mask|z,ymmreg,xmmrm128,imm8"         "[rvmi:t4: evex.nds.256.66.0f3a.w0 38 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VINSERTI32X4"     "zmmreg|mask|z,zmmreg,xmmrm128,imm8"         "[rvmi:t4: evex.nds.512.66.0f3a.w0 38 /r ib ]"   "AVX512,FUTURE"             )
(list "VINSERTI32X8"     "zmmreg|mask|z,zmmreg,ymmrm256,imm8"         "[rvmi:t8: evex.nds.512.66.0f3a.w0 3a /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VINSERTI64X2"     "ymmreg|mask|z,ymmreg,xmmrm128,imm8"         "[rvmi:t2: evex.nds.256.66.0f3a.w1 38 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VINSERTI64X2"     "zmmreg|mask|z,zmmreg,xmmrm128,imm8"         "[rvmi:t2: evex.nds.512.66.0f3a.w1 38 /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VINSERTI64X4"     "zmmreg|mask|z,zmmreg,ymmrm256,imm8"         "[rvmi:t4: evex.nds.512.66.0f3a.w1 3a /r ib ]"   "AVX512,FUTURE"             )
(list "VINSERTPS"        "xmmreg,xmmreg,xmmrm32,imm8"                 "[rvmi:t1s: evex.nds.128.66.0f3a.w0 21 /r ib ]"  "AVX512,FUTURE"             )
(list "VMAXPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 5f /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMAXPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 5f /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMAXPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"      "[rvm:fv: evex.nds.512.66.0f.w1 5f /r ]"         "AVX512,FUTURE"             )
(list "VMAXPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 5f /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMAXPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 5f /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMAXPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"      "[rvm:fv: evex.nds.512.0f.w0 5f /r ]"            "AVX512,FUTURE"             )
(list "VMAXSD"           "xmmreg|mask|z,xmmreg,xmmrm64|sae"           "[rvm:t1s: evex.nds.128.f2.0f.w1 5f /r ]"        "AVX512,FUTURE"             )
(list "VMAXSS"           "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.f3.0f.w0 5f /r ]"        "AVX512,FUTURE"             )
(list "VMINPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 5d /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMINPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 5d /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMINPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae"      "[rvm:fv: evex.nds.512.66.0f.w1 5d /r ]"         "AVX512,FUTURE"             )
(list "VMINPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 5d /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMINPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 5d /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMINPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae"      "[rvm:fv: evex.nds.512.0f.w0 5d /r ]"            "AVX512,FUTURE"             )
(list "VMINSD"           "xmmreg|mask|z,xmmreg,xmmrm64|sae"           "[rvm:t1s: evex.nds.128.f2.0f.w1 5d /r ]"        "AVX512,FUTURE"             )
(list "VMINSS"           "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.f3.0f.w0 5d /r ]"        "AVX512,FUTURE"             )
(list "VMOVAPD"          "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f.w1 28 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f.w1 28 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f.w1 28 /r ]"             "AVX512,FUTURE"             )
(list "VMOVAPD"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f.w1 29 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f.w1 29 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f.w1 29 /r ]"                 "AVX512,FUTURE"             )
(list "VMOVAPD"          "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.66.0f.w1 29 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.66.0f.w1 29 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPD"          "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.66.0f.w1 29 /r ]"             "AVX512,FUTURE"             )
(list "VMOVAPS"          "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.0f.w0 28 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.0f.w0 28 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.0f.w0 28 /r ]"                "AVX512,FUTURE"             )
(list "VMOVAPS"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.0f.w0 29 /r ]"                    "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.0f.w0 29 /r ]"                    "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.0f.w0 29 /r ]"                    "AVX512,FUTURE"             )
(list "VMOVAPS"          "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.0f.w0 29 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.0f.w0 29 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVAPS"          "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.0f.w0 29 /r ]"                "AVX512,FUTURE"             )
(list "VMOVD"            "xmmreg,rm32"                                "[rm:t1s: evex.128.66.0f.w0 6e /r ]"             "AVX512,FUTURE"             )
(list "VMOVD"            "rm32,xmmreg"                                "[mr:t1s: evex.128.66.0f.w0 7e /r ]"             "AVX512,FUTURE"             )
(list "VMOVDDUP"         "xmmreg|mask|z,xmmrm64"                      "[rm:dup: evex.128.f2.0f.w1 12 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDDUP"         "ymmreg|mask|z,ymmrm256"                     "[rm:dup: evex.256.f2.0f.w1 12 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDDUP"         "zmmreg|mask|z,zmmrm512"                     "[rm:dup: evex.512.f2.0f.w1 12 /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQA32"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f.w0 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f.w0 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f.w0 6f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQA32"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f.w0 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f.w0 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f.w0 7f /r ]"                 "AVX512,FUTURE"             )
(list "VMOVDQA32"        "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.66.0f.w0 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.66.0f.w0 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA32"        "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.66.0f.w0 7f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQA64"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f.w1 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f.w1 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f.w1 6f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQA64"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f.w1 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f.w1 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f.w1 7f /r ]"                 "AVX512,FUTURE"             )
(list "VMOVDQA64"        "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.66.0f.w1 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.66.0f.w1 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQA64"        "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.66.0f.w1 7f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQU16"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f2.0f.w1 6f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f2.0f.w1 6f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f2.0f.w1 6f /r ]"             "AVX512BW,FUTURE"           )
(list "VMOVDQU16"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f2.0f.w1 7f /r ]"                 "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.f2.0f.w1 7f /r ]"                 "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.f2.0f.w1 7f /r ]"                 "AVX512BW,FUTURE"           )
(list "VMOVDQU16"        "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.f2.0f.w1 7f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.f2.0f.w1 7f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU16"        "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.f2.0f.w1 7f /r ]"             "AVX512BW,FUTURE"           )
(list "VMOVDQU32"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f3.0f.w0 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f3.0f.w0 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f3.0f.w0 6f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQU32"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f.w0 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f.w0 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f.w0 7f /r ]"                 "AVX512,FUTURE"             )
(list "VMOVDQU32"        "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.f3.0f.w0 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.f3.0f.w0 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU32"        "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.f3.0f.w0 7f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQU64"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f3.0f.w1 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f3.0f.w1 6f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f3.0f.w1 6f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQU64"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f.w1 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f.w1 7f /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f.w1 7f /r ]"                 "AVX512,FUTURE"             )
(list "VMOVDQU64"        "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.f3.0f.w1 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.f3.0f.w1 7f /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVDQU64"        "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.f3.0f.w1 7f /r ]"             "AVX512,FUTURE"             )
(list "VMOVDQU8"         "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f2.0f.w0 6f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f2.0f.w0 6f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f2.0f.w0 6f /r ]"             "AVX512BW,FUTURE"           )
(list "VMOVDQU8"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f2.0f.w0 7f /r ]"                 "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.f2.0f.w0 7f /r ]"                 "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.f2.0f.w0 7f /r ]"                 "AVX512BW,FUTURE"           )
(list "VMOVDQU8"         "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.f2.0f.w0 7f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.f2.0f.w0 7f /r ]"             "AVX512VL,AVX512BW,FUTURE"  )
(list "VMOVDQU8"         "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.f2.0f.w0 7f /r ]"             "AVX512BW,FUTURE"           )
(list "VMOVHLPS"         "xmmreg,xmmreg,xmmreg"                       "[rvm: evex.nds.128.0f.w0 12 /r ]"               "AVX512,FUTURE"             )
(list "VMOVHPD"          "xmmreg,xmmreg,mem64"                        "[rvm:t1s: evex.nds.128.66.0f.w1 16 /r ]"        "AVX512,FUTURE"             )
(list "VMOVHPD"          "mem64,xmmreg"                               "[mr:t1s: evex.128.66.0f.w1 17 /r ]"             "AVX512,FUTURE"             )
(list "VMOVHPS"          "xmmreg,xmmreg,mem64"                        "[rvm:t2: evex.nds.128.0f.w0 16 /r ]"            "AVX512,FUTURE"             )
(list "VMOVHPS"          "mem64,xmmreg"                               "[mr:t2: evex.128.0f.w0 17 /r ]"                 "AVX512,FUTURE"             )
(list "VMOVLHPS"         "xmmreg,xmmreg,xmmreg"                       "[rvm: evex.nds.128.0f.w0 16 /r ]"               "AVX512,FUTURE"             )
(list "VMOVLPD"          "xmmreg,xmmreg,mem64"                        "[rvm:t1s: evex.nds.128.66.0f.w1 12 /r ]"        "AVX512,FUTURE"             )
(list "VMOVLPD"          "mem64,xmmreg"                               "[mr:t1s: evex.128.66.0f.w1 13 /r ]"             "AVX512,FUTURE"             )
(list "VMOVLPS"          "xmmreg,xmmreg,mem64"                        "[rvm:t2: evex.nds.128.0f.w0 12 /r ]"            "AVX512,FUTURE"             )
(list "VMOVLPS"          "mem64,xmmreg"                               "[mr:t2: evex.128.0f.w0 13 /r ]"                 "AVX512,FUTURE"             )
(list "VMOVNTDQ"         "mem128,xmmreg"                              "[mr:fvm: evex.128.66.0f.w0 e7 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTDQ"         "mem256,ymmreg"                              "[mr:fvm: evex.256.66.0f.w0 e7 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTDQ"         "mem512,zmmreg"                              "[mr:fvm: evex.512.66.0f.w0 e7 /r ]"             "AVX512,FUTURE"             )
(list "VMOVNTDQA"        "xmmreg,mem128"                              "[rm:fvm: evex.128.66.0f38.w0 2a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTDQA"        "ymmreg,mem256"                              "[rm:fvm: evex.256.66.0f38.w0 2a /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTDQA"        "zmmreg,mem512"                              "[rm:fvm: evex.512.66.0f38.w0 2a /r ]"           "AVX512,FUTURE"             )
(list "VMOVNTPD"         "mem128,xmmreg"                              "[mr:fvm: evex.128.66.0f.w1 2b /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTPD"         "mem256,ymmreg"                              "[mr:fvm: evex.256.66.0f.w1 2b /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTPD"         "mem512,zmmreg"                              "[mr:fvm: evex.512.66.0f.w1 2b /r ]"             "AVX512,FUTURE"             )
(list "VMOVNTPS"         "mem128,xmmreg"                              "[mr:fvm: evex.128.0f.w0 2b /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTPS"         "mem256,ymmreg"                              "[mr:fvm: evex.256.0f.w0 2b /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVNTPS"         "mem512,zmmreg"                              "[mr:fvm: evex.512.0f.w0 2b /r ]"                "AVX512,FUTURE"             )
(list "VMOVQ"            "xmmreg,rm64"                                "[rm:t1s: evex.128.66.0f.w1 6e /r ]"             "AVX512,FUTURE"             )
(list "VMOVQ"            "rm64,xmmreg"                                "[mr:t1s: evex.128.66.0f.w1 7e /r ]"             "AVX512,FUTURE"             )
(list "VMOVQ"            "xmmreg,xmmrm64"                             "[rm:t1s: evex.128.f3.0f.w1 7e /r ]"             "AVX512,FUTURE"             )
(list "VMOVQ"            "xmmrm64,xmmreg"                             "[mr:t1s: evex.128.66.0f.w1 d6 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSD"           "xmmreg|mask|z,mem64"                        "[rm:t1s: evex.128.f2.0f.w1 10 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSD"           "mem64|mask,xmmreg"                          "[mr:t1s: evex.128.f2.0f.w1 11 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSD"           "xmmreg|mask|z,xmmreg,xmmreg"                "[rvm: evex.nds.128.f2.0f.w1 10 /r ]"            "AVX512,FUTURE"             )
(list "VMOVSD"           "xmmreg|mask|z,xmmreg,xmmreg"                "[mvr: evex.nds.128.f2.0f.w1 11 /r ]"            "AVX512,FUTURE"             )
(list "VMOVSHDUP"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f3.0f.w0 16 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVSHDUP"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f3.0f.w0 16 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVSHDUP"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f3.0f.w0 16 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSLDUP"        "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.f3.0f.w0 12 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVSLDUP"        "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.f3.0f.w0 12 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVSLDUP"        "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.f3.0f.w0 12 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSS"           "xmmreg|mask|z,mem32"                        "[rm:t1s: evex.128.f3.0f.w0 10 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSS"           "mem32|mask,xmmreg"                          "[mr:t1s: evex.128.f3.0f.w0 11 /r ]"             "AVX512,FUTURE"             )
(list "VMOVSS"           "xmmreg|mask|z,xmmreg,xmmreg"                "[rvm: evex.nds.128.f3.0f.w0 10 /r ]"            "AVX512,FUTURE"             )
(list "VMOVSS"           "xmmreg|mask|z,xmmreg,xmmreg"                "[mvr: evex.nds.128.f3.0f.w0 11 /r ]"            "AVX512,FUTURE"             )
(list "VMOVUPD"          "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f.w1 10 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f.w1 10 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f.w1 10 /r ]"             "AVX512,FUTURE"             )
(list "VMOVUPD"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f.w1 11 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f.w1 11 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f.w1 11 /r ]"                 "AVX512,FUTURE"             )
(list "VMOVUPD"          "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.66.0f.w1 11 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.66.0f.w1 11 /r ]"             "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPD"          "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.66.0f.w1 11 /r ]"             "AVX512,FUTURE"             )
(list "VMOVUPS"          "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.0f.w0 10 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.0f.w0 10 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.0f.w0 10 /r ]"                "AVX512,FUTURE"             )
(list "VMOVUPS"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.0f.w0 11 /r ]"                    "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.0f.w0 11 /r ]"                    "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.0f.w0 11 /r ]"                    "AVX512,FUTURE"             )
(list "VMOVUPS"          "mem128|mask,xmmreg"                         "[mr:fvm: evex.128.0f.w0 11 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "mem256|mask,ymmreg"                         "[mr:fvm: evex.256.0f.w0 11 /r ]"                "AVX512VL,AVX512,FUTURE"    )
(list "VMOVUPS"          "mem512|mask,zmmreg"                         "[mr:fvm: evex.512.0f.w0 11 /r ]"                "AVX512,FUTURE"             )
(list "VMULPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 59 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMULPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 59 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VMULPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f.w1 59 /r ]"         "AVX512,FUTURE"             )
(list "VMULPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 59 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMULPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 59 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VMULPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.0f.w0 59 /r ]"            "AVX512,FUTURE"             )
(list "VMULSD"           "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 59 /r ]"        "AVX512,FUTURE"             )
(list "VMULSS"           "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.f3.0f.w0 59 /r ]"        "AVX512,FUTURE"             )
(list "VORPD"            "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 56 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VORPD"            "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 56 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VORPD"            "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 56 /r ]"         "AVX512DQ,FUTURE"           )
(list "VORPS"            "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 56 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VORPS"            "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 56 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VORPS"            "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 56 /r ]"            "AVX512DQ,FUTURE"           )
(list "VPABSB"           "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f38.wig 1c /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPABSB"           "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f38.wig 1c /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPABSB"           "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f38.wig 1c /r ]"          "AVX512BW,FUTURE"           )
(list "VPABSD"           "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 1e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VPABSD"           "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 1e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VPABSD"           "zmmreg|mask|z,zmmrm512|b32"                 "[rm:fv: evex.512.66.0f38.w0 1e /r ]"            "AVX512,FUTURE"             )
(list "VPABSQ"           "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 1f /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VPABSQ"           "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 1f /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VPABSQ"           "zmmreg|mask|z,zmmrm512|b64"                 "[rm:fv: evex.512.66.0f38.w1 1f /r ]"            "AVX512,FUTURE"             )
(list "VPABSW"           "xmmreg|mask|z,xmmrm128"                     "[rm:fvm: evex.128.66.0f38.wig 1d /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPABSW"           "ymmreg|mask|z,ymmrm256"                     "[rm:fvm: evex.256.66.0f38.wig 1d /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPABSW"           "zmmreg|mask|z,zmmrm512"                     "[rm:fvm: evex.512.66.0f38.wig 1d /r ]"          "AVX512BW,FUTURE"           )
(list "VPACKSSDW"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 6b /r ]"         "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKSSDW"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 6b /r ]"         "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKSSDW"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 6b /r ]"         "AVX512BW,FUTURE"           )
(list "VPACKSSWB"        "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 63 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKSSWB"        "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 63 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKSSWB"        "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 63 /r ]"       "AVX512BW,FUTURE"           )
(list "VPACKUSDW"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 2b /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKUSDW"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 2b /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKUSDW"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 2b /r ]"       "AVX512BW,FUTURE"           )
(list "VPACKUSWB"        "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 67 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKUSWB"        "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 67 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPACKUSWB"        "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 67 /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDB"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig fc /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDB"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig fc /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDB"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig fc /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDD"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 fe /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPADDD"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 fe /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPADDD"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 fe /r ]"         "AVX512,FUTURE"             )
(list "VPADDQ"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 d4 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPADDQ"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 d4 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPADDQ"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 d4 /r ]"         "AVX512,FUTURE"             )
(list "VPADDSB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig ec /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDSB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig ec /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDSB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig ec /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDSW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig ed /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDSW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig ed /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDSW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig ed /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDUSB"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig dc /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDUSB"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig dc /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDUSB"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig dc /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDUSW"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig dd /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDUSW"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig dd /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDUSW"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig dd /r ]"       "AVX512BW,FUTURE"           )
(list "VPADDW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig fd /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDW"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig fd /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPADDW"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig fd /r ]"       "AVX512BW,FUTURE"           )
(list "VPALIGNR"         "xmmreg|mask|z,xmmreg,xmmrm128,imm8"         "[rvmi:fvm: evex.nds.128.66.0f3a.wig 0f /r ib ]" "AVX512VL,AVX512BW,FUTURE"  )
(list "VPALIGNR"         "ymmreg|mask|z,ymmreg,ymmrm256,imm8"         "[rvmi:fvm: evex.nds.256.66.0f3a.wig 0f /r ib ]" "AVX512VL,AVX512BW,FUTURE"  )
(list "VPALIGNR"         "zmmreg|mask|z,zmmreg,zmmrm512,imm8"         "[rvmi:fvm: evex.nds.512.66.0f3a.wig 0f /r ib ]" "AVX512BW,FUTURE"           )
(list "VPANDD"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 db /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDD"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 db /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDD"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 db /r ]"         "AVX512,FUTURE"             )
(list "VPANDND"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 df /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDND"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 df /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDND"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 df /r ]"         "AVX512,FUTURE"             )
(list "VPANDNQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 df /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDNQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 df /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDNQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 df /r ]"         "AVX512,FUTURE"             )
(list "VPANDQ"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 db /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDQ"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 db /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPANDQ"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 db /r ]"         "AVX512,FUTURE"             )
(list "VPAVGB"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e0 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPAVGB"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e0 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPAVGB"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e0 /r ]"       "AVX512BW,FUTURE"           )
(list "VPAVGW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e3 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPAVGW"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e3 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPAVGW"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e3 /r ]"       "AVX512BW,FUTURE"           )
(list "VPBLENDMB"        "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w0 66 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBLENDMB"        "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w0 66 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBLENDMB"        "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w0 66 /r ]"      "AVX512BW,FUTURE"           )
(list "VPBLENDMD"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 64 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPBLENDMD"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 64 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPBLENDMD"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 64 /r ]"       "AVX512,FUTURE"             )
(list "VPBLENDMQ"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 64 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPBLENDMQ"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 64 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPBLENDMQ"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 64 /r ]"       "AVX512,FUTURE"             )
(list "VPBLENDMW"        "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 66 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBLENDMW"        "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 66 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBLENDMW"        "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 66 /r ]"      "AVX512BW,FUTURE"           )
(list "VPBROADCASTB"     "xmmreg|mask|z,xmmrm8"                       "[rm:t1s: evex.128.66.0f38.w0 78 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "ymmreg|mask|z,xmmrm8"                       "[rm:t1s: evex.256.66.0f38.w0 78 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "zmmreg|mask|z,xmmrm8"                       "[rm:t1s: evex.512.66.0f38.w0 78 /r ]"           "AVX512BW,FUTURE"           )
(list "VPBROADCASTB"     "xmmreg|mask|z,reg8"                         "[rm: evex.128.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "xmmreg|mask|z,reg16"                        "[rm: evex.128.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "xmmreg|mask|z,reg32"                        "[rm: evex.128.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "xmmreg|mask|z,reg64"                        "[rm: evex.128.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "ymmreg|mask|z,reg8"                         "[rm: evex.256.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "ymmreg|mask|z,reg16"                        "[rm: evex.256.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "ymmreg|mask|z,reg32"                        "[rm: evex.256.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "ymmreg|mask|z,reg64"                        "[rm: evex.256.66.0f38.w0 7a /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTB"     "zmmreg|mask|z,reg8"                         "[rm: evex.512.66.0f38.w0 7a /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTB"     "zmmreg|mask|z,reg16"                        "[rm: evex.512.66.0f38.w0 7a /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTB"     "zmmreg|mask|z,reg32"                        "[rm: evex.512.66.0f38.w0 7a /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTB"     "zmmreg|mask|z,reg64"                        "[rm: evex.512.66.0f38.w0 7a /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTD"     "xmmreg|mask|z,mem32"                        "[rm:t1s: evex.128.66.0f38.w0 58 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "ymmreg|mask|z,mem32"                        "[rm:t1s: evex.256.66.0f38.w0 58 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "zmmreg|mask|z,mem32"                        "[rm:t1s: evex.512.66.0f38.w0 58 /r ]"           "AVX512,FUTURE"             )
(list "VPBROADCASTD"     "xmmreg|mask|z,xmmreg"                       "[rm: evex.128.66.0f38.w0 58 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "ymmreg|mask|z,xmmreg"                       "[rm: evex.256.66.0f38.w0 58 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "zmmreg|mask|z,xmmreg"                       "[rm: evex.512.66.0f38.w0 58 /r ]"               "AVX512,FUTURE"             )
(list "VPBROADCASTD"     "xmmreg|mask|z,reg32"                        "[rm: evex.128.66.0f38.w0 7c /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "ymmreg|mask|z,reg32"                        "[rm: evex.256.66.0f38.w0 7c /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTD"     "zmmreg|mask|z,reg32"                        "[rm: evex.512.66.0f38.w0 7c /r ]"               "AVX512,FUTURE"             )
(list "VPBROADCASTMB2Q"  "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w1 2a /r ]"               "AVX512VL,AVX512CD,FUTURE"  )
(list "VPBROADCASTMB2Q"  "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w1 2a /r ]"               "AVX512VL,AVX512CD,FUTURE"  )
(list "VPBROADCASTMB2Q"  "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w1 2a /r ]"               "AVX512CD,FUTURE"           )
(list "VPBROADCASTMW2D"  "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w0 3a /r ]"               "AVX512VL,AVX512CD,FUTURE"  )
(list "VPBROADCASTMW2D"  "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w0 3a /r ]"               "AVX512VL,AVX512CD,FUTURE"  )
(list "VPBROADCASTMW2D"  "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w0 3a /r ]"               "AVX512CD,FUTURE"           )
(list "VPBROADCASTQ"     "xmmreg|mask|z,mem64"                        "[rm:t1s: evex.128.66.0f38.w1 59 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "ymmreg|mask|z,mem64"                        "[rm:t1s: evex.256.66.0f38.w1 59 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "zmmreg|mask|z,mem64"                        "[rm:t1s: evex.512.66.0f38.w1 59 /r ]"           "AVX512,FUTURE"             )
(list "VPBROADCASTQ"     "xmmreg|mask|z,xmmreg"                       "[rm: evex.128.66.0f38.w1 59 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "ymmreg|mask|z,xmmreg"                       "[rm: evex.256.66.0f38.w1 59 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "zmmreg|mask|z,xmmreg"                       "[rm: evex.512.66.0f38.w1 59 /r ]"               "AVX512,FUTURE"             )
(list "VPBROADCASTQ"     "xmmreg|mask|z,reg64"                        "[rm: evex.128.66.0f38.w1 7c /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "ymmreg|mask|z,reg64"                        "[rm: evex.256.66.0f38.w1 7c /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPBROADCASTQ"     "zmmreg|mask|z,reg64"                        "[rm: evex.512.66.0f38.w1 7c /r ]"               "AVX512,FUTURE"             )
(list "VPBROADCASTW"     "xmmreg|mask|z,xmmrm16"                      "[rm:t1s: evex.128.66.0f38.w0 79 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "ymmreg|mask|z,xmmrm16"                      "[rm:t1s: evex.256.66.0f38.w0 79 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "zmmreg|mask|z,xmmrm16"                      "[rm:t1s: evex.512.66.0f38.w0 79 /r ]"           "AVX512BW,FUTURE"           )
(list "VPBROADCASTW"     "xmmreg|mask|z,reg16"                        "[rm: evex.128.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "xmmreg|mask|z,reg32"                        "[rm: evex.128.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "xmmreg|mask|z,reg64"                        "[rm: evex.128.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "ymmreg|mask|z,reg16"                        "[rm: evex.256.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "ymmreg|mask|z,reg32"                        "[rm: evex.256.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "ymmreg|mask|z,reg64"                        "[rm: evex.256.66.0f38.w0 7b /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPBROADCASTW"     "zmmreg|mask|z,reg16"                        "[rm: evex.512.66.0f38.w0 7b /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTW"     "zmmreg|mask|z,reg32"                        "[rm: evex.512.66.0f38.w0 7b /r ]"               "AVX512BW,FUTURE"           )
(list "VPBROADCASTW"     "zmmreg|mask|z,reg64"                        "[rm: evex.512.66.0f38.w0 7b /r ]"               "AVX512BW,FUTURE"           )
(list "VPCMPB"           "kreg|mask,xmmreg,xmmrm128,imm8"             "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3f /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPB"           "kreg|mask,ymmreg,ymmrm256,imm8"             "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3f /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPB"           "kreg|mask,zmmreg,zmmrm512,imm8"             "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3f /r ib ]"  "AVX512BW,FUTURE"           )
(list "VPCMPD"           "kreg|mask,xmmreg,xmmrm128|b32,imm8"         "[rvmi:fv: evex.nds.128.66.0f3a.w0 1f /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPD"           "kreg|mask,ymmreg,ymmrm256|b32,imm8"         "[rvmi:fv: evex.nds.256.66.0f3a.w0 1f /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPD"           "kreg|mask,zmmreg,zmmrm512|b32,imm8"         "[rvmi:fv: evex.nds.512.66.0f3a.w0 1f /r ib ]"   "AVX512,FUTURE"             )
(list "VPCMPEQB"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f.wig 74 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPEQB"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f.wig 74 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPEQB"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f.wig 74 /r ]"       "AVX512BW,FUTURE"           )
(list "VPCMPEQD"         "kreg|mask,xmmreg,xmmrm128|b32"              "[rvm:fv: evex.nds.128.66.0f.w0 76 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPEQD"         "kreg|mask,ymmreg,ymmrm256|b32"              "[rvm:fv: evex.nds.256.66.0f.w0 76 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPEQD"         "kreg|mask,zmmreg,zmmrm512|b32"              "[rvm:fv: evex.nds.512.66.0f.w0 76 /r ]"         "AVX512,FUTURE"             )
(list "VPCMPEQQ"         "kreg|mask,xmmreg,xmmrm128|b64"              "[rvm:fv: evex.nds.128.66.0f38.w1 29 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPEQQ"         "kreg|mask,ymmreg,ymmrm256|b64"              "[rvm:fv: evex.nds.256.66.0f38.w1 29 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPEQQ"         "kreg|mask,zmmreg,zmmrm512|b64"              "[rvm:fv: evex.nds.512.66.0f38.w1 29 /r ]"       "AVX512,FUTURE"             )
(list "VPCMPEQW"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f.wig 75 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPEQW"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f.wig 75 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPEQW"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f.wig 75 /r ]"       "AVX512BW,FUTURE"           )
(list "VPCMPGTB"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f.wig 64 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPGTB"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f.wig 64 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPGTB"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f.wig 64 /r ]"       "AVX512BW,FUTURE"           )
(list "VPCMPGTD"         "kreg|mask,xmmreg,xmmrm128|b32"              "[rvm:fv: evex.nds.128.66.0f.w0 66 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPGTD"         "kreg|mask,ymmreg,ymmrm256|b32"              "[rvm:fv: evex.nds.256.66.0f.w0 66 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPGTD"         "kreg|mask,zmmreg,zmmrm512|b32"              "[rvm:fv: evex.nds.512.66.0f.w0 66 /r ]"         "AVX512,FUTURE"             )
(list "VPCMPGTQ"         "kreg|mask,xmmreg,xmmrm128|b64"              "[rvm:fv: evex.nds.128.66.0f38.w1 37 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPGTQ"         "kreg|mask,ymmreg,ymmrm256|b64"              "[rvm:fv: evex.nds.256.66.0f38.w1 37 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPGTQ"         "kreg|mask,zmmreg,zmmrm512|b64"              "[rvm:fv: evex.nds.512.66.0f38.w1 37 /r ]"       "AVX512,FUTURE"             )
(list "VPCMPGTW"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f.wig 65 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPGTW"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f.wig 65 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPGTW"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f.wig 65 /r ]"       "AVX512BW,FUTURE"           )
(list "VPCMPQ"           "kreg|mask,xmmreg,xmmrm128|b64,imm8"         "[rvmi:fv: evex.nds.128.66.0f3a.w1 1f /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPQ"           "kreg|mask,ymmreg,ymmrm256|b64,imm8"         "[rvmi:fv: evex.nds.256.66.0f3a.w1 1f /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPQ"           "kreg|mask,zmmreg,zmmrm512|b64,imm8"         "[rvmi:fv: evex.nds.512.66.0f3a.w1 1f /r ib ]"   "AVX512,FUTURE"             )
(list "VPCMPUB"          "kreg|mask,xmmreg,xmmrm128,imm8"             "[rvmi:fvm: evex.nds.128.66.0f3a.w0 3e /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPUB"          "kreg|mask,ymmreg,ymmrm256,imm8"             "[rvmi:fvm: evex.nds.256.66.0f3a.w0 3e /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPUB"          "kreg|mask,zmmreg,zmmrm512,imm8"             "[rvmi:fvm: evex.nds.512.66.0f3a.w0 3e /r ib ]"  "AVX512BW,FUTURE"           )
(list "VPCMPUD"          "kreg|mask,xmmreg,xmmrm128|b32,imm8"         "[rvmi:fv: evex.nds.128.66.0f3a.w0 1e /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPUD"          "kreg|mask,ymmreg,ymmrm256|b32,imm8"         "[rvmi:fv: evex.nds.256.66.0f3a.w0 1e /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPUD"          "kreg|mask,zmmreg,zmmrm512|b32,imm8"         "[rvmi:fv: evex.nds.512.66.0f3a.w0 1e /r ib ]"   "AVX512,FUTURE"             )
(list "VPCMPUQ"          "kreg|mask,xmmreg,xmmrm128|b64,imm8"         "[rvmi:fv: evex.nds.128.66.0f3a.w1 1e /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPUQ"          "kreg|mask,ymmreg,ymmrm256|b64,imm8"         "[rvmi:fv: evex.nds.256.66.0f3a.w1 1e /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPCMPUQ"          "kreg|mask,zmmreg,zmmrm512|b64,imm8"         "[rvmi:fv: evex.nds.512.66.0f3a.w1 1e /r ib ]"   "AVX512,FUTURE"             )
(list "VPCMPUW"          "kreg|mask,xmmreg,xmmrm128,imm8"             "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3e /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPUW"          "kreg|mask,ymmreg,ymmrm256,imm8"             "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3e /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPUW"          "kreg|mask,zmmreg,zmmrm512,imm8"             "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3e /r ib ]"  "AVX512BW,FUTURE"           )
(list "VPCMPW"           "kreg|mask,xmmreg,xmmrm128,imm8"             "[rvmi:fvm: evex.nds.128.66.0f3a.w1 3f /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPW"           "kreg|mask,ymmreg,ymmrm256,imm8"             "[rvmi:fvm: evex.nds.256.66.0f3a.w1 3f /r ib ]"  "AVX512VL,AVX512BW,FUTURE"  )
(list "VPCMPW"           "kreg|mask,zmmreg,zmmrm512,imm8"             "[rvmi:fvm: evex.nds.512.66.0f3a.w1 3f /r ib ]"  "AVX512BW,FUTURE"           )
(list "VPCOMPRESSD"      "mem128|mask,xmmreg"                         "[mr:t1s: evex.128.66.0f38.w0 8b /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSD"      "mem256|mask,ymmreg"                         "[mr:t1s: evex.256.66.0f38.w0 8b /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSD"      "mem512|mask,zmmreg"                         "[mr:t1s: evex.512.66.0f38.w0 8b /r ]"           "AVX512,FUTURE"             )
(list "VPCOMPRESSD"      "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f38.w0 8b /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSD"      "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f38.w0 8b /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSD"      "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f38.w0 8b /r ]"               "AVX512,FUTURE"             )
(list "VPCOMPRESSQ"      "mem128|mask,xmmreg"                         "[mr:t1s: evex.128.66.0f38.w1 8b /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSQ"      "mem256|mask,ymmreg"                         "[mr:t1s: evex.256.66.0f38.w1 8b /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSQ"      "mem512|mask,zmmreg"                         "[mr:t1s: evex.512.66.0f38.w1 8b /r ]"           "AVX512,FUTURE"             )
(list "VPCOMPRESSQ"      "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.66.0f38.w1 8b /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSQ"      "ymmreg|mask|z,ymmreg"                       "[mr: evex.256.66.0f38.w1 8b /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPCOMPRESSQ"      "zmmreg|mask|z,zmmreg"                       "[mr: evex.512.66.0f38.w1 8b /r ]"               "AVX512,FUTURE"             )
(list "VPCONFLICTD"      "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 c4 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPCONFLICTD"      "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 c4 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPCONFLICTD"      "zmmreg|mask|z,zmmrm512|b32"                 "[rm:fv: evex.512.66.0f38.w0 c4 /r ]"            "AVX512CD,FUTURE"           )
(list "VPCONFLICTQ"      "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 c4 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPCONFLICTQ"      "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 c4 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPCONFLICTQ"      "zmmreg|mask|z,zmmrm512|b64"                 "[rm:fv: evex.512.66.0f38.w1 c4 /r ]"            "AVX512CD,FUTURE"           )
(list "VPERMB"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w0 8d /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMB"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w0 8d /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMB"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w0 8d /r ]"      "AVX512VBMI,FUTURE"         )
(list "VPERMD"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 36 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMD"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 36 /r ]"       "AVX512,FUTURE"             )
(list "VPERMI2B"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w0 75 /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMI2B"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w0 75 /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMI2B"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w0 75 /r ]"      "AVX512VBMI,FUTURE"         )
(list "VPERMI2D"         "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 76 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2D"         "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 76 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2D"         "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 76 /r ]"       "AVX512,FUTURE"             )
(list "VPERMI2PD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 77 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2PD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 77 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2PD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 77 /r ]"       "AVX512,FUTURE"             )
(list "VPERMI2PS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 77 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2PS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 77 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2PS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 77 /r ]"       "AVX512,FUTURE"             )
(list "VPERMI2Q"         "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 76 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2Q"         "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 76 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMI2Q"         "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 76 /r ]"       "AVX512,FUTURE"             )
(list "VPERMI2W"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 75 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMI2W"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 75 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMI2W"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 75 /r ]"      "AVX512BW,FUTURE"           )
(list "VPERMILPD"        "xmmreg|mask|z,xmmrm128|b64,imm8"            "[rmi:fv: evex.128.66.0f3a.w1 05 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPD"        "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 05 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPD"        "zmmreg|mask|z,zmmrm512|b64,imm8"            "[rmi:fv: evex.512.66.0f3a.w1 05 /r ib ]"        "AVX512,FUTURE"             )
(list "VPERMILPD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 0d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 0d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 0d /r ]"       "AVX512,FUTURE"             )
(list "VPERMILPS"        "xmmreg|mask|z,xmmrm128|b32,imm8"            "[rmi:fv: evex.128.66.0f3a.w0 04 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPS"        "ymmreg|mask|z,ymmrm256|b32,imm8"            "[rmi:fv: evex.256.66.0f3a.w0 04 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPS"        "zmmreg|mask|z,zmmrm512|b32,imm8"            "[rmi:fv: evex.512.66.0f3a.w0 04 /r ib ]"        "AVX512,FUTURE"             )
(list "VPERMILPS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 0c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 0c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMILPS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 0c /r ]"       "AVX512,FUTURE"             )
(list "VPERMPD"          "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 01 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMPD"          "zmmreg|mask|z,zmmrm512|b64,imm8"            "[rmi:fv: evex.512.66.0f3a.w1 01 /r ib ]"        "AVX512,FUTURE"             )
(list "VPERMPD"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 16 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMPD"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 16 /r ]"       "AVX512,FUTURE"             )
(list "VPERMPS"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 16 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMPS"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 16 /r ]"       "AVX512,FUTURE"             )
(list "VPERMQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 00 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VPERMQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[rmi:fv: evex.512.66.0f3a.w1 00 /r ib ]"        "AVX512,FUTURE"             )
(list "VPERMQ"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 36 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMQ"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 36 /r ]"       "AVX512,FUTURE"             )
(list "VPERMT2B"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w0 7d /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMT2B"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w0 7d /r ]"      "AVX512VL,AVX512VBMI,FUTURE")
(list "VPERMT2B"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w0 7d /r ]"      "AVX512VBMI,FUTURE"         )
(list "VPERMT2D"         "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 7e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2D"         "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 7e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2D"         "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 7e /r ]"       "AVX512,FUTURE"             )
(list "VPERMT2PD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 7f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2PD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 7f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2PD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 7f /r ]"       "AVX512,FUTURE"             )
(list "VPERMT2PS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 7f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2PS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 7f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2PS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 7f /r ]"       "AVX512,FUTURE"             )
(list "VPERMT2Q"         "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 7e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2Q"         "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 7e /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPERMT2Q"         "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 7e /r ]"       "AVX512,FUTURE"             )
(list "VPERMT2W"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 7d /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMT2W"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 7d /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMT2W"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 7d /r ]"      "AVX512BW,FUTURE"           )
(list "VPERMW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 8d /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMW"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 8d /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPERMW"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 8d /r ]"      "AVX512BW,FUTURE"           )
(list "VPEXPANDD"        "xmmreg|mask|z,mem128"                       "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDD"        "ymmreg|mask|z,mem256"                       "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDD"        "zmmreg|mask|z,mem512"                       "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"           "AVX512,FUTURE"             )
(list "VPEXPANDD"        "xmmreg|mask|z,xmmreg"                       "[rm:t1s: evex.128.66.0f38.w0 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDD"        "ymmreg|mask|z,ymmreg"                       "[rm:t1s: evex.256.66.0f38.w0 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDD"        "zmmreg|mask|z,zmmreg"                       "[rm:t1s: evex.512.66.0f38.w0 89 /r ]"           "AVX512,FUTURE"             )
(list "VPEXPANDQ"        "xmmreg|mask|z,mem128"                       "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDQ"        "ymmreg|mask|z,mem256"                       "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDQ"        "zmmreg|mask|z,mem512"                       "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"           "AVX512,FUTURE"             )
(list "VPEXPANDQ"        "xmmreg|mask|z,xmmreg"                       "[rm:t1s: evex.128.66.0f38.w1 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDQ"        "ymmreg|mask|z,ymmreg"                       "[rm:t1s: evex.256.66.0f38.w1 89 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPEXPANDQ"        "zmmreg|mask|z,zmmreg"                       "[rm:t1s: evex.512.66.0f38.w1 89 /r ]"           "AVX512,FUTURE"             )
(list "VPEXTRB"          "reg8,xmmreg,imm8"                           "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRB"          "reg16,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRB"          "reg32,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRB"          "reg64,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRB"          "mem8,xmmreg,imm8"                           "[mri:t1s: evex.128.66.0f3a.wig 14 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRD"          "rm32,xmmreg,imm8"                           "[mri:t1s: evex.128.66.0f3a.w0 16 /r ib ]"       "AVX512DQ,FUTURE"           )
(list "VPEXTRQ"          "rm64,xmmreg,imm8"                           "[mri:t1s: evex.128.66.0f3a.w1 16 /r ib ]"       "AVX512DQ,FUTURE"           )
(list "VPEXTRW"          "reg16,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "reg32,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "reg64,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "mem16,xmmreg,imm8"                          "[mri:t1s: evex.128.66.0f3a.wig 15 /r ib ]"      "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "reg16,xmmreg,imm8"                          "[rmi: evex.128.66.0f.wig c5 /r ib ]"            "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "reg32,xmmreg,imm8"                          "[rmi: evex.128.66.0f.wig c5 /r ib ]"            "AVX512BW,FUTURE"           )
(list "VPEXTRW"          "reg64,xmmreg,imm8"                          "[rmi: evex.128.66.0f.wig c5 /r ib ]"            "AVX512BW,FUTURE"           )
(list "VPGATHERDD"       "xmmreg|mask,xmem32"                         "[rm:t1s: vsibx evex.128.66.0f38.w0 90 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERDD"       "ymmreg|mask,ymem32"                         "[rm:t1s: vsiby evex.256.66.0f38.w0 90 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERDD"       "zmmreg|mask,zmem32"                         "[rm:t1s: vsibz evex.512.66.0f38.w0 90 /r ]"     "AVX512,FUTURE"             )
(list "VPGATHERDQ"       "xmmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.128.66.0f38.w1 90 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERDQ"       "ymmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.256.66.0f38.w1 90 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERDQ"       "zmmreg|mask,ymem64"                         "[rm:t1s: vsiby evex.512.66.0f38.w1 90 /r ]"     "AVX512,FUTURE"             )
(list "VPGATHERQD"       "xmmreg|mask,xmem32"                         "[rm:t1s: vsibx evex.128.66.0f38.w0 91 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERQD"       "xmmreg|mask,ymem32"                         "[rm:t1s: vsiby evex.256.66.0f38.w0 91 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERQD"       "ymmreg|mask,zmem32"                         "[rm:t1s: vsibz evex.512.66.0f38.w0 91 /r ]"     "AVX512,FUTURE"             )
(list "VPGATHERQQ"       "xmmreg|mask,xmem64"                         "[rm:t1s: vsibx evex.128.66.0f38.w1 91 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERQQ"       "ymmreg|mask,ymem64"                         "[rm:t1s: vsiby evex.256.66.0f38.w1 91 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPGATHERQQ"       "zmmreg|mask,zmem64"                         "[rm:t1s: vsibz evex.512.66.0f38.w1 91 /r ]"     "AVX512,FUTURE"             )
(list "VPINSRB"          "xmmreg,xmmreg,reg32,imm8"                   "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]" "AVX512BW,FUTURE"           )
(list "VPINSRB"          "xmmreg,xmmreg,mem8,imm8"                    "[rvmi:t1s: evex.nds.128.66.0f3a.wig 20 /r ib ]" "AVX512BW,FUTURE"           )
(list "VPINSRD"          "xmmreg,xmmreg,rm32,imm8"                    "[rvmi:t1s: evex.nds.128.66.0f3a.w0 22 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VPINSRQ"          "xmmreg,xmmreg,rm64,imm8"                    "[rvmi:t1s: evex.nds.128.66.0f3a.w1 22 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VPINSRW"          "xmmreg,xmmreg,reg32,imm8"                   "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"   "AVX512BW,FUTURE"           )
(list "VPINSRW"          "xmmreg,xmmreg,mem16,imm8"                   "[rvmi:t1s: evex.nds.128.66.0f.wig c4 /r ib ]"   "AVX512BW,FUTURE"           )
(list "VPLZCNTD"         "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 44 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPLZCNTD"         "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 44 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPLZCNTD"         "zmmreg|mask|z,zmmrm512|b32"                 "[rm:fv: evex.512.66.0f38.w0 44 /r ]"            "AVX512CD,FUTURE"           )
(list "VPLZCNTQ"         "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 44 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPLZCNTQ"         "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 44 /r ]"            "AVX512VL,AVX512CD,FUTURE"  )
(list "VPLZCNTQ"         "zmmreg|mask|z,zmmrm512|b64"                 "[rm:fv: evex.512.66.0f38.w1 44 /r ]"            "AVX512CD,FUTURE"           )
(list "VPMADD52HUQ"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 b5 /r ]"       "AVX512VL,AVX512IFMA,FUTURE")
(list "VPMADD52HUQ"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 b5 /r ]"       "AVX512VL,AVX512IFMA,FUTURE")
(list "VPMADD52HUQ"      "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 b5 /r ]"       "AVX512IFMA,FUTURE"         )
(list "VPMADD52LUQ"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 b4 /r ]"       "AVX512VL,AVX512IFMA,FUTURE")
(list "VPMADD52LUQ"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 b4 /r ]"       "AVX512VL,AVX512IFMA,FUTURE")
(list "VPMADD52LUQ"      "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 b4 /r ]"       "AVX512IFMA,FUTURE"         )
(list "VPMADDUBSW"       "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 04 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMADDUBSW"       "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 04 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMADDUBSW"       "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 04 /r ]"     "AVX512BW,FUTURE"           )
(list "VPMADDWD"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig f5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMADDWD"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig f5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMADDWD"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig f5 /r ]"       "AVX512BW,FUTURE"           )
(list "VPMAXSB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 3c /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXSB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 3c /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXSB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 3c /r ]"     "AVX512BW,FUTURE"           )
(list "VPMAXSD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 3d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXSD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 3d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXSD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 3d /r ]"       "AVX512,FUTURE"             )
(list "VPMAXSQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 3d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXSQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 3d /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXSQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 3d /r ]"       "AVX512,FUTURE"             )
(list "VPMAXSW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig ee /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXSW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig ee /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXSW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig ee /r ]"       "AVX512BW,FUTURE"           )
(list "VPMAXUB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig de /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXUB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig de /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXUB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig de /r ]"       "AVX512BW,FUTURE"           )
(list "VPMAXUD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 3f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXUD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 3f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXUD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 3f /r ]"       "AVX512,FUTURE"             )
(list "VPMAXUQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 3f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXUQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 3f /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMAXUQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 3f /r ]"       "AVX512,FUTURE"             )
(list "VPMAXUW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 3e /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXUW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 3e /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMAXUW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 3e /r ]"     "AVX512BW,FUTURE"           )
(list "VPMINSB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 38 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINSB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 38 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINSB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 38 /r ]"     "AVX512BW,FUTURE"           )
(list "VPMINSD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 39 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINSD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 39 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINSD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 39 /r ]"       "AVX512,FUTURE"             )
(list "VPMINSQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 39 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINSQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 39 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINSQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 39 /r ]"       "AVX512,FUTURE"             )
(list "VPMINSW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig ea /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINSW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig ea /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINSW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig ea /r ]"       "AVX512BW,FUTURE"           )
(list "VPMINUB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig da /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINUB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig da /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINUB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig da /r ]"       "AVX512BW,FUTURE"           )
(list "VPMINUD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 3b /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINUD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 3b /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINUD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 3b /r ]"       "AVX512,FUTURE"             )
(list "VPMINUQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 3b /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINUQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 3b /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMINUQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 3b /r ]"       "AVX512,FUTURE"             )
(list "VPMINUW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 3a /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINUW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 3a /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMINUW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 3a /r ]"     "AVX512BW,FUTURE"           )
(list "VPMOVB2M"         "kreg,xmmreg"                                "[rm: evex.128.f3.0f38.w0 29 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVB2M"         "kreg,ymmreg"                                "[rm: evex.256.f3.0f38.w0 29 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVB2M"         "kreg,zmmreg"                                "[rm: evex.512.f3.0f38.w0 29 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVD2M"         "kreg,xmmreg"                                "[rm: evex.128.f3.0f38.w0 39 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVD2M"         "kreg,ymmreg"                                "[rm: evex.256.f3.0f38.w0 39 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVD2M"         "kreg,zmmreg"                                "[rm: evex.512.f3.0f38.w0 39 /r ]"               "AVX512DQ,FUTURE"           )
(list "VPMOVDB"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 31 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDB"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 31 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDB"          "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 31 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVDB"          "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 31 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDB"          "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 31 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDB"          "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 31 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVDW"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 33 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDW"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 33 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDW"          "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 33 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVDW"          "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 33 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDW"          "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 33 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVDW"          "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 33 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVM2B"         "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w0 28 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVM2B"         "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w0 28 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVM2B"         "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w0 28 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVM2D"         "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w0 38 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVM2D"         "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w0 38 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVM2D"         "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w0 38 /r ]"               "AVX512DQ,FUTURE"           )
(list "VPMOVM2Q"         "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w1 38 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVM2Q"         "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w1 38 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVM2Q"         "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w1 38 /r ]"               "AVX512DQ,FUTURE"           )
(list "VPMOVM2W"         "xmmreg,kreg"                                "[rm: evex.128.f3.0f38.w1 28 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVM2W"         "ymmreg,kreg"                                "[rm: evex.256.f3.0f38.w1 28 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVM2W"         "zmmreg,kreg"                                "[rm: evex.512.f3.0f38.w1 28 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVQ2M"         "kreg,xmmreg"                                "[rm: evex.128.f3.0f38.w1 39 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVQ2M"         "kreg,ymmreg"                                "[rm: evex.256.f3.0f38.w1 39 /r ]"               "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMOVQ2M"         "kreg,zmmreg"                                "[rm: evex.512.f3.0f38.w1 39 /r ]"               "AVX512DQ,FUTURE"           )
(list "VPMOVQB"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 32 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQB"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 32 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQB"          "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 32 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVQB"          "mem16|mask,xmmreg"                          "[mr:ovm: evex.128.f3.0f38.w0 32 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQB"          "mem32|mask,ymmreg"                          "[mr:ovm: evex.256.f3.0f38.w0 32 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQB"          "mem64|mask,zmmreg"                          "[mr:ovm: evex.512.f3.0f38.w0 32 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVQD"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 35 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQD"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 35 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQD"          "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 35 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVQD"          "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 35 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQD"          "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 35 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQD"          "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 35 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVQW"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 34 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQW"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 34 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQW"          "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 34 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVQW"          "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 34 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQW"          "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 34 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVQW"          "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 34 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSDB"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 21 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDB"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 21 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDB"         "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 21 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVSDB"         "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 21 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDB"         "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 21 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDB"         "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 21 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSDW"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 23 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDW"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 23 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDW"         "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 23 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVSDW"         "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 23 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDW"         "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 23 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSDW"         "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 23 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSQB"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 22 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQB"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 22 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQB"         "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 22 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVSQB"         "mem16|mask,xmmreg"                          "[mr:ovm: evex.128.f3.0f38.w0 22 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQB"         "mem32|mask,ymmreg"                          "[mr:ovm: evex.256.f3.0f38.w0 22 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQB"         "mem64|mask,zmmreg"                          "[mr:ovm: evex.512.f3.0f38.w0 22 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSQD"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 25 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQD"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 25 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQD"         "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 25 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVSQD"         "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 25 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQD"         "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 25 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQD"         "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 25 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSQW"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 24 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQW"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 24 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQW"         "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 24 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVSQW"         "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 24 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQW"         "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 24 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSQW"         "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 24 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSWB"         "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 20 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSWB"         "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 20 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSWB"         "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 20 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVSWB"         "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 20 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSWB"         "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 20 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSWB"         "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 20 /r ]"           "AVX512BW,FUTURE"           )
(list "VPMOVSXBD"        "xmmreg|mask|z,xmmrm32"                      "[rm:qvm: evex.128.66.0f38.wig 21 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXBD"        "ymmreg|mask|z,xmmrm64"                      "[rm:qvm: evex.256.66.0f38.wig 21 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXBD"        "zmmreg|mask|z,xmmrm128"                     "[rm:qvm: evex.512.66.0f38.wig 21 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVSXBQ"        "xmmreg|mask|z,xmmrm16"                      "[rm:ovm: evex.128.66.0f38.wig 22 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXBQ"        "ymmreg|mask|z,xmmrm32"                      "[rm:ovm: evex.256.66.0f38.wig 22 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXBQ"        "zmmreg|mask|z,xmmrm64"                      "[rm:ovm: evex.512.66.0f38.wig 22 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVSXBW"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.wig 20 /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSXBW"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.wig 20 /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVSXBW"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.wig 20 /r ]"          "AVX512BW,FUTURE"           )
(list "VPMOVSXDQ"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.w0 25 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXDQ"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.w0 25 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXDQ"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.w0 25 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVSXWD"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.wig 23 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXWD"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.wig 23 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXWD"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.wig 23 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVSXWQ"        "xmmreg|mask|z,xmmrm32"                      "[rm:qvm: evex.128.66.0f38.wig 24 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXWQ"        "ymmreg|mask|z,xmmrm64"                      "[rm:qvm: evex.256.66.0f38.wig 24 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVSXWQ"        "zmmreg|mask|z,xmmrm128"                     "[rm:qvm: evex.512.66.0f38.wig 24 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVUSDB"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 11 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDB"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 11 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDB"        "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 11 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVUSDB"        "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 11 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDB"        "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 11 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDB"        "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 11 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVUSDW"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 13 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDW"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 13 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDW"        "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 13 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVUSDW"        "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 13 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDW"        "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 13 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSDW"        "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 13 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVUSQB"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 12 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQB"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 12 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQB"        "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 12 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVUSQB"        "mem16|mask,xmmreg"                          "[mr:ovm: evex.128.f3.0f38.w0 12 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQB"        "mem32|mask,ymmreg"                          "[mr:ovm: evex.256.f3.0f38.w0 12 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQB"        "mem64|mask,zmmreg"                          "[mr:ovm: evex.512.f3.0f38.w0 12 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVUSQD"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 15 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQD"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 15 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQD"        "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 15 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVUSQD"        "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 15 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQD"        "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 15 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQD"        "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 15 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVUSQW"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 14 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQW"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 14 /r ]"               "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQW"        "xmmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 14 /r ]"               "AVX512,FUTURE"             )
(list "VPMOVUSQW"        "mem32|mask,xmmreg"                          "[mr:qvm: evex.128.f3.0f38.w0 14 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQW"        "mem64|mask,ymmreg"                          "[mr:qvm: evex.256.f3.0f38.w0 14 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVUSQW"        "mem128|mask,zmmreg"                         "[mr:qvm: evex.512.f3.0f38.w0 14 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVUSWB"        "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 10 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVUSWB"        "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 10 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVUSWB"        "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 10 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVUSWB"        "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 10 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVUSWB"        "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 10 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVUSWB"        "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 10 /r ]"           "AVX512BW,FUTURE"           )
(list "VPMOVW2M"         "kreg,xmmreg"                                "[rm: evex.128.f3.0f38.w1 29 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVW2M"         "kreg,ymmreg"                                "[rm: evex.256.f3.0f38.w1 29 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVW2M"         "kreg,zmmreg"                                "[rm: evex.512.f3.0f38.w1 29 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVWB"          "xmmreg|mask|z,xmmreg"                       "[mr: evex.128.f3.0f38.w0 30 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVWB"          "xmmreg|mask|z,ymmreg"                       "[mr: evex.256.f3.0f38.w0 30 /r ]"               "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVWB"          "ymmreg|mask|z,zmmreg"                       "[mr: evex.512.f3.0f38.w0 30 /r ]"               "AVX512BW,FUTURE"           )
(list "VPMOVWB"          "mem64|mask,xmmreg"                          "[mr:hvm: evex.128.f3.0f38.w0 30 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVWB"          "mem128|mask,ymmreg"                         "[mr:hvm: evex.256.f3.0f38.w0 30 /r ]"           "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVWB"          "mem256|mask,zmmreg"                         "[mr:hvm: evex.512.f3.0f38.w0 30 /r ]"           "AVX512BW,FUTURE"           )
(list "VPMOVZXBD"        "xmmreg|mask|z,xmmrm32"                      "[rm:qvm: evex.128.66.0f38.wig 31 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXBD"        "ymmreg|mask|z,xmmrm64"                      "[rm:qvm: evex.256.66.0f38.wig 31 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXBD"        "zmmreg|mask|z,xmmrm128"                     "[rm:qvm: evex.512.66.0f38.wig 31 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVZXBQ"        "xmmreg|mask|z,xmmrm16"                      "[rm:ovm: evex.128.66.0f38.wig 32 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXBQ"        "ymmreg|mask|z,xmmrm32"                      "[rm:ovm: evex.256.66.0f38.wig 32 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXBQ"        "zmmreg|mask|z,xmmrm64"                      "[rm:ovm: evex.512.66.0f38.wig 32 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVZXBW"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.wig 30 /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVZXBW"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.wig 30 /r ]"          "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMOVZXBW"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.wig 30 /r ]"          "AVX512BW,FUTURE"           )
(list "VPMOVZXDQ"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.w0 35 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXDQ"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.w0 35 /r ]"           "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXDQ"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.w0 35 /r ]"           "AVX512,FUTURE"             )
(list "VPMOVZXWD"        "xmmreg|mask|z,xmmrm64"                      "[rm:hvm: evex.128.66.0f38.wig 33 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXWD"        "ymmreg|mask|z,xmmrm128"                     "[rm:hvm: evex.256.66.0f38.wig 33 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXWD"        "zmmreg|mask|z,ymmrm256"                     "[rm:hvm: evex.512.66.0f38.wig 33 /r ]"          "AVX512,FUTURE"             )
(list "VPMOVZXWQ"        "xmmreg|mask|z,xmmrm32"                      "[rm:qvm: evex.128.66.0f38.wig 34 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXWQ"        "ymmreg|mask|z,xmmrm64"                      "[rm:qvm: evex.256.66.0f38.wig 34 /r ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPMOVZXWQ"        "zmmreg|mask|z,xmmrm128"                     "[rm:qvm: evex.512.66.0f38.wig 34 /r ]"          "AVX512,FUTURE"             )
(list "VPMULDQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 28 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMULDQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 28 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMULDQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 28 /r ]"       "AVX512,FUTURE"             )
(list "VPMULHRSW"        "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 0b /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHRSW"        "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 0b /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHRSW"        "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 0b /r ]"     "AVX512BW,FUTURE"           )
(list "VPMULHUW"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e4 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHUW"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e4 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHUW"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e4 /r ]"       "AVX512BW,FUTURE"           )
(list "VPMULHW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULHW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e5 /r ]"       "AVX512BW,FUTURE"           )
(list "VPMULLD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 40 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMULLD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 40 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPMULLD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 40 /r ]"       "AVX512,FUTURE"             )
(list "VPMULLQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 40 /r ]"       "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMULLQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 40 /r ]"       "AVX512VL,AVX512DQ,FUTURE"  )
(list "VPMULLQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 40 /r ]"       "AVX512DQ,FUTURE"           )
(list "VPMULLW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig d5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULLW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig d5 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPMULLW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig d5 /r ]"       "AVX512BW,FUTURE"           )
(list "VPMULTISHIFTQB"   "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 83 /r ]"       "AVX512VL,AVX512VBMI,FUTURE")
(list "VPMULTISHIFTQB"   "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 83 /r ]"       "AVX512VL,AVX512VBMI,FUTURE")
(list "VPMULTISHIFTQB"   "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 83 /r ]"       "AVX512VBMI,FUTURE"         )
(list "VPMULUDQ"         "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 f4 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPMULUDQ"         "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 f4 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPMULUDQ"         "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 f4 /r ]"         "AVX512,FUTURE"             )
(list "VPORD"            "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 eb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPORD"            "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 eb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPORD"            "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 eb /r ]"         "AVX512,FUTURE"             )
(list "VPORQ"            "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 eb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPORQ"            "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 eb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPORQ"            "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 eb /r ]"         "AVX512,FUTURE"             )
(list "VPROLD"           "xmmreg|mask|z,xmmrm128|b32,imm8"            "[vmi:fv: evex.nds.128.66.0f.w0 72 /1 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPROLD"           "ymmreg|mask|z,ymmrm256|b32,imm8"            "[vmi:fv: evex.nds.256.66.0f.w0 72 /1 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPROLD"           "zmmreg|mask|z,zmmrm512|b32,imm8"            "[vmi:fv: evex.nds.512.66.0f.w0 72 /1 ib ]"      "AVX512,FUTURE"             )
(list "VPROLQ"           "xmmreg|mask|z,xmmrm128|b64,imm8"            "[vmi:fv: evex.nds.128.66.0f.w1 72 /1 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPROLQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[vmi:fv: evex.nds.256.66.0f.w1 72 /1 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPROLQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[vmi:fv: evex.nds.512.66.0f.w1 72 /1 ib ]"      "AVX512,FUTURE"             )
(list "VPROLVD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 15 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPROLVD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 15 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPROLVD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 15 /r ]"       "AVX512,FUTURE"             )
(list "VPROLVQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 15 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPROLVQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 15 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPROLVQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 15 /r ]"       "AVX512,FUTURE"             )
(list "VPRORD"           "xmmreg|mask|z,xmmrm128|b32,imm8"            "[vmi:fv: evex.nds.128.66.0f.w0 72 /0 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPRORD"           "ymmreg|mask|z,ymmrm256|b32,imm8"            "[vmi:fv: evex.nds.256.66.0f.w0 72 /0 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPRORD"           "zmmreg|mask|z,zmmrm512|b32,imm8"            "[vmi:fv: evex.nds.512.66.0f.w0 72 /0 ib ]"      "AVX512,FUTURE"             )
(list "VPRORQ"           "xmmreg|mask|z,xmmrm128|b64,imm8"            "[vmi:fv: evex.nds.128.66.0f.w1 72 /0 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPRORQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[vmi:fv: evex.nds.256.66.0f.w1 72 /0 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPRORQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[vmi:fv: evex.nds.512.66.0f.w1 72 /0 ib ]"      "AVX512,FUTURE"             )
(list "VPRORVD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 14 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPRORVD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 14 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPRORVD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 14 /r ]"       "AVX512,FUTURE"             )
(list "VPRORVQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 14 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPRORVQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 14 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPRORVQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 14 /r ]"       "AVX512,FUTURE"             )
(list "VPSADBW"          "xmmreg,xmmreg,xmmrm128"                     "[rvm:fvm: evex.nds.128.66.0f.wig f6 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSADBW"          "ymmreg,ymmreg,ymmrm256"                     "[rvm:fvm: evex.nds.256.66.0f.wig f6 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSADBW"          "zmmreg,zmmreg,zmmrm512"                     "[rvm:fvm: evex.nds.512.66.0f.wig f6 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSCATTERDD"      "xmem32|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w0 a0 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERDD"      "ymem32|mask,ymmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w0 a0 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERDD"      "zmem32|mask,zmmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w0 a0 /r ]"     "AVX512,FUTURE"             )
(list "VPSCATTERDQ"      "xmem64|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w1 a0 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERDQ"      "xmem64|mask,ymmreg"                         "[mr:t1s: vsibx evex.256.66.0f38.w1 a0 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERDQ"      "ymem64|mask,zmmreg"                         "[mr:t1s: vsiby evex.512.66.0f38.w1 a0 /r ]"     "AVX512,FUTURE"             )
(list "VPSCATTERQD"      "xmem32|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w0 a1 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERQD"      "ymem32|mask,xmmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w0 a1 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERQD"      "zmem32|mask,ymmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w0 a1 /r ]"     "AVX512,FUTURE"             )
(list "VPSCATTERQQ"      "xmem64|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w1 a1 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERQQ"      "ymem64|mask,ymmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w1 a1 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VPSCATTERQQ"      "zmem64|mask,zmmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w1 a1 /r ]"     "AVX512,FUTURE"             )
(list "VPSHUFB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.wig 00 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.wig 00 /r ]"     "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.wig 00 /r ]"     "AVX512BW,FUTURE"           )
(list "VPSHUFD"          "xmmreg|mask|z,xmmrm128|b32,imm8"            "[rmi:fv: evex.128.66.0f.w0 70 /r ib ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPSHUFD"          "ymmreg|mask|z,ymmrm256|b32,imm8"            "[rmi:fv: evex.256.66.0f.w0 70 /r ib ]"          "AVX512VL,AVX512,FUTURE"    )
(list "VPSHUFD"          "zmmreg|mask|z,zmmrm512|b32,imm8"            "[rmi:fv: evex.512.66.0f.w0 70 /r ib ]"          "AVX512,FUTURE"             )
(list "VPSHUFHW"         "xmmreg|mask|z,xmmrm128,imm8"                "[rmi:fvm: evex.128.f3.0f.wig 70 /r ib ]"        "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFHW"         "ymmreg|mask|z,ymmrm256,imm8"                "[rmi:fvm: evex.256.f3.0f.wig 70 /r ib ]"        "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFHW"         "zmmreg|mask|z,zmmrm512,imm8"                "[rmi:fvm: evex.512.f3.0f.wig 70 /r ib ]"        "AVX512BW,FUTURE"           )
(list "VPSHUFLW"         "xmmreg|mask|z,xmmrm128,imm8"                "[rmi:fvm: evex.128.f2.0f.wig 70 /r ib ]"        "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFLW"         "ymmreg|mask|z,ymmrm256,imm8"                "[rmi:fvm: evex.256.f2.0f.wig 70 /r ib ]"        "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSHUFLW"         "zmmreg|mask|z,zmmrm512,imm8"                "[rmi:fvm: evex.512.f2.0f.wig 70 /r ib ]"        "AVX512BW,FUTURE"           )
(list "VPSLLD"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w0 f2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLD"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w0 f2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLD"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w0 f2 /r ]"       "AVX512,FUTURE"             )
(list "VPSLLD"           "xmmreg|mask|z,xmmrm128|b32,imm8"            "[vmi:fv: evex.nds.128.66.0f.w0 72 /6 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLD"           "ymmreg|mask|z,ymmrm256|b32,imm8"            "[vmi:fv: evex.nds.256.66.0f.w0 72 /6 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLD"           "zmmreg|mask|z,zmmrm512|b32,imm8"            "[vmi:fv: evex.nds.512.66.0f.w0 72 /6 ib ]"      "AVX512,FUTURE"             )
(list "VPSLLDQ"          "xmmreg,xmmrm128,imm8"                       "[vmi:fvm: evex.nds.128.66.0f.wig 73 /7 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLDQ"          "ymmreg,ymmrm256,imm8"                       "[vmi:fvm: evex.nds.256.66.0f.wig 73 /7 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLDQ"          "zmmreg,zmmrm512,imm8"                       "[vmi:fvm: evex.nds.512.66.0f.wig 73 /7 ib ]"    "AVX512BW,FUTURE"           )
(list "VPSLLQ"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w1 f3 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLQ"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w1 f3 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLQ"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w1 f3 /r ]"       "AVX512,FUTURE"             )
(list "VPSLLQ"           "xmmreg|mask|z,xmmrm128|b64,imm8"            "[vmi:fv: evex.nds.128.66.0f.w1 73 /6 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[vmi:fv: evex.nds.256.66.0f.w1 73 /6 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[vmi:fv: evex.nds.512.66.0f.w1 73 /6 ib ]"      "AVX512,FUTURE"             )
(list "VPSLLVD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 47 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLVD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 47 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLVD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 47 /r ]"       "AVX512,FUTURE"             )
(list "VPSLLVQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 47 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLVQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 47 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSLLVQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 47 /r ]"       "AVX512,FUTURE"             )
(list "VPSLLVW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 12 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLVW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 12 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLVW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 12 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSLLW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.wig f1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLW"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.wig f1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLW"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.wig f1 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSLLW"           "xmmreg|mask|z,xmmrm128,imm8"                "[vmi:fvm: evex.nds.128.66.0f.wig 71 /6 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLW"           "ymmreg|mask|z,ymmrm256,imm8"                "[vmi:fvm: evex.nds.256.66.0f.wig 71 /6 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSLLW"           "zmmreg|mask|z,zmmrm512,imm8"                "[vmi:fvm: evex.nds.512.66.0f.wig 71 /6 ib ]"    "AVX512BW,FUTURE"           )
(list "VPSRAD"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w0 e2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAD"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w0 e2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAD"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w0 e2 /r ]"       "AVX512,FUTURE"             )
(list "VPSRAD"           "xmmreg|mask|z,xmmrm128|b32,imm8"            "[vmi:fv: evex.nds.128.66.0f.w0 72 /4 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAD"           "ymmreg|mask|z,ymmrm256|b32,imm8"            "[vmi:fv: evex.nds.256.66.0f.w0 72 /4 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAD"           "zmmreg|mask|z,zmmrm512|b32,imm8"            "[vmi:fv: evex.nds.512.66.0f.w0 72 /4 ib ]"      "AVX512,FUTURE"             )
(list "VPSRAQ"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w1 e2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAQ"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w1 e2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAQ"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w1 e2 /r ]"       "AVX512,FUTURE"             )
(list "VPSRAQ"           "xmmreg|mask|z,xmmrm128|b64,imm8"            "[vmi:fv: evex.nds.128.66.0f.w1 72 /4 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[vmi:fv: evex.nds.256.66.0f.w1 72 /4 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[vmi:fv: evex.nds.512.66.0f.w1 72 /4 ib ]"      "AVX512,FUTURE"             )
(list "VPSRAVD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 46 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAVD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 46 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAVD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 46 /r ]"       "AVX512,FUTURE"             )
(list "VPSRAVQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 46 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAVQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 46 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRAVQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 46 /r ]"       "AVX512,FUTURE"             )
(list "VPSRAVW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 11 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAVW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 11 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAVW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 11 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSRAW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.wig e1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAW"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.wig e1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAW"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.wig e1 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSRAW"           "xmmreg|mask|z,xmmrm128,imm8"                "[vmi:fvm: evex.nds.128.66.0f.wig 71 /4 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAW"           "ymmreg|mask|z,ymmrm256,imm8"                "[vmi:fvm: evex.nds.256.66.0f.wig 71 /4 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRAW"           "zmmreg|mask|z,zmmrm512,imm8"                "[vmi:fvm: evex.nds.512.66.0f.wig 71 /4 ib ]"    "AVX512BW,FUTURE"           )
(list "VPSRLD"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w0 d2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLD"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w0 d2 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLD"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w0 d2 /r ]"       "AVX512,FUTURE"             )
(list "VPSRLD"           "xmmreg|mask|z,xmmrm128|b32,imm8"            "[vmi:fv: evex.nds.128.66.0f.w0 72 /2 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLD"           "ymmreg|mask|z,ymmrm256|b32,imm8"            "[vmi:fv: evex.nds.256.66.0f.w0 72 /2 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLD"           "zmmreg|mask|z,zmmrm512|b32,imm8"            "[vmi:fv: evex.nds.512.66.0f.w0 72 /2 ib ]"      "AVX512,FUTURE"             )
(list "VPSRLDQ"          "xmmreg,xmmrm128,imm8"                       "[vmi:fvm: evex.nds.128.66.0f.wig 73 /3 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLDQ"          "ymmreg,ymmrm256,imm8"                       "[vmi:fvm: evex.nds.256.66.0f.wig 73 /3 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLDQ"          "zmmreg,zmmrm512,imm8"                       "[vmi:fvm: evex.nds.512.66.0f.wig 73 /3 ib ]"    "AVX512BW,FUTURE"           )
(list "VPSRLQ"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.w1 d3 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLQ"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.w1 d3 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLQ"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.w1 d3 /r ]"       "AVX512,FUTURE"             )
(list "VPSRLQ"           "xmmreg|mask|z,xmmrm128|b64,imm8"            "[vmi:fv: evex.nds.128.66.0f.w1 73 /2 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLQ"           "ymmreg|mask|z,ymmrm256|b64,imm8"            "[vmi:fv: evex.nds.256.66.0f.w1 73 /2 ib ]"      "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLQ"           "zmmreg|mask|z,zmmrm512|b64,imm8"            "[vmi:fv: evex.nds.512.66.0f.w1 73 /2 ib ]"      "AVX512,FUTURE"             )
(list "VPSRLVD"          "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 45 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLVD"          "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 45 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLVD"          "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f38.w0 45 /r ]"       "AVX512,FUTURE"             )
(list "VPSRLVQ"          "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 45 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLVQ"          "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 45 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPSRLVQ"          "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f38.w1 45 /r ]"       "AVX512,FUTURE"             )
(list "VPSRLVW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f38.w1 10 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLVW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f38.w1 10 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLVW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f38.w1 10 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSRLW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:m128: evex.nds.128.66.0f.wig d1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLW"           "ymmreg|mask|z,ymmreg,xmmrm128"              "[rvm:m128: evex.nds.256.66.0f.wig d1 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLW"           "zmmreg|mask|z,zmmreg,xmmrm128"              "[rvm:m128: evex.nds.512.66.0f.wig d1 /r ]"      "AVX512BW,FUTURE"           )
(list "VPSRLW"           "xmmreg|mask|z,xmmrm128,imm8"                "[vmi:fvm: evex.nds.128.66.0f.wig 71 /2 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLW"           "ymmreg|mask|z,ymmrm256,imm8"                "[vmi:fvm: evex.nds.256.66.0f.wig 71 /2 ib ]"    "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSRLW"           "zmmreg|mask|z,zmmrm512,imm8"                "[vmi:fvm: evex.nds.512.66.0f.wig 71 /2 ib ]"    "AVX512BW,FUTURE"           )
(list "VPSUBB"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig f8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBB"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig f8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBB"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig f8 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSUBD"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 fa /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPSUBD"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 fa /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPSUBD"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 fa /r ]"         "AVX512,FUTURE"             )
(list "VPSUBQ"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 fb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPSUBQ"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 fb /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPSUBQ"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 fb /r ]"         "AVX512,FUTURE"             )
(list "VPSUBSB"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBSB"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBSB"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e8 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSUBSW"          "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig e9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBSW"          "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig e9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBSW"          "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig e9 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSUBUSB"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig d8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBUSB"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig d8 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBUSB"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig d8 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSUBUSW"         "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig d9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBUSW"         "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig d9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBUSW"         "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig d9 /r ]"       "AVX512BW,FUTURE"           )
(list "VPSUBW"           "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig f9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBW"           "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig f9 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPSUBW"           "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig f9 /r ]"       "AVX512BW,FUTURE"           )
(list "VPTERNLOGD"       "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w0 25 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPTERNLOGD"       "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 25 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPTERNLOGD"       "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w0 25 /r ib ]"   "AVX512,FUTURE"             )
(list "VPTERNLOGQ"       "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w1 25 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPTERNLOGQ"       "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 25 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VPTERNLOGQ"       "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w1 25 /r ib ]"   "AVX512,FUTURE"             )
(list "VPTESTMB"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f38.w0 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTMB"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f38.w0 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTMB"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f38.w0 26 /r ]"      "AVX512BW,FUTURE"           )
(list "VPTESTMD"         "kreg|mask,xmmreg,xmmrm128|b32"              "[rvm:fv: evex.nds.128.66.0f38.w0 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTMD"         "kreg|mask,ymmreg,ymmrm256|b32"              "[rvm:fv: evex.nds.256.66.0f38.w0 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTMD"         "kreg|mask,zmmreg,zmmrm512|b32"              "[rvm:fv: evex.nds.512.66.0f38.w0 27 /r ]"       "AVX512,FUTURE"             )
(list "VPTESTMQ"         "kreg|mask,xmmreg,xmmrm128|b64"              "[rvm:fv: evex.nds.128.66.0f38.w1 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTMQ"         "kreg|mask,ymmreg,ymmrm256|b64"              "[rvm:fv: evex.nds.256.66.0f38.w1 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTMQ"         "kreg|mask,zmmreg,zmmrm512|b64"              "[rvm:fv: evex.nds.512.66.0f38.w1 27 /r ]"       "AVX512,FUTURE"             )
(list "VPTESTMW"         "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.66.0f38.w1 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTMW"         "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.66.0f38.w1 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTMW"         "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.66.0f38.w1 26 /r ]"      "AVX512BW,FUTURE"           )
(list "VPTESTNMB"        "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.f3.0f38.w0 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTNMB"        "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.f3.0f38.w0 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTNMB"        "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.f3.0f38.w0 26 /r ]"      "AVX512BW,FUTURE"           )
(list "VPTESTNMD"        "kreg|mask,xmmreg,xmmrm128|b32"              "[rvm:fv: evex.nds.128.f3.0f38.w0 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTNMD"        "kreg|mask,ymmreg,ymmrm256|b32"              "[rvm:fv: evex.nds.256.f3.0f38.w0 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTNMD"        "kreg|mask,zmmreg,zmmrm512|b32"              "[rvm:fv: evex.nds.512.f3.0f38.w0 27 /r ]"       "AVX512,FUTURE"             )
(list "VPTESTNMQ"        "kreg|mask,xmmreg,xmmrm128|b64"              "[rvm:fv: evex.nds.128.f3.0f38.w1 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTNMQ"        "kreg|mask,ymmreg,ymmrm256|b64"              "[rvm:fv: evex.nds.256.f3.0f38.w1 27 /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VPTESTNMQ"        "kreg|mask,zmmreg,zmmrm512|b64"              "[rvm:fv: evex.nds.512.f3.0f38.w1 27 /r ]"       "AVX512,FUTURE"             )
(list "VPTESTNMW"        "kreg|mask,xmmreg,xmmrm128"                  "[rvm:fvm: evex.nds.128.f3.0f38.w1 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTNMW"        "kreg|mask,ymmreg,ymmrm256"                  "[rvm:fvm: evex.nds.256.f3.0f38.w1 26 /r ]"      "AVX512VL,AVX512BW,FUTURE"  )
(list "VPTESTNMW"        "kreg|mask,zmmreg,zmmrm512"                  "[rvm:fvm: evex.nds.512.f3.0f38.w1 26 /r ]"      "AVX512BW,FUTURE"           )
(list "VPUNPCKHBW"       "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 68 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKHBW"       "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 68 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKHBW"       "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 68 /r ]"       "AVX512BW,FUTURE"           )
(list "VPUNPCKHDQ"       "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 6a /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKHDQ"       "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 6a /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKHDQ"       "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 6a /r ]"         "AVX512,FUTURE"             )
(list "VPUNPCKHQDQ"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 6d /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKHQDQ"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 6d /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKHQDQ"      "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 6d /r ]"         "AVX512,FUTURE"             )
(list "VPUNPCKHWD"       "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 69 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKHWD"       "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 69 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKHWD"       "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 69 /r ]"       "AVX512BW,FUTURE"           )
(list "VPUNPCKLBW"       "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 60 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKLBW"       "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 60 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKLBW"       "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 60 /r ]"       "AVX512BW,FUTURE"           )
(list "VPUNPCKLDQ"       "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 62 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKLDQ"       "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 62 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKLDQ"       "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 62 /r ]"         "AVX512,FUTURE"             )
(list "VPUNPCKLQDQ"      "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 6c /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKLQDQ"      "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 6c /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPUNPCKLQDQ"      "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 6c /r ]"         "AVX512,FUTURE"             )
(list "VPUNPCKLWD"       "xmmreg|mask|z,xmmreg,xmmrm128"              "[rvm:fvm: evex.nds.128.66.0f.wig 61 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKLWD"       "ymmreg|mask|z,ymmreg,ymmrm256"              "[rvm:fvm: evex.nds.256.66.0f.wig 61 /r ]"       "AVX512VL,AVX512BW,FUTURE"  )
(list "VPUNPCKLWD"       "zmmreg|mask|z,zmmreg,zmmrm512"              "[rvm:fvm: evex.nds.512.66.0f.wig 61 /r ]"       "AVX512BW,FUTURE"           )
(list "VPXORD"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f.w0 ef /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPXORD"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f.w0 ef /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPXORD"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.66.0f.w0 ef /r ]"         "AVX512,FUTURE"             )
(list "VPXORQ"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 ef /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPXORQ"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 ef /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VPXORQ"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 ef /r ]"         "AVX512,FUTURE"             )
(list "VRANGEPD"         "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w1 50 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VRANGEPD"         "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 50 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VRANGEPD"         "zmmreg|mask|z,zmmreg,zmmrm512|b64|sae,imm8" "[rvmi:fv: evex.nds.512.66.0f3a.w1 50 /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VRANGEPS"         "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"     "[rvmi:fv: evex.nds.128.66.0f3a.w0 50 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VRANGEPS"         "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 50 /r ib ]"   "AVX512VL,AVX512DQ,FUTURE"  )
(list "VRANGEPS"         "zmmreg|mask|z,zmmreg,zmmrm512|b32|sae,imm8" "[rvmi:fv: evex.nds.512.66.0f3a.w0 50 /r ib ]"   "AVX512DQ,FUTURE"           )
(list "VRANGESD"         "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w1 51 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VRANGESS"         "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w0 51 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VRCP14PD"         "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 4c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRCP14PD"         "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 4c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRCP14PD"         "zmmreg|mask|z,zmmrm512|b64"                 "[rm:fv: evex.512.66.0f38.w1 4c /r ]"            "AVX512,FUTURE"             )
(list "VRCP14PS"         "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 4c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRCP14PS"         "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 4c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRCP14PS"         "zmmreg|mask|z,zmmrm512|b32"                 "[rm:fv: evex.512.66.0f38.w0 4c /r ]"            "AVX512,FUTURE"             )
(list "VRCP14SD"         "xmmreg|mask|z,xmmreg,xmmrm64"               "[rvm:t1s: evex.nds.128.66.0f38.w1 4d /r ]"      "AVX512,FUTURE"             )
(list "VRCP14SS"         "xmmreg|mask|z,xmmreg,xmmrm32"               "[rvm:t1s: evex.nds.128.66.0f38.w0 4d /r ]"      "AVX512,FUTURE"             )
(list "VRCP28PD"         "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f38.w1 ca /r ]"            "AVX512ER,FUTURE"           )
(list "VRCP28PS"         "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.66.0f38.w0 ca /r ]"            "AVX512ER,FUTURE"           )
(list "VRCP28SD"         "xmmreg|mask|z,xmmreg,xmmrm64|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w1 cb /r ]"      "AVX512ER,FUTURE"           )
(list "VRCP28SS"         "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w0 cb /r ]"      "AVX512ER,FUTURE"           )
(list "VREDUCEPD"        "xmmreg|mask|z,xmmrm128|b64,imm8"            "[rmi:fv: evex.128.66.0f3a.w1 56 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VREDUCEPD"        "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 56 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VREDUCEPD"        "zmmreg|mask|z,zmmrm512|b64|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w1 56 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VREDUCEPS"        "xmmreg|mask|z,xmmrm128|b32,imm8"            "[rmi:fv: evex.128.66.0f3a.w0 56 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VREDUCEPS"        "ymmreg|mask|z,ymmrm256|b32,imm8"            "[rmi:fv: evex.256.66.0f3a.w0 56 /r ib ]"        "AVX512VL,AVX512DQ,FUTURE"  )
(list "VREDUCEPS"        "zmmreg|mask|z,zmmrm512|b32|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w0 56 /r ib ]"        "AVX512DQ,FUTURE"           )
(list "VREDUCESD"        "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w1 57 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VREDUCESS"        "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w0 57 /r ib ]"  "AVX512DQ,FUTURE"           )
(list "VRNDSCALEPD"      "xmmreg|mask|z,xmmrm128|b64,imm8"            "[rmi:fv: evex.128.66.0f3a.w1 09 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VRNDSCALEPD"      "ymmreg|mask|z,ymmrm256|b64,imm8"            "[rmi:fv: evex.256.66.0f3a.w1 09 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VRNDSCALEPD"      "zmmreg|mask|z,zmmrm512|b64|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w1 09 /r ib ]"        "AVX512,FUTURE"             )
(list "VRNDSCALEPS"      "xmmreg|mask|z,xmmrm128|b32,imm8"            "[rmi:fv: evex.128.66.0f3a.w0 08 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VRNDSCALEPS"      "ymmreg|mask|z,ymmrm256|b32,imm8"            "[rmi:fv: evex.256.66.0f3a.w0 08 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VRNDSCALEPS"      "zmmreg|mask|z,zmmrm512|b32|sae,imm8"        "[rmi:fv: evex.512.66.0f3a.w0 08 /r ib ]"        "AVX512,FUTURE"             )
(list "VRNDSCALESD"      "xmmreg|mask|z,xmmreg,xmmrm64|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w1 0b /r ib ]"  "AVX512,FUTURE"             )
(list "VRNDSCALESS"      "xmmreg|mask|z,xmmreg,xmmrm32|sae,imm8"      "[rvmi:t1s: evex.nds.128.66.0f3a.w0 0a /r ib ]"  "AVX512,FUTURE"             )
(list "VRSQRT14PD"       "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f38.w1 4e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRSQRT14PD"       "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f38.w1 4e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRSQRT14PD"       "zmmreg|mask|z,zmmrm512|b64"                 "[rm:fv: evex.512.66.0f38.w1 4e /r ]"            "AVX512,FUTURE"             )
(list "VRSQRT14PS"       "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.66.0f38.w0 4e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRSQRT14PS"       "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.66.0f38.w0 4e /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VRSQRT14PS"       "zmmreg|mask|z,zmmrm512|b32"                 "[rm:fv: evex.512.66.0f38.w0 4e /r ]"            "AVX512,FUTURE"             )
(list "VRSQRT14SD"       "xmmreg|mask|z,xmmreg,xmmrm64"               "[rvm:t1s: evex.nds.128.66.0f38.w1 4f /r ]"      "AVX512,FUTURE"             )
(list "VRSQRT14SS"       "xmmreg|mask|z,xmmreg,xmmrm32"               "[rvm:t1s: evex.nds.128.66.0f38.w0 4f /r ]"      "AVX512,FUTURE"             )
(list "VRSQRT28PD"       "zmmreg|mask|z,zmmrm512|b64|sae"             "[rm:fv: evex.512.66.0f38.w1 cc /r ]"            "AVX512ER,FUTURE"           )
(list "VRSQRT28PS"       "zmmreg|mask|z,zmmrm512|b32|sae"             "[rm:fv: evex.512.66.0f38.w0 cc /r ]"            "AVX512ER,FUTURE"           )
(list "VRSQRT28SD"       "xmmreg|mask|z,xmmreg,xmmrm64|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w1 cd /r ]"      "AVX512ER,FUTURE"           )
(list "VRSQRT28SS"       "xmmreg|mask|z,xmmreg,xmmrm32|sae"           "[rvm:t1s: evex.nds.128.66.0f38.w0 cd /r ]"      "AVX512ER,FUTURE"           )
(list "VSCALEFPD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f38.w1 2c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VSCALEFPD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f38.w1 2c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VSCALEFPD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f38.w1 2c /r ]"       "AVX512,FUTURE"             )
(list "VSCALEFPS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.66.0f38.w0 2c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VSCALEFPS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.66.0f38.w0 2c /r ]"       "AVX512VL,AVX512,FUTURE"    )
(list "VSCALEFPS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.66.0f38.w0 2c /r ]"       "AVX512,FUTURE"             )
(list "VSCALEFSD"        "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.66.0f38.w1 2d /r ]"      "AVX512,FUTURE"             )
(list "VSCALEFSS"        "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.66.0f38.w0 2d /r ]"      "AVX512,FUTURE"             )
(list "VSCATTERDPD"      "xmem64|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w1 a2 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERDPD"      "xmem64|mask,ymmreg"                         "[mr:t1s: vsibx evex.256.66.0f38.w1 a2 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERDPD"      "ymem64|mask,zmmreg"                         "[mr:t1s: vsiby evex.512.66.0f38.w1 a2 /r ]"     "AVX512,FUTURE"             )
(list "VSCATTERDPS"      "xmem32|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w0 a2 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERDPS"      "ymem32|mask,ymmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w0 a2 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERDPS"      "zmem32|mask,zmmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w0 a2 /r ]"     "AVX512,FUTURE"             )
(list "VSCATTERPF0DPD"   "ymem64|mask"                                "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /5 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF0DPS"   "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /5 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF0QPD"   "zmem64|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /5 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF0QPS"   "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /5 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF1DPD"   "ymem64|mask"                                "[m:t1s: vsiby evex.512.66.0f38.w1 c6 /6 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF1DPS"   "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c6 /6 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF1QPD"   "zmem64|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w1 c7 /6 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERPF1QPS"   "zmem32|mask"                                "[m:t1s: vsibz evex.512.66.0f38.w0 c7 /6 ]"      "AVX512PF,FUTURE"           )
(list "VSCATTERQPD"      "xmem64|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w1 a3 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERQPD"      "ymem64|mask,ymmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w1 a3 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERQPD"      "zmem64|mask,zmmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w1 a3 /r ]"     "AVX512,FUTURE"             )
(list "VSCATTERQPS"      "xmem32|mask,xmmreg"                         "[mr:t1s: vsibx evex.128.66.0f38.w0 a3 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERQPS"      "ymem32|mask,xmmreg"                         "[mr:t1s: vsiby evex.256.66.0f38.w0 a3 /r ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSCATTERQPS"      "zmem32|mask,ymmreg"                         "[mr:t1s: vsibz evex.512.66.0f38.w0 a3 /r ]"     "AVX512,FUTURE"             )
(list "VSHUFF32X4"       "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 23 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFF32X4"       "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w0 23 /r ib ]"   "AVX512,FUTURE"             )
(list "VSHUFF64X2"       "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 23 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFF64X2"       "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w1 23 /r ib ]"   "AVX512,FUTURE"             )
(list "VSHUFI32X4"       "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w0 43 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFI32X4"       "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w0 43 /r ib ]"   "AVX512,FUTURE"             )
(list "VSHUFI64X2"       "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f3a.w1 43 /r ib ]"   "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFI64X2"       "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"     "[rvmi:fv: evex.nds.512.66.0f3a.w1 43 /r ib ]"   "AVX512,FUTURE"             )
(list "VSHUFPD"          "xmmreg|mask|z,xmmreg,xmmrm128|b64,imm8"     "[rvmi:fv: evex.nds.128.66.0f.w1 c6 /r ib ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFPD"          "ymmreg|mask|z,ymmreg,ymmrm256|b64,imm8"     "[rvmi:fv: evex.nds.256.66.0f.w1 c6 /r ib ]"     "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFPD"          "zmmreg|mask|z,zmmreg,zmmrm512|b64,imm8"     "[rvmi:fv: evex.nds.512.66.0f.w1 c6 /r ib ]"     "AVX512,FUTURE"             )
(list "VSHUFPS"          "xmmreg|mask|z,xmmreg,xmmrm128|b32,imm8"     "[rvmi:fv: evex.nds.128.0f.w0 c6 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFPS"          "ymmreg|mask|z,ymmreg,ymmrm256|b32,imm8"     "[rvmi:fv: evex.nds.256.0f.w0 c6 /r ib ]"        "AVX512VL,AVX512,FUTURE"    )
(list "VSHUFPS"          "zmmreg|mask|z,zmmreg,zmmrm512|b32,imm8"     "[rvmi:fv: evex.nds.512.0f.w0 c6 /r ib ]"        "AVX512,FUTURE"             )
(list "VSQRTPD"          "xmmreg|mask|z,xmmrm128|b64"                 "[rm:fv: evex.128.66.0f.w1 51 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VSQRTPD"          "ymmreg|mask|z,ymmrm256|b64"                 "[rm:fv: evex.256.66.0f.w1 51 /r ]"              "AVX512VL,AVX512,FUTURE"    )
(list "VSQRTPD"          "zmmreg|mask|z,zmmrm512|b64|er"              "[rm:fv: evex.512.66.0f.w1 51 /r ]"              "AVX512,FUTURE"             )
(list "VSQRTPS"          "xmmreg|mask|z,xmmrm128|b32"                 "[rm:fv: evex.128.0f.w0 51 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VSQRTPS"          "ymmreg|mask|z,ymmrm256|b32"                 "[rm:fv: evex.256.0f.w0 51 /r ]"                 "AVX512VL,AVX512,FUTURE"    )
(list "VSQRTPS"          "zmmreg|mask|z,zmmrm512|b32|er"              "[rm:fv: evex.512.0f.w0 51 /r ]"                 "AVX512,FUTURE"             )
(list "VSQRTSD"          "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 51 /r ]"        "AVX512,FUTURE"             )
(list "VSQRTSS"          "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.f3.0f.w0 51 /r ]"        "AVX512,FUTURE"             )
(list "VSUBPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 5c /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VSUBPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 5c /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VSUBPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64|er"       "[rvm:fv: evex.nds.512.66.0f.w1 5c /r ]"         "AVX512,FUTURE"             )
(list "VSUBPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 5c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VSUBPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 5c /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VSUBPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32|er"       "[rvm:fv: evex.nds.512.0f.w0 5c /r ]"            "AVX512,FUTURE"             )
(list "VSUBSD"           "xmmreg|mask|z,xmmreg,xmmrm64|er"            "[rvm:t1s: evex.nds.128.f2.0f.w1 5c /r ]"        "AVX512,FUTURE"             )
(list "VSUBSS"           "xmmreg|mask|z,xmmreg,xmmrm32|er"            "[rvm:t1s: evex.nds.128.f3.0f.w0 5c /r ]"        "AVX512,FUTURE"             )
(list "VUCOMISD"         "xmmreg,xmmrm64|sae"                         "[rm:t1s: evex.128.66.0f.w1 2e /r ]"             "AVX512,FUTURE"             )
(list "VUCOMISS"         "xmmreg,xmmrm32|sae"                         "[rm:t1s: evex.128.0f.w0 2e /r ]"                "AVX512,FUTURE"             )
(list "VUNPCKHPD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 15 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKHPD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 15 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKHPD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 15 /r ]"         "AVX512,FUTURE"             )
(list "VUNPCKHPS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 15 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKHPS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 15 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKHPS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 15 /r ]"            "AVX512,FUTURE"             )
(list "VUNPCKLPD"        "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 14 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKLPD"        "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 14 /r ]"         "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKLPD"        "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 14 /r ]"         "AVX512,FUTURE"             )
(list "VUNPCKLPS"        "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 14 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKLPS"        "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 14 /r ]"            "AVX512VL,AVX512,FUTURE"    )
(list "VUNPCKLPS"        "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 14 /r ]"            "AVX512,FUTURE"             )
(list "VXORPD"           "xmmreg|mask|z,xmmreg,xmmrm128|b64"          "[rvm:fv: evex.nds.128.66.0f.w1 57 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VXORPD"           "ymmreg|mask|z,ymmreg,ymmrm256|b64"          "[rvm:fv: evex.nds.256.66.0f.w1 57 /r ]"         "AVX512VL,AVX512DQ,FUTURE"  )
(list "VXORPD"           "zmmreg|mask|z,zmmreg,zmmrm512|b64"          "[rvm:fv: evex.nds.512.66.0f.w1 57 /r ]"         "AVX512DQ,FUTURE"           )
(list "VXORPS"           "xmmreg|mask|z,xmmreg,xmmrm128|b32"          "[rvm:fv: evex.nds.128.0f.w0 57 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VXORPS"           "ymmreg|mask|z,ymmreg,ymmrm256|b32"          "[rvm:fv: evex.nds.256.0f.w0 57 /r ]"            "AVX512VL,AVX512DQ,FUTURE"  )
(list "VXORPS"           "zmmreg|mask|z,zmmreg,zmmrm512|b32"          "[rvm:fv: evex.nds.512.0f.w0 57 /r ]"            "AVX512DQ,FUTURE"           )
(list "CLFLUSHOPT"       "mem"                                        "[m: 66 0f ae /7]"                               "FUTURE"                    )
(list "HINT_NOP0"        "rm16"                                       "[m: o16 0f 18 /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP0"        "rm32"                                       "[m: o32 0f 18 /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP0"        "rm64"                                       "[m: o64 0f 18 /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP1"        "rm16"                                       "[m: o16 0f 18 /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP1"        "rm32"                                       "[m: o32 0f 18 /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP1"        "rm64"                                       "[m: o64 0f 18 /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP2"        "rm16"                                       "[m: o16 0f 18 /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP2"        "rm32"                                       "[m: o32 0f 18 /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP2"        "rm64"                                       "[m: o64 0f 18 /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP3"        "rm16"                                       "[m: o16 0f 18 /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP3"        "rm32"                                       "[m: o32 0f 18 /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP3"        "rm64"                                       "[m: o64 0f 18 /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP4"        "rm16"                                       "[m: o16 0f 18 /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP4"        "rm32"                                       "[m: o32 0f 18 /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP4"        "rm64"                                       "[m: o64 0f 18 /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP5"        "rm16"                                       "[m: o16 0f 18 /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP5"        "rm32"                                       "[m: o32 0f 18 /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP5"        "rm64"                                       "[m: o64 0f 18 /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP6"        "rm16"                                       "[m: o16 0f 18 /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP6"        "rm32"                                       "[m: o32 0f 18 /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP6"        "rm64"                                       "[m: o64 0f 18 /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP7"        "rm16"                                       "[m: o16 0f 18 /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP7"        "rm32"                                       "[m: o32 0f 18 /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP7"        "rm64"                                       "[m: o64 0f 18 /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP8"        "rm16"                                       "[m: o16 0f 19 /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP8"        "rm32"                                       "[m: o32 0f 19 /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP8"        "rm64"                                       "[m: o64 0f 19 /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP9"        "rm16"                                       "[m: o16 0f 19 /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP9"        "rm32"                                       "[m: o32 0f 19 /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP9"        "rm64"                                       "[m: o64 0f 19 /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP10"       "rm16"                                       "[m: o16 0f 19 /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP10"       "rm32"                                       "[m: o32 0f 19 /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP10"       "rm64"                                       "[m: o64 0f 19 /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP11"       "rm16"                                       "[m: o16 0f 19 /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP11"       "rm32"                                       "[m: o32 0f 19 /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP11"       "rm64"                                       "[m: o64 0f 19 /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP12"       "rm16"                                       "[m: o16 0f 19 /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP12"       "rm32"                                       "[m: o32 0f 19 /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP12"       "rm64"                                       "[m: o64 0f 19 /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP13"       "rm16"                                       "[m: o16 0f 19 /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP13"       "rm32"                                       "[m: o32 0f 19 /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP13"       "rm64"                                       "[m: o64 0f 19 /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP14"       "rm16"                                       "[m: o16 0f 19 /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP14"       "rm32"                                       "[m: o32 0f 19 /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP14"       "rm64"                                       "[m: o64 0f 19 /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP15"       "rm16"                                       "[m: o16 0f 19 /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP15"       "rm32"                                       "[m: o32 0f 19 /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP15"       "rm64"                                       "[m: o64 0f 19 /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP16"       "rm16"                                       "[m: o16 0f 1a /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP16"       "rm32"                                       "[m: o32 0f 1a /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP16"       "rm64"                                       "[m: o64 0f 1a /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP17"       "rm16"                                       "[m: o16 0f 1a /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP17"       "rm32"                                       "[m: o32 0f 1a /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP17"       "rm64"                                       "[m: o64 0f 1a /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP18"       "rm16"                                       "[m: o16 0f 1a /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP18"       "rm32"                                       "[m: o32 0f 1a /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP18"       "rm64"                                       "[m: o64 0f 1a /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP19"       "rm16"                                       "[m: o16 0f 1a /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP19"       "rm32"                                       "[m: o32 0f 1a /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP19"       "rm64"                                       "[m: o64 0f 1a /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP20"       "rm16"                                       "[m: o16 0f 1a /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP20"       "rm32"                                       "[m: o32 0f 1a /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP20"       "rm64"                                       "[m: o64 0f 1a /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP21"       "rm16"                                       "[m: o16 0f 1a /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP21"       "rm32"                                       "[m: o32 0f 1a /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP21"       "rm64"                                       "[m: o64 0f 1a /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP22"       "rm16"                                       "[m: o16 0f 1a /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP22"       "rm32"                                       "[m: o32 0f 1a /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP22"       "rm64"                                       "[m: o64 0f 1a /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP23"       "rm16"                                       "[m: o16 0f 1a /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP23"       "rm32"                                       "[m: o32 0f 1a /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP23"       "rm64"                                       "[m: o64 0f 1a /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP24"       "rm16"                                       "[m: o16 0f 1b /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP24"       "rm32"                                       "[m: o32 0f 1b /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP24"       "rm64"                                       "[m: o64 0f 1b /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP25"       "rm16"                                       "[m: o16 0f 1b /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP25"       "rm32"                                       "[m: o32 0f 1b /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP25"       "rm64"                                       "[m: o64 0f 1b /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP26"       "rm16"                                       "[m: o16 0f 1b /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP26"       "rm32"                                       "[m: o32 0f 1b /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP26"       "rm64"                                       "[m: o64 0f 1b /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP27"       "rm16"                                       "[m: o16 0f 1b /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP27"       "rm32"                                       "[m: o32 0f 1b /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP27"       "rm64"                                       "[m: o64 0f 1b /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP28"       "rm16"                                       "[m: o16 0f 1b /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP28"       "rm32"                                       "[m: o32 0f 1b /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP28"       "rm64"                                       "[m: o64 0f 1b /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP29"       "rm16"                                       "[m: o16 0f 1b /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP29"       "rm32"                                       "[m: o32 0f 1b /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP29"       "rm64"                                       "[m: o64 0f 1b /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP30"       "rm16"                                       "[m: o16 0f 1b /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP30"       "rm32"                                       "[m: o32 0f 1b /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP30"       "rm64"                                       "[m: o64 0f 1b /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP31"       "rm16"                                       "[m: o16 0f 1b /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP31"       "rm32"                                       "[m: o32 0f 1b /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP31"       "rm64"                                       "[m: o64 0f 1b /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP32"       "rm16"                                       "[m: o16 0f 1c /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP32"       "rm32"                                       "[m: o32 0f 1c /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP32"       "rm64"                                       "[m: o64 0f 1c /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP33"       "rm16"                                       "[m: o16 0f 1c /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP33"       "rm32"                                       "[m: o32 0f 1c /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP33"       "rm64"                                       "[m: o64 0f 1c /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP34"       "rm16"                                       "[m: o16 0f 1c /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP34"       "rm32"                                       "[m: o32 0f 1c /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP34"       "rm64"                                       "[m: o64 0f 1c /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP35"       "rm16"                                       "[m: o16 0f 1c /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP35"       "rm32"                                       "[m: o32 0f 1c /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP35"       "rm64"                                       "[m: o64 0f 1c /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP36"       "rm16"                                       "[m: o16 0f 1c /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP36"       "rm32"                                       "[m: o32 0f 1c /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP36"       "rm64"                                       "[m: o64 0f 1c /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP37"       "rm16"                                       "[m: o16 0f 1c /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP37"       "rm32"                                       "[m: o32 0f 1c /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP37"       "rm64"                                       "[m: o64 0f 1c /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP38"       "rm16"                                       "[m: o16 0f 1c /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP38"       "rm32"                                       "[m: o32 0f 1c /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP38"       "rm64"                                       "[m: o64 0f 1c /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP39"       "rm16"                                       "[m: o16 0f 1c /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP39"       "rm32"                                       "[m: o32 0f 1c /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP39"       "rm64"                                       "[m: o64 0f 1c /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP40"       "rm16"                                       "[m: o16 0f 1d /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP40"       "rm32"                                       "[m: o32 0f 1d /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP40"       "rm64"                                       "[m: o64 0f 1d /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP41"       "rm16"                                       "[m: o16 0f 1d /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP41"       "rm32"                                       "[m: o32 0f 1d /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP41"       "rm64"                                       "[m: o64 0f 1d /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP42"       "rm16"                                       "[m: o16 0f 1d /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP42"       "rm32"                                       "[m: o32 0f 1d /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP42"       "rm64"                                       "[m: o64 0f 1d /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP43"       "rm16"                                       "[m: o16 0f 1d /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP43"       "rm32"                                       "[m: o32 0f 1d /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP43"       "rm64"                                       "[m: o64 0f 1d /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP44"       "rm16"                                       "[m: o16 0f 1d /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP44"       "rm32"                                       "[m: o32 0f 1d /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP44"       "rm64"                                       "[m: o64 0f 1d /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP45"       "rm16"                                       "[m: o16 0f 1d /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP45"       "rm32"                                       "[m: o32 0f 1d /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP45"       "rm64"                                       "[m: o64 0f 1d /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP46"       "rm16"                                       "[m: o16 0f 1d /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP46"       "rm32"                                       "[m: o32 0f 1d /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP46"       "rm64"                                       "[m: o64 0f 1d /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP47"       "rm16"                                       "[m: o16 0f 1d /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP47"       "rm32"                                       "[m: o32 0f 1d /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP47"       "rm64"                                       "[m: o64 0f 1d /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP48"       "rm16"                                       "[m: o16 0f 1e /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP48"       "rm32"                                       "[m: o32 0f 1e /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP48"       "rm64"                                       "[m: o64 0f 1e /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP49"       "rm16"                                       "[m: o16 0f 1e /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP49"       "rm32"                                       "[m: o32 0f 1e /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP49"       "rm64"                                       "[m: o64 0f 1e /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP50"       "rm16"                                       "[m: o16 0f 1e /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP50"       "rm32"                                       "[m: o32 0f 1e /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP50"       "rm64"                                       "[m: o64 0f 1e /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP51"       "rm16"                                       "[m: o16 0f 1e /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP51"       "rm32"                                       "[m: o32 0f 1e /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP51"       "rm64"                                       "[m: o64 0f 1e /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP52"       "rm16"                                       "[m: o16 0f 1e /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP52"       "rm32"                                       "[m: o32 0f 1e /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP52"       "rm64"                                       "[m: o64 0f 1e /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP53"       "rm16"                                       "[m: o16 0f 1e /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP53"       "rm32"                                       "[m: o32 0f 1e /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP53"       "rm64"                                       "[m: o64 0f 1e /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP54"       "rm16"                                       "[m: o16 0f 1e /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP54"       "rm32"                                       "[m: o32 0f 1e /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP54"       "rm64"                                       "[m: o64 0f 1e /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP55"       "rm16"                                       "[m: o16 0f 1e /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP55"       "rm32"                                       "[m: o32 0f 1e /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP55"       "rm64"                                       "[m: o64 0f 1e /7]"                              "X64,UNDOC"                 )
(list "HINT_NOP56"       "rm16"                                       "[m: o16 0f 1f /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP56"       "rm32"                                       "[m: o32 0f 1f /0]"                              "P6,UNDOC"                  )
(list "HINT_NOP56"       "rm64"                                       "[m: o64 0f 1f /0]"                              "X64,UNDOC"                 )
(list "HINT_NOP57"       "rm16"                                       "[m: o16 0f 1f /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP57"       "rm32"                                       "[m: o32 0f 1f /1]"                              "P6,UNDOC"                  )
(list "HINT_NOP57"       "rm64"                                       "[m: o64 0f 1f /1]"                              "X64,UNDOC"                 )
(list "HINT_NOP58"       "rm16"                                       "[m: o16 0f 1f /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP58"       "rm32"                                       "[m: o32 0f 1f /2]"                              "P6,UNDOC"                  )
(list "HINT_NOP58"       "rm64"                                       "[m: o64 0f 1f /2]"                              "X64,UNDOC"                 )
(list "HINT_NOP59"       "rm16"                                       "[m: o16 0f 1f /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP59"       "rm32"                                       "[m: o32 0f 1f /3]"                              "P6,UNDOC"                  )
(list "HINT_NOP59"       "rm64"                                       "[m: o64 0f 1f /3]"                              "X64,UNDOC"                 )
(list "HINT_NOP60"       "rm16"                                       "[m: o16 0f 1f /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP60"       "rm32"                                       "[m: o32 0f 1f /4]"                              "P6,UNDOC"                  )
(list "HINT_NOP60"       "rm64"                                       "[m: o64 0f 1f /4]"                              "X64,UNDOC"                 )
(list "HINT_NOP61"       "rm16"                                       "[m: o16 0f 1f /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP61"       "rm32"                                       "[m: o32 0f 1f /5]"                              "P6,UNDOC"                  )
(list "HINT_NOP61"       "rm64"                                       "[m: o64 0f 1f /5]"                              "X64,UNDOC"                 )
(list "HINT_NOP62"       "rm16"                                       "[m: o16 0f 1f /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP62"       "rm32"                                       "[m: o32 0f 1f /6]"                              "P6,UNDOC"                  )
(list "HINT_NOP62"       "rm64"                                       "[m: o64 0f 1f /6]"                              "X64,UNDOC"                 )
(list "HINT_NOP63"       "rm16"                                       "[m: o16 0f 1f /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP63"       "rm32"                                       "[m: o32 0f 1f /7]"                              "P6,UNDOC"                  )
(list "HINT_NOP63"       "rm64"                                       "[m: o64 0f 1f /7]"                              "X64,UNDOC"                 )))
