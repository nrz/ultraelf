;;;; ultraELF 0.0.1
;;;
;;; ultraELF x86-16, x86-32, x86-64 & ARM assembler, disassembler and metamorphic engine.
;;; ultraELF packs and reconstructs ELF executables, maintaining original functionality.

(in-package :x64)

(defparameter *x64-instruction-variants-hash-table* (make-hash-table :test #'equalp :size 32768))
(defparameter REP (make-instance 'x64-asm-instruction
:name "REP"
:req-operands (list "ignore")
:code-format (list "rep/repe/repz")
:arch-flags (list "8086")))

(defparameter REPE (make-instance 'x64-asm-instruction
:name "REPE"
:req-operands (list "ignore")
:code-format (list "rep/repe/repz")
:arch-flags (list "8086")))

(defparameter REPZ (make-instance 'x64-asm-instruction
:name "REPZ"
:req-operands (list "ignore")
:code-format (list "rep/repe/repz")
:arch-flags (list "8086")))

(defparameter REPNE (make-instance 'x64-asm-instruction
:name "REPNE"
:req-operands (list "ignore")
:code-format (list "repne/repnz")
:arch-flags (list "8086")))

(defparameter REPNZ (make-instance 'x64-asm-instruction
:name "REPNZ"
:req-operands (list "ignore")
:code-format (list "repne/repnz")
:arch-flags (list "8086")))

(defparameter DB-ignore (make-instance 'x64-asm-instruction
:name "DB"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DW-ignore (make-instance 'x64-asm-instruction
:name "DW"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DD-ignore (make-instance 'x64-asm-instruction
:name "DD"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DQ-ignore (make-instance 'x64-asm-instruction
:name "DQ"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DT-ignore (make-instance 'x64-asm-instruction
:name "DT"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DO-ignore (make-instance 'x64-asm-instruction
:name "DO"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DY-ignore (make-instance 'x64-asm-instruction
:name "DY"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter DZ-ignore (make-instance 'x64-asm-instruction
:name "DZ"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESB-imm (make-instance 'x64-asm-instruction
:name "RESB"
:req-operands (list "imm")
:code-format (list "[" "resb")
:arch-flags (list "8086")))

(defparameter RESW-ignore (make-instance 'x64-asm-instruction
:name "RESW"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESD-ignore (make-instance 'x64-asm-instruction
:name "RESD"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESQ-ignore (make-instance 'x64-asm-instruction
:name "RESQ"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter REST-ignore (make-instance 'x64-asm-instruction
:name "REST"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESO-ignore (make-instance 'x64-asm-instruction
:name "RESO"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESY-ignore (make-instance 'x64-asm-instruction
:name "RESY"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter RESZ-ignore (make-instance 'x64-asm-instruction
:name "RESZ"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter ADC-mem.reg8 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "10" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "10" "/r")
:arch-flags (list "8086")))

(defparameter ADC-mem.reg16 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "11" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "11" "/r")
:arch-flags (list "8086")))

(defparameter ADC-mem.reg32 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "11" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADC-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "11" "/r")
:arch-flags (list "386")))

(defparameter ADC-mem.reg64 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "11" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADC-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "11" "/r")
:arch-flags (list "X64")))

(defparameter ADC-reg8.mem (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "12" "/r")
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "12" "/r")
:arch-flags (list "8086")))

(defparameter ADC-reg16.mem (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "13" "/r")
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "13" "/r")
:arch-flags (list "8086")))

(defparameter ADC-reg32.mem (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "13" "/r")
:arch-flags (list "386" "SM")))

(defparameter ADC-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "13" "/r")
:arch-flags (list "386")))

(defparameter ADC-reg64.mem (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "13" "/r")
:arch-flags (list "X64" "SM")))

(defparameter ADC-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "13" "/r")
:arch-flags (list "X64")))

(defparameter ADC-rm16.imm8 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/2" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter ADC-rm32.imm8 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/2" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter ADC-rm64.imm8 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/2" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter ADC-reg_al.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "14" "ib")
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/2" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter ADC-reg_ax.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "15" "iw")
:arch-flags (list "8086" "SM")))

(defparameter ADC-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/2" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter ADC-reg_eax.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "15" "id")
:arch-flags (list "386" "SM")))

(defparameter ADC-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/2" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter ADC-reg_rax.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "15" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter ADC-rm8.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/2" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/2" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-rm16.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/2" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/2" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADC-rm32.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/2" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADC-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/2" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter ADC-rm64.imm (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/2" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADC-mem.imm8 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/2" "ib")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/2" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADC-mem.imm16 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/2" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADC-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/2" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADC-mem.imm32 (make-instance 'x64-asm-instruction
:name "ADC"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/2" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-mem.reg8 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "00" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "00" "/r")
:arch-flags (list "8086")))

(defparameter ADD-mem.reg16 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "01" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "01" "/r")
:arch-flags (list "8086")))

(defparameter ADD-mem.reg32 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "01" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "01" "/r")
:arch-flags (list "386")))

(defparameter ADD-mem.reg64 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "01" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADD-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "01" "/r")
:arch-flags (list "X64")))

(defparameter ADD-reg8.mem (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "02" "/r")
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "02" "/r")
:arch-flags (list "8086")))

(defparameter ADD-reg16.mem (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "03" "/r")
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "03" "/r")
:arch-flags (list "8086")))

(defparameter ADD-reg32.mem (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "03" "/r")
:arch-flags (list "386" "SM")))

(defparameter ADD-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "03" "/r")
:arch-flags (list "386")))

(defparameter ADD-reg64.mem (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "03" "/r")
:arch-flags (list "X64" "SM")))

(defparameter ADD-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "03" "/r")
:arch-flags (list "X64")))

(defparameter ADD-rm16.imm8 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/0" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter ADD-rm32.imm8 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/0" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter ADD-rm64.imm8 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/0" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter ADD-reg_al.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "04" "ib")
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/0" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter ADD-reg_ax.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "05" "iw")
:arch-flags (list "8086" "SM")))

(defparameter ADD-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/0" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter ADD-reg_eax.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "05" "id")
:arch-flags (list "386" "SM")))

(defparameter ADD-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/0" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter ADD-reg_rax.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "05" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter ADD-rm8.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/0" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/0" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADD-rm16.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/0" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/0" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADD-rm32.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/0" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter ADD-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/0" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter ADD-rm64.imm (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/0" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter ADD-mem.imm8 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/0" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/0" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter ADD-mem.imm16 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/0" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter ADD-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/0" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter ADD-mem.imm32 (make-instance 'x64-asm-instruction
:name "ADD"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/0" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-mem.reg8 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "20" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "20" "/r")
:arch-flags (list "8086")))

(defparameter AND-mem.reg16 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "21" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "21" "/r")
:arch-flags (list "8086")))

(defparameter AND-mem.reg32 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "21" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "21" "/r")
:arch-flags (list "386")))

(defparameter AND-mem.reg64 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "21" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter AND-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "21" "/r")
:arch-flags (list "X64")))

(defparameter AND-reg8.mem (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "22" "/r")
:arch-flags (list "8086" "SM")))

(defparameter AND-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "22" "/r")
:arch-flags (list "8086")))

(defparameter AND-reg16.mem (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "23" "/r")
:arch-flags (list "8086" "SM")))

(defparameter AND-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "23" "/r")
:arch-flags (list "8086")))

(defparameter AND-reg32.mem (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "23" "/r")
:arch-flags (list "386" "SM")))

(defparameter AND-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "23" "/r")
:arch-flags (list "386")))

(defparameter AND-reg64.mem (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "23" "/r")
:arch-flags (list "X64" "SM")))

(defparameter AND-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "23" "/r")
:arch-flags (list "X64")))

(defparameter AND-rm16.imm8 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/4" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter AND-rm32.imm8 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/4" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter AND-rm64.imm8 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/4" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter AND-reg_al.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "24" "ib")
:arch-flags (list "8086" "SM")))

(defparameter AND-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/4" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter AND-reg_ax.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "25" "iw")
:arch-flags (list "8086" "SM")))

(defparameter AND-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/4" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter AND-reg_eax.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "25" "id")
:arch-flags (list "386" "SM")))

(defparameter AND-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/4" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter AND-reg_rax.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "25" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter AND-rm8.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/4" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/4" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter AND-rm16.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/4" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/4" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter AND-rm32.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/4" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter AND-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/4" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter AND-rm64.imm (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/4" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter AND-mem.imm8 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/4" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/4" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter AND-mem.imm16 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/4" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter AND-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/4" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter AND-mem.imm32 (make-instance 'x64-asm-instruction
:name "AND"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/4" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BB0_RESET-void (make-instance 'x64-asm-instruction
:name "BB0_RESET"
:req-operands (list "void")
:code-format (list "[" "0f" "3a")
:arch-flags (list "PENT" "CYRIX" "ND")))

(defparameter BB1_RESET-void (make-instance 'x64-asm-instruction
:name "BB1_RESET"
:req-operands (list "void")
:code-format (list "[" "0f" "3b")
:arch-flags (list "PENT" "CYRIX" "ND")))

(defparameter BSF-reg16.mem (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "nof3" "0f" "bc" "/r")
:arch-flags (list "386" "SM")))

(defparameter BSF-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "nof3" "0f" "bc" "/r")
:arch-flags (list "386")))

(defparameter BSF-reg32.mem (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "nof3" "0f" "bc" "/r")
:arch-flags (list "386" "SM")))

(defparameter BSF-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "nof3" "0f" "bc" "/r")
:arch-flags (list "386")))

(defparameter BSF-reg64.mem (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "nof3" "0f" "bc" "/r")
:arch-flags (list "X64" "SM")))

(defparameter BSF-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "BSF"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "nof3" "0f" "bc" "/r")
:arch-flags (list "X64")))

(defparameter BSR-reg16.mem (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "nof3" "0f" "bd" "/r")
:arch-flags (list "386" "SM")))

(defparameter BSR-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "nof3" "0f" "bd" "/r")
:arch-flags (list "386")))

(defparameter BSR-reg32.mem (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "nof3" "0f" "bd" "/r")
:arch-flags (list "386" "SM")))

(defparameter BSR-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "nof3" "0f" "bd" "/r")
:arch-flags (list "386")))

(defparameter BSR-reg64.mem (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "nof3" "0f" "bd" "/r")
:arch-flags (list "X64" "SM")))

(defparameter BSR-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "BSR"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "nof3" "0f" "bd" "/r")
:arch-flags (list "X64")))

(defparameter BSWAP-reg32 (make-instance 'x64-asm-instruction
:name "BSWAP"
:req-operands (list "reg32")
:code-format (list "[r:" "o32" "0f" "c8+r")
:arch-flags (list "486")))

(defparameter BSWAP-reg64 (make-instance 'x64-asm-instruction
:name "BSWAP"
:req-operands (list "reg64")
:code-format (list "[r:" "o64" "0f" "c8+r")
:arch-flags (list "X64")))

(defparameter BT-mem.reg16 (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "o16" "0f" "a3" "/r")
:arch-flags (list "386" "SM")))

(defparameter BT-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "a3" "/r")
:arch-flags (list "386")))

(defparameter BT-mem.reg32 (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "o32" "0f" "a3" "/r")
:arch-flags (list "386" "SM")))

(defparameter BT-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "a3" "/r")
:arch-flags (list "386")))

(defparameter BT-mem.reg64 (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "o64" "0f" "a3" "/r")
:arch-flags (list "X64" "SM")))

(defparameter BT-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "a3" "/r")
:arch-flags (list "X64")))

(defparameter BT-rm16.imm (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "o16" "0f" "ba" "/4" "ib,u")
:arch-flags (list "386" "SB")))

(defparameter BT-rm32.imm (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "o32" "0f" "ba" "/4" "ib,u")
:arch-flags (list "386" "SB")))

(defparameter BT-rm64.imm (make-instance 'x64-asm-instruction
:name "BT"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "o64" "0f" "ba" "/4" "ib,u")
:arch-flags (list "X64" "SB")))

(defparameter BTC-mem.reg16 (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "0f" "bb" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTC-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "bb" "/r")
:arch-flags (list "386")))

(defparameter BTC-mem.reg32 (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "0f" "bb" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTC-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "bb" "/r")
:arch-flags (list "386")))

(defparameter BTC-mem.reg64 (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "0f" "bb" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTC-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "bb" "/r")
:arch-flags (list "X64")))

(defparameter BTC-rm16.imm (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "0f" "ba" "/7" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTC-rm32.imm (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "0f" "ba" "/7" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTC-rm64.imm (make-instance 'x64-asm-instruction
:name "BTC"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "0f" "ba" "/7" "ib,u")
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter BTR-mem.reg16 (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "0f" "b3" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTR-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "b3" "/r")
:arch-flags (list "386")))

(defparameter BTR-mem.reg32 (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "0f" "b3" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTR-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "b3" "/r")
:arch-flags (list "386")))

(defparameter BTR-mem.reg64 (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "0f" "b3" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTR-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "b3" "/r")
:arch-flags (list "X64")))

(defparameter BTR-rm16.imm (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "0f" "ba" "/6" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTR-rm32.imm (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "0f" "ba" "/6" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTR-rm64.imm (make-instance 'x64-asm-instruction
:name "BTR"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "0f" "ba" "/6" "ib,u")
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter BTS-mem.reg16 (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "0f" "ab" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTS-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "ab" "/r")
:arch-flags (list "386")))

(defparameter BTS-mem.reg32 (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "0f" "ab" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter BTS-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "ab" "/r")
:arch-flags (list "386")))

(defparameter BTS-mem.reg64 (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "0f" "ab" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter BTS-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "ab" "/r")
:arch-flags (list "X64")))

(defparameter BTS-rm16.imm (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "0f" "ba" "/5" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTS-rm32.imm (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "0f" "ba" "/5" "ib,u")
:arch-flags (list "386" "SB" "LOCK")))

(defparameter BTS-rm64.imm (make-instance 'x64-asm-instruction
:name "BTS"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "0f" "ba" "/5" "ib,u")
:arch-flags (list "X64" "SB" "LOCK")))

(defparameter CALL-imm (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "imm")
:code-format (list "[i:" "odf" "e8" "rel")
:arch-flags (list "8086" "BND")))

(defparameter CALL-imm-near (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "imm|near")
:code-format (list "[i:" "odf" "e8" "rel")
:arch-flags (list "8086" "ND" "BND")))

(defparameter CALL-imm64 (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "imm64")
:code-format (list "[i:" "o64nw" "e8" "rel")
:arch-flags (list "X64" "BND")))

(defparameter CALL-imm64-near (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "imm64|near")
:code-format (list "[i:" "o64nw" "e8" "rel")
:arch-flags (list "X64" "ND" "BND")))

(defparameter CALL-mem-far (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem|far")
:code-format (list "[m:" "o64" "ff" "/3")
:arch-flags (list "X64")))

(defparameter CALL-mem16-far (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem16|far")
:code-format (list "[m:" "o16" "ff" "/3")
:arch-flags (list "8086")))

(defparameter CALL-mem32-far (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem32|far")
:code-format (list "[m:" "o32" "ff" "/3")
:arch-flags (list "386")))

(defparameter CALL-mem64-far (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem64|far")
:code-format (list "[m:" "o64" "ff" "/3")
:arch-flags (list "X64")))

(defparameter CALL-mem-near (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem|near")
:code-format (list "[m:" "odf" "ff" "/2")
:arch-flags (list "8086" "ND" "BND")))

(defparameter CALL-rm64-near (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "rm64|near")
:code-format (list "[m:" "o64nw" "ff" "/2")
:arch-flags (list "X64" "ND" "BND")))

(defparameter CALL-mem (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "mem")
:code-format (list "[m:" "odf" "ff" "/2")
:arch-flags (list "8086" "BND")))

(defparameter CALL-rm64 (make-instance 'x64-asm-instruction
:name "CALL"
:req-operands (list "rm64")
:code-format (list "[m:" "o64nw" "ff" "/2")
:arch-flags (list "X64" "BND")))

(defparameter CBW-void (make-instance 'x64-asm-instruction
:name "CBW"
:req-operands (list "void")
:code-format (list "[" "o16" "98")
:arch-flags (list "8086")))

(defparameter CDQ-void (make-instance 'x64-asm-instruction
:name "CDQ"
:req-operands (list "void")
:code-format (list "[" "o32" "99")
:arch-flags (list "386")))

(defparameter CDQE-void (make-instance 'x64-asm-instruction
:name "CDQE"
:req-operands (list "void")
:code-format (list "[" "o64" "98")
:arch-flags (list "X64")))

(defparameter CLC-void (make-instance 'x64-asm-instruction
:name "CLC"
:req-operands (list "void")
:code-format (list "[" "f8")
:arch-flags (list "8086")))

(defparameter CLD-void (make-instance 'x64-asm-instruction
:name "CLD"
:req-operands (list "void")
:code-format (list "[" "fc")
:arch-flags (list "8086")))

(defparameter CLI-void (make-instance 'x64-asm-instruction
:name "CLI"
:req-operands (list "void")
:code-format (list "[" "fa")
:arch-flags (list "8086")))

(defparameter CLTS-void (make-instance 'x64-asm-instruction
:name "CLTS"
:req-operands (list "void")
:code-format (list "[" "0f" "06")
:arch-flags (list "286" "PRIV")))

(defparameter CMC-void (make-instance 'x64-asm-instruction
:name "CMC"
:req-operands (list "void")
:code-format (list "[" "f5")
:arch-flags (list "8086")))

(defparameter CMP-mem.reg8 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "38" "/r")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "38" "/r")
:arch-flags (list "8086")))

(defparameter CMP-mem.reg16 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "o16" "39" "/r")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "39" "/r")
:arch-flags (list "8086")))

(defparameter CMP-mem.reg32 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "o32" "39" "/r")
:arch-flags (list "386" "SM")))

(defparameter CMP-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "39" "/r")
:arch-flags (list "386")))

(defparameter CMP-mem.reg64 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "o64" "39" "/r")
:arch-flags (list "X64" "SM")))

(defparameter CMP-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "39" "/r")
:arch-flags (list "X64")))

(defparameter CMP-reg8.mem (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "3a" "/r")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "3a" "/r")
:arch-flags (list "8086")))

(defparameter CMP-reg16.mem (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "3b" "/r")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "3b" "/r")
:arch-flags (list "8086")))

(defparameter CMP-reg32.mem (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "3b" "/r")
:arch-flags (list "386" "SM")))

(defparameter CMP-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "3b" "/r")
:arch-flags (list "386")))

(defparameter CMP-reg64.mem (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "3b" "/r")
:arch-flags (list "X64" "SM")))

(defparameter CMP-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "3b" "/r")
:arch-flags (list "X64")))

(defparameter CMP-rm16.imm8 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "83" "/7" "ib,s")
:arch-flags (list "8086")))

(defparameter CMP-rm32.imm8 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "83" "/7" "ib,s")
:arch-flags (list "386")))

(defparameter CMP-rm64.imm8 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "83" "/7" "ib,s")
:arch-flags (list "X64")))

(defparameter CMP-reg_al.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "3c" "ib")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/7" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-reg_ax.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "3d" "iw")
:arch-flags (list "8086" "SM")))

(defparameter CMP-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/7" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-reg_eax.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "3d" "id")
:arch-flags (list "386" "SM")))

(defparameter CMP-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/7" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter CMP-reg_rax.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "3d" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter CMP-rm8.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "80" "/7" "ib")
:arch-flags (list "8086" "SM")))

(defparameter CMP-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/7" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-rm16.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "o16" "81" "/7" "iw")
:arch-flags (list "8086" "SM")))

(defparameter CMP-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/7" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-rm32.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "o32" "81" "/7" "id")
:arch-flags (list "386" "SM")))

(defparameter CMP-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/7" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter CMP-rm64.imm (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "o64" "81" "/7" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter CMP-mem.imm8 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "80" "/7" "ib")
:arch-flags (list "8086" "SM")))

(defparameter CMP-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "o16" "83" "/7" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter CMP-mem.imm16 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "o16" "81" "/7" "iw")
:arch-flags (list "8086" "SM")))

(defparameter CMP-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "o32" "83" "/7" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter CMP-mem.imm32 (make-instance 'x64-asm-instruction
:name "CMP"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "o32" "81" "/7" "id")
:arch-flags (list "386" "SM")))

(defparameter CMPSB-void (make-instance 'x64-asm-instruction
:name "CMPSB"
:req-operands (list "void")
:code-format (list "[" "repe" "a6")
:arch-flags (list "8086")))

(defparameter CMPSD-void (make-instance 'x64-asm-instruction
:name "CMPSD"
:req-operands (list "void")
:code-format (list "[" "repe" "o32" "a7")
:arch-flags (list "386")))

(defparameter CMPSQ-void (make-instance 'x64-asm-instruction
:name "CMPSQ"
:req-operands (list "void")
:code-format (list "[" "repe" "o64" "a7")
:arch-flags (list "X64")))

(defparameter CMPSW-void (make-instance 'x64-asm-instruction
:name "CMPSW"
:req-operands (list "void")
:code-format (list "[" "repe" "o16" "a7")
:arch-flags (list "8086")))

(defparameter CMPXCHG-mem.reg8 (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "0f" "b0" "/r")
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "0f" "b0" "/r")
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg16 (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "0f" "b1" "/r")
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "b1" "/r")
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg32 (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "0f" "b1" "/r")
:arch-flags (list "PENT" "SM" "LOCK")))

(defparameter CMPXCHG-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "b1" "/r")
:arch-flags (list "PENT")))

(defparameter CMPXCHG-mem.reg64 (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "0f" "b1" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter CMPXCHG-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "b1" "/r")
:arch-flags (list "X64")))

(defparameter CMPXCHG486-mem.reg8 (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "0f" "a6" "/r")
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "0f" "a6" "/r")
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG486-mem.reg16 (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "o16" "0f" "a7" "/r")
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "a7" "/r")
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG486-mem.reg32 (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "o32" "0f" "a7" "/r")
:arch-flags (list "486" "SM" "UNDOC" "ND" "LOCK")))

(defparameter CMPXCHG486-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "CMPXCHG486"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "a7" "/r")
:arch-flags (list "486" "UNDOC" "ND")))

(defparameter CMPXCHG8B-mem (make-instance 'x64-asm-instruction
:name "CMPXCHG8B"
:req-operands (list "mem")
:code-format (list "[m:" "hle" "norexw" "0f" "c7" "/1")
:arch-flags (list "PENT" "LOCK")))

(defparameter CMPXCHG16B-mem (make-instance 'x64-asm-instruction
:name "CMPXCHG16B"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "0f" "c7" "/1")
:arch-flags (list "X64" "LOCK")))

(defparameter CPUID-void (make-instance 'x64-asm-instruction
:name "CPUID"
:req-operands (list "void")
:code-format (list "[" "0f" "a2")
:arch-flags (list "PENT")))

(defparameter CPU_READ-void (make-instance 'x64-asm-instruction
:name "CPU_READ"
:req-operands (list "void")
:code-format (list "[" "0f" "3d")
:arch-flags (list "PENT" "CYRIX")))

(defparameter CPU_WRITE-void (make-instance 'x64-asm-instruction
:name "CPU_WRITE"
:req-operands (list "void")
:code-format (list "[" "0f" "3c")
:arch-flags (list "PENT" "CYRIX")))

(defparameter CQO-void (make-instance 'x64-asm-instruction
:name "CQO"
:req-operands (list "void")
:code-format (list "[" "o64" "99")
:arch-flags (list "X64")))

(defparameter CWD-void (make-instance 'x64-asm-instruction
:name "CWD"
:req-operands (list "void")
:code-format (list "[" "o16" "99")
:arch-flags (list "8086")))

(defparameter CWDE-void (make-instance 'x64-asm-instruction
:name "CWDE"
:req-operands (list "void")
:code-format (list "[" "o32" "98")
:arch-flags (list "386")))

(defparameter DEC-rm8 (make-instance 'x64-asm-instruction
:name "DEC"
:req-operands (list "rm8")
:code-format (list "[m:" "hle" "fe" "/1")
:arch-flags (list "8086" "LOCK")))

(defparameter DEC-rm16 (make-instance 'x64-asm-instruction
:name "DEC"
:req-operands (list "rm16")
:code-format (list "[m:" "hle" "o16" "ff" "/1")
:arch-flags (list "8086" "LOCK")))

(defparameter DEC-rm32 (make-instance 'x64-asm-instruction
:name "DEC"
:req-operands (list "rm32")
:code-format (list "[m:" "hle" "o32" "ff" "/1")
:arch-flags (list "386" "LOCK")))

(defparameter DEC-rm64 (make-instance 'x64-asm-instruction
:name "DEC"
:req-operands (list "rm64")
:code-format (list "[m:" "hle" "o64" "ff" "/1")
:arch-flags (list "X64" "LOCK")))

(defparameter DIV-rm8 (make-instance 'x64-asm-instruction
:name "DIV"
:req-operands (list "rm8")
:code-format (list "[m:" "f6" "/6")
:arch-flags (list "8086")))

(defparameter DIV-rm16 (make-instance 'x64-asm-instruction
:name "DIV"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "f7" "/6")
:arch-flags (list "8086")))

(defparameter DIV-rm32 (make-instance 'x64-asm-instruction
:name "DIV"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "f7" "/6")
:arch-flags (list "386")))

(defparameter DIV-rm64 (make-instance 'x64-asm-instruction
:name "DIV"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "f7" "/6")
:arch-flags (list "X64")))

(defparameter DMINT-void (make-instance 'x64-asm-instruction
:name "DMINT"
:req-operands (list "void")
:code-format (list "[" "0f" "39")
:arch-flags (list "P6" "CYRIX")))

(defparameter EMMS-void (make-instance 'x64-asm-instruction
:name "EMMS"
:req-operands (list "void")
:code-format (list "[" "0f" "77")
:arch-flags (list "PENT" "MMX")))

(defparameter ENTER-imm.imm (make-instance 'x64-asm-instruction
:name "ENTER"
:req-operands (list "imm" "imm")
:code-format (list "[ij:" "c8" "iw" "ib,u")
:arch-flags (list "186")))

(defparameter EQU-imm (make-instance 'x64-asm-instruction
:name "EQU"
:req-operands (list "imm")
:code-format (list "[ignore")
:arch-flags (list "8086")))

(defparameter EQU-imm.imm (make-instance 'x64-asm-instruction
:name "EQU"
:req-operands (list "imm:imm")
:code-format (list "[ignore")
:arch-flags (list "8086")))

(defparameter F2XM1-void (make-instance 'x64-asm-instruction
:name "F2XM1"
:req-operands (list "void")
:code-format (list "[" "d9" "f0")
:arch-flags (list "8086" "FPU")))

(defparameter FABS-void (make-instance 'x64-asm-instruction
:name "FABS"
:req-operands (list "void")
:code-format (list "[" "d9" "e1")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-mem32 (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-mem64 (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg-to (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADD-void (make-instance 'x64-asm-instruction
:name "FADD"
:req-operands (list "void")
:code-format (list "[" "de" "c1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FADDP-fpureg (make-instance 'x64-asm-instruction
:name "FADDP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADDP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FADDP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FADDP-void (make-instance 'x64-asm-instruction
:name "FADDP"
:req-operands (list "void")
:code-format (list "[" "de" "c1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FBLD-mem80 (make-instance 'x64-asm-instruction
:name "FBLD"
:req-operands (list "mem80")
:code-format (list "[m:" "df" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FBLD-mem (make-instance 'x64-asm-instruction
:name "FBLD"
:req-operands (list "mem")
:code-format (list "[m:" "df" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FBSTP-mem80 (make-instance 'x64-asm-instruction
:name "FBSTP"
:req-operands (list "mem80")
:code-format (list "[m:" "df" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FBSTP-mem (make-instance 'x64-asm-instruction
:name "FBSTP"
:req-operands (list "mem")
:code-format (list "[m:" "df" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FCHS-void (make-instance 'x64-asm-instruction
:name "FCHS"
:req-operands (list "void")
:code-format (list "[" "d9" "e0")
:arch-flags (list "8086" "FPU")))

(defparameter FCLEX-void (make-instance 'x64-asm-instruction
:name "FCLEX"
:req-operands (list "void")
:code-format (list "[" "wait" "db" "e2")
:arch-flags (list "8086" "FPU")))

(defparameter FCMOVB-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVB"
:req-operands (list "fpureg")
:code-format (list "[r:" "da" "c0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVB-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVB"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "da" "c0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVB-void (make-instance 'x64-asm-instruction
:name "FCMOVB"
:req-operands (list "void")
:code-format (list "[" "da" "c1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVBE-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVBE"
:req-operands (list "fpureg")
:code-format (list "[r:" "da" "d0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVBE-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVBE"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "da" "d0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVBE-void (make-instance 'x64-asm-instruction
:name "FCMOVBE"
:req-operands (list "void")
:code-format (list "[" "da" "d1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVE-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVE"
:req-operands (list "fpureg")
:code-format (list "[r:" "da" "c8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVE-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVE"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "da" "c8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVE-void (make-instance 'x64-asm-instruction
:name "FCMOVE"
:req-operands (list "void")
:code-format (list "[" "da" "c9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNB-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNB"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "c0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNB-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNB"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "c0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNB-void (make-instance 'x64-asm-instruction
:name "FCMOVNB"
:req-operands (list "void")
:code-format (list "[" "db" "c1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNBE-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNBE"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "d0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNBE-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNBE"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "d0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNBE-void (make-instance 'x64-asm-instruction
:name "FCMOVNBE"
:req-operands (list "void")
:code-format (list "[" "db" "d1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNE-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNE"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "c8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNE-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNE"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "c8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNE-void (make-instance 'x64-asm-instruction
:name "FCMOVNE"
:req-operands (list "void")
:code-format (list "[" "db" "c9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVNU-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNU"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "d8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNU-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVNU"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "d8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVNU-void (make-instance 'x64-asm-instruction
:name "FCMOVNU"
:req-operands (list "void")
:code-format (list "[" "db" "d9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCMOVU-fpureg (make-instance 'x64-asm-instruction
:name "FCMOVU"
:req-operands (list "fpureg")
:code-format (list "[r:" "da" "d8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVU-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCMOVU"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "da" "d8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCMOVU-void (make-instance 'x64-asm-instruction
:name "FCMOVU"
:req-operands (list "void")
:code-format (list "[" "da" "d9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOM-mem32 (make-instance 'x64-asm-instruction
:name "FCOM"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-mem64 (make-instance 'x64-asm-instruction
:name "FCOM"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-fpureg (make-instance 'x64-asm-instruction
:name "FCOM"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "d0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCOM"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "d0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FCOM-void (make-instance 'x64-asm-instruction
:name "FCOM"
:req-operands (list "void")
:code-format (list "[" "d8" "d1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FCOMI-fpureg (make-instance 'x64-asm-instruction
:name "FCOMI"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "f0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCOMI-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCOMI"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "f0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCOMI-void (make-instance 'x64-asm-instruction
:name "FCOMI"
:req-operands (list "void")
:code-format (list "[" "db" "f1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOMIP-fpureg (make-instance 'x64-asm-instruction
:name "FCOMIP"
:req-operands (list "fpureg")
:code-format (list "[r:" "df" "f0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCOMIP-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCOMIP"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "df" "f0+r")
:arch-flags (list "P6" "FPU")))

(defparameter FCOMIP-void (make-instance 'x64-asm-instruction
:name "FCOMIP"
:req-operands (list "void")
:code-format (list "[" "df" "f1")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FCOMP-mem32 (make-instance 'x64-asm-instruction
:name "FCOMP"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-mem64 (make-instance 'x64-asm-instruction
:name "FCOMP"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-fpureg (make-instance 'x64-asm-instruction
:name "FCOMP"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "d8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FCOMP"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "d8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FCOMP-void (make-instance 'x64-asm-instruction
:name "FCOMP"
:req-operands (list "void")
:code-format (list "[" "d8" "d9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FCOMPP-void (make-instance 'x64-asm-instruction
:name "FCOMPP"
:req-operands (list "void")
:code-format (list "[" "de" "d9")
:arch-flags (list "8086" "FPU")))

(defparameter FCOS-void (make-instance 'x64-asm-instruction
:name "FCOS"
:req-operands (list "void")
:code-format (list "[" "d9" "ff")
:arch-flags (list "386" "FPU")))

(defparameter FDECSTP-void (make-instance 'x64-asm-instruction
:name "FDECSTP"
:req-operands (list "void")
:code-format (list "[" "d9" "f6")
:arch-flags (list "8086" "FPU")))

(defparameter FDISI-void (make-instance 'x64-asm-instruction
:name "FDISI"
:req-operands (list "void")
:code-format (list "[" "wait" "db" "e1")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-mem32 (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-mem64 (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg-to (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIV-void (make-instance 'x64-asm-instruction
:name "FDIV"
:req-operands (list "void")
:code-format (list "[" "de" "f9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVP-fpureg (make-instance 'x64-asm-instruction
:name "FDIVP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FDIVP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVP-void (make-instance 'x64-asm-instruction
:name "FDIVP"
:req-operands (list "void")
:code-format (list "[" "de" "f9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVR-mem32 (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-mem64 (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg-to (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpureg (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "f8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVR-void (make-instance 'x64-asm-instruction
:name "FDIVR"
:req-operands (list "void")
:code-format (list "[" "de" "f1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FDIVRP-fpureg (make-instance 'x64-asm-instruction
:name "FDIVRP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVRP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FDIVRP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "f0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FDIVRP-void (make-instance 'x64-asm-instruction
:name "FDIVRP"
:req-operands (list "void")
:code-format (list "[" "de" "f1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FEMMS-void (make-instance 'x64-asm-instruction
:name "FEMMS"
:req-operands (list "void")
:code-format (list "[" "0f" "0e")
:arch-flags (list "PENT" "3DNOW")))

(defparameter FENI-void (make-instance 'x64-asm-instruction
:name "FENI"
:req-operands (list "void")
:code-format (list "[" "wait" "db" "e0")
:arch-flags (list "8086" "FPU")))

(defparameter FFREE-fpureg (make-instance 'x64-asm-instruction
:name "FFREE"
:req-operands (list "fpureg")
:code-format (list "[r:" "dd" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FFREE-void (make-instance 'x64-asm-instruction
:name "FFREE"
:req-operands (list "void")
:code-format (list "[" "dd" "c1")
:arch-flags (list "8086" "FPU")))

(defparameter FFREEP-fpureg (make-instance 'x64-asm-instruction
:name "FFREEP"
:req-operands (list "fpureg")
:code-format (list "[r:" "df" "c0+r")
:arch-flags (list "286" "FPU" "UNDOC")))

(defparameter FFREEP-void (make-instance 'x64-asm-instruction
:name "FFREEP"
:req-operands (list "void")
:code-format (list "[" "df" "c1")
:arch-flags (list "286" "FPU" "UNDOC")))

(defparameter FIADD-mem32 (make-instance 'x64-asm-instruction
:name "FIADD"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FIADD-mem16 (make-instance 'x64-asm-instruction
:name "FIADD"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FICOM-mem32 (make-instance 'x64-asm-instruction
:name "FICOM"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FICOM-mem16 (make-instance 'x64-asm-instruction
:name "FICOM"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FICOMP-mem32 (make-instance 'x64-asm-instruction
:name "FICOMP"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FICOMP-mem16 (make-instance 'x64-asm-instruction
:name "FICOMP"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FIDIV-mem32 (make-instance 'x64-asm-instruction
:name "FIDIV"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FIDIV-mem16 (make-instance 'x64-asm-instruction
:name "FIDIV"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FIDIVR-mem32 (make-instance 'x64-asm-instruction
:name "FIDIVR"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FIDIVR-mem16 (make-instance 'x64-asm-instruction
:name "FIDIVR"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem32 (make-instance 'x64-asm-instruction
:name "FILD"
:req-operands (list "mem32")
:code-format (list "[m:" "db" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem16 (make-instance 'x64-asm-instruction
:name "FILD"
:req-operands (list "mem16")
:code-format (list "[m:" "df" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FILD-mem64 (make-instance 'x64-asm-instruction
:name "FILD"
:req-operands (list "mem64")
:code-format (list "[m:" "df" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FIMUL-mem32 (make-instance 'x64-asm-instruction
:name "FIMUL"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/1")
:arch-flags (list "8086" "FPU")))

(defparameter FIMUL-mem16 (make-instance 'x64-asm-instruction
:name "FIMUL"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/1")
:arch-flags (list "8086" "FPU")))

(defparameter FINCSTP-void (make-instance 'x64-asm-instruction
:name "FINCSTP"
:req-operands (list "void")
:code-format (list "[" "d9" "f7")
:arch-flags (list "8086" "FPU")))

(defparameter FINIT-void (make-instance 'x64-asm-instruction
:name "FINIT"
:req-operands (list "void")
:code-format (list "[" "wait" "db" "e3")
:arch-flags (list "8086" "FPU")))

(defparameter FIST-mem32 (make-instance 'x64-asm-instruction
:name "FIST"
:req-operands (list "mem32")
:code-format (list "[m:" "db" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FIST-mem16 (make-instance 'x64-asm-instruction
:name "FIST"
:req-operands (list "mem16")
:code-format (list "[m:" "df" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem32 (make-instance 'x64-asm-instruction
:name "FISTP"
:req-operands (list "mem32")
:code-format (list "[m:" "db" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem16 (make-instance 'x64-asm-instruction
:name "FISTP"
:req-operands (list "mem16")
:code-format (list "[m:" "df" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FISTP-mem64 (make-instance 'x64-asm-instruction
:name "FISTP"
:req-operands (list "mem64")
:code-format (list "[m:" "df" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FISTTP-mem16 (make-instance 'x64-asm-instruction
:name "FISTTP"
:req-operands (list "mem16")
:code-format (list "[m:" "df" "/1")
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISTTP-mem32 (make-instance 'x64-asm-instruction
:name "FISTTP"
:req-operands (list "mem32")
:code-format (list "[m:" "db" "/1")
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISTTP-mem64 (make-instance 'x64-asm-instruction
:name "FISTTP"
:req-operands (list "mem64")
:code-format (list "[m:" "dd" "/1")
:arch-flags (list "PRESCOTT" "FPU")))

(defparameter FISUB-mem32 (make-instance 'x64-asm-instruction
:name "FISUB"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FISUB-mem16 (make-instance 'x64-asm-instruction
:name "FISUB"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FISUBR-mem32 (make-instance 'x64-asm-instruction
:name "FISUBR"
:req-operands (list "mem32")
:code-format (list "[m:" "da" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FISUBR-mem16 (make-instance 'x64-asm-instruction
:name "FISUBR"
:req-operands (list "mem16")
:code-format (list "[m:" "de" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem32 (make-instance 'x64-asm-instruction
:name "FLD"
:req-operands (list "mem32")
:code-format (list "[m:" "d9" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem64 (make-instance 'x64-asm-instruction
:name "FLD"
:req-operands (list "mem64")
:code-format (list "[m:" "dd" "/0")
:arch-flags (list "8086" "FPU")))

(defparameter FLD-mem80 (make-instance 'x64-asm-instruction
:name "FLD"
:req-operands (list "mem80")
:code-format (list "[m:" "db" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FLD-fpureg (make-instance 'x64-asm-instruction
:name "FLD"
:req-operands (list "fpureg")
:code-format (list "[r:" "d9" "c0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FLD-void (make-instance 'x64-asm-instruction
:name "FLD"
:req-operands (list "void")
:code-format (list "[" "d9" "c1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FLD1-void (make-instance 'x64-asm-instruction
:name "FLD1"
:req-operands (list "void")
:code-format (list "[" "d9" "e8")
:arch-flags (list "8086" "FPU")))

(defparameter FLDCW-mem (make-instance 'x64-asm-instruction
:name "FLDCW"
:req-operands (list "mem")
:code-format (list "[m:" "d9" "/5")
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FLDENV-mem (make-instance 'x64-asm-instruction
:name "FLDENV"
:req-operands (list "mem")
:code-format (list "[m:" "d9" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FLDL2E-void (make-instance 'x64-asm-instruction
:name "FLDL2E"
:req-operands (list "void")
:code-format (list "[" "d9" "ea")
:arch-flags (list "8086" "FPU")))

(defparameter FLDL2T-void (make-instance 'x64-asm-instruction
:name "FLDL2T"
:req-operands (list "void")
:code-format (list "[" "d9" "e9")
:arch-flags (list "8086" "FPU")))

(defparameter FLDLG2-void (make-instance 'x64-asm-instruction
:name "FLDLG2"
:req-operands (list "void")
:code-format (list "[" "d9" "ec")
:arch-flags (list "8086" "FPU")))

(defparameter FLDLN2-void (make-instance 'x64-asm-instruction
:name "FLDLN2"
:req-operands (list "void")
:code-format (list "[" "d9" "ed")
:arch-flags (list "8086" "FPU")))

(defparameter FLDPI-void (make-instance 'x64-asm-instruction
:name "FLDPI"
:req-operands (list "void")
:code-format (list "[" "d9" "eb")
:arch-flags (list "8086" "FPU")))

(defparameter FLDZ-void (make-instance 'x64-asm-instruction
:name "FLDZ"
:req-operands (list "void")
:code-format (list "[" "d9" "ee")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-mem32 (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/1")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-mem64 (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/1")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg-to (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpureg (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMUL-void (make-instance 'x64-asm-instruction
:name "FMUL"
:req-operands (list "void")
:code-format (list "[" "de" "c9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FMULP-fpureg (make-instance 'x64-asm-instruction
:name "FMULP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMULP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FMULP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FMULP-void (make-instance 'x64-asm-instruction
:name "FMULP"
:req-operands (list "void")
:code-format (list "[" "de" "c9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FNCLEX-void (make-instance 'x64-asm-instruction
:name "FNCLEX"
:req-operands (list "void")
:code-format (list "[" "db" "e2")
:arch-flags (list "8086" "FPU")))

(defparameter FNDISI-void (make-instance 'x64-asm-instruction
:name "FNDISI"
:req-operands (list "void")
:code-format (list "[" "db" "e1")
:arch-flags (list "8086" "FPU")))

(defparameter FNENI-void (make-instance 'x64-asm-instruction
:name "FNENI"
:req-operands (list "void")
:code-format (list "[" "db" "e0")
:arch-flags (list "8086" "FPU")))

(defparameter FNINIT-void (make-instance 'x64-asm-instruction
:name "FNINIT"
:req-operands (list "void")
:code-format (list "[" "db" "e3")
:arch-flags (list "8086" "FPU")))

(defparameter FNOP-void (make-instance 'x64-asm-instruction
:name "FNOP"
:req-operands (list "void")
:code-format (list "[" "d9" "d0")
:arch-flags (list "8086" "FPU")))

(defparameter FNSAVE-mem (make-instance 'x64-asm-instruction
:name "FNSAVE"
:req-operands (list "mem")
:code-format (list "[m:" "dd" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FNSTCW-mem (make-instance 'x64-asm-instruction
:name "FNSTCW"
:req-operands (list "mem")
:code-format (list "[m:" "d9" "/7")
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FNSTENV-mem (make-instance 'x64-asm-instruction
:name "FNSTENV"
:req-operands (list "mem")
:code-format (list "[m:" "d9" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FNSTSW-mem (make-instance 'x64-asm-instruction
:name "FNSTSW"
:req-operands (list "mem")
:code-format (list "[m:" "dd" "/7")
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FNSTSW-reg_ax (make-instance 'x64-asm-instruction
:name "FNSTSW"
:req-operands (list "reg_ax")
:code-format (list "[-:" "df" "e0")
:arch-flags (list "286" "FPU")))

(defparameter FPATAN-void (make-instance 'x64-asm-instruction
:name "FPATAN"
:req-operands (list "void")
:code-format (list "[" "d9" "f3")
:arch-flags (list "8086" "FPU")))

(defparameter FPREM-void (make-instance 'x64-asm-instruction
:name "FPREM"
:req-operands (list "void")
:code-format (list "[" "d9" "f8")
:arch-flags (list "8086" "FPU")))

(defparameter FPREM1-void (make-instance 'x64-asm-instruction
:name "FPREM1"
:req-operands (list "void")
:code-format (list "[" "d9" "f5")
:arch-flags (list "386" "FPU")))

(defparameter FPTAN-void (make-instance 'x64-asm-instruction
:name "FPTAN"
:req-operands (list "void")
:code-format (list "[" "d9" "f2")
:arch-flags (list "8086" "FPU")))

(defparameter FRNDINT-void (make-instance 'x64-asm-instruction
:name "FRNDINT"
:req-operands (list "void")
:code-format (list "[" "d9" "fc")
:arch-flags (list "8086" "FPU")))

(defparameter FRSTOR-mem (make-instance 'x64-asm-instruction
:name "FRSTOR"
:req-operands (list "mem")
:code-format (list "[m:" "dd" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FSAVE-mem (make-instance 'x64-asm-instruction
:name "FSAVE"
:req-operands (list "mem")
:code-format (list "[m:" "wait" "dd" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FSCALE-void (make-instance 'x64-asm-instruction
:name "FSCALE"
:req-operands (list "void")
:code-format (list "[" "d9" "fd")
:arch-flags (list "8086" "FPU")))

(defparameter FSETPM-void (make-instance 'x64-asm-instruction
:name "FSETPM"
:req-operands (list "void")
:code-format (list "[" "db" "e4")
:arch-flags (list "286" "FPU")))

(defparameter FSIN-void (make-instance 'x64-asm-instruction
:name "FSIN"
:req-operands (list "void")
:code-format (list "[" "d9" "fe")
:arch-flags (list "386" "FPU")))

(defparameter FSINCOS-void (make-instance 'x64-asm-instruction
:name "FSINCOS"
:req-operands (list "void")
:code-format (list "[" "d9" "fb")
:arch-flags (list "386" "FPU")))

(defparameter FSQRT-void (make-instance 'x64-asm-instruction
:name "FSQRT"
:req-operands (list "void")
:code-format (list "[" "d9" "fa")
:arch-flags (list "8086" "FPU")))

(defparameter FST-mem32 (make-instance 'x64-asm-instruction
:name "FST"
:req-operands (list "mem32")
:code-format (list "[m:" "d9" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FST-mem64 (make-instance 'x64-asm-instruction
:name "FST"
:req-operands (list "mem64")
:code-format (list "[m:" "dd" "/2")
:arch-flags (list "8086" "FPU")))

(defparameter FST-fpureg (make-instance 'x64-asm-instruction
:name "FST"
:req-operands (list "fpureg")
:code-format (list "[r:" "dd" "d0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FST-void (make-instance 'x64-asm-instruction
:name "FST"
:req-operands (list "void")
:code-format (list "[" "dd" "d1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSTCW-mem (make-instance 'x64-asm-instruction
:name "FSTCW"
:req-operands (list "mem")
:code-format (list "[m:" "wait" "d9" "/7")
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FSTENV-mem (make-instance 'x64-asm-instruction
:name "FSTENV"
:req-operands (list "mem")
:code-format (list "[m:" "wait" "d9" "/6")
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem32 (make-instance 'x64-asm-instruction
:name "FSTP"
:req-operands (list "mem32")
:code-format (list "[m:" "d9" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem64 (make-instance 'x64-asm-instruction
:name "FSTP"
:req-operands (list "mem64")
:code-format (list "[m:" "dd" "/3")
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-mem80 (make-instance 'x64-asm-instruction
:name "FSTP"
:req-operands (list "mem80")
:code-format (list "[m:" "db" "/7")
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-fpureg (make-instance 'x64-asm-instruction
:name "FSTP"
:req-operands (list "fpureg")
:code-format (list "[r:" "dd" "d8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSTP-void (make-instance 'x64-asm-instruction
:name "FSTP"
:req-operands (list "void")
:code-format (list "[" "dd" "d9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSTSW-mem (make-instance 'x64-asm-instruction
:name "FSTSW"
:req-operands (list "mem")
:code-format (list "[m:" "wait" "dd" "/7")
:arch-flags (list "8086" "FPU" "SW")))

(defparameter FSTSW-reg_ax (make-instance 'x64-asm-instruction
:name "FSTSW"
:req-operands (list "reg_ax")
:code-format (list "[-:" "wait" "df" "e0")
:arch-flags (list "286" "FPU")))

(defparameter FSUB-mem32 (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-mem64 (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/4")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg-to (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpureg (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUB-void (make-instance 'x64-asm-instruction
:name "FSUB"
:req-operands (list "void")
:code-format (list "[" "de" "e9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBP-fpureg (make-instance 'x64-asm-instruction
:name "FSUBP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FSUBP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBP-void (make-instance 'x64-asm-instruction
:name "FSUBP"
:req-operands (list "void")
:code-format (list "[" "de" "e9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBR-mem32 (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "mem32")
:code-format (list "[m:" "d8" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-mem64 (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "mem64")
:code-format (list "[m:" "dc" "/5")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg-to (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "fpureg|to")
:code-format (list "[r:" "dc" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "dc" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpureg (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "fpureg")
:code-format (list "[r:" "d8" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d8" "e8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBR-void (make-instance 'x64-asm-instruction
:name "FSUBR"
:req-operands (list "void")
:code-format (list "[" "de" "e1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FSUBRP-fpureg (make-instance 'x64-asm-instruction
:name "FSUBRP"
:req-operands (list "fpureg")
:code-format (list "[r:" "de" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBRP-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FSUBRP"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "de" "e0+r")
:arch-flags (list "8086" "FPU")))

(defparameter FSUBRP-void (make-instance 'x64-asm-instruction
:name "FSUBRP"
:req-operands (list "void")
:code-format (list "[" "de" "e1")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FTST-void (make-instance 'x64-asm-instruction
:name "FTST"
:req-operands (list "void")
:code-format (list "[" "d9" "e4")
:arch-flags (list "8086" "FPU")))

(defparameter FUCOM-fpureg (make-instance 'x64-asm-instruction
:name "FUCOM"
:req-operands (list "fpureg")
:code-format (list "[r:" "dd" "e0+r")
:arch-flags (list "386" "FPU")))

(defparameter FUCOM-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FUCOM"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "dd" "e0+r")
:arch-flags (list "386" "FPU")))

(defparameter FUCOM-void (make-instance 'x64-asm-instruction
:name "FUCOM"
:req-operands (list "void")
:code-format (list "[" "dd" "e1")
:arch-flags (list "386" "FPU" "ND")))

(defparameter FUCOMI-fpureg (make-instance 'x64-asm-instruction
:name "FUCOMI"
:req-operands (list "fpureg")
:code-format (list "[r:" "db" "e8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMI-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FUCOMI"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "db" "e8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMI-void (make-instance 'x64-asm-instruction
:name "FUCOMI"
:req-operands (list "void")
:code-format (list "[" "db" "e9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FUCOMIP-fpureg (make-instance 'x64-asm-instruction
:name "FUCOMIP"
:req-operands (list "fpureg")
:code-format (list "[r:" "df" "e8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMIP-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FUCOMIP"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "df" "e8+r")
:arch-flags (list "P6" "FPU")))

(defparameter FUCOMIP-void (make-instance 'x64-asm-instruction
:name "FUCOMIP"
:req-operands (list "void")
:code-format (list "[" "df" "e9")
:arch-flags (list "P6" "FPU" "ND")))

(defparameter FUCOMP-fpureg (make-instance 'x64-asm-instruction
:name "FUCOMP"
:req-operands (list "fpureg")
:code-format (list "[r:" "dd" "e8+r")
:arch-flags (list "386" "FPU")))

(defparameter FUCOMP-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FUCOMP"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "dd" "e8+r")
:arch-flags (list "386" "FPU")))

(defparameter FUCOMP-void (make-instance 'x64-asm-instruction
:name "FUCOMP"
:req-operands (list "void")
:code-format (list "[" "dd" "e9")
:arch-flags (list "386" "FPU" "ND")))

(defparameter FUCOMPP-void (make-instance 'x64-asm-instruction
:name "FUCOMPP"
:req-operands (list "void")
:code-format (list "[" "da" "e9")
:arch-flags (list "386" "FPU")))

(defparameter FXAM-void (make-instance 'x64-asm-instruction
:name "FXAM"
:req-operands (list "void")
:code-format (list "[" "d9" "e5")
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpureg (make-instance 'x64-asm-instruction
:name "FXCH"
:req-operands (list "fpureg")
:code-format (list "[r:" "d9" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpureg.fpu0 (make-instance 'x64-asm-instruction
:name "FXCH"
:req-operands (list "fpureg" "fpu0")
:code-format (list "[r-:" "d9" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-fpu0.fpureg (make-instance 'x64-asm-instruction
:name "FXCH"
:req-operands (list "fpu0" "fpureg")
:code-format (list "[-r:" "d9" "c8+r")
:arch-flags (list "8086" "FPU")))

(defparameter FXCH-void (make-instance 'x64-asm-instruction
:name "FXCH"
:req-operands (list "void")
:code-format (list "[" "d9" "c9")
:arch-flags (list "8086" "FPU" "ND")))

(defparameter FXTRACT-void (make-instance 'x64-asm-instruction
:name "FXTRACT"
:req-operands (list "void")
:code-format (list "[" "d9" "f4")
:arch-flags (list "8086" "FPU")))

(defparameter FYL2X-void (make-instance 'x64-asm-instruction
:name "FYL2X"
:req-operands (list "void")
:code-format (list "[" "d9" "f1")
:arch-flags (list "8086" "FPU")))

(defparameter FYL2XP1-void (make-instance 'x64-asm-instruction
:name "FYL2XP1"
:req-operands (list "void")
:code-format (list "[" "d9" "f9")
:arch-flags (list "8086" "FPU")))

(defparameter HLT-void (make-instance 'x64-asm-instruction
:name "HLT"
:req-operands (list "void")
:code-format (list "[" "f4")
:arch-flags (list "8086" "PRIV")))

(defparameter IBTS-mem.reg16 (make-instance 'x64-asm-instruction
:name "IBTS"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "o16" "0f" "a7" "/r")
:arch-flags (list "386" "SW" "UNDOC" "ND")))

(defparameter IBTS-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "IBTS"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "a7" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter IBTS-mem.reg32 (make-instance 'x64-asm-instruction
:name "IBTS"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "o32" "0f" "a7" "/r")
:arch-flags (list "386" "SD" "UNDOC" "ND")))

(defparameter IBTS-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "IBTS"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "a7" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter ICEBP-void (make-instance 'x64-asm-instruction
:name "ICEBP"
:req-operands (list "void")
:code-format (list "[" "f1")
:arch-flags (list "386" "ND")))

(defparameter IDIV-rm8 (make-instance 'x64-asm-instruction
:name "IDIV"
:req-operands (list "rm8")
:code-format (list "[m:" "f6" "/7")
:arch-flags (list "8086")))

(defparameter IDIV-rm16 (make-instance 'x64-asm-instruction
:name "IDIV"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "f7" "/7")
:arch-flags (list "8086")))

(defparameter IDIV-rm32 (make-instance 'x64-asm-instruction
:name "IDIV"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "f7" "/7")
:arch-flags (list "386")))

(defparameter IDIV-rm64 (make-instance 'x64-asm-instruction
:name "IDIV"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "f7" "/7")
:arch-flags (list "X64")))

(defparameter IMUL-rm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "rm8")
:code-format (list "[m:" "f6" "/5")
:arch-flags (list "8086")))

(defparameter IMUL-rm16 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "f7" "/5")
:arch-flags (list "8086")))

(defparameter IMUL-rm32 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "f7" "/5")
:arch-flags (list "386")))

(defparameter IMUL-rm64 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "f7" "/5")
:arch-flags (list "X64")))

(defparameter IMUL-reg16.mem (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "af" "/r")
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0f" "af" "/r")
:arch-flags (list "386")))

(defparameter IMUL-reg32.mem (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "af" "/r")
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0f" "af" "/r")
:arch-flags (list "386")))

(defparameter IMUL-reg64.mem (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "af" "/r")
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "0f" "af" "/r")
:arch-flags (list "X64")))

(defparameter IMUL-reg16.mem.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "mem" "imm8")
:code-format (list "[rmi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186" "SM")))

(defparameter IMUL-reg16.mem.sbyteword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "mem" "sbyteword")
:code-format (list "[rmi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.mem.imm16 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "mem" "imm16")
:code-format (list "[rmi:" "o16" "69" "/r" "iw")
:arch-flags (list "186" "SM")))

(defparameter IMUL-reg16.mem.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "mem" "imm")
:code-format (list "[rmi:" "o16" "69" "/r" "iw")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.reg16.imm8-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "reg16" "imm8")
:code-format (list "[rmi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186")))

(defparameter IMUL-reg16.reg16.sbyteword-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "reg16" "sbyteword")
:code-format (list "[rmi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.reg16.imm16-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "reg16" "imm16")
:code-format (list "[rmi:" "o16" "69" "/r" "iw")
:arch-flags (list "186")))

(defparameter IMUL-reg16.reg16.imm-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "reg16" "imm")
:code-format (list "[rmi:" "o16" "69" "/r" "iw")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg32.mem.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "mem" "imm8")
:code-format (list "[rmi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.mem.sbytedword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "mem" "sbytedword")
:code-format (list "[rmi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.mem.imm32 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "mem" "imm32")
:code-format (list "[rmi:" "o32" "69" "/r" "id")
:arch-flags (list "386" "SM")))

(defparameter IMUL-reg32.mem.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "mem" "imm")
:code-format (list "[rmi:" "o32" "69" "/r" "id")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.reg32.imm8-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "reg32" "imm8")
:code-format (list "[rmi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386")))

(defparameter IMUL-reg32.reg32.sbytedword-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "reg32" "sbytedword")
:code-format (list "[rmi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.reg32.imm32-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "reg32" "imm32")
:code-format (list "[rmi:" "o32" "69" "/r" "id")
:arch-flags (list "386")))

(defparameter IMUL-reg32.reg32.imm-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "reg32" "imm")
:code-format (list "[rmi:" "o32" "69" "/r" "id")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg64.mem.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "mem" "imm8")
:code-format (list "[rmi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.mem.sbytedword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "mem" "sbytedword")
:code-format (list "[rmi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.mem.imm32 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "mem" "imm32")
:code-format (list "[rmi:" "o64" "69" "/r" "id")
:arch-flags (list "X64" "SM")))

(defparameter IMUL-reg64.mem.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "mem" "imm")
:code-format (list "[rmi:" "o64" "69" "/r" "id,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.reg64.imm8-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "reg64" "imm8")
:code-format (list "[rmi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64")))

(defparameter IMUL-reg64.reg64.sbytedword-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "reg64" "sbytedword")
:code-format (list "[rmi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.reg64.imm32-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "reg64" "imm32")
:code-format (list "[rmi:" "o64" "69" "/r" "id")
:arch-flags (list "X64")))

(defparameter IMUL-reg64.reg64.imm-rm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "reg64" "imm")
:code-format (list "[rmi:" "o64" "69" "/r" "id,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg16.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "imm8")
:code-format (list "[r+mi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186")))

(defparameter IMUL-reg16.sbyteword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "sbyteword")
:code-format (list "[r+mi:" "o16" "6b" "/r" "ib,s")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg16.imm16 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "imm16")
:code-format (list "[r+mi:" "o16" "69" "/r" "iw")
:arch-flags (list "186")))

(defparameter IMUL-reg16.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg16" "imm")
:code-format (list "[r+mi:" "o16" "69" "/r" "iw")
:arch-flags (list "186" "SM" "ND")))

(defparameter IMUL-reg32.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "imm8")
:code-format (list "[r+mi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386")))

(defparameter IMUL-reg32.sbytedword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "sbytedword")
:code-format (list "[r+mi:" "o32" "6b" "/r" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg32.imm32 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "imm32")
:code-format (list "[r+mi:" "o32" "69" "/r" "id")
:arch-flags (list "386")))

(defparameter IMUL-reg32.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg32" "imm")
:code-format (list "[r+mi:" "o32" "69" "/r" "id")
:arch-flags (list "386" "SM" "ND")))

(defparameter IMUL-reg64.imm8 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "imm8")
:code-format (list "[r+mi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64")))

(defparameter IMUL-reg64.sbytedword (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "sbytedword")
:code-format (list "[r+mi:" "o64" "6b" "/r" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IMUL-reg64.imm32 (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "imm32")
:code-format (list "[r+mi:" "o64" "69" "/r" "id,s")
:arch-flags (list "X64")))

(defparameter IMUL-reg64.imm (make-instance 'x64-asm-instruction
:name "IMUL"
:req-operands (list "reg64" "imm")
:code-format (list "[r+mi:" "o64" "69" "/r" "id,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter IN-reg_al.imm (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "e4" "ib,u")
:arch-flags (list "8086" "SB")))

(defparameter IN-reg_ax.imm (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "e5" "ib,u")
:arch-flags (list "8086" "SB")))

(defparameter IN-reg_eax.imm (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "e5" "ib,u")
:arch-flags (list "386" "SB")))

(defparameter IN-reg_al.reg_dx (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_al" "reg_dx")
:code-format (list "[--:" "ec")
:arch-flags (list "8086")))

(defparameter IN-reg_ax.reg_dx (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_ax" "reg_dx")
:code-format (list "[--:" "o16" "ed")
:arch-flags (list "8086")))

(defparameter IN-reg_eax.reg_dx (make-instance 'x64-asm-instruction
:name "IN"
:req-operands (list "reg_eax" "reg_dx")
:code-format (list "[--:" "o32" "ed")
:arch-flags (list "386")))

(defparameter INC-rm8 (make-instance 'x64-asm-instruction
:name "INC"
:req-operands (list "rm8")
:code-format (list "[m:" "hle" "fe" "/0")
:arch-flags (list "8086" "LOCK")))

(defparameter INC-rm16 (make-instance 'x64-asm-instruction
:name "INC"
:req-operands (list "rm16")
:code-format (list "[m:" "hle" "o16" "ff" "/0")
:arch-flags (list "8086" "LOCK")))

(defparameter INC-rm32 (make-instance 'x64-asm-instruction
:name "INC"
:req-operands (list "rm32")
:code-format (list "[m:" "hle" "o32" "ff" "/0")
:arch-flags (list "386" "LOCK")))

(defparameter INC-rm64 (make-instance 'x64-asm-instruction
:name "INC"
:req-operands (list "rm64")
:code-format (list "[m:" "hle" "o64" "ff" "/0")
:arch-flags (list "X64" "LOCK")))

(defparameter INCBIN-ignore (make-instance 'x64-asm-instruction
:name "INCBIN"
:req-operands (list "ignore")
:code-format (list "[ignore")
:arch-flags (list "ignore")))

(defparameter INSB-void (make-instance 'x64-asm-instruction
:name "INSB"
:req-operands (list "void")
:code-format (list "[" "6c")
:arch-flags (list "186")))

(defparameter INSD-void (make-instance 'x64-asm-instruction
:name "INSD"
:req-operands (list "void")
:code-format (list "[" "o32" "6d")
:arch-flags (list "386")))

(defparameter INSW-void (make-instance 'x64-asm-instruction
:name "INSW"
:req-operands (list "void")
:code-format (list "[" "o16" "6d")
:arch-flags (list "186")))

(defparameter INT-imm (make-instance 'x64-asm-instruction
:name "INT"
:req-operands (list "imm")
:code-format (list "[i:" "cd" "ib,u")
:arch-flags (list "8086" "SB")))

(defparameter INT01-void (make-instance 'x64-asm-instruction
:name "INT01"
:req-operands (list "void")
:code-format (list "[" "f1")
:arch-flags (list "386" "ND")))

(defparameter INT1-void (make-instance 'x64-asm-instruction
:name "INT1"
:req-operands (list "void")
:code-format (list "[" "f1")
:arch-flags (list "386")))

(defparameter INT03-void (make-instance 'x64-asm-instruction
:name "INT03"
:req-operands (list "void")
:code-format (list "[" "cc")
:arch-flags (list "8086" "ND")))

(defparameter INT3-void (make-instance 'x64-asm-instruction
:name "INT3"
:req-operands (list "void")
:code-format (list "[" "cc")
:arch-flags (list "8086")))

(defparameter INVD-void (make-instance 'x64-asm-instruction
:name "INVD"
:req-operands (list "void")
:code-format (list "[" "0f" "08")
:arch-flags (list "486" "PRIV")))

(defparameter INVPCID-reg64.mem128 (make-instance 'x64-asm-instruction
:name "INVPCID"
:req-operands (list "reg64" "mem128")
:code-format (list "[rm:" "66" "0f" "38" "82" "/r")
:arch-flags (list "FUTURE" "INVPCID" "PRIV" "LONG")))

(defparameter INVLPG-mem (make-instance 'x64-asm-instruction
:name "INVLPG"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/7")
:arch-flags (list "486" "PRIV")))

(defparameter INVLPGA-reg_eax.reg_ecx (make-instance 'x64-asm-instruction
:name "INVLPGA"
:req-operands (list "reg_eax" "reg_ecx")
:code-format (list "[--:" "a32" "0f" "01" "df")
:arch-flags (list "X86_64" "AMD")))

(defparameter INVLPGA-reg_rax.reg_ecx (make-instance 'x64-asm-instruction
:name "INVLPGA"
:req-operands (list "reg_rax" "reg_ecx")
:code-format (list "[--:" "o64nw" "a64" "0f" "01" "df")
:arch-flags (list "X64" "AMD")))

(defparameter INVLPGA-void (make-instance 'x64-asm-instruction
:name "INVLPGA"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "df")
:arch-flags (list "X86_64" "AMD")))

(defparameter IRET-void (make-instance 'x64-asm-instruction
:name "IRET"
:req-operands (list "void")
:code-format (list "[" "odf" "cf")
:arch-flags (list "8086")))

(defparameter IRETD-void (make-instance 'x64-asm-instruction
:name "IRETD"
:req-operands (list "void")
:code-format (list "[" "o32" "cf")
:arch-flags (list "386")))

(defparameter IRETQ-void (make-instance 'x64-asm-instruction
:name "IRETQ"
:req-operands (list "void")
:code-format (list "[" "o64" "cf")
:arch-flags (list "X64")))

(defparameter IRETW-void (make-instance 'x64-asm-instruction
:name "IRETW"
:req-operands (list "void")
:code-format (list "[" "o16" "cf")
:arch-flags (list "8086")))

(defparameter JECXZ-imm (make-instance 'x64-asm-instruction
:name "JECXZ"
:req-operands (list "imm")
:code-format (list "[i:" "a32" "e3" "rel8")
:arch-flags (list "386")))

(defparameter JRCXZ-imm (make-instance 'x64-asm-instruction
:name "JRCXZ"
:req-operands (list "imm")
:code-format (list "[i:" "a64" "e3" "rel8")
:arch-flags (list "X64")))

(defparameter JMP-imm-short (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm|short")
:code-format (list "[i:" "eb" "rel8")
:arch-flags (list "8086")))

(defparameter JMP-imm (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm")
:code-format (list "[i:" "jmp8" "eb" "rel8")
:arch-flags (list "8086" "ND")))

(defparameter JMP-imm (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm")
:code-format (list "[i:" "odf" "e9" "rel")
:arch-flags (list "8086" "BND")))

(defparameter JMP-imm-near (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm|near")
:code-format (list "[i:" "odf" "e9" "rel")
:arch-flags (list "8086" "ND" "BND")))

(defparameter JMP-imm64 (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm64")
:code-format (list "[i:" "o64nw" "e9" "rel")
:arch-flags (list "X64" "BND")))

(defparameter JMP-imm64-near (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "imm64|near")
:code-format (list "[i:" "o64nw" "e9" "rel")
:arch-flags (list "X64" "ND" "BND")))

(defparameter JMP-mem-far (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem|far")
:code-format (list "[m:" "o64" "ff" "/5")
:arch-flags (list "X64")))

(defparameter JMP-mem16-far (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem16|far")
:code-format (list "[m:" "o16" "ff" "/5")
:arch-flags (list "8086")))

(defparameter JMP-mem32-far (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem32|far")
:code-format (list "[m:" "o32" "ff" "/5")
:arch-flags (list "386")))

(defparameter JMP-mem64-far (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem64|far")
:code-format (list "[m:" "o64" "ff" "/5")
:arch-flags (list "X64")))

(defparameter JMP-mem-near (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem|near")
:code-format (list "[m:" "odf" "ff" "/4")
:arch-flags (list "8086" "ND" "BND")))

(defparameter JMP-rm64-near (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "rm64|near")
:code-format (list "[m:" "o64nw" "ff" "/4")
:arch-flags (list "X64" "ND" "BND")))

(defparameter JMP-mem (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "mem")
:code-format (list "[m:" "odf" "ff" "/4")
:arch-flags (list "8086" "BND")))

(defparameter JMP-rm64 (make-instance 'x64-asm-instruction
:name "JMP"
:req-operands (list "rm64")
:code-format (list "[m:" "o64nw" "ff" "/4")
:arch-flags (list "X64" "BND")))

(defparameter JMPE-imm (make-instance 'x64-asm-instruction
:name "JMPE"
:req-operands (list "imm")
:code-format (list "[i:" "odf" "0f" "b8" "rel")
:arch-flags (list "IA64")))

(defparameter JMPE-imm16 (make-instance 'x64-asm-instruction
:name "JMPE"
:req-operands (list "imm16")
:code-format (list "[i:" "o16" "0f" "b8" "rel")
:arch-flags (list "IA64")))

(defparameter JMPE-imm32 (make-instance 'x64-asm-instruction
:name "JMPE"
:req-operands (list "imm32")
:code-format (list "[i:" "o32" "0f" "b8" "rel")
:arch-flags (list "IA64")))

(defparameter JMPE-rm16 (make-instance 'x64-asm-instruction
:name "JMPE"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "00" "/6")
:arch-flags (list "IA64")))

(defparameter JMPE-rm32 (make-instance 'x64-asm-instruction
:name "JMPE"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "00" "/6")
:arch-flags (list "IA64")))

(defparameter LAHF-void (make-instance 'x64-asm-instruction
:name "LAHF"
:req-operands (list "void")
:code-format (list "[" "9f")
:arch-flags (list "8086")))

(defparameter LAR-reg16.mem (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "02" "/r")
:arch-flags (list "286" "PROT" "SW")))

(defparameter LAR-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0f" "02" "/r")
:arch-flags (list "286" "PROT")))

(defparameter LAR-reg16.reg32-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg16" "reg32")
:code-format (list "[rm:" "o16" "0f" "02" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg16.reg64-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg16" "reg64")
:code-format (list "[rm:" "o16" "o64nw" "0f" "02" "/r")
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LAR-reg32.mem (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "02" "/r")
:arch-flags (list "386" "PROT" "SW")))

(defparameter LAR-reg32.reg16-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg32" "reg16")
:code-format (list "[rm:" "o32" "0f" "02" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0f" "02" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LAR-reg32.reg64-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg32" "reg64")
:code-format (list "[rm:" "o32" "o64nw" "0f" "02" "/r")
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LAR-reg64.mem (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "02" "/r")
:arch-flags (list "X64" "PROT" "SW")))

(defparameter LAR-reg64.reg16-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg64" "reg16")
:code-format (list "[rm:" "o64" "0f" "02" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LAR-reg64.reg32-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg64" "reg32")
:code-format (list "[rm:" "o64" "0f" "02" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LAR-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "LAR"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "0f" "02" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LEA-reg16.mem (make-instance 'x64-asm-instruction
:name "LEA"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "8d" "/r")
:arch-flags (list "8086")))

(defparameter LEA-reg32.mem (make-instance 'x64-asm-instruction
:name "LEA"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "8d" "/r")
:arch-flags (list "386")))

(defparameter LEA-reg64.mem (make-instance 'x64-asm-instruction
:name "LEA"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "8d" "/r")
:arch-flags (list "X64")))

(defparameter LEAVE-void (make-instance 'x64-asm-instruction
:name "LEAVE"
:req-operands (list "void")
:code-format (list "[" "c9")
:arch-flags (list "186")))

(defparameter LFENCE-void (make-instance 'x64-asm-instruction
:name "LFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "e8")
:arch-flags (list "X64" "AMD")))

(defparameter LFS-reg16.mem (make-instance 'x64-asm-instruction
:name "LFS"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "b4" "/r")
:arch-flags (list "386")))

(defparameter LFS-reg32.mem (make-instance 'x64-asm-instruction
:name "LFS"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "b4" "/r")
:arch-flags (list "386")))

(defparameter LFS-reg64.mem (make-instance 'x64-asm-instruction
:name "LFS"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "b4" "/r")
:arch-flags (list "X64")))

(defparameter LGDT-mem (make-instance 'x64-asm-instruction
:name "LGDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/2")
:arch-flags (list "286" "PRIV")))

(defparameter LGS-reg16.mem (make-instance 'x64-asm-instruction
:name "LGS"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "b5" "/r")
:arch-flags (list "386")))

(defparameter LGS-reg32.mem (make-instance 'x64-asm-instruction
:name "LGS"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "b5" "/r")
:arch-flags (list "386")))

(defparameter LGS-reg64.mem (make-instance 'x64-asm-instruction
:name "LGS"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "b5" "/r")
:arch-flags (list "X64")))

(defparameter LIDT-mem (make-instance 'x64-asm-instruction
:name "LIDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/3")
:arch-flags (list "286" "PRIV")))

(defparameter LLDT-mem (make-instance 'x64-asm-instruction
:name "LLDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/2")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LLDT-mem16 (make-instance 'x64-asm-instruction
:name "LLDT"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/2")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LLDT-reg16 (make-instance 'x64-asm-instruction
:name "LLDT"
:req-operands (list "reg16")
:code-format (list "[m:" "0f" "00" "/2")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LMSW-mem (make-instance 'x64-asm-instruction
:name "LMSW"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/6")
:arch-flags (list "286" "PRIV")))

(defparameter LMSW-mem16 (make-instance 'x64-asm-instruction
:name "LMSW"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "01" "/6")
:arch-flags (list "286" "PRIV")))

(defparameter LMSW-reg16 (make-instance 'x64-asm-instruction
:name "LMSW"
:req-operands (list "reg16")
:code-format (list "[m:" "0f" "01" "/6")
:arch-flags (list "286" "PRIV")))

(defparameter LOADALL-void (make-instance 'x64-asm-instruction
:name "LOADALL"
:req-operands (list "void")
:code-format (list "[" "0f" "07")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter LOADALL286-void (make-instance 'x64-asm-instruction
:name "LOADALL286"
:req-operands (list "void")
:code-format (list "[" "0f" "05")
:arch-flags (list "286" "UNDOC" "ND")))

(defparameter LODSB-void (make-instance 'x64-asm-instruction
:name "LODSB"
:req-operands (list "void")
:code-format (list "[" "ac")
:arch-flags (list "8086")))

(defparameter LODSD-void (make-instance 'x64-asm-instruction
:name "LODSD"
:req-operands (list "void")
:code-format (list "[" "o32" "ad")
:arch-flags (list "386")))

(defparameter LODSQ-void (make-instance 'x64-asm-instruction
:name "LODSQ"
:req-operands (list "void")
:code-format (list "[" "o64" "ad")
:arch-flags (list "X64")))

(defparameter LODSW-void (make-instance 'x64-asm-instruction
:name "LODSW"
:req-operands (list "void")
:code-format (list "[" "o16" "ad")
:arch-flags (list "8086")))

(defparameter LOOP-imm (make-instance 'x64-asm-instruction
:name "LOOP"
:req-operands (list "imm")
:code-format (list "[i:" "adf" "e2" "rel8")
:arch-flags (list "8086")))

(defparameter LOOP-imm.reg_ecx (make-instance 'x64-asm-instruction
:name "LOOP"
:req-operands (list "imm" "reg_ecx")
:code-format (list "[i-:" "a32" "e2" "rel8")
:arch-flags (list "386")))

(defparameter LOOP-imm.reg_rcx (make-instance 'x64-asm-instruction
:name "LOOP"
:req-operands (list "imm" "reg_rcx")
:code-format (list "[i-:" "a64" "e2" "rel8")
:arch-flags (list "X64")))

(defparameter LOOPE-imm (make-instance 'x64-asm-instruction
:name "LOOPE"
:req-operands (list "imm")
:code-format (list "[i:" "adf" "e1" "rel8")
:arch-flags (list "8086")))

(defparameter LOOPE-imm.reg_ecx (make-instance 'x64-asm-instruction
:name "LOOPE"
:req-operands (list "imm" "reg_ecx")
:code-format (list "[i-:" "a32" "e1" "rel8")
:arch-flags (list "386")))

(defparameter LOOPE-imm.reg_rcx (make-instance 'x64-asm-instruction
:name "LOOPE"
:req-operands (list "imm" "reg_rcx")
:code-format (list "[i-:" "a64" "e1" "rel8")
:arch-flags (list "X64")))

(defparameter LOOPNE-imm (make-instance 'x64-asm-instruction
:name "LOOPNE"
:req-operands (list "imm")
:code-format (list "[i:" "adf" "e0" "rel8")
:arch-flags (list "8086")))

(defparameter LOOPNE-imm.reg_ecx (make-instance 'x64-asm-instruction
:name "LOOPNE"
:req-operands (list "imm" "reg_ecx")
:code-format (list "[i-:" "a32" "e0" "rel8")
:arch-flags (list "386")))

(defparameter LOOPNE-imm.reg_rcx (make-instance 'x64-asm-instruction
:name "LOOPNE"
:req-operands (list "imm" "reg_rcx")
:code-format (list "[i-:" "a64" "e0" "rel8")
:arch-flags (list "X64")))

(defparameter LOOPNZ-imm (make-instance 'x64-asm-instruction
:name "LOOPNZ"
:req-operands (list "imm")
:code-format (list "[i:" "adf" "e0" "rel8")
:arch-flags (list "8086")))

(defparameter LOOPNZ-imm.reg_ecx (make-instance 'x64-asm-instruction
:name "LOOPNZ"
:req-operands (list "imm" "reg_ecx")
:code-format (list "[i-:" "a32" "e0" "rel8")
:arch-flags (list "386")))

(defparameter LOOPNZ-imm.reg_rcx (make-instance 'x64-asm-instruction
:name "LOOPNZ"
:req-operands (list "imm" "reg_rcx")
:code-format (list "[i-:" "a64" "e0" "rel8")
:arch-flags (list "X64")))

(defparameter LOOPZ-imm (make-instance 'x64-asm-instruction
:name "LOOPZ"
:req-operands (list "imm")
:code-format (list "[i:" "adf" "e1" "rel8")
:arch-flags (list "8086")))

(defparameter LOOPZ-imm.reg_ecx (make-instance 'x64-asm-instruction
:name "LOOPZ"
:req-operands (list "imm" "reg_ecx")
:code-format (list "[i-:" "a32" "e1" "rel8")
:arch-flags (list "386")))

(defparameter LOOPZ-imm.reg_rcx (make-instance 'x64-asm-instruction
:name "LOOPZ"
:req-operands (list "imm" "reg_rcx")
:code-format (list "[i-:" "a64" "e1" "rel8")
:arch-flags (list "X64")))

(defparameter LSL-reg16.mem (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "03" "/r")
:arch-flags (list "286" "PROT" "SW")))

(defparameter LSL-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0f" "03" "/r")
:arch-flags (list "286" "PROT")))

(defparameter LSL-reg16.reg32-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg16" "reg32")
:code-format (list "[rm:" "o16" "0f" "03" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg16.reg64-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg16" "reg64")
:code-format (list "[rm:" "o16" "o64nw" "0f" "03" "/r")
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LSL-reg32.mem (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "03" "/r")
:arch-flags (list "386" "PROT" "SW")))

(defparameter LSL-reg32.reg16-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg32" "reg16")
:code-format (list "[rm:" "o32" "0f" "03" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0f" "03" "/r")
:arch-flags (list "386" "PROT")))

(defparameter LSL-reg32.reg64-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg32" "reg64")
:code-format (list "[rm:" "o32" "o64nw" "0f" "03" "/r")
:arch-flags (list "X64" "PROT" "ND")))

(defparameter LSL-reg64.mem (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "03" "/r")
:arch-flags (list "X64" "PROT" "SW")))

(defparameter LSL-reg64.reg16-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg64" "reg16")
:code-format (list "[rm:" "o64" "0f" "03" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LSL-reg64.reg32-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg64" "reg32")
:code-format (list "[rm:" "o64" "0f" "03" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LSL-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "LSL"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "0f" "03" "/r")
:arch-flags (list "X64" "PROT")))

(defparameter LSS-reg16.mem (make-instance 'x64-asm-instruction
:name "LSS"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "b2" "/r")
:arch-flags (list "386")))

(defparameter LSS-reg32.mem (make-instance 'x64-asm-instruction
:name "LSS"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "b2" "/r")
:arch-flags (list "386")))

(defparameter LSS-reg64.mem (make-instance 'x64-asm-instruction
:name "LSS"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "b2" "/r")
:arch-flags (list "X64")))

(defparameter LTR-mem (make-instance 'x64-asm-instruction
:name "LTR"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/3")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LTR-mem16 (make-instance 'x64-asm-instruction
:name "LTR"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/3")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter LTR-reg16 (make-instance 'x64-asm-instruction
:name "LTR"
:req-operands (list "reg16")
:code-format (list "[m:" "0f" "00" "/3")
:arch-flags (list "286" "PROT" "PRIV")))

(defparameter MFENCE-void (make-instance 'x64-asm-instruction
:name "MFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "f0")
:arch-flags (list "X64" "AMD")))

(defparameter MONITOR-void (make-instance 'x64-asm-instruction
:name "MONITOR"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c8")
:arch-flags (list "PRESCOTT")))

(defparameter MONITOR-reg_rax.reg_ecx.reg_edx (make-instance 'x64-asm-instruction
:name "MONITOR"
:req-operands (list "reg_rax" "reg_ecx" "reg_edx")
:code-format (list "[---:" "0f" "01" "c8")
:arch-flags (list "X64" "ND")))

(defparameter MONITORX-void (make-instance 'x64-asm-instruction
:name "MONITORX"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "fa")
:arch-flags (list "AMD")))

(defparameter MONITORX-reg_rax.reg_ecx.reg_edx (make-instance 'x64-asm-instruction
:name "MONITORX"
:req-operands (list "reg_rax" "reg_ecx" "reg_edx")
:code-format (list "[---:" "0f" "01" "fa")
:arch-flags (list "X64" "AMD" "ND")))

(defparameter MONITORX-reg_eax.reg_ecx.reg_edx (make-instance 'x64-asm-instruction
:name "MONITORX"
:req-operands (list "reg_eax" "reg_ecx" "reg_edx")
:code-format (list "[---:" "0f" "01" "fa")
:arch-flags (list "AMD" "ND")))

(defparameter MONITORX-reg_ax.reg_ecx.reg_edx (make-instance 'x64-asm-instruction
:name "MONITORX"
:req-operands (list "reg_ax" "reg_ecx" "reg_edx")
:code-format (list "[---:" "0f" "01" "fa")
:arch-flags (list "AMD" "ND")))

(defparameter MOV-mem.reg_sreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "reg_sreg")
:code-format (list "[mr:" "8c" "/r")
:arch-flags (list "8086" "SW")))

(defparameter MOV-reg16.reg_sreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg16" "reg_sreg")
:code-format (list "[mr:" "o16" "8c" "/r")
:arch-flags (list "8086")))

(defparameter MOV-reg32.reg_sreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg32" "reg_sreg")
:code-format (list "[mr:" "o32" "8c" "/r")
:arch-flags (list "386")))

(defparameter MOV-reg64.reg_sreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "reg_sreg")
:code-format (list "[mr:" "o64nw" "8c" "/r")
:arch-flags (list "X64" "OPT" "ND")))

(defparameter MOV-rm64.reg_sreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm64" "reg_sreg")
:code-format (list "[mr:" "o64" "8c" "/r")
:arch-flags (list "X64")))

(defparameter MOV-reg_sreg.mem (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "mem")
:code-format (list "[rm:" "8e" "/r")
:arch-flags (list "8086" "SW")))

(defparameter MOV-reg_sreg.reg16 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "reg16")
:code-format (list "[rm:" "8e" "/r")
:arch-flags (list "8086" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg32 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "reg32")
:code-format (list "[rm:" "8e" "/r")
:arch-flags (list "386" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg64 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "reg64")
:code-format (list "[rm:" "o64nw" "8e" "/r")
:arch-flags (list "X64" "OPT" "ND")))

(defparameter MOV-reg_sreg.reg16 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "reg16")
:code-format (list "[rm:" "o16" "8e" "/r")
:arch-flags (list "8086")))

(defparameter MOV-reg_sreg.reg32 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "reg32")
:code-format (list "[rm:" "o32" "8e" "/r")
:arch-flags (list "386")))

(defparameter MOV-reg_sreg.rm64 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_sreg" "rm64")
:code-format (list "[rm:" "o64" "8e" "/r")
:arch-flags (list "X64")))

(defparameter MOV-reg_al.mem_offs (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_al" "mem_offs")
:code-format (list "[-i:" "a0" "iwdq")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg_ax.mem_offs (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_ax" "mem_offs")
:code-format (list "[-i:" "o16" "a1" "iwdq")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg_eax.mem_offs (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_eax" "mem_offs")
:code-format (list "[-i:" "o32" "a1" "iwdq")
:arch-flags (list "386" "SM")))

(defparameter MOV-reg_rax.mem_offs (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_rax" "mem_offs")
:code-format (list "[-i:" "o64" "a1" "iwdq")
:arch-flags (list "X64" "SM")))

(defparameter MOV-mem_offs.reg_al (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem_offs" "reg_al")
:code-format (list "[i-:" "a2" "iwdq")
:arch-flags (list "8086" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_ax (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem_offs" "reg_ax")
:code-format (list "[i-:" "o16" "a3" "iwdq")
:arch-flags (list "8086" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_eax (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem_offs" "reg_eax")
:code-format (list "[i-:" "o32" "a3" "iwdq")
:arch-flags (list "386" "SM" "NOHLE")))

(defparameter MOV-mem_offs.reg_rax (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem_offs" "reg_rax")
:code-format (list "[i-:" "o64" "a3" "iwdq")
:arch-flags (list "X64" "SM" "NOHLE")))

(defparameter MOV-reg64.reg_creg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "reg_creg")
:code-format (list "[mr:" "o64nw" "0f" "20" "/r")
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg_creg.reg64 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_creg" "reg64")
:code-format (list "[rm:" "o64nw" "0f" "22" "/r")
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg64.reg_dreg (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "reg_dreg")
:code-format (list "[mr:" "o64nw" "0f" "21" "/r")
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-reg_dreg.reg64 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg_dreg" "reg64")
:code-format (list "[rm:" "o64nw" "0f" "23" "/r")
:arch-flags (list "X64" "PRIV")))

(defparameter MOV-mem.reg8 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hlexr" "88" "/r")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "88" "/r")
:arch-flags (list "8086")))

(defparameter MOV-mem.reg16 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hlexr" "o16" "89" "/r")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "89" "/r")
:arch-flags (list "8086")))

(defparameter MOV-mem.reg32 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hlexr" "o32" "89" "/r")
:arch-flags (list "386" "SM")))

(defparameter MOV-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "89" "/r")
:arch-flags (list "386")))

(defparameter MOV-mem.reg64 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hlexr" "o64" "89" "/r")
:arch-flags (list "X64" "SM")))

(defparameter MOV-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "89" "/r")
:arch-flags (list "X64")))

(defparameter MOV-reg8.mem (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "8a" "/r")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "8a" "/r")
:arch-flags (list "8086")))

(defparameter MOV-reg16.mem (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "8b" "/r")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "8b" "/r")
:arch-flags (list "8086")))

(defparameter MOV-reg32.mem (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "8b" "/r")
:arch-flags (list "386" "SM")))

(defparameter MOV-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "8b" "/r")
:arch-flags (list "386")))

(defparameter MOV-reg64.mem (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "8b" "/r")
:arch-flags (list "X64" "SM")))

(defparameter MOV-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "8b" "/r")
:arch-flags (list "X64")))

(defparameter MOV-reg8.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg8" "imm")
:code-format (list "[ri:" "b0+r" "ib")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg16.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg16" "imm")
:code-format (list "[ri:" "o16" "b8+r" "iw")
:arch-flags (list "8086" "SM")))

(defparameter MOV-reg32.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg32" "imm")
:code-format (list "[ri:" "o32" "b8+r" "id")
:arch-flags (list "386" "SM")))

(defparameter MOV-reg64.udword (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "udword")
:code-format (list "[ri:" "o64nw" "b8+r" "id")
:arch-flags (list "X64" "SM" "OPT" "ND")))

(defparameter MOV-reg64.sdword (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "sdword")
:code-format (list "[mi:" "o64" "c7" "/0" "id,s")
:arch-flags (list "X64" "SM" "OPT" "ND")))

(defparameter MOV-reg64.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "reg64" "imm")
:code-format (list "[ri:" "o64" "b8+r" "iq")
:arch-flags (list "X64" "SM")))

(defparameter MOV-rm8.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hlexr" "c6" "/0" "ib")
:arch-flags (list "8086" "SM")))

(defparameter MOV-rm16.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hlexr" "o16" "c7" "/0" "iw")
:arch-flags (list "8086" "SM")))

(defparameter MOV-rm32.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hlexr" "o32" "c7" "/0" "id")
:arch-flags (list "386" "SM")))

(defparameter MOV-rm64.imm (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hlexr" "o64" "c7" "/0" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter MOV-rm64.imm32 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "rm64" "imm32")
:code-format (list "[mi:" "hlexr" "o64" "c7" "/0" "id,s")
:arch-flags (list "X64")))

(defparameter MOV-mem.imm8 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hlexr" "c6" "/0" "ib")
:arch-flags (list "8086" "SM")))

(defparameter MOV-mem.imm16 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hlexr" "o16" "c7" "/0" "iw")
:arch-flags (list "8086" "SM")))

(defparameter MOV-mem.imm32 (make-instance 'x64-asm-instruction
:name "MOV"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hlexr" "o32" "c7" "/0" "id")
:arch-flags (list "386" "SM")))

(defparameter MOVD-mmxreg.rm32 (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "mmxreg" "rm32")
:code-format (list "[rm:" "np" "0f" "6e" "/r")
:arch-flags (list "PENT" "MMX" "SD")))

(defparameter MOVD-rm32.mmxreg (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "rm32" "mmxreg")
:code-format (list "[mr:" "np" "0f" "7e" "/r")
:arch-flags (list "PENT" "MMX" "SD")))

(defparameter MOVD-mmxreg.rm64 (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "mmxreg" "rm64")
:code-format (list "[rm:" "np" "o64" "0f" "6e" "/r")
:arch-flags (list "X64" "MMX" "SX" "ND")))

(defparameter MOVD-rm64.mmxreg (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "rm64" "mmxreg")
:code-format (list "[mr:" "np" "o64" "0f" "7e" "/r")
:arch-flags (list "X64" "MMX" "SX" "ND")))

(defparameter MOVQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "6f" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter MOVQ-mmxrm.mmxreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "mmxrm" "mmxreg")
:code-format (list "[mr:" "np" "0f" "7f" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter MOVQ-mmxreg.rm64 (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "mmxreg" "rm64")
:code-format (list "[rm:" "np" "o64" "0f" "6e" "/r")
:arch-flags (list "X64" "MMX")))

(defparameter MOVQ-rm64.mmxreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "rm64" "mmxreg")
:code-format (list "[mr:" "np" "o64" "0f" "7e" "/r")
:arch-flags (list "X64" "MMX")))

(defparameter MOVSB-void (make-instance 'x64-asm-instruction
:name "MOVSB"
:req-operands (list "void")
:code-format (list "[" "a4")
:arch-flags (list "8086")))

(defparameter MOVSD-void (make-instance 'x64-asm-instruction
:name "MOVSD"
:req-operands (list "void")
:code-format (list "[" "o32" "a5")
:arch-flags (list "386")))

(defparameter MOVSQ-void (make-instance 'x64-asm-instruction
:name "MOVSQ"
:req-operands (list "void")
:code-format (list "[" "o64" "a5")
:arch-flags (list "X64")))

(defparameter MOVSW-void (make-instance 'x64-asm-instruction
:name "MOVSW"
:req-operands (list "void")
:code-format (list "[" "o16" "a5")
:arch-flags (list "8086")))

(defparameter MOVSX-reg16.mem (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "be" "/r")
:arch-flags (list "386" "SB")))

(defparameter MOVSX-reg16.reg8-rm (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg16" "reg8")
:code-format (list "[rm:" "o16" "0f" "be" "/r")
:arch-flags (list "386")))

(defparameter MOVSX-reg32.rm8 (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg32" "rm8")
:code-format (list "[rm:" "o32" "0f" "be" "/r")
:arch-flags (list "386")))

(defparameter MOVSX-reg32.rm16 (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg32" "rm16")
:code-format (list "[rm:" "o32" "0f" "bf" "/r")
:arch-flags (list "386")))

(defparameter MOVSX-reg64.rm8 (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg64" "rm8")
:code-format (list "[rm:" "o64" "0f" "be" "/r")
:arch-flags (list "X64")))

(defparameter MOVSX-reg64.rm16 (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg64" "rm16")
:code-format (list "[rm:" "o64" "0f" "bf" "/r")
:arch-flags (list "X64")))

(defparameter MOVSXD-reg64.rm32 (make-instance 'x64-asm-instruction
:name "MOVSXD"
:req-operands (list "reg64" "rm32")
:code-format (list "[rm:" "o64" "63" "/r")
:arch-flags (list "X64")))

(defparameter MOVSX-reg64.rm32 (make-instance 'x64-asm-instruction
:name "MOVSX"
:req-operands (list "reg64" "rm32")
:code-format (list "[rm:" "o64" "63" "/r")
:arch-flags (list "X64" "ND")))

(defparameter MOVZX-reg16.mem (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "b6" "/r")
:arch-flags (list "386" "SB")))

(defparameter MOVZX-reg16.reg8-rm (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg16" "reg8")
:code-format (list "[rm:" "o16" "0f" "b6" "/r")
:arch-flags (list "386")))

(defparameter MOVZX-reg32.rm8 (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg32" "rm8")
:code-format (list "[rm:" "o32" "0f" "b6" "/r")
:arch-flags (list "386")))

(defparameter MOVZX-reg32.rm16 (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg32" "rm16")
:code-format (list "[rm:" "o32" "0f" "b7" "/r")
:arch-flags (list "386")))

(defparameter MOVZX-reg64.rm8 (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg64" "rm8")
:code-format (list "[rm:" "o64" "0f" "b6" "/r")
:arch-flags (list "X64")))

(defparameter MOVZX-reg64.rm16 (make-instance 'x64-asm-instruction
:name "MOVZX"
:req-operands (list "reg64" "rm16")
:code-format (list "[rm:" "o64" "0f" "b7" "/r")
:arch-flags (list "X64")))

(defparameter MUL-rm8 (make-instance 'x64-asm-instruction
:name "MUL"
:req-operands (list "rm8")
:code-format (list "[m:" "f6" "/4")
:arch-flags (list "8086")))

(defparameter MUL-rm16 (make-instance 'x64-asm-instruction
:name "MUL"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "f7" "/4")
:arch-flags (list "8086")))

(defparameter MUL-rm32 (make-instance 'x64-asm-instruction
:name "MUL"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "f7" "/4")
:arch-flags (list "386")))

(defparameter MUL-rm64 (make-instance 'x64-asm-instruction
:name "MUL"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "f7" "/4")
:arch-flags (list "X64")))

(defparameter MWAIT-void (make-instance 'x64-asm-instruction
:name "MWAIT"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c9")
:arch-flags (list "PRESCOTT")))

(defparameter MWAIT-reg_eax.reg_ecx (make-instance 'x64-asm-instruction
:name "MWAIT"
:req-operands (list "reg_eax" "reg_ecx")
:code-format (list "[--:" "0f" "01" "c9")
:arch-flags (list "PRESCOTT" "ND")))

(defparameter MWAITX-void (make-instance 'x64-asm-instruction
:name "MWAITX"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "fb")
:arch-flags (list "AMD")))

(defparameter MWAITX-reg_eax.reg_ecx (make-instance 'x64-asm-instruction
:name "MWAITX"
:req-operands (list "reg_eax" "reg_ecx")
:code-format (list "[--:" "0f" "01" "fb")
:arch-flags (list "AMD" "ND")))

(defparameter NEG-rm8 (make-instance 'x64-asm-instruction
:name "NEG"
:req-operands (list "rm8")
:code-format (list "[m:" "hle" "f6" "/3")
:arch-flags (list "8086" "LOCK")))

(defparameter NEG-rm16 (make-instance 'x64-asm-instruction
:name "NEG"
:req-operands (list "rm16")
:code-format (list "[m:" "hle" "o16" "f7" "/3")
:arch-flags (list "8086" "LOCK")))

(defparameter NEG-rm32 (make-instance 'x64-asm-instruction
:name "NEG"
:req-operands (list "rm32")
:code-format (list "[m:" "hle" "o32" "f7" "/3")
:arch-flags (list "386" "LOCK")))

(defparameter NEG-rm64 (make-instance 'x64-asm-instruction
:name "NEG"
:req-operands (list "rm64")
:code-format (list "[m:" "hle" "o64" "f7" "/3")
:arch-flags (list "X64" "LOCK")))

(defparameter NOP-void (make-instance 'x64-asm-instruction
:name "NOP"
:req-operands (list "void")
:code-format (list "[" "norexb" "nof3" "90")
:arch-flags (list "8086")))

(defparameter NOP-rm16 (make-instance 'x64-asm-instruction
:name "NOP"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/0")
:arch-flags (list "P6")))

(defparameter NOP-rm32 (make-instance 'x64-asm-instruction
:name "NOP"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/0")
:arch-flags (list "P6")))

(defparameter NOP-rm64 (make-instance 'x64-asm-instruction
:name "NOP"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/0")
:arch-flags (list "X64")))

(defparameter NOT-rm8 (make-instance 'x64-asm-instruction
:name "NOT"
:req-operands (list "rm8")
:code-format (list "[m:" "hle" "f6" "/2")
:arch-flags (list "8086" "LOCK")))

(defparameter NOT-rm16 (make-instance 'x64-asm-instruction
:name "NOT"
:req-operands (list "rm16")
:code-format (list "[m:" "hle" "o16" "f7" "/2")
:arch-flags (list "8086" "LOCK")))

(defparameter NOT-rm32 (make-instance 'x64-asm-instruction
:name "NOT"
:req-operands (list "rm32")
:code-format (list "[m:" "hle" "o32" "f7" "/2")
:arch-flags (list "386" "LOCK")))

(defparameter NOT-rm64 (make-instance 'x64-asm-instruction
:name "NOT"
:req-operands (list "rm64")
:code-format (list "[m:" "hle" "o64" "f7" "/2")
:arch-flags (list "X64" "LOCK")))

(defparameter OR-mem.reg8 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "08" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "08" "/r")
:arch-flags (list "8086")))

(defparameter OR-mem.reg16 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "09" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "09" "/r")
:arch-flags (list "8086")))

(defparameter OR-mem.reg32 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "09" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OR-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "09" "/r")
:arch-flags (list "386")))

(defparameter OR-mem.reg64 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "09" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter OR-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "09" "/r")
:arch-flags (list "X64")))

(defparameter OR-reg8.mem (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "0a" "/r")
:arch-flags (list "8086" "SM")))

(defparameter OR-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "0a" "/r")
:arch-flags (list "8086")))

(defparameter OR-reg16.mem (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0b" "/r")
:arch-flags (list "8086" "SM")))

(defparameter OR-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0b" "/r")
:arch-flags (list "8086")))

(defparameter OR-reg32.mem (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0b" "/r")
:arch-flags (list "386" "SM")))

(defparameter OR-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0b" "/r")
:arch-flags (list "386")))

(defparameter OR-reg64.mem (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0b" "/r")
:arch-flags (list "X64" "SM")))

(defparameter OR-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "0b" "/r")
:arch-flags (list "X64")))

(defparameter OR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/1" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter OR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/1" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter OR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/1" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter OR-reg_al.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "0c" "ib")
:arch-flags (list "8086" "SM")))

(defparameter OR-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/1" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter OR-reg_ax.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "0d" "iw")
:arch-flags (list "8086" "SM")))

(defparameter OR-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/1" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter OR-reg_eax.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "0d" "id")
:arch-flags (list "386" "SM")))

(defparameter OR-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/1" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter OR-reg_rax.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "0d" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter OR-rm8.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/1" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/1" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter OR-rm16.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/1" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/1" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter OR-rm32.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/1" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OR-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/1" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter OR-rm64.imm (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/1" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter OR-mem.imm8 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/1" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/1" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter OR-mem.imm16 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/1" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter OR-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/1" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter OR-mem.imm32 (make-instance 'x64-asm-instruction
:name "OR"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/1" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter OUT-imm.reg_al (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "imm" "reg_al")
:code-format (list "[i-:" "e6" "ib,u")
:arch-flags (list "8086" "SB")))

(defparameter OUT-imm.reg_ax (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "imm" "reg_ax")
:code-format (list "[i-:" "o16" "e7" "ib,u")
:arch-flags (list "8086" "SB")))

(defparameter OUT-imm.reg_eax (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "imm" "reg_eax")
:code-format (list "[i-:" "o32" "e7" "ib,u")
:arch-flags (list "386" "SB")))

(defparameter OUT-reg_dx.reg_al (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "reg_dx" "reg_al")
:code-format (list "[--:" "ee")
:arch-flags (list "8086")))

(defparameter OUT-reg_dx.reg_ax (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "reg_dx" "reg_ax")
:code-format (list "[--:" "o16" "ef")
:arch-flags (list "8086")))

(defparameter OUT-reg_dx.reg_eax (make-instance 'x64-asm-instruction
:name "OUT"
:req-operands (list "reg_dx" "reg_eax")
:code-format (list "[--:" "o32" "ef")
:arch-flags (list "386")))

(defparameter OUTSB-void (make-instance 'x64-asm-instruction
:name "OUTSB"
:req-operands (list "void")
:code-format (list "[" "6e")
:arch-flags (list "186")))

(defparameter OUTSD-void (make-instance 'x64-asm-instruction
:name "OUTSD"
:req-operands (list "void")
:code-format (list "[" "o32" "6f")
:arch-flags (list "386")))

(defparameter OUTSW-void (make-instance 'x64-asm-instruction
:name "OUTSW"
:req-operands (list "void")
:code-format (list "[" "o16" "6f")
:arch-flags (list "186")))

(defparameter PACKSSDW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PACKSSDW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "6b" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PACKSSWB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PACKSSWB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "63" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PACKUSWB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PACKUSWB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "67" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "fc" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "fe" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "ec" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDSIW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDSIW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "51" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PADDSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "ed" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDUSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDUSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "dc" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDUSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDUSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "dd" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PADDW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "fd" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PAND-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PAND"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "db" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PANDN-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PANDN"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "df" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PAUSE-void (make-instance 'x64-asm-instruction
:name "PAUSE"
:req-operands (list "void")
:code-format (list "[" "f3i" "90")
:arch-flags (list "8086")))

(defparameter PAVEB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PAVEB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "50" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PAVGUSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PAVGUSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "bf")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PCMPEQB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPEQB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "74" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPEQD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPEQD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "76" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPEQW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPEQW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "75" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPGTB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "64" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPGTD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "66" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PCMPGTW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PCMPGTW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "65" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PDISTIB-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PDISTIB"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "54" "/r")
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")))

(defparameter PF2ID-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PF2ID"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "1d")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFACC-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFACC"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "ae")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFADD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFADD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "9e")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPEQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFCMPEQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "b0")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPGE-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFCMPGE"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "90")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFCMPGT-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFCMPGT"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "a0")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMAX-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFMAX"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "a4")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMIN-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFMIN"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "94")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFMUL-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFMUL"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "b4")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCP-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRCP"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "96")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCPIT1-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRCPIT1"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "a6")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRCPIT2-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRCPIT2"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "b6")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRSQIT1-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRSQIT1"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "a7")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFRSQRT-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRSQRT"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "97")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFSUB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFSUB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "9a")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFSUBR-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFSUBR"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "aa")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PI2FD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PI2FD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "0d")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PMACHRIW-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PMACHRIW"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "5e" "/r")
:arch-flags (list "PENT" "MMX" "SM" "CYRIX")))

(defparameter PMADDWD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMADDWD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f5" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMAGW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMAGW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "52" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHRIW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHRIW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "5d" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHRWA-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHRWA"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "b7")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PMULHRWC-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHRWC"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "59" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMULHW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e5" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMULLW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULLW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d5" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PMVGEZB-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PMVGEZB"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "5c" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVLZB-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PMVLZB"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "5b" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVNZB-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PMVNZB"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "5a" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PMVZB-mmxreg.mem (make-instance 'x64-asm-instruction
:name "PMVZB"
:req-operands (list "mmxreg" "mem")
:code-format (list "[rm:" "0f" "58" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter POP-reg16 (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "reg16")
:code-format (list "[r:" "o16" "58+r")
:arch-flags (list "8086")))

(defparameter POP-reg64 (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "reg64")
:code-format (list "[r:" "o64nw" "58+r")
:arch-flags (list "X64")))

(defparameter POP-rm16 (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "8f" "/0")
:arch-flags (list "8086")))

(defparameter POP-rm64 (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "rm64")
:code-format (list "[m:" "o64nw" "8f" "/0")
:arch-flags (list "X64")))

(defparameter POP-reg_cs (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "reg_cs")
:code-format (list "[-:" "0f")
:arch-flags (list "8086" "UNDOC" "ND")))

(defparameter POP-reg_fs (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "reg_fs")
:code-format (list "[-:" "0f" "a1")
:arch-flags (list "386")))

(defparameter POP-reg_gs (make-instance 'x64-asm-instruction
:name "POP"
:req-operands (list "reg_gs")
:code-format (list "[-:" "0f" "a9")
:arch-flags (list "386")))

(defparameter POPF-void (make-instance 'x64-asm-instruction
:name "POPF"
:req-operands (list "void")
:code-format (list "[" "odf" "9d")
:arch-flags (list "8086")))

(defparameter POPFQ-void (make-instance 'x64-asm-instruction
:name "POPFQ"
:req-operands (list "void")
:code-format (list "[" "o32" "9d")
:arch-flags (list "X64")))

(defparameter POPFW-void (make-instance 'x64-asm-instruction
:name "POPFW"
:req-operands (list "void")
:code-format (list "[" "o16" "9d")
:arch-flags (list "8086")))

(defparameter POR-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "POR"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "eb" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PREFETCH-mem (make-instance 'x64-asm-instruction
:name "PREFETCH"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "0d" "/0")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PREFETCHW-mem (make-instance 'x64-asm-instruction
:name "PREFETCHW"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "0d" "/1")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PSLLD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSLLD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f2" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLD-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSLLD"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "72" "/6" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSLLQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSLLQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f3" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLQ-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSLLQ"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "73" "/6" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSLLW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSLLW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f1" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSLLW-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSLLW"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "71" "/6" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSRAD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSRAD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e2" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRAD-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSRAD"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "72" "/4" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSRAW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSRAW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e1" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRAW-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSRAW"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "71" "/4" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSRLD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d2" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLD-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSRLD"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "72" "/2" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSRLQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d3" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLQ-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSRLQ"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "73" "/2" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSRLW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSRLW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d1" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSRLW-mmxreg.imm (make-instance 'x64-asm-instruction
:name "PSRLW"
:req-operands (list "mmxreg" "imm")
:code-format (list "[mi:" "np" "0f" "71" "/2" "ib,u")
:arch-flags (list "PENT" "MMX")))

(defparameter PSUBB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f8" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "fa" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e8" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBSIW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBSIW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "55" "/r")
:arch-flags (list "PENT" "MMX" "SQ" "CYRIX")))

(defparameter PSUBSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e9" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBUSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBUSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d8" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBUSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBUSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "d9" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PSUBW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f9" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHBW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKHBW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "68" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHDQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKHDQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "6a" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKHWD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKHWD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "69" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLBW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKLBW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "60" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLDQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKLDQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "62" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUNPCKLWD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PUNPCKLWD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "61" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter PUSH-reg16 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "reg16")
:code-format (list "[r:" "o16" "50+r")
:arch-flags (list "8086")))

(defparameter PUSH-reg64 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "reg64")
:code-format (list "[r:" "o64nw" "50+r")
:arch-flags (list "X64")))

(defparameter PUSH-rm16 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "ff" "/6")
:arch-flags (list "8086")))

(defparameter PUSH-rm64 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "rm64")
:code-format (list "[m:" "o64nw" "ff" "/6")
:arch-flags (list "X64")))

(defparameter PUSH-reg_fs (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "reg_fs")
:code-format (list "[-:" "0f" "a0")
:arch-flags (list "386")))

(defparameter PUSH-reg_gs (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "reg_gs")
:code-format (list "[-:" "0f" "a8")
:arch-flags (list "386")))

(defparameter PUSH-imm8 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "imm8")
:code-format (list "[i:" "6a" "ib,s")
:arch-flags (list "186")))

(defparameter PUSH-sbyteword16 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "sbyteword16")
:code-format (list "[i:" "o16" "6a" "ib,s")
:arch-flags (list "186" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm16 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "imm16")
:code-format (list "[i:" "o16" "68" "iw")
:arch-flags (list "186" "AR0" "SIZE")))

(defparameter PUSH-sbytedword64 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "sbytedword64")
:code-format (list "[i:" "o64nw" "6a" "ib,s")
:arch-flags (list "X64" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm64 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "imm64")
:code-format (list "[i:" "o64nw" "68" "id,s")
:arch-flags (list "X64" "AR0" "SIZE")))

(defparameter PUSH-sbytedword32 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "sbytedword32")
:code-format (list "[i:" "o64nw" "6a" "ib,s")
:arch-flags (list "X64" "AR0" "SIZE" "ND")))

(defparameter PUSH-imm32 (make-instance 'x64-asm-instruction
:name "PUSH"
:req-operands (list "imm32")
:code-format (list "[i:" "o64nw" "68" "id,s")
:arch-flags (list "X64" "AR0" "SIZE")))

(defparameter PUSHF-void (make-instance 'x64-asm-instruction
:name "PUSHF"
:req-operands (list "void")
:code-format (list "[" "odf" "9c")
:arch-flags (list "8086")))

(defparameter PUSHFQ-void (make-instance 'x64-asm-instruction
:name "PUSHFQ"
:req-operands (list "void")
:code-format (list "[" "o32" "9c")
:arch-flags (list "X64")))

(defparameter PUSHFW-void (make-instance 'x64-asm-instruction
:name "PUSHFW"
:req-operands (list "void")
:code-format (list "[" "o16" "9c")
:arch-flags (list "8086")))

(defparameter PXOR-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PXOR"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "ef" "/r")
:arch-flags (list "PENT" "MMX" "SQ")))

(defparameter RCL-rm8.unity (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/2")
:arch-flags (list "8086")))

(defparameter RCL-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/2")
:arch-flags (list "8086")))

(defparameter RCL-rm8.imm8 (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/2" "ib,u")
:arch-flags (list "186")))

(defparameter RCL-rm16.unity (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/2")
:arch-flags (list "8086")))

(defparameter RCL-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/2")
:arch-flags (list "8086")))

(defparameter RCL-rm16.imm8 (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/2" "ib,u")
:arch-flags (list "186")))

(defparameter RCL-rm32.unity (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/2")
:arch-flags (list "386")))

(defparameter RCL-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/2")
:arch-flags (list "386")))

(defparameter RCL-rm32.imm8 (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/2" "ib,u")
:arch-flags (list "386")))

(defparameter RCL-rm64.unity (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/2")
:arch-flags (list "X64")))

(defparameter RCL-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/2")
:arch-flags (list "X64")))

(defparameter RCL-rm64.imm8 (make-instance 'x64-asm-instruction
:name "RCL"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/2" "ib,u")
:arch-flags (list "X64")))

(defparameter RCR-rm8.unity (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/3")
:arch-flags (list "8086")))

(defparameter RCR-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/3")
:arch-flags (list "8086")))

(defparameter RCR-rm8.imm8 (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/3" "ib,u")
:arch-flags (list "186")))

(defparameter RCR-rm16.unity (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/3")
:arch-flags (list "8086")))

(defparameter RCR-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/3")
:arch-flags (list "8086")))

(defparameter RCR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/3" "ib,u")
:arch-flags (list "186")))

(defparameter RCR-rm32.unity (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/3")
:arch-flags (list "386")))

(defparameter RCR-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/3")
:arch-flags (list "386")))

(defparameter RCR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/3" "ib,u")
:arch-flags (list "386")))

(defparameter RCR-rm64.unity (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/3")
:arch-flags (list "X64")))

(defparameter RCR-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/3")
:arch-flags (list "X64")))

(defparameter RCR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "RCR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/3" "ib,u")
:arch-flags (list "X64")))

(defparameter RDSHR-rm32 (make-instance 'x64-asm-instruction
:name "RDSHR"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "36" "/0")
:arch-flags (list "P6" "CYRIX" "SMM")))

(defparameter RDMSR-void (make-instance 'x64-asm-instruction
:name "RDMSR"
:req-operands (list "void")
:code-format (list "[" "0f" "32")
:arch-flags (list "PENT" "PRIV")))

(defparameter RDPMC-void (make-instance 'x64-asm-instruction
:name "RDPMC"
:req-operands (list "void")
:code-format (list "[" "0f" "33")
:arch-flags (list "P6")))

(defparameter RDTSC-void (make-instance 'x64-asm-instruction
:name "RDTSC"
:req-operands (list "void")
:code-format (list "[" "0f" "31")
:arch-flags (list "PENT")))

(defparameter RDTSCP-void (make-instance 'x64-asm-instruction
:name "RDTSCP"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "f9")
:arch-flags (list "X86_64")))

(defparameter RET-void (make-instance 'x64-asm-instruction
:name "RET"
:req-operands (list "void")
:code-format (list "[" "c3")
:arch-flags (list "8086" "BND")))

(defparameter RET-imm (make-instance 'x64-asm-instruction
:name "RET"
:req-operands (list "imm")
:code-format (list "[i:" "c2" "iw")
:arch-flags (list "8086" "SW" "BND")))

(defparameter RETF-void (make-instance 'x64-asm-instruction
:name "RETF"
:req-operands (list "void")
:code-format (list "[" "cb")
:arch-flags (list "8086")))

(defparameter RETF-imm (make-instance 'x64-asm-instruction
:name "RETF"
:req-operands (list "imm")
:code-format (list "[i:" "ca" "iw")
:arch-flags (list "8086" "SW")))

(defparameter RETN-void (make-instance 'x64-asm-instruction
:name "RETN"
:req-operands (list "void")
:code-format (list "[" "c3")
:arch-flags (list "8086" "BND")))

(defparameter RETN-imm (make-instance 'x64-asm-instruction
:name "RETN"
:req-operands (list "imm")
:code-format (list "[i:" "c2" "iw")
:arch-flags (list "8086" "SW" "BND")))

(defparameter ROL-rm8.unity (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/0")
:arch-flags (list "8086")))

(defparameter ROL-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/0")
:arch-flags (list "8086")))

(defparameter ROL-rm8.imm8 (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/0" "ib,u")
:arch-flags (list "186")))

(defparameter ROL-rm16.unity (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/0")
:arch-flags (list "8086")))

(defparameter ROL-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/0")
:arch-flags (list "8086")))

(defparameter ROL-rm16.imm8 (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/0" "ib,u")
:arch-flags (list "186")))

(defparameter ROL-rm32.unity (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/0")
:arch-flags (list "386")))

(defparameter ROL-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/0")
:arch-flags (list "386")))

(defparameter ROL-rm32.imm8 (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/0" "ib,u")
:arch-flags (list "386")))

(defparameter ROL-rm64.unity (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/0")
:arch-flags (list "X64")))

(defparameter ROL-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/0")
:arch-flags (list "X64")))

(defparameter ROL-rm64.imm8 (make-instance 'x64-asm-instruction
:name "ROL"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/0" "ib,u")
:arch-flags (list "X64")))

(defparameter ROR-rm8.unity (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/1")
:arch-flags (list "8086")))

(defparameter ROR-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/1")
:arch-flags (list "8086")))

(defparameter ROR-rm8.imm8 (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/1" "ib,u")
:arch-flags (list "186")))

(defparameter ROR-rm16.unity (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/1")
:arch-flags (list "8086")))

(defparameter ROR-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/1")
:arch-flags (list "8086")))

(defparameter ROR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/1" "ib,u")
:arch-flags (list "186")))

(defparameter ROR-rm32.unity (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/1")
:arch-flags (list "386")))

(defparameter ROR-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/1")
:arch-flags (list "386")))

(defparameter ROR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/1" "ib,u")
:arch-flags (list "386")))

(defparameter ROR-rm64.unity (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/1")
:arch-flags (list "X64")))

(defparameter ROR-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/1")
:arch-flags (list "X64")))

(defparameter ROR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "ROR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/1" "ib,u")
:arch-flags (list "X64")))

(defparameter RDM-void (make-instance 'x64-asm-instruction
:name "RDM"
:req-operands (list "void")
:code-format (list "[" "0f" "3a")
:arch-flags (list "P6" "CYRIX" "ND")))

(defparameter RSDC-reg_sreg.mem80 (make-instance 'x64-asm-instruction
:name "RSDC"
:req-operands (list "reg_sreg" "mem80")
:code-format (list "[rm:" "0f" "79" "/r")
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter RSLDT-mem80 (make-instance 'x64-asm-instruction
:name "RSLDT"
:req-operands (list "mem80")
:code-format (list "[m:" "0f" "7b" "/0")
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter RSM-void (make-instance 'x64-asm-instruction
:name "RSM"
:req-operands (list "void")
:code-format (list "[" "0f" "aa")
:arch-flags (list "PENT" "SMM")))

(defparameter RSTS-mem80 (make-instance 'x64-asm-instruction
:name "RSTS"
:req-operands (list "mem80")
:code-format (list "[m:" "0f" "7d" "/0")
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SAHF-void (make-instance 'x64-asm-instruction
:name "SAHF"
:req-operands (list "void")
:code-format (list "[" "9e")
:arch-flags (list "8086")))

(defparameter SAL-rm8.unity (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/4")
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/4")
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm8.imm8 (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/4" "ib,u")
:arch-flags (list "186" "ND")))

(defparameter SAL-rm16.unity (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/4")
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/4")
:arch-flags (list "8086" "ND")))

(defparameter SAL-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/4" "ib,u")
:arch-flags (list "186" "ND")))

(defparameter SAL-rm32.unity (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/4")
:arch-flags (list "386" "ND")))

(defparameter SAL-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/4")
:arch-flags (list "386" "ND")))

(defparameter SAL-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/4" "ib,u")
:arch-flags (list "386" "ND")))

(defparameter SAL-rm64.unity (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/4")
:arch-flags (list "X64" "ND")))

(defparameter SAL-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/4")
:arch-flags (list "X64" "ND")))

(defparameter SAL-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SAL"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/4" "ib,u")
:arch-flags (list "X64" "ND")))

(defparameter SALC-void (make-instance 'x64-asm-instruction
:name "SALC"
:req-operands (list "void")
:code-format (list "[" "d6")
:arch-flags (list "8086" "UNDOC")))

(defparameter SAR-rm8.unity (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/7")
:arch-flags (list "8086")))

(defparameter SAR-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/7")
:arch-flags (list "8086")))

(defparameter SAR-rm8.imm8 (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/7" "ib,u")
:arch-flags (list "186")))

(defparameter SAR-rm16.unity (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/7")
:arch-flags (list "8086")))

(defparameter SAR-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/7")
:arch-flags (list "8086")))

(defparameter SAR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/7" "ib,u")
:arch-flags (list "186")))

(defparameter SAR-rm32.unity (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/7")
:arch-flags (list "386")))

(defparameter SAR-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/7")
:arch-flags (list "386")))

(defparameter SAR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/7" "ib,u")
:arch-flags (list "386")))

(defparameter SAR-rm64.unity (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/7")
:arch-flags (list "X64")))

(defparameter SAR-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/7")
:arch-flags (list "X64")))

(defparameter SAR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SAR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/7" "ib,u")
:arch-flags (list "X64")))

(defparameter SBB-mem.reg8 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "18" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "18" "/r")
:arch-flags (list "8086")))

(defparameter SBB-mem.reg16 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "19" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "19" "/r")
:arch-flags (list "8086")))

(defparameter SBB-mem.reg32 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "19" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SBB-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "19" "/r")
:arch-flags (list "386")))

(defparameter SBB-mem.reg64 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "19" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SBB-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "19" "/r")
:arch-flags (list "X64")))

(defparameter SBB-reg8.mem (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "1a" "/r")
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "1a" "/r")
:arch-flags (list "8086")))

(defparameter SBB-reg16.mem (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "1b" "/r")
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "1b" "/r")
:arch-flags (list "8086")))

(defparameter SBB-reg32.mem (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "1b" "/r")
:arch-flags (list "386" "SM")))

(defparameter SBB-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "1b" "/r")
:arch-flags (list "386")))

(defparameter SBB-reg64.mem (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "1b" "/r")
:arch-flags (list "X64" "SM")))

(defparameter SBB-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "1b" "/r")
:arch-flags (list "X64")))

(defparameter SBB-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/3" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter SBB-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/3" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter SBB-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/3" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter SBB-reg_al.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "1c" "ib")
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/3" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter SBB-reg_ax.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "1d" "iw")
:arch-flags (list "8086" "SM")))

(defparameter SBB-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/3" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter SBB-reg_eax.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "1d" "id")
:arch-flags (list "386" "SM")))

(defparameter SBB-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/3" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter SBB-reg_rax.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "1d" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter SBB-rm8.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/3" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/3" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SBB-rm16.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/3" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/3" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SBB-rm32.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/3" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SBB-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/3" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter SBB-rm64.imm (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/3" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SBB-mem.imm8 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/3" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/3" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SBB-mem.imm16 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/3" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SBB-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/3" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SBB-mem.imm32 (make-instance 'x64-asm-instruction
:name "SBB"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/3" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SCASB-void (make-instance 'x64-asm-instruction
:name "SCASB"
:req-operands (list "void")
:code-format (list "[" "repe" "ae")
:arch-flags (list "8086")))

(defparameter SCASD-void (make-instance 'x64-asm-instruction
:name "SCASD"
:req-operands (list "void")
:code-format (list "[" "repe" "o32" "af")
:arch-flags (list "386")))

(defparameter SCASQ-void (make-instance 'x64-asm-instruction
:name "SCASQ"
:req-operands (list "void")
:code-format (list "[" "repe" "o64" "af")
:arch-flags (list "X64")))

(defparameter SCASW-void (make-instance 'x64-asm-instruction
:name "SCASW"
:req-operands (list "void")
:code-format (list "[" "repe" "o16" "af")
:arch-flags (list "8086")))

(defparameter SFENCE-void (make-instance 'x64-asm-instruction
:name "SFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "f8")
:arch-flags (list "X64" "AMD")))

(defparameter SGDT-mem (make-instance 'x64-asm-instruction
:name "SGDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/0")
:arch-flags (list "286")))

(defparameter SHL-rm8.unity (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/4")
:arch-flags (list "8086")))

(defparameter SHL-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/4")
:arch-flags (list "8086")))

(defparameter SHL-rm8.imm8 (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/4" "ib,u")
:arch-flags (list "186")))

(defparameter SHL-rm16.unity (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/4")
:arch-flags (list "8086")))

(defparameter SHL-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/4")
:arch-flags (list "8086")))

(defparameter SHL-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/4" "ib,u")
:arch-flags (list "186")))

(defparameter SHL-rm32.unity (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/4")
:arch-flags (list "386")))

(defparameter SHL-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/4")
:arch-flags (list "386")))

(defparameter SHL-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/4" "ib,u")
:arch-flags (list "386")))

(defparameter SHL-rm64.unity (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/4")
:arch-flags (list "X64")))

(defparameter SHL-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/4")
:arch-flags (list "X64")))

(defparameter SHL-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SHL"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/4" "ib,u")
:arch-flags (list "X64")))

(defparameter SHLD-mem.reg16.imm (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg16" "imm")
:code-format (list "[mri:" "o16" "0f" "a4" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-reg16.reg16.imm-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg16" "reg16" "imm")
:code-format (list "[mri:" "o16" "0f" "a4" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg32.imm (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg32" "imm")
:code-format (list "[mri:" "o32" "0f" "a4" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-reg32.reg32.imm-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg32" "reg32" "imm")
:code-format (list "[mri:" "o32" "0f" "a4" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg64.imm (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg64" "imm")
:code-format (list "[mri:" "o64" "0f" "a4" "/r" "ib,u")
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHLD-reg64.reg64.imm-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg64" "reg64" "imm")
:code-format (list "[mri:" "o64" "0f" "a4" "/r" "ib,u")
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHLD-mem.reg16.reg_cl (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg16" "reg_cl")
:code-format (list "[mr-:" "o16" "0f" "a5" "/r")
:arch-flags (list "386" "SM")))

(defparameter SHLD-reg16.reg16.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg16" "reg16" "reg_cl")
:code-format (list "[mr-:" "o16" "0f" "a5" "/r")
:arch-flags (list "386")))

(defparameter SHLD-mem.reg32.reg_cl (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg32" "reg_cl")
:code-format (list "[mr-:" "o32" "0f" "a5" "/r")
:arch-flags (list "386" "SM")))

(defparameter SHLD-reg32.reg32.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg32" "reg32" "reg_cl")
:code-format (list "[mr-:" "o32" "0f" "a5" "/r")
:arch-flags (list "386")))

(defparameter SHLD-mem.reg64.reg_cl (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "mem" "reg64" "reg_cl")
:code-format (list "[mr-:" "o64" "0f" "a5" "/r")
:arch-flags (list "X64" "SM")))

(defparameter SHLD-reg64.reg64.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHLD"
:req-operands (list "reg64" "reg64" "reg_cl")
:code-format (list "[mr-:" "o64" "0f" "a5" "/r")
:arch-flags (list "X64")))

(defparameter SHR-rm8.unity (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm8" "unity")
:code-format (list "[m-:" "d0" "/5")
:arch-flags (list "8086")))

(defparameter SHR-rm8.reg_cl (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm8" "reg_cl")
:code-format (list "[m-:" "d2" "/5")
:arch-flags (list "8086")))

(defparameter SHR-rm8.imm8 (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm8" "imm8")
:code-format (list "[mi:" "c0" "/5" "ib,u")
:arch-flags (list "186")))

(defparameter SHR-rm16.unity (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm16" "unity")
:code-format (list "[m-:" "o16" "d1" "/5")
:arch-flags (list "8086")))

(defparameter SHR-rm16.reg_cl (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm16" "reg_cl")
:code-format (list "[m-:" "o16" "d3" "/5")
:arch-flags (list "8086")))

(defparameter SHR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "o16" "c1" "/5" "ib,u")
:arch-flags (list "186")))

(defparameter SHR-rm32.unity (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm32" "unity")
:code-format (list "[m-:" "o32" "d1" "/5")
:arch-flags (list "386")))

(defparameter SHR-rm32.reg_cl (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm32" "reg_cl")
:code-format (list "[m-:" "o32" "d3" "/5")
:arch-flags (list "386")))

(defparameter SHR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "o32" "c1" "/5" "ib,u")
:arch-flags (list "386")))

(defparameter SHR-rm64.unity (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm64" "unity")
:code-format (list "[m-:" "o64" "d1" "/5")
:arch-flags (list "X64")))

(defparameter SHR-rm64.reg_cl (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm64" "reg_cl")
:code-format (list "[m-:" "o64" "d3" "/5")
:arch-flags (list "X64")))

(defparameter SHR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SHR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "o64" "c1" "/5" "ib,u")
:arch-flags (list "X64")))

(defparameter SHRD-mem.reg16.imm (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg16" "imm")
:code-format (list "[mri:" "o16" "0f" "ac" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-reg16.reg16.imm-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg16" "reg16" "imm")
:code-format (list "[mri:" "o16" "0f" "ac" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg32.imm (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg32" "imm")
:code-format (list "[mri:" "o32" "0f" "ac" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-reg32.reg32.imm-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg32" "reg32" "imm")
:code-format (list "[mri:" "o32" "0f" "ac" "/r" "ib,u")
:arch-flags (list "386" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg64.imm (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg64" "imm")
:code-format (list "[mri:" "o64" "0f" "ac" "/r" "ib,u")
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHRD-reg64.reg64.imm-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg64" "reg64" "imm")
:code-format (list "[mri:" "o64" "0f" "ac" "/r" "ib,u")
:arch-flags (list "X64" "SM2" "SB" "AR2")))

(defparameter SHRD-mem.reg16.reg_cl (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg16" "reg_cl")
:code-format (list "[mr-:" "o16" "0f" "ad" "/r")
:arch-flags (list "386" "SM")))

(defparameter SHRD-reg16.reg16.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg16" "reg16" "reg_cl")
:code-format (list "[mr-:" "o16" "0f" "ad" "/r")
:arch-flags (list "386")))

(defparameter SHRD-mem.reg32.reg_cl (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg32" "reg_cl")
:code-format (list "[mr-:" "o32" "0f" "ad" "/r")
:arch-flags (list "386" "SM")))

(defparameter SHRD-reg32.reg32.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg32" "reg32" "reg_cl")
:code-format (list "[mr-:" "o32" "0f" "ad" "/r")
:arch-flags (list "386")))

(defparameter SHRD-mem.reg64.reg_cl (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "mem" "reg64" "reg_cl")
:code-format (list "[mr-:" "o64" "0f" "ad" "/r")
:arch-flags (list "X64" "SM")))

(defparameter SHRD-reg64.reg64.reg_cl-mr (make-instance 'x64-asm-instruction
:name "SHRD"
:req-operands (list "reg64" "reg64" "reg_cl")
:code-format (list "[mr-:" "o64" "0f" "ad" "/r")
:arch-flags (list "X64")))

(defparameter SIDT-mem (make-instance 'x64-asm-instruction
:name "SIDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/1")
:arch-flags (list "286")))

(defparameter SLDT-mem (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/0")
:arch-flags (list "286")))

(defparameter SLDT-mem16 (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/0")
:arch-flags (list "286")))

(defparameter SLDT-reg16 (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "reg16")
:code-format (list "[m:" "o16" "0f" "00" "/0")
:arch-flags (list "286")))

(defparameter SLDT-reg32 (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "reg32")
:code-format (list "[m:" "o32" "0f" "00" "/0")
:arch-flags (list "386")))

(defparameter SLDT-reg64 (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "reg64")
:code-format (list "[m:" "o64nw" "0f" "00" "/0")
:arch-flags (list "X64" "ND")))

(defparameter SLDT-reg64 (make-instance 'x64-asm-instruction
:name "SLDT"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "0f" "00" "/0")
:arch-flags (list "X64")))

(defparameter SKINIT-void (make-instance 'x64-asm-instruction
:name "SKINIT"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "de")
:arch-flags (list "X64")))

(defparameter SMI-void (make-instance 'x64-asm-instruction
:name "SMI"
:req-operands (list "void")
:code-format (list "[" "f1")
:arch-flags (list "386" "UNDOC")))

(defparameter SMINT-void (make-instance 'x64-asm-instruction
:name "SMINT"
:req-operands (list "void")
:code-format (list "[" "0f" "38")
:arch-flags (list "P6" "CYRIX" "ND")))

(defparameter SMINTOLD-void (make-instance 'x64-asm-instruction
:name "SMINTOLD"
:req-operands (list "void")
:code-format (list "[" "0f" "7e")
:arch-flags (list "486" "CYRIX" "ND")))

(defparameter SMSW-mem (make-instance 'x64-asm-instruction
:name "SMSW"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "01" "/4")
:arch-flags (list "286")))

(defparameter SMSW-mem16 (make-instance 'x64-asm-instruction
:name "SMSW"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "01" "/4")
:arch-flags (list "286")))

(defparameter SMSW-reg16 (make-instance 'x64-asm-instruction
:name "SMSW"
:req-operands (list "reg16")
:code-format (list "[m:" "o16" "0f" "01" "/4")
:arch-flags (list "286")))

(defparameter SMSW-reg32 (make-instance 'x64-asm-instruction
:name "SMSW"
:req-operands (list "reg32")
:code-format (list "[m:" "o32" "0f" "01" "/4")
:arch-flags (list "386")))

(defparameter SMSW-reg64 (make-instance 'x64-asm-instruction
:name "SMSW"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "0f" "01" "/4")
:arch-flags (list "X64")))

(defparameter STC-void (make-instance 'x64-asm-instruction
:name "STC"
:req-operands (list "void")
:code-format (list "[" "f9")
:arch-flags (list "8086")))

(defparameter STD-void (make-instance 'x64-asm-instruction
:name "STD"
:req-operands (list "void")
:code-format (list "[" "fd")
:arch-flags (list "8086")))

(defparameter STI-void (make-instance 'x64-asm-instruction
:name "STI"
:req-operands (list "void")
:code-format (list "[" "fb")
:arch-flags (list "8086")))

(defparameter STOSB-void (make-instance 'x64-asm-instruction
:name "STOSB"
:req-operands (list "void")
:code-format (list "[" "aa")
:arch-flags (list "8086")))

(defparameter STOSD-void (make-instance 'x64-asm-instruction
:name "STOSD"
:req-operands (list "void")
:code-format (list "[" "o32" "ab")
:arch-flags (list "386")))

(defparameter STOSQ-void (make-instance 'x64-asm-instruction
:name "STOSQ"
:req-operands (list "void")
:code-format (list "[" "o64" "ab")
:arch-flags (list "X64")))

(defparameter STOSW-void (make-instance 'x64-asm-instruction
:name "STOSW"
:req-operands (list "void")
:code-format (list "[" "o16" "ab")
:arch-flags (list "8086")))

(defparameter STR-mem (make-instance 'x64-asm-instruction
:name "STR"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/1")
:arch-flags (list "286" "PROT")))

(defparameter STR-mem16 (make-instance 'x64-asm-instruction
:name "STR"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/1")
:arch-flags (list "286" "PROT")))

(defparameter STR-reg16 (make-instance 'x64-asm-instruction
:name "STR"
:req-operands (list "reg16")
:code-format (list "[m:" "o16" "0f" "00" "/1")
:arch-flags (list "286" "PROT")))

(defparameter STR-reg32 (make-instance 'x64-asm-instruction
:name "STR"
:req-operands (list "reg32")
:code-format (list "[m:" "o32" "0f" "00" "/1")
:arch-flags (list "386" "PROT")))

(defparameter STR-reg64 (make-instance 'x64-asm-instruction
:name "STR"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "0f" "00" "/1")
:arch-flags (list "X64")))

(defparameter SUB-mem.reg8 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "28" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "28" "/r")
:arch-flags (list "8086")))

(defparameter SUB-mem.reg16 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "29" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "29" "/r")
:arch-flags (list "8086")))

(defparameter SUB-mem.reg32 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "29" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SUB-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "29" "/r")
:arch-flags (list "386")))

(defparameter SUB-mem.reg64 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "29" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SUB-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "29" "/r")
:arch-flags (list "X64")))

(defparameter SUB-reg8.mem (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "2a" "/r")
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "2a" "/r")
:arch-flags (list "8086")))

(defparameter SUB-reg16.mem (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "2b" "/r")
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "2b" "/r")
:arch-flags (list "8086")))

(defparameter SUB-reg32.mem (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "2b" "/r")
:arch-flags (list "386" "SM")))

(defparameter SUB-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "2b" "/r")
:arch-flags (list "386")))

(defparameter SUB-reg64.mem (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "2b" "/r")
:arch-flags (list "X64" "SM")))

(defparameter SUB-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "2b" "/r")
:arch-flags (list "X64")))

(defparameter SUB-rm16.imm8 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/5" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter SUB-rm32.imm8 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/5" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter SUB-rm64.imm8 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/5" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter SUB-reg_al.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "2c" "ib")
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/5" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter SUB-reg_ax.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "2d" "iw")
:arch-flags (list "8086" "SM")))

(defparameter SUB-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/5" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter SUB-reg_eax.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "2d" "id")
:arch-flags (list "386" "SM")))

(defparameter SUB-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/5" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter SUB-reg_rax.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "2d" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter SUB-rm8.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/5" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/5" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SUB-rm16.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/5" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/5" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SUB-rm32.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/5" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SUB-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/5" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter SUB-rm64.imm (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/5" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter SUB-mem.imm8 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/5" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/5" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter SUB-mem.imm16 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/5" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter SUB-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/5" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter SUB-mem.imm32 (make-instance 'x64-asm-instruction
:name "SUB"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/5" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter SVDC-mem80.reg_sreg (make-instance 'x64-asm-instruction
:name "SVDC"
:req-operands (list "mem80" "reg_sreg")
:code-format (list "[mr:" "0f" "78" "/r")
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SVLDT-mem80 (make-instance 'x64-asm-instruction
:name "SVLDT"
:req-operands (list "mem80")
:code-format (list "[m:" "0f" "7a" "/0")
:arch-flags (list "486" "CYRIX" "SMM" "ND")))

(defparameter SVTS-mem80 (make-instance 'x64-asm-instruction
:name "SVTS"
:req-operands (list "mem80")
:code-format (list "[m:" "0f" "7c" "/0")
:arch-flags (list "486" "CYRIX" "SMM")))

(defparameter SWAPGS-void (make-instance 'x64-asm-instruction
:name "SWAPGS"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "f8")
:arch-flags (list "X64")))

(defparameter SYSCALL-void (make-instance 'x64-asm-instruction
:name "SYSCALL"
:req-operands (list "void")
:code-format (list "[" "0f" "05")
:arch-flags (list "P6" "AMD")))

(defparameter SYSENTER-void (make-instance 'x64-asm-instruction
:name "SYSENTER"
:req-operands (list "void")
:code-format (list "[" "0f" "34")
:arch-flags (list "P6")))

(defparameter SYSEXIT-void (make-instance 'x64-asm-instruction
:name "SYSEXIT"
:req-operands (list "void")
:code-format (list "[" "0f" "35")
:arch-flags (list "P6" "PRIV")))

(defparameter SYSRET-void (make-instance 'x64-asm-instruction
:name "SYSRET"
:req-operands (list "void")
:code-format (list "[" "0f" "07")
:arch-flags (list "P6" "PRIV" "AMD")))

(defparameter TEST-mem.reg8 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "84" "/r")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "84" "/r")
:arch-flags (list "8086")))

(defparameter TEST-mem.reg16 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "o16" "85" "/r")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "85" "/r")
:arch-flags (list "8086")))

(defparameter TEST-mem.reg32 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "o32" "85" "/r")
:arch-flags (list "386" "SM")))

(defparameter TEST-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "85" "/r")
:arch-flags (list "386")))

(defparameter TEST-mem.reg64 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "o64" "85" "/r")
:arch-flags (list "X64" "SM")))

(defparameter TEST-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "85" "/r")
:arch-flags (list "X64")))

(defparameter TEST-reg8.mem (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "84" "/r")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg16.mem (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "85" "/r")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg32.mem (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "85" "/r")
:arch-flags (list "386" "SM")))

(defparameter TEST-reg64.mem (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "85" "/r")
:arch-flags (list "X64" "SM")))

(defparameter TEST-reg_al.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "a8" "ib")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg_ax.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "a9" "iw")
:arch-flags (list "8086" "SM")))

(defparameter TEST-reg_eax.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "a9" "id")
:arch-flags (list "386" "SM")))

(defparameter TEST-reg_rax.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "a9" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter TEST-rm8.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "f6" "/0" "ib")
:arch-flags (list "8086" "SM")))

(defparameter TEST-rm16.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "o16" "f7" "/0" "iw")
:arch-flags (list "8086" "SM")))

(defparameter TEST-rm32.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "o32" "f7" "/0" "id")
:arch-flags (list "386" "SM")))

(defparameter TEST-rm64.imm (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "o64" "f7" "/0" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter TEST-mem.imm8 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "f6" "/0" "ib")
:arch-flags (list "8086" "SM")))

(defparameter TEST-mem.imm16 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "o16" "f7" "/0" "iw")
:arch-flags (list "8086" "SM")))

(defparameter TEST-mem.imm32 (make-instance 'x64-asm-instruction
:name "TEST"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "o32" "f7" "/0" "id")
:arch-flags (list "386" "SM")))

(defparameter UD0-void (make-instance 'x64-asm-instruction
:name "UD0"
:req-operands (list "void")
:code-format (list "[" "0f" "ff")
:arch-flags (list "186" "UNDOC")))

(defparameter UD1-void (make-instance 'x64-asm-instruction
:name "UD1"
:req-operands (list "void")
:code-format (list "[" "0f" "b9")
:arch-flags (list "186" "UNDOC")))

(defparameter UD2B-void (make-instance 'x64-asm-instruction
:name "UD2B"
:req-operands (list "void")
:code-format (list "[" "0f" "b9")
:arch-flags (list "186" "UNDOC" "ND")))

(defparameter UD2-void (make-instance 'x64-asm-instruction
:name "UD2"
:req-operands (list "void")
:code-format (list "[" "0f" "0b")
:arch-flags (list "186")))

(defparameter UD2A-void (make-instance 'x64-asm-instruction
:name "UD2A"
:req-operands (list "void")
:code-format (list "[" "0f" "0b")
:arch-flags (list "186" "ND")))

(defparameter UMOV-mem.reg8 (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "np" "0f" "10" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "np" "0f" "10" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-mem.reg16 (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "np" "o16" "0f" "11" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "np" "o16" "0f" "11" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-mem.reg32 (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "np" "o32" "0f" "11" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "np" "o32" "0f" "11" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg8.mem (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "np" "0f" "12" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "np" "0f" "12" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg16.mem (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "np" "o16" "0f" "13" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "np" "o16" "0f" "13" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter UMOV-reg32.mem (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "np" "o32" "0f" "13" "/r")
:arch-flags (list "386" "UNDOC" "SM" "ND")))

(defparameter UMOV-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "UMOV"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "np" "o32" "0f" "13" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter VERR-mem (make-instance 'x64-asm-instruction
:name "VERR"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/4")
:arch-flags (list "286" "PROT")))

(defparameter VERR-mem16 (make-instance 'x64-asm-instruction
:name "VERR"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/4")
:arch-flags (list "286" "PROT")))

(defparameter VERR-reg16 (make-instance 'x64-asm-instruction
:name "VERR"
:req-operands (list "reg16")
:code-format (list "[m:" "0f" "00" "/4")
:arch-flags (list "286" "PROT")))

(defparameter VERW-mem (make-instance 'x64-asm-instruction
:name "VERW"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "00" "/5")
:arch-flags (list "286" "PROT")))

(defparameter VERW-mem16 (make-instance 'x64-asm-instruction
:name "VERW"
:req-operands (list "mem16")
:code-format (list "[m:" "0f" "00" "/5")
:arch-flags (list "286" "PROT")))

(defparameter VERW-reg16 (make-instance 'x64-asm-instruction
:name "VERW"
:req-operands (list "reg16")
:code-format (list "[m:" "0f" "00" "/5")
:arch-flags (list "286" "PROT")))

(defparameter FWAIT-void (make-instance 'x64-asm-instruction
:name "FWAIT"
:req-operands (list "void")
:code-format (list "[" "wait")
:arch-flags (list "8086")))

(defparameter WBINVD-void (make-instance 'x64-asm-instruction
:name "WBINVD"
:req-operands (list "void")
:code-format (list "[" "0f" "09")
:arch-flags (list "486" "PRIV")))

(defparameter WRSHR-rm32 (make-instance 'x64-asm-instruction
:name "WRSHR"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "37" "/0")
:arch-flags (list "P6" "CYRIX" "SMM")))

(defparameter WRMSR-void (make-instance 'x64-asm-instruction
:name "WRMSR"
:req-operands (list "void")
:code-format (list "[" "0f" "30")
:arch-flags (list "PENT" "PRIV")))

(defparameter XADD-mem.reg8 (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "0f" "c0" "/r")
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "0f" "c0" "/r")
:arch-flags (list "486")))

(defparameter XADD-mem.reg16 (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "0f" "c1" "/r")
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "0f" "c1" "/r")
:arch-flags (list "486")))

(defparameter XADD-mem.reg32 (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "0f" "c1" "/r")
:arch-flags (list "486" "SM" "LOCK")))

(defparameter XADD-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "0f" "c1" "/r")
:arch-flags (list "486")))

(defparameter XADD-mem.reg64 (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "0f" "c1" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XADD-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "XADD"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "0f" "c1" "/r")
:arch-flags (list "X64")))

(defparameter XBTS-reg16.mem (make-instance 'x64-asm-instruction
:name "XBTS"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "a6" "/r")
:arch-flags (list "386" "SW" "UNDOC" "ND")))

(defparameter XBTS-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "XBTS"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0f" "a6" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter XBTS-reg32.mem (make-instance 'x64-asm-instruction
:name "XBTS"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "a6" "/r")
:arch-flags (list "386" "SD" "UNDOC" "ND")))

(defparameter XBTS-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "XBTS"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0f" "a6" "/r")
:arch-flags (list "386" "UNDOC" "ND")))

(defparameter XCHG-reg_ax.reg16 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg_ax" "reg16")
:code-format (list "[-r:" "o16" "90+r")
:arch-flags (list "8086")))

(defparameter XCHG-reg_eax.reg32na (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg_eax" "reg32na")
:code-format (list "[-r:" "o32" "90+r")
:arch-flags (list "386")))

(defparameter XCHG-reg_rax.reg64 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg_rax" "reg64")
:code-format (list "[-r:" "o64" "90+r")
:arch-flags (list "X64")))

(defparameter XCHG-reg16.reg_ax (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg16" "reg_ax")
:code-format (list "[r-:" "o16" "90+r")
:arch-flags (list "8086")))

(defparameter XCHG-reg32na.reg_eax (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg32na" "reg_eax")
:code-format (list "[r-:" "o32" "90+r")
:arch-flags (list "386")))

(defparameter XCHG-reg64.reg_rax (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg64" "reg_rax")
:code-format (list "[r-:" "o64" "90+r")
:arch-flags (list "X64")))

(defparameter XCHG-reg8.mem (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "hlenl" "86" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "86" "/r")
:arch-flags (list "8086")))

(defparameter XCHG-reg16.mem (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "hlenl" "o16" "87" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "87" "/r")
:arch-flags (list "8086")))

(defparameter XCHG-reg32.mem (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "hlenl" "o32" "87" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XCHG-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "87" "/r")
:arch-flags (list "386")))

(defparameter XCHG-reg64.mem (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "hlenl" "o64" "87" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XCHG-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "87" "/r")
:arch-flags (list "X64")))

(defparameter XCHG-mem.reg8 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hlenl" "86" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "86" "/r")
:arch-flags (list "8086")))

(defparameter XCHG-mem.reg16 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hlenl" "o16" "87" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XCHG-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "87" "/r")
:arch-flags (list "8086")))

(defparameter XCHG-mem.reg32 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hlenl" "o32" "87" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XCHG-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "87" "/r")
:arch-flags (list "386")))

(defparameter XCHG-mem.reg64 (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hlenl" "o64" "87" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XCHG-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "XCHG"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "87" "/r")
:arch-flags (list "X64")))

(defparameter XLATB-void (make-instance 'x64-asm-instruction
:name "XLATB"
:req-operands (list "void")
:code-format (list "[" "d7")
:arch-flags (list "8086")))

(defparameter XLAT-void (make-instance 'x64-asm-instruction
:name "XLAT"
:req-operands (list "void")
:code-format (list "[" "d7")
:arch-flags (list "8086")))

(defparameter XOR-mem.reg8 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "reg8")
:code-format (list "[mr:" "hle" "30" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-reg8.reg8-mr (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg8" "reg8")
:code-format (list "[mr:" "30" "/r")
:arch-flags (list "8086")))

(defparameter XOR-mem.reg16 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "reg16")
:code-format (list "[mr:" "hle" "o16" "31" "/r")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-reg16.reg16-mr (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg16" "reg16")
:code-format (list "[mr:" "o16" "31" "/r")
:arch-flags (list "8086")))

(defparameter XOR-mem.reg32 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "hle" "o32" "31" "/r")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XOR-reg32.reg32-mr (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg32" "reg32")
:code-format (list "[mr:" "o32" "31" "/r")
:arch-flags (list "386")))

(defparameter XOR-mem.reg64 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "hle" "o64" "31" "/r")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XOR-reg64.reg64-mr (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg64" "reg64")
:code-format (list "[mr:" "o64" "31" "/r")
:arch-flags (list "X64")))

(defparameter XOR-reg8.mem (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg8" "mem")
:code-format (list "[rm:" "32" "/r")
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg8.reg8-rm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg8" "reg8")
:code-format (list "[rm:" "32" "/r")
:arch-flags (list "8086")))

(defparameter XOR-reg16.mem (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "33" "/r")
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "33" "/r")
:arch-flags (list "8086")))

(defparameter XOR-reg32.mem (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "33" "/r")
:arch-flags (list "386" "SM")))

(defparameter XOR-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "33" "/r")
:arch-flags (list "386")))

(defparameter XOR-reg64.mem (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "33" "/r")
:arch-flags (list "X64" "SM")))

(defparameter XOR-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "33" "/r")
:arch-flags (list "X64")))

(defparameter XOR-rm16.imm8 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm16" "imm8")
:code-format (list "[mi:" "hle" "o16" "83" "/6" "ib,s")
:arch-flags (list "8086" "LOCK")))

(defparameter XOR-rm32.imm8 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm32" "imm8")
:code-format (list "[mi:" "hle" "o32" "83" "/6" "ib,s")
:arch-flags (list "386" "LOCK")))

(defparameter XOR-rm64.imm8 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm64" "imm8")
:code-format (list "[mi:" "hle" "o64" "83" "/6" "ib,s")
:arch-flags (list "X64" "LOCK")))

(defparameter XOR-reg_al.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_al" "imm")
:code-format (list "[-i:" "34" "ib")
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg_ax.sbyteword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_ax" "sbyteword")
:code-format (list "[mi:" "o16" "83" "/6" "ib,s")
:arch-flags (list "8086" "SM" "ND")))

(defparameter XOR-reg_ax.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_ax" "imm")
:code-format (list "[-i:" "o16" "35" "iw")
:arch-flags (list "8086" "SM")))

(defparameter XOR-reg_eax.sbytedword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_eax" "sbytedword")
:code-format (list "[mi:" "o32" "83" "/6" "ib,s")
:arch-flags (list "386" "SM" "ND")))

(defparameter XOR-reg_eax.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_eax" "imm")
:code-format (list "[-i:" "o32" "35" "id")
:arch-flags (list "386" "SM")))

(defparameter XOR-reg_rax.sbytedword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_rax" "sbytedword")
:code-format (list "[mi:" "o64" "83" "/6" "ib,s")
:arch-flags (list "X64" "SM" "ND")))

(defparameter XOR-reg_rax.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "reg_rax" "imm")
:code-format (list "[-i:" "o64" "35" "id,s")
:arch-flags (list "X64" "SM")))

(defparameter XOR-rm8.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm8" "imm")
:code-format (list "[mi:" "hle" "80" "/6" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-rm16.sbyteword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm16" "sbyteword")
:code-format (list "[mi:" "hle" "o16" "83" "/6" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter XOR-rm16.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm16" "imm")
:code-format (list "[mi:" "hle" "o16" "81" "/6" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-rm32.sbytedword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm32" "sbytedword")
:code-format (list "[mi:" "hle" "o32" "83" "/6" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter XOR-rm32.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm32" "imm")
:code-format (list "[mi:" "hle" "o32" "81" "/6" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter XOR-rm64.sbytedword (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm64" "sbytedword")
:code-format (list "[mi:" "hle" "o64" "83" "/6" "ib,s")
:arch-flags (list "X64" "SM" "LOCK" "ND")))

(defparameter XOR-rm64.imm (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "rm64" "imm")
:code-format (list "[mi:" "hle" "o64" "81" "/6" "id,s")
:arch-flags (list "X64" "SM" "LOCK")))

(defparameter XOR-mem.imm8 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "imm8")
:code-format (list "[mi:" "hle" "80" "/6" "ib")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-mem.sbyteword16 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "sbyteword16")
:code-format (list "[mi:" "hle" "o16" "83" "/6" "ib,s")
:arch-flags (list "8086" "SM" "LOCK" "ND")))

(defparameter XOR-mem.imm16 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "imm16")
:code-format (list "[mi:" "hle" "o16" "81" "/6" "iw")
:arch-flags (list "8086" "SM" "LOCK")))

(defparameter XOR-mem.sbytedword32 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "sbytedword32")
:code-format (list "[mi:" "hle" "o32" "83" "/6" "ib,s")
:arch-flags (list "386" "SM" "LOCK" "ND")))

(defparameter XOR-mem.imm32 (make-instance 'x64-asm-instruction
:name "XOR"
:req-operands (list "mem" "imm32")
:code-format (list "[mi:" "hle" "o32" "81" "/6" "id")
:arch-flags (list "386" "SM" "LOCK")))

(defparameter CMOVcc-reg16.mem (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg16" "mem")
:code-format (list "[rm:" "o16" "0f" "40+c" "/r")
:arch-flags (list "P6" "SM")))

(defparameter CMOVcc-reg16.reg16-rm (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg16" "reg16")
:code-format (list "[rm:" "o16" "0f" "40+c" "/r")
:arch-flags (list "P6")))

(defparameter CMOVcc-reg32.mem (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "o32" "0f" "40+c" "/r")
:arch-flags (list "P6" "SM")))

(defparameter CMOVcc-reg32.reg32-rm (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg32" "reg32")
:code-format (list "[rm:" "o32" "0f" "40+c" "/r")
:arch-flags (list "P6")))

(defparameter CMOVcc-reg64.mem (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "0f" "40+c" "/r")
:arch-flags (list "X64" "SM")))

(defparameter CMOVcc-reg64.reg64-rm (make-instance 'x64-asm-instruction
:name "CMOVcc"
:req-operands (list "reg64" "reg64")
:code-format (list "[rm:" "o64" "0f" "40+c" "/r")
:arch-flags (list "X64")))

(defparameter Jcc-imm-near (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm|near")
:code-format (list "[i:" "odf" "0f" "80+c" "rel")
:arch-flags (list "386" "BND")))

(defparameter Jcc-imm64-near (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm64|near")
:code-format (list "[i:" "o64nw" "0f" "80+c" "rel")
:arch-flags (list "X64" "BND")))

(defparameter Jcc-imm-short (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm|short")
:code-format (list "[i:" "70+c" "rel8")
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm")
:code-format (list "[i:" "jcc8" "70+c" "rel8")
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm")
:code-format (list "[i:" "0f" "80+c" "rel")
:arch-flags (list "386" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm")
:code-format (list "[i:" "71+c" "jlen" "e9" "rel")
:arch-flags (list "8086" "ND" "BND")))

(defparameter Jcc-imm (make-instance 'x64-asm-instruction
:name "Jcc"
:req-operands (list "imm")
:code-format (list "[i:" "70+c" "rel8")
:arch-flags (list "8086" "BND")))

(defparameter SETcc-mem (make-instance 'x64-asm-instruction
:name "SETcc"
:req-operands (list "mem")
:code-format (list "[m:" "0f" "90+c" "/0")
:arch-flags (list "386" "SB")))

(defparameter SETcc-reg8 (make-instance 'x64-asm-instruction
:name "SETcc"
:req-operands (list "reg8")
:code-format (list "[m:" "0f" "90+c" "/0")
:arch-flags (list "386")))

(defparameter ADDPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "ADDPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "58" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter ADDSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "ADDSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "58" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter ANDNPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "ANDNPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "55" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter ANDPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "ANDPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "54" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPEQPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPEQPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "00")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPEQSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPEQSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "00")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLEPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPLEPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "02")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLESS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPLESS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "02")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPLTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "01")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPLTSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPLTSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "01")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNEQPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPNEQPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "04")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNEQSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPNEQSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "04")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLEPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPNLEPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "06")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLESS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPNLESS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "06")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPNLTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "05")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPNLTSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPNLTSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "05")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPORDPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPORDPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "07")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPORDSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPORDSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "07")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPUNORDPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "CMPUNORDPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "c2" "/r" "03")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPUNORDSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "CMPUNORDSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "c2" "/r" "03")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CMPPS-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "CMPPS"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "np" "0f" "c2" "/r" "ib,u")
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPPS-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "CMPPS"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "np" "0f" "c2" "/r" "ib,u")
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPSS-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "CMPSS"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "f3" "0f" "c2" "/r" "ib,u")
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter CMPSS-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "CMPSS"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "f3" "0f" "c2" "/r" "ib,u")
:arch-flags (list "KATMAI" "SSE" "SB" "AR2")))

(defparameter COMISS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "COMISS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "np" "0f" "2f" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter CVTPI2PS-xmmreg.mmxrm64 (make-instance 'x64-asm-instruction
:name "CVTPI2PS"
:req-operands (list "xmmreg" "mmxrm64")
:code-format (list "[rm:" "np" "0f" "2a" "/r")
:arch-flags (list "KATMAI" "SSE" "MMX")))

(defparameter CVTPS2PI-mmxreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "CVTPS2PI"
:req-operands (list "mmxreg" "xmmrm64")
:code-format (list "[rm:" "np" "0f" "2d" "/r")
:arch-flags (list "KATMAI" "SSE" "MMX")))

(defparameter CVTSI2SS-xmmreg.mem (make-instance 'x64-asm-instruction
:name "CVTSI2SS"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "f3" "0f" "2a" "/r")
:arch-flags (list "KATMAI" "SSE" "SD" "AR1" "ND")))

(defparameter CVTSI2SS-xmmreg.rm32 (make-instance 'x64-asm-instruction
:name "CVTSI2SS"
:req-operands (list "xmmreg" "rm32")
:code-format (list "[rm:" "f3" "0f" "2a" "/r")
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSI2SS-xmmreg.rm64 (make-instance 'x64-asm-instruction
:name "CVTSI2SS"
:req-operands (list "xmmreg" "rm64")
:code-format (list "[rm:" "o64" "f3" "0f" "2a" "/r")
:arch-flags (list "X64" "SSE" "SQ" "AR1")))

(defparameter CVTSS2SI-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "CVTSS2SI"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "f3" "0f" "2d" "/r")
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg32.mem (make-instance 'x64-asm-instruction
:name "CVTSS2SI"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "f3" "0f" "2d" "/r")
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "CVTSS2SI"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "o64" "f3" "0f" "2d" "/r")
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter CVTSS2SI-reg64.mem (make-instance 'x64-asm-instruction
:name "CVTSS2SI"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "f3" "0f" "2d" "/r")
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter CVTTPS2PI-mmxreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTPS2PI"
:req-operands (list "mmxreg" "xmmrm")
:code-format (list "[rm:" "np" "0f" "2c" "/r")
:arch-flags (list "KATMAI" "SSE" "MMX" "SQ")))

(defparameter CVTTSS2SI-reg32.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTSS2SI"
:req-operands (list "reg32" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "2c" "/r")
:arch-flags (list "KATMAI" "SSE" "SD" "AR1")))

(defparameter CVTTSS2SI-reg64.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTSS2SI"
:req-operands (list "reg64" "xmmrm")
:code-format (list "[rm:" "o64" "f3" "0f" "2c" "/r")
:arch-flags (list "X64" "SSE" "SD" "AR1")))

(defparameter DIVPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "DIVPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "5e" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter DIVSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "DIVSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "5e" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter LDMXCSR-mem32 (make-instance 'x64-asm-instruction
:name "LDMXCSR"
:req-operands (list "mem32")
:code-format (list "[m:" "np" "0f" "ae" "/2")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MAXPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "MAXPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "5f" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MAXSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "MAXSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "5f" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MINPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "MINPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "5d" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MINSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "MINSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "5d" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVAPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "MOVAPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "28" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVAPS-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "MOVAPS"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "np" "0f" "29" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHPS-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "MOVHPS"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "np" "0f" "16" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVHPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "np" "0f" "17" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLHPS-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVLHPS"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "np" "0f" "16" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLPS-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "MOVLPS"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "np" "0f" "12" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVLPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVLPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "np" "0f" "13" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVHLPS-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVHLPS"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "np" "0f" "12" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVMSKPS-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "MOVMSKPS"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "np" "0f" "50" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVMSKPS-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVMSKPS"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "np" "o64" "0f" "50" "/r")
:arch-flags (list "X64" "SSE")))

(defparameter MOVNTPS-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "MOVNTPS"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:" "np" "0f" "2b" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "MOVSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "10" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-mem32.xmmreg (make-instance 'x64-asm-instruction
:name "MOVSS"
:req-operands (list "mem32" "xmmreg")
:code-format (list "[mr:" "f3" "0f" "11" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVSS-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVSS"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "f3" "0f" "10" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVUPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "MOVUPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "10" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MOVUPS-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "MOVUPS"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "np" "0f" "11" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MULPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "MULPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "59" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter MULSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "MULSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "59" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter ORPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "ORPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "56" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter RCPPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "RCPPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "53" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter RCPSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "RCPSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "53" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter RSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "RSQRTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "52" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter RSQRTSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "RSQRTSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "52" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter SHUFPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "SHUFPS"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "np" "0f" "c6" "/r" "ib,u")
:arch-flags (list "KATMAI" "SSE")))

(defparameter SQRTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SQRTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "51" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter SQRTSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "SQRTSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "51" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter STMXCSR-mem32 (make-instance 'x64-asm-instruction
:name "STMXCSR"
:req-operands (list "mem32")
:code-format (list "[m:" "np" "0f" "ae" "/3")
:arch-flags (list "KATMAI" "SSE")))

(defparameter SUBPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SUBPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "5c" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter SUBSS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "SUBSS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "f3" "0f" "5c" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter UCOMISS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "UCOMISS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "np" "0f" "2e" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter UNPCKHPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "UNPCKHPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "15" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter UNPCKLPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "UNPCKLPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "14" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter XORPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "XORPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "np" "0f" "57" "/r")
:arch-flags (list "KATMAI" "SSE")))

(defparameter FXRSTOR-mem (make-instance 'x64-asm-instruction
:name "FXRSTOR"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/1")
:arch-flags (list "P6" "SSE" "FPU")))

(defparameter FXRSTOR64-mem (make-instance 'x64-asm-instruction
:name "FXRSTOR64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "ae" "/1")
:arch-flags (list "X64" "SSE" "FPU")))

(defparameter FXSAVE-mem (make-instance 'x64-asm-instruction
:name "FXSAVE"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/0")
:arch-flags (list "P6" "SSE" "FPU")))

(defparameter FXSAVE64-mem (make-instance 'x64-asm-instruction
:name "FXSAVE64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "ae" "/0")
:arch-flags (list "X64" "SSE" "FPU")))

(defparameter XGETBV-void (make-instance 'x64-asm-instruction
:name "XGETBV"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d0")
:arch-flags (list "NEHALEM")))

(defparameter XSETBV-void (make-instance 'x64-asm-instruction
:name "XSETBV"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d1")
:arch-flags (list "NEHALEM" "PRIV")))

(defparameter XSAVE-mem (make-instance 'x64-asm-instruction
:name "XSAVE"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/4")
:arch-flags (list "NEHALEM")))

(defparameter XSAVE64-mem (make-instance 'x64-asm-instruction
:name "XSAVE64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "ae" "/4")
:arch-flags (list "LONG" "NEHALEM")))

(defparameter XSAVEC-mem (make-instance 'x64-asm-instruction
:name "XSAVEC"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "c7" "/4")
:arch-flags (list "FUTURE")))

(defparameter XSAVEC64-mem (make-instance 'x64-asm-instruction
:name "XSAVEC64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "c7" "/4")
:arch-flags (list "LONG" "FUTURE")))

(defparameter XSAVEOPT-mem (make-instance 'x64-asm-instruction
:name "XSAVEOPT"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/6")
:arch-flags (list "FUTURE")))

(defparameter XSAVEOPT64-mem (make-instance 'x64-asm-instruction
:name "XSAVEOPT64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "ae" "/6")
:arch-flags (list "LONG" "FUTURE")))

(defparameter XSAVES-mem (make-instance 'x64-asm-instruction
:name "XSAVES"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "c7" "/5")
:arch-flags (list "FUTURE")))

(defparameter XSAVES64-mem (make-instance 'x64-asm-instruction
:name "XSAVES64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "c7" "/5")
:arch-flags (list "LONG" "FUTURE")))

(defparameter XRSTOR-mem (make-instance 'x64-asm-instruction
:name "XRSTOR"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/5")
:arch-flags (list "NEHALEM")))

(defparameter XRSTOR64-mem (make-instance 'x64-asm-instruction
:name "XRSTOR64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "ae" "/5")
:arch-flags (list "LONG" "NEHALEM")))

(defparameter XRSTORS-mem (make-instance 'x64-asm-instruction
:name "XRSTORS"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "c7" "/3")
:arch-flags (list "FUTURE")))

(defparameter XRSTORS64-mem (make-instance 'x64-asm-instruction
:name "XRSTORS64"
:req-operands (list "mem")
:code-format (list "[m:" "o64" "np" "0f" "c7" "/3")
:arch-flags (list "LONG" "FUTURE")))

(defparameter PREFETCHNTA-mem8 (make-instance 'x64-asm-instruction
:name "PREFETCHNTA"
:req-operands (list "mem8")
:code-format (list "[m:" "0f" "18" "/0")
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT0-mem8 (make-instance 'x64-asm-instruction
:name "PREFETCHT0"
:req-operands (list "mem8")
:code-format (list "[m:" "0f" "18" "/1")
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT1-mem8 (make-instance 'x64-asm-instruction
:name "PREFETCHT1"
:req-operands (list "mem8")
:code-format (list "[m:" "0f" "18" "/2")
:arch-flags (list "KATMAI")))

(defparameter PREFETCHT2-mem8 (make-instance 'x64-asm-instruction
:name "PREFETCHT2"
:req-operands (list "mem8")
:code-format (list "[m:" "0f" "18" "/3")
:arch-flags (list "KATMAI")))

(defparameter SFENCE-void (make-instance 'x64-asm-instruction
:name "SFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "f8")
:arch-flags (list "KATMAI")))

(defparameter MASKMOVQ-mmxreg.mmxreg (make-instance 'x64-asm-instruction
:name "MASKMOVQ"
:req-operands (list "mmxreg" "mmxreg")
:code-format (list "[rm:" "np" "0f" "f7" "/r")
:arch-flags (list "KATMAI" "MMX")))

(defparameter MOVNTQ-mem.mmxreg (make-instance 'x64-asm-instruction
:name "MOVNTQ"
:req-operands (list "mem" "mmxreg")
:code-format (list "[mr:" "np" "0f" "e7" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PAVGB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PAVGB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e0" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PAVGW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PAVGW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e3" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PEXTRW-reg32.mmxreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRW"
:req-operands (list "reg32" "mmxreg" "imm")
:code-format (list "[rmi:" "np" "0f" "c5" "/r" "ib,u")
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.mem.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "mmxreg" "mem" "imm")
:code-format (list "[rmi:" "np" "0f" "c4" "/r" "ib,u")
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.rm16.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "mmxreg" "rm16" "imm")
:code-format (list "[rmi:" "np" "0f" "c4" "/r" "ib,u")
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PINSRW-mmxreg.reg32.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "mmxreg" "reg32" "imm")
:code-format (list "[rmi:" "np" "0f" "c4" "/r" "ib,u")
:arch-flags (list "KATMAI" "MMX" "SB" "AR2")))

(defparameter PMAXSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMAXSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "ee" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMAXUB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMAXUB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "de" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMINSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMINSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "ea" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMINUB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMINUB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "da" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PMOVMSKB-reg32.mmxreg (make-instance 'x64-asm-instruction
:name "PMOVMSKB"
:req-operands (list "reg32" "mmxreg")
:code-format (list "[rm:" "np" "0f" "d7" "/r")
:arch-flags (list "KATMAI" "MMX")))

(defparameter PMULHUW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHUW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "e4" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PSADBW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSADBW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f6" "/r")
:arch-flags (list "KATMAI" "MMX" "SQ")))

(defparameter PSHUFW-mmxreg.mmxrm.imm (make-instance 'x64-asm-instruction
:name "PSHUFW"
:req-operands (list "mmxreg" "mmxrm" "imm")
:code-format (list "[rmi:" "np" "o64nw" "0f" "70" "/r" "ib")
:arch-flags (list "KATMAI" "MMX" "SM2" "SB" "AR2")))

(defparameter PF2IW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PF2IW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "1c")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFNACC-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFNACC"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "8a")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PFPNACC-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFPNACC"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "8e")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PI2FW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PI2FW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "0c")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter PSWAPD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSWAPD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "bb")
:arch-flags (list "PENT" "3DNOW" "SQ")))

(defparameter MASKMOVDQU-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MASKMOVDQU"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "66" "0f" "f7" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CLFLUSH-mem (make-instance 'x64-asm-instruction
:name "CLFLUSH"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "ae" "/7")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVNTDQ-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVNTDQ"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "e7" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVNTI-mem.reg32 (make-instance 'x64-asm-instruction
:name "MOVNTI"
:req-operands (list "mem" "reg32")
:code-format (list "[mr:" "np" "0f" "c3" "/r")
:arch-flags (list "WILLAMETTE" "SD")))

(defparameter MOVNTI-mem.reg64 (make-instance 'x64-asm-instruction
:name "MOVNTI"
:req-operands (list "mem" "reg64")
:code-format (list "[mr:" "o64" "np" "0f" "c3" "/r")
:arch-flags (list "X64" "SQ")))

(defparameter MOVNTPD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVNTPD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "2b" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter LFENCE-void (make-instance 'x64-asm-instruction
:name "LFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "e8")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MFENCE-void (make-instance 'x64-asm-instruction
:name "MFENCE"
:req-operands (list "void")
:code-format (list "[" "np" "0f" "ae" "f0")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "norexw" "0f" "7e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter MOVD-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "66" "norexw" "0f" "6e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter MOVD-xmmreg.rm32 (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "xmmreg" "rm32")
:code-format (list "[rm:" "66" "norexw" "0f" "6e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVD-rm32.xmmreg (make-instance 'x64-asm-instruction
:name "MOVD"
:req-operands (list "rm32" "xmmreg")
:code-format (list "[mr:" "66" "norexw" "0f" "7e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQA-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQA"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "66" "0f" "6f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQA-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQA"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "7f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQA-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVDQA"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "66" "0f" "6f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQA-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQA"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "66" "0f" "7f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQU-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQU"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "f3" "0f" "6f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQU-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQU"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "f3" "0f" "7f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQU-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVDQU"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "f3" "0f" "6f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVDQU-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQU"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "f3" "0f" "7f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVDQ2Q-mmxreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVDQ2Q"
:req-operands (list "mmxreg" "xmmreg")
:code-format (list "[rm:" "f2" "0f" "d6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "f3" "0f" "7e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "66" "0f" "d6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVQ-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "d6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter MOVQ-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "f3" "0f" "7e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter MOVQ-xmmreg.rm64 (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "xmmreg" "rm64")
:code-format (list "[rm:" "66" "o64" "0f" "6e" "/r")
:arch-flags (list "X64" "SSE2")))

(defparameter MOVQ-rm64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVQ"
:req-operands (list "rm64" "xmmreg")
:code-format (list "[mr:" "66" "o64" "0f" "7e" "/r")
:arch-flags (list "X64" "SSE2")))

(defparameter MOVQ2DQ-xmmreg.mmxreg (make-instance 'x64-asm-instruction
:name "MOVQ2DQ"
:req-operands (list "xmmreg" "mmxreg")
:code-format (list "[rm:" "f3" "0f" "d6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter PACKSSWB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PACKSSWB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "63" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PACKSSDW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PACKSSDW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "6b" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PACKUSWB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PACKUSWB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "67" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "fc" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "fd" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "fe" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PADDQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "d4" "/r")
:arch-flags (list "WILLAMETTE" "MMX" "SQ")))

(defparameter PADDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d4" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "ec" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "ed" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDUSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDUSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "dc" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PADDUSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PADDUSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "dd" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAND-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PAND"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "db" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PANDN-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PANDN"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "df" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAVGB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PAVGB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e0" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PAVGW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PAVGW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e3" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPEQB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "74" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPEQW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "75" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPEQD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPEQD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "76" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPGTB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "64" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPGTW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "65" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PCMPGTD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPGTD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "66" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PEXTRW-reg32.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRW"
:req-operands (list "reg32" "xmmreg" "imm")
:code-format (list "[rmi:" "66" "0f" "c5" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.reg16.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "xmmreg" "reg16" "imm")
:code-format (list "[rmi:" "66" "0f" "c4" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.reg32.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "xmmreg" "reg32" "imm")
:code-format (list "[rmi:" "66" "0f" "c4" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2" "ND")))

(defparameter PINSRW-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "66" "0f" "c4" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PINSRW-xmmreg.mem16.imm (make-instance 'x64-asm-instruction
:name "PINSRW"
:req-operands (list "xmmreg" "mem16" "imm")
:code-format (list "[rmi:" "66" "0f" "c4" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PMADDWD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMADDWD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f5" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMAXSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "ee" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMAXUB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXUB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "de" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMINSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "ea" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMINUB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINUB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "da" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMOVMSKB-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "PMOVMSKB"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "66" "0f" "d7" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter PMULHUW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULHUW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e4" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULHW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULHW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e5" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULLW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULLW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d5" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULUDQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULUDQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "f4" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PMULUDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULUDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f4" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter POR-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "POR"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "eb" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSADBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSADBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSHUFD-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSHUFD"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "66" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFD-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PSHUFD"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "66" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSHUFHW-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSHUFHW"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "f3" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFHW-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PSHUFHW"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "f3" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSHUFLW-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSHUFLW"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "f2" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter PSHUFLW-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PSHUFLW"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "f2" "0f" "70" "/r" "ib")
:arch-flags (list "WILLAMETTE" "SSE2" "SM2" "SB" "AR2")))

(defparameter PSLLDQ-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSLLDQ"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "73" "/7" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSLLW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f1" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLW-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSLLW"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "71" "/6" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSLLD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f2" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLD-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSLLD"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "72" "/6" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSLLQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSLLQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f3" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSLLQ-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSLLQ"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "73" "/6" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRAW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSRAW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e1" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRAW-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRAW"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "71" "/4" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRAD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSRAD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e2" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRAD-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRAD"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "72" "/4" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLDQ-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRLDQ"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "73" "/3" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSRLW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d1" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLW-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRLW"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "71" "/2" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSRLD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d2" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLD-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRLD"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "72" "/2" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSRLQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSRLQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d3" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSRLQ-xmmreg.imm (make-instance 'x64-asm-instruction
:name "PSRLQ"
:req-operands (list "xmmreg" "imm")
:code-format (list "[mi:" "66" "0f" "73" "/2" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR1")))

(defparameter PSUBB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f8" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "f9" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "fa" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBQ-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSUBQ"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "o64nw" "0f" "fb" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "fb" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e8" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e9" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBUSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBUSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d8" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PSUBUSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSUBUSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d9" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKHBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "68" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHWD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKHWD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "69" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKHDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "6a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKHQDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKHQDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "6d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKLBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "60" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLWD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKLWD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "61" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKLDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "62" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PUNPCKLQDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PUNPCKLQDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "6c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter PXOR-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PXOR"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "ef" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ADDPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ADDPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "58" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ADDSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ADDSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "58" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter ANDNPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ANDNPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "55" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter ANDPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ANDPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "54" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPEQPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPEQPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "00")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPEQSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPEQSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "00")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPLEPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPLEPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "02")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPLESD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPLESD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "02")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPLTPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPLTPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "01")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPLTSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPLTSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "01")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNEQPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNEQPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "04")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNEQSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNEQSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "04")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNLEPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNLEPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "06")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNLESD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNLESD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "06")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPNLTPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNLTPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "05")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPNLTSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPNLTSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "05")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPORDPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPORDPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "07")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPORDSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPORDSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "07")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPUNORDPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPUNORDPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "c2" "/r" "03")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CMPUNORDSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CMPUNORDSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "c2" "/r" "03")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "CMPPD"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "66" "0f" "c2" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CMPSD-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "CMPSD"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "f2" "0f" "c2" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter COMISD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "COMISD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "2f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter CVTDQ2PD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTDQ2PD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "e6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTDQ2PS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTDQ2PS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "np" "0f" "5b" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2DQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTPD2DQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "e6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2PI-mmxreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTPD2PI"
:req-operands (list "mmxreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "2d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPD2PS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTPD2PS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPI2PD-xmmreg.mmxrm (make-instance 'x64-asm-instruction
:name "CVTPI2PD"
:req-operands (list "xmmreg" "mmxrm")
:code-format (list "[rm:" "66" "0f" "2a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTPS2DQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTPS2DQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5b" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTPS2PD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTPS2PD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "np" "0f" "5a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTSD2SI-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "CVTSD2SI"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "norexw" "f2" "0f" "2d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg32.mem (make-instance 'x64-asm-instruction
:name "CVTSD2SI"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "norexw" "f2" "0f" "2d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "CVTSD2SI"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "o64" "f2" "0f" "2d" "/r")
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SI-reg64.mem (make-instance 'x64-asm-instruction
:name "CVTSD2SI"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "f2" "0f" "2d" "/r")
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSD2SS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTSD2SS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "5a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ")))

(defparameter CVTSI2SD-xmmreg.mem (make-instance 'x64-asm-instruction
:name "CVTSI2SD"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "f2" "0f" "2a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1" "ND")))

(defparameter CVTSI2SD-xmmreg.rm32 (make-instance 'x64-asm-instruction
:name "CVTSI2SD"
:req-operands (list "xmmreg" "rm32")
:code-format (list "[rm:" "norexw" "f2" "0f" "2a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SD" "AR1")))

(defparameter CVTSI2SD-xmmreg.rm64 (make-instance 'x64-asm-instruction
:name "CVTSI2SD"
:req-operands (list "xmmreg" "rm64")
:code-format (list "[rm:" "o64" "f2" "0f" "2a" "/r")
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTSS2SD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTSS2SD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "5a" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SD")))

(defparameter CVTTPD2PI-mmxreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTPD2PI"
:req-operands (list "mmxreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "2c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTPD2DQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTPD2DQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "e6" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTPS2DQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "CVTTPS2DQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "5b" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter CVTTSD2SI-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "CVTTSD2SI"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "norexw" "f2" "0f" "2c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg32.mem (make-instance 'x64-asm-instruction
:name "CVTTSD2SI"
:req-operands (list "reg32" "mem")
:code-format (list "[rm:" "norexw" "f2" "0f" "2c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "CVTTSD2SI"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "o64" "f2" "0f" "2c" "/r")
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter CVTTSD2SI-reg64.mem (make-instance 'x64-asm-instruction
:name "CVTTSD2SI"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64" "f2" "0f" "2c" "/r")
:arch-flags (list "X64" "SSE2" "SQ" "AR1")))

(defparameter DIVPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "DIVPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter DIVSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "DIVSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "5e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MAXPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MAXPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MAXSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MAXSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "5f" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MINPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MINPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MINSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MINSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "5d" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVAPD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "66" "0f" "28" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVAPD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "66" "0f" "29" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVAPD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVAPD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "29" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVAPD-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVAPD"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "66" "0f" "28" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVHPD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVHPD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "17" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVHPD-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVHPD"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "66" "0f" "16" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVLPD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVLPD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "66" "0f" "13" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVLPD-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "MOVLPD"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "66" "0f" "12" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVMSKPD-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "MOVMSKPD"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "66" "0f" "50" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVMSKPD-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVMSKPD"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "66" "o64" "0f" "50" "/r")
:arch-flags (list "X64" "SSE2")))

(defparameter MOVSD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVSD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "f2" "0f" "10" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVSD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "f2" "0f" "11" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "MOVSD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "f2" "0f" "11" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVSD-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "MOVSD"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "f2" "0f" "10" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVUPD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "66" "0f" "10" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "MOVUPD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[mr:" "66" "0f" "11" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter MOVUPD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVUPD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "66" "0f" "11" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MOVUPD-xmmreg.mem (make-instance 'x64-asm-instruction
:name "MOVUPD"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "66" "0f" "10" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MULPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MULPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "59" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter MULSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MULSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "59" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter ORPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ORPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "56" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SHUFPD-xmmreg.xmmreg.imm (make-instance 'x64-asm-instruction
:name "SHUFPD"
:req-operands (list "xmmreg" "xmmreg" "imm")
:code-format (list "[rmi:" "66" "0f" "c6" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SB" "AR2")))

(defparameter SHUFPD-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "SHUFPD"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "66" "0f" "c6" "/r" "ib,u")
:arch-flags (list "WILLAMETTE" "SSE2" "SM" "SB" "AR2")))

(defparameter SQRTPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "SQRTPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "51" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SQRTSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "SQRTSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "51" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter SUBPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "SUBPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "5c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2" "SO")))

(defparameter SUBSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "SUBSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "5c" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UCOMISD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "UCOMISD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "2e" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UNPCKHPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "UNPCKHPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "15" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter UNPCKLPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "UNPCKLPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "14" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter XORPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "XORPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "57" "/r")
:arch-flags (list "WILLAMETTE" "SSE2")))

(defparameter ADDSUBPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ADDSUBPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "d0" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter ADDSUBPS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "ADDSUBPS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "d0" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HADDPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "HADDPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "7c" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HADDPS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "HADDPS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "7c" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HSUBPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "HSUBPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "7d" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter HSUBPS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "HSUBPS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "7d" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter LDDQU-xmmreg.mem (make-instance 'x64-asm-instruction
:name "LDDQU"
:req-operands (list "xmmreg" "mem")
:code-format (list "[rm:" "f2" "0f" "f0" "/r")
:arch-flags (list "PRESCOTT" "SSE3" "SO")))

(defparameter MOVDDUP-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MOVDDUP"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f2" "0f" "12" "/r")
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter MOVSHDUP-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MOVSHDUP"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "16" "/r")
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter MOVSLDUP-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "MOVSLDUP"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "f3" "0f" "12" "/r")
:arch-flags (list "PRESCOTT" "SSE3")))

(defparameter CLGI-void (make-instance 'x64-asm-instruction
:name "CLGI"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "dd")
:arch-flags (list "VMX" "AMD")))

(defparameter STGI-void (make-instance 'x64-asm-instruction
:name "STGI"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "dc")
:arch-flags (list "VMX" "AMD")))

(defparameter VMCALL-void (make-instance 'x64-asm-instruction
:name "VMCALL"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c1")
:arch-flags (list "VMX")))

(defparameter VMCLEAR-mem (make-instance 'x64-asm-instruction
:name "VMCLEAR"
:req-operands (list "mem")
:code-format (list "[m:" "66" "0f" "c7" "/6")
:arch-flags (list "VMX")))

(defparameter VMFUNC-void (make-instance 'x64-asm-instruction
:name "VMFUNC"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d4")
:arch-flags (list "VMX")))

(defparameter VMLAUNCH-void (make-instance 'x64-asm-instruction
:name "VMLAUNCH"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c2")
:arch-flags (list "VMX")))

(defparameter VMLOAD-void (make-instance 'x64-asm-instruction
:name "VMLOAD"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "da")
:arch-flags (list "VMX" "AMD")))

(defparameter VMMCALL-void (make-instance 'x64-asm-instruction
:name "VMMCALL"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d9")
:arch-flags (list "VMX" "AMD")))

(defparameter VMPTRLD-mem (make-instance 'x64-asm-instruction
:name "VMPTRLD"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "c7" "/6")
:arch-flags (list "VMX")))

(defparameter VMPTRST-mem (make-instance 'x64-asm-instruction
:name "VMPTRST"
:req-operands (list "mem")
:code-format (list "[m:" "np" "0f" "c7" "/7")
:arch-flags (list "VMX")))

(defparameter VMREAD-rm64.reg64 (make-instance 'x64-asm-instruction
:name "VMREAD"
:req-operands (list "rm64" "reg64")
:code-format (list "[mr:" "o64nw" "np" "0f" "78" "/r")
:arch-flags (list "X64" "VMX" "SQ")))

(defparameter VMRESUME-void (make-instance 'x64-asm-instruction
:name "VMRESUME"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c3")
:arch-flags (list "VMX")))

(defparameter VMRUN-void (make-instance 'x64-asm-instruction
:name "VMRUN"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d8")
:arch-flags (list "VMX" "AMD")))

(defparameter VMSAVE-void (make-instance 'x64-asm-instruction
:name "VMSAVE"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "db")
:arch-flags (list "VMX" "AMD")))

(defparameter VMWRITE-reg64.rm64 (make-instance 'x64-asm-instruction
:name "VMWRITE"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64nw" "np" "0f" "79" "/r")
:arch-flags (list "X64" "VMX" "SQ")))

(defparameter VMXOFF-void (make-instance 'x64-asm-instruction
:name "VMXOFF"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "c4")
:arch-flags (list "VMX")))

(defparameter VMXON-mem (make-instance 'x64-asm-instruction
:name "VMXON"
:req-operands (list "mem")
:code-format (list "[m:" "f3" "0f" "c7" "/6")
:arch-flags (list "VMX")))

(defparameter INVEPT-reg64.mem (make-instance 'x64-asm-instruction
:name "INVEPT"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64nw" "66" "0f" "38" "80" "/r")
:arch-flags (list "VMX" "SO" "LONG")))

(defparameter INVVPID-reg64.mem (make-instance 'x64-asm-instruction
:name "INVVPID"
:req-operands (list "reg64" "mem")
:code-format (list "[rm:" "o64nw" "66" "0f" "38" "81" "/r")
:arch-flags (list "VMX" "SO" "LONG")))

(defparameter PABSB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PABSB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "1c" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PABSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "1c" "/r")
:arch-flags (list "SSSE3")))

(defparameter PABSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PABSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "1d" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PABSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "1d" "/r")
:arch-flags (list "SSSE3")))

(defparameter PABSD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PABSD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "1e" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PABSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PABSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "1e" "/r")
:arch-flags (list "SSSE3")))

(defparameter PALIGNR-mmxreg.mmxrm.imm (make-instance 'x64-asm-instruction
:name "PALIGNR"
:req-operands (list "mmxreg" "mmxrm" "imm")
:code-format (list "[rmi:" "np" "0f" "3a" "0f" "/r" "ib,u")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PALIGNR-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PALIGNR"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0f" "/r" "ib,u")
:arch-flags (list "SSSE3")))

(defparameter PHADDW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHADDW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "01" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHADDW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "01" "/r")
:arch-flags (list "SSSE3")))

(defparameter PHADDD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHADDD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "02" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHADDD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "02" "/r")
:arch-flags (list "SSSE3")))

(defparameter PHADDSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHADDSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "03" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHADDSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHADDSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "03" "/r")
:arch-flags (list "SSSE3")))

(defparameter PHSUBW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHSUBW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "05" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHSUBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "05" "/r")
:arch-flags (list "SSSE3")))

(defparameter PHSUBD-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHSUBD"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "06" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHSUBD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "06" "/r")
:arch-flags (list "SSSE3")))

(defparameter PHSUBSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PHSUBSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "07" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PHSUBSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHSUBSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "07" "/r")
:arch-flags (list "SSSE3")))

(defparameter PMADDUBSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMADDUBSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "04" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PMADDUBSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMADDUBSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "04" "/r")
:arch-flags (list "SSSE3")))

(defparameter PMULHRSW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PMULHRSW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "0b" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PMULHRSW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULHRSW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "0b" "/r")
:arch-flags (list "SSSE3")))

(defparameter PSHUFB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSHUFB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "00" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSHUFB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSHUFB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "00" "/r")
:arch-flags (list "SSSE3")))

(defparameter PSIGNB-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSIGNB"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "08" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGNB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSIGNB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "08" "/r")
:arch-flags (list "SSSE3")))

(defparameter PSIGNW-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSIGNW"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "09" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGNW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSIGNW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "09" "/r")
:arch-flags (list "SSSE3")))

(defparameter PSIGND-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PSIGND"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "np" "0f" "38" "0a" "/r")
:arch-flags (list "SSSE3" "MMX" "SQ")))

(defparameter PSIGND-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PSIGND"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "0a" "/r")
:arch-flags (list "SSSE3")))

(defparameter EXTRQ-xmmreg.imm.imm (make-instance 'x64-asm-instruction
:name "EXTRQ"
:req-operands (list "xmmreg" "imm" "imm")
:code-format (list "[mij:" "66" "0f" "78" "/0" "ib,u" "ib,u")
:arch-flags (list "SSE4A" "AMD")))

(defparameter EXTRQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "EXTRQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "66" "0f" "79" "/r")
:arch-flags (list "SSE4A" "AMD")))

(defparameter INSERTQ-xmmreg.xmmreg.imm.imm (make-instance 'x64-asm-instruction
:name "INSERTQ"
:req-operands (list "xmmreg" "xmmreg" "imm" "imm")
:code-format (list "[rmij:" "f2" "0f" "78" "/r" "ib,u" "ib,u")
:arch-flags (list "SSE4A" "AMD")))

(defparameter INSERTQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "INSERTQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "f2" "0f" "79" "/r")
:arch-flags (list "SSE4A" "AMD")))

(defparameter MOVNTSD-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVNTSD"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "f2" "0f" "2b" "/r")
:arch-flags (list "SSE4A" "AMD" "SQ")))

(defparameter MOVNTSS-mem.xmmreg (make-instance 'x64-asm-instruction
:name "MOVNTSS"
:req-operands (list "mem" "xmmreg")
:code-format (list "[mr:" "f3" "0f" "2b" "/r")
:arch-flags (list "SSE4A" "AMD" "SD")))

(defparameter LZCNT-reg16.rm16 (make-instance 'x64-asm-instruction
:name "LZCNT"
:req-operands (list "reg16" "rm16")
:code-format (list "[rm:" "o16" "f3i" "0f" "bd" "/r")
:arch-flags (list "P6" "AMD")))

(defparameter LZCNT-reg32.rm32 (make-instance 'x64-asm-instruction
:name "LZCNT"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "o32" "f3i" "0f" "bd" "/r")
:arch-flags (list "P6" "AMD")))

(defparameter LZCNT-reg64.rm64 (make-instance 'x64-asm-instruction
:name "LZCNT"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "f3i" "0f" "bd" "/r")
:arch-flags (list "X64" "AMD")))

(defparameter BLENDPD-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "BLENDPD"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0d" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter BLENDPS-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "BLENDPS"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0c" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter BLENDVPD-xmmreg.xmmrm.xmm0 (make-instance 'x64-asm-instruction
:name "BLENDVPD"
:req-operands (list "xmmreg" "xmmrm" "xmm0")
:code-format (list "[rm-:" "66" "0f" "38" "15" "/r")
:arch-flags (list "SSE41")))

(defparameter BLENDVPD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "BLENDVPD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "15" "/r")
:arch-flags (list "SSE41")))

(defparameter BLENDVPS-xmmreg.xmmrm.xmm0 (make-instance 'x64-asm-instruction
:name "BLENDVPS"
:req-operands (list "xmmreg" "xmmrm" "xmm0")
:code-format (list "[rm-:" "66" "0f" "38" "14" "/r")
:arch-flags (list "SSE41")))

(defparameter BLENDVPS-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "BLENDVPS"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "14" "/r")
:arch-flags (list "SSE41")))

(defparameter DPPD-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "DPPD"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "41" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter DPPS-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "DPPS"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "40" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter EXTRACTPS-rm32.xmmreg.imm (make-instance 'x64-asm-instruction
:name "EXTRACTPS"
:req-operands (list "rm32" "xmmreg" "imm")
:code-format (list "[mri:" "66" "0f" "3a" "17" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter EXTRACTPS-reg64.xmmreg.imm (make-instance 'x64-asm-instruction
:name "EXTRACTPS"
:req-operands (list "reg64" "xmmreg" "imm")
:code-format (list "[mri:" "o64" "66" "0f" "3a" "17" "/r" "ib,u")
:arch-flags (list "SSE41" "X64")))

(defparameter INSERTPS-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "INSERTPS"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "21" "/r" "ib,u")
:arch-flags (list "SSE41" "SD")))

(defparameter MOVNTDQA-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "MOVNTDQA"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "66" "0f" "38" "2a" "/r")
:arch-flags (list "SSE41")))

(defparameter MPSADBW-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "MPSADBW"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "42" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PACKUSDW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PACKUSDW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "2b" "/r")
:arch-flags (list "SSE41")))

(defparameter PBLENDVB-xmmreg.xmmrm.xmm0 (make-instance 'x64-asm-instruction
:name "PBLENDVB"
:req-operands (list "xmmreg" "xmmrm" "xmm0")
:code-format (list "[rm-:" "66" "0f" "38" "10" "/r")
:arch-flags (list "SSE41")))

(defparameter PBLENDVB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PBLENDVB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "10" "/r")
:arch-flags (list "SSE41")))

(defparameter PBLENDW-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PBLENDW"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0e" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PCMPEQQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPEQQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "29" "/r")
:arch-flags (list "SSE41")))

(defparameter PEXTRB-reg32.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRB"
:req-operands (list "reg32" "xmmreg" "imm")
:code-format (list "[mri:" "66" "0f" "3a" "14" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PEXTRB-mem8.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRB"
:req-operands (list "mem8" "xmmreg" "imm")
:code-format (list "[mri:" "66" "0f" "3a" "14" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PEXTRB-reg64.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRB"
:req-operands (list "reg64" "xmmreg" "imm")
:code-format (list "[mri:" "o64" "66" "0f" "3a" "14" "/r" "ib,u")
:arch-flags (list "SSE41" "X64")))

(defparameter PEXTRD-rm32.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRD"
:req-operands (list "rm32" "xmmreg" "imm")
:code-format (list "[mri:" "norexw" "66" "0f" "3a" "16" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PEXTRQ-rm64.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRQ"
:req-operands (list "rm64" "xmmreg" "imm")
:code-format (list "[mri:" "o64" "66" "0f" "3a" "16" "/r" "ib,u")
:arch-flags (list "SSE41" "X64")))

(defparameter PEXTRW-reg32.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRW"
:req-operands (list "reg32" "xmmreg" "imm")
:code-format (list "[mri:" "66" "0f" "3a" "15" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PEXTRW-mem16.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRW"
:req-operands (list "mem16" "xmmreg" "imm")
:code-format (list "[mri:" "66" "0f" "3a" "15" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter PEXTRW-reg64.xmmreg.imm (make-instance 'x64-asm-instruction
:name "PEXTRW"
:req-operands (list "reg64" "xmmreg" "imm")
:code-format (list "[mri:" "o64" "66" "0f" "3a" "15" "/r" "ib,u")
:arch-flags (list "SSE41" "X64")))

(defparameter PHMINPOSUW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PHMINPOSUW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "41" "/r")
:arch-flags (list "SSE41")))

(defparameter PINSRB-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PINSRB"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "20" "/r" "ib,u")
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRB-xmmreg.rm8.imm (make-instance 'x64-asm-instruction
:name "PINSRB"
:req-operands (list "xmmreg" "rm8" "imm")
:code-format (list "[rmi:" "nohi" "66" "0f" "3a" "20" "/r" "ib,u")
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRB-xmmreg.reg32.imm (make-instance 'x64-asm-instruction
:name "PINSRB"
:req-operands (list "xmmreg" "reg32" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "20" "/r" "ib,u")
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRD-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PINSRD"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "norexw" "66" "0f" "3a" "22" "/r" "ib,u")
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRD-xmmreg.rm32.imm (make-instance 'x64-asm-instruction
:name "PINSRD"
:req-operands (list "xmmreg" "rm32" "imm")
:code-format (list "[rmi:" "norexw" "66" "0f" "3a" "22" "/r" "ib,u")
:arch-flags (list "SSE41" "SB" "AR2")))

(defparameter PINSRQ-xmmreg.mem.imm (make-instance 'x64-asm-instruction
:name "PINSRQ"
:req-operands (list "xmmreg" "mem" "imm")
:code-format (list "[rmi:" "o64" "66" "0f" "3a" "22" "/r" "ib,u")
:arch-flags (list "SSE41" "X64" "SB" "AR2")))

(defparameter PINSRQ-xmmreg.rm64.imm (make-instance 'x64-asm-instruction
:name "PINSRQ"
:req-operands (list "xmmreg" "rm64" "imm")
:code-format (list "[rmi:" "o64" "66" "0f" "3a" "22" "/r" "ib,u")
:arch-flags (list "SSE41" "X64" "SB" "AR2")))

(defparameter PMAXSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3c" "/r")
:arch-flags (list "SSE41")))

(defparameter PMAXSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3d" "/r")
:arch-flags (list "SSE41")))

(defparameter PMAXUD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXUD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3f" "/r")
:arch-flags (list "SSE41")))

(defparameter PMAXUW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMAXUW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3e" "/r")
:arch-flags (list "SSE41")))

(defparameter PMINSB-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINSB"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "38" "/r")
:arch-flags (list "SSE41")))

(defparameter PMINSD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINSD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "39" "/r")
:arch-flags (list "SSE41")))

(defparameter PMINUD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINUD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3b" "/r")
:arch-flags (list "SSE41")))

(defparameter PMINUW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMINUW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "3a" "/r")
:arch-flags (list "SSE41")))

(defparameter PMOVSXBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "20" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVSXBD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXBD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "21" "/r")
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVSXBQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXBQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "22" "/r")
:arch-flags (list "SSE41" "SW")))

(defparameter PMOVSXWD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXWD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "23" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVSXWQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXWQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "24" "/r")
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVSXDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVSXDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "25" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXBW-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXBW"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "30" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXBD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXBD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "31" "/r")
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVZXBQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXBQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "32" "/r")
:arch-flags (list "SSE41" "SW")))

(defparameter PMOVZXWD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXWD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "33" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMOVZXWQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXWQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "34" "/r")
:arch-flags (list "SSE41" "SD")))

(defparameter PMOVZXDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMOVZXDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "35" "/r")
:arch-flags (list "SSE41" "SQ")))

(defparameter PMULDQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULDQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "28" "/r")
:arch-flags (list "SSE41")))

(defparameter PMULLD-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PMULLD"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "40" "/r")
:arch-flags (list "SSE41")))

(defparameter PTEST-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PTEST"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "17" "/r")
:arch-flags (list "SSE41")))

(defparameter ROUNDPD-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "ROUNDPD"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "09" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter ROUNDPS-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "ROUNDPS"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "08" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter ROUNDSD-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "ROUNDSD"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0b" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter ROUNDSS-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "ROUNDSS"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "0a" "/r" "ib,u")
:arch-flags (list "SSE41")))

(defparameter CRC32-reg32.rm8 (make-instance 'x64-asm-instruction
:name "CRC32"
:req-operands (list "reg32" "rm8")
:code-format (list "[rm:" "f2i" "0f" "38" "f0" "/r")
:arch-flags (list "SSE42")))

(defparameter CRC32-reg32.rm16 (make-instance 'x64-asm-instruction
:name "CRC32"
:req-operands (list "reg32" "rm16")
:code-format (list "[rm:" "o16" "f2i" "0f" "38" "f1" "/r")
:arch-flags (list "SSE42")))

(defparameter CRC32-reg32.rm32 (make-instance 'x64-asm-instruction
:name "CRC32"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "o32" "f2i" "0f" "38" "f1" "/r")
:arch-flags (list "SSE42")))

(defparameter CRC32-reg64.rm8 (make-instance 'x64-asm-instruction
:name "CRC32"
:req-operands (list "reg64" "rm8")
:code-format (list "[rm:" "o64" "f2i" "0f" "38" "f0" "/r")
:arch-flags (list "SSE42" "X64")))

(defparameter CRC32-reg64.rm64 (make-instance 'x64-asm-instruction
:name "CRC32"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "f2i" "0f" "38" "f1" "/r")
:arch-flags (list "SSE42" "X64")))

(defparameter PCMPESTRI-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PCMPESTRI"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "61" "/r" "ib,u")
:arch-flags (list "SSE42")))

(defparameter PCMPESTRM-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PCMPESTRM"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "60" "/r" "ib,u")
:arch-flags (list "SSE42")))

(defparameter PCMPISTRI-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PCMPISTRI"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "63" "/r" "ib,u")
:arch-flags (list "SSE42")))

(defparameter PCMPISTRM-xmmreg.xmmrm.imm (make-instance 'x64-asm-instruction
:name "PCMPISTRM"
:req-operands (list "xmmreg" "xmmrm" "imm")
:code-format (list "[rmi:" "66" "0f" "3a" "62" "/r" "ib,u")
:arch-flags (list "SSE42")))

(defparameter PCMPGTQ-xmmreg.xmmrm (make-instance 'x64-asm-instruction
:name "PCMPGTQ"
:req-operands (list "xmmreg" "xmmrm")
:code-format (list "[rm:" "66" "0f" "38" "37" "/r")
:arch-flags (list "SSE42")))

(defparameter POPCNT-reg16.rm16 (make-instance 'x64-asm-instruction
:name "POPCNT"
:req-operands (list "reg16" "rm16")
:code-format (list "[rm:" "o16" "f3i" "0f" "b8" "/r")
:arch-flags (list "NEHALEM" "SW")))

(defparameter POPCNT-reg32.rm32 (make-instance 'x64-asm-instruction
:name "POPCNT"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "o32" "f3i" "0f" "b8" "/r")
:arch-flags (list "NEHALEM" "SD")))

(defparameter POPCNT-reg64.rm64 (make-instance 'x64-asm-instruction
:name "POPCNT"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "f3i" "0f" "b8" "/r")
:arch-flags (list "NEHALEM" "SQ" "X64")))

(defparameter GETSEC-void (make-instance 'x64-asm-instruction
:name "GETSEC"
:req-operands (list "void")
:code-format (list "[" "0f" "37")
:arch-flags (list "KATMAI")))

(defparameter PFRCPV-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRCPV"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "86")
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")))

(defparameter PFRSQRTV-mmxreg.mmxrm (make-instance 'x64-asm-instruction
:name "PFRSQRTV"
:req-operands (list "mmxreg" "mmxrm")
:code-format (list "[rm:" "o64nw" "0f" "0f" "/r" "87")
:arch-flags (list "PENT" "3DNOW" "SQ" "CYRIX")))

(defparameter MOVBE-reg16.mem16 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "reg16" "mem16")
:code-format (list "[rm:" "o16" "norep" "0f" "38" "f0" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-reg32.mem32 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "reg32" "mem32")
:code-format (list "[rm:" "o32" "norep" "0f" "38" "f0" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-reg64.mem64 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "reg64" "mem64")
:code-format (list "[rm:" "o64" "norep" "0f" "38" "f0" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem16.reg16 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "mem16" "reg16")
:code-format (list "[mr:" "o16" "norep" "0f" "38" "f1" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem32.reg32 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "mem32" "reg32")
:code-format (list "[mr:" "o32" "norep" "0f" "38" "f1" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter MOVBE-mem64.reg64 (make-instance 'x64-asm-instruction
:name "MOVBE"
:req-operands (list "mem64" "reg64")
:code-format (list "[mr:" "o64" "norep" "0f" "38" "f1" "/r")
:arch-flags (list "NEHALEM" "SM")))

(defparameter AESENC-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "AESENC"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "38" "dc" "/r")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESENCLAST-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "AESENCLAST"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "38" "dd" "/r")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESDEC-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "AESDEC"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "38" "de" "/r")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESDECLAST-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "AESDECLAST"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "38" "df" "/r")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESIMC-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "AESIMC"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "38" "db" "/r")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter AESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "AESKEYGENASSIST"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "66" "0f" "3a" "df" "/r" "ib")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter VAESENC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VAESENC"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "dc" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESENCLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VAESENCLAST"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "dd" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESDEC-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VAESDEC"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "de" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESDECLAST-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VAESDECLAST"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "df" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESIMC-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VAESIMC"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "db" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VAESKEYGENASSIST-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VAESKEYGENASSIST"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "df" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VADDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VADDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "58" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VADDSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VADDSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VADDSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.f2.0f" "d0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VADDSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VADDSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.f2.0f" "d0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VANDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "54" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VANDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "54" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VANDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "54" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VANDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "54" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VANDNPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "55" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VANDNPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "55" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VANDNPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "55" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VANDNPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VANDNPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "55" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VBLENDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0d" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VBLENDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "0d" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VBLENDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0c" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VBLENDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "0c" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VBLENDVPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.nds.128.66.0f3a.w0" "4b" "/r" "/is4")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VBLENDVPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.nds.256.66.0f3a.w0" "4b" "/r" "/is4")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VBLENDVPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.nds.128.66.0f3a.w0" "4a" "/r" "/is4")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VBLENDVPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.nds.256.66.0f3a.w0" "4a" "/r" "/is4")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSS-xmmreg.mem32 (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "xmmreg" "mem32")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "18" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSS-ymmreg.mem32 (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "ymmreg" "mem32")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "18" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTSD-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "19" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VBROADCASTF128-ymmreg.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTF128"
:req-operands (list "ymmreg" "mem128")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "1a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLTPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLTPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLTPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLTPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORD_QPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORD_QPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGTPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGTPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGTPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGTPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUEPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUEPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORD_SPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORD_SPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLTPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLTPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLTPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLTPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORD_QPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORD_QPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGTPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGTPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGTPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGTPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUEPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUEPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPORD_SPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPORD_SPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLTSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLTSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORD_QSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGTSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGTSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUESD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUESD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORD_SSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-asm-instruction
:name "VCMPSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "imm8")
:code-format (list "[rvmi:" "vex.nds.lig.f2.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLT_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLE_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "02")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_QSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "03")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "04")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLT_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "05")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLE_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "06")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORD_QSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORDSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "07")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "08")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGE_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "09")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGT_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGE_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGT_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGTSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUESS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUESS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "0f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLT_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPLE_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "12")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPUNORD_SSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "13")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "14")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLT_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "15")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNLE_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "16")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPORD_SSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "17")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPEQ_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "18")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGE_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "19")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNGT_UQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1a")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPFALSE_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1b")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPNEQ_OSSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1c")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGE_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1d")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPGT_OQSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1e")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCMPTRUE_USSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "c2" "/r" "1f")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-asm-instruction
:name "VCMPSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "imm8")
:code-format (list "[rvmi:" "vex.nds.lig.f3.0f" "c2" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCOMISD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCOMISD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.lig.66.0f" "2f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCOMISS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCOMISS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.lig.0f" "2f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.f3.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PD-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PD"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.f3.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTDQ2PS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.f2.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "vex.128.f2.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTPD2DQ-xmmreg.ymmreg (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg" "ymmreg")
:code-format (list "[rm:" "vex.256.f2.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2DQ-xmmreg.mem256 (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg" "mem256")
:code-format (list "[rm:" "vex.256.f2.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTPD2PS-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2PS-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "vex.128.66.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTPD2PS-xmmreg.ymmreg (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPD2PS-xmmreg.mem256 (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg" "mem256")
:code-format (list "[rm:" "vex.256.66.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTPS2DQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTPS2DQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2DQ-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCVTPS2DQ"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2PD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTPS2PD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTPS2PD-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTPS2PD"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSD2SI-reg32.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTSD2SI"
:req-operands (list "reg32" "xmmrm64")
:code-format (list "[rm:" "vex.lig.f2.0f.w0" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSD2SI-reg64.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTSD2SI"
:req-operands (list "reg64" "xmmrm64")
:code-format (list "[rm:" "vex.lig.f2.0f.w1" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTSD2SS-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTSD2SS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.rm32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SD"
:req-operands (list "xmmreg" "xmmreg*" "rm32")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f.w0" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.mem32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SD"
:req-operands (list "xmmreg" "xmmreg*" "mem32")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f.w0" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")))

(defparameter VCVTSI2SD-xmmreg.xmmreg*.rm64 (make-instance 'x64-asm-instruction
:name "VCVTSI2SD"
:req-operands (list "xmmreg" "xmmreg*" "rm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f.w1" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.rm32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SS"
:req-operands (list "xmmreg" "xmmreg*" "rm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f.w0" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SD")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.mem32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SS"
:req-operands (list "xmmreg" "xmmreg*" "mem32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f.w0" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "ND" "SD")))

(defparameter VCVTSI2SS-xmmreg.xmmreg*.rm64 (make-instance 'x64-asm-instruction
:name "VCVTSI2SS"
:req-operands (list "xmmreg" "xmmreg*" "rm64")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f.w1" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VCVTSS2SD-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCVTSS2SD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "5a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSS2SI-reg32.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCVTSS2SI"
:req-operands (list "reg32" "xmmrm32")
:code-format (list "[rm:" "vex.lig.f3.0f.w0" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTSS2SI-reg64.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCVTSS2SI"
:req-operands (list "reg64" "xmmrm32")
:code-format (list "[rm:" "vex.lig.f3.0f.w1" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTTPD2DQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPD2DQ-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "vex.128.66.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VCVTTPD2DQ-xmmreg.ymmreg (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPD2DQ-xmmreg.mem256 (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg" "mem256")
:code-format (list "[rm:" "vex.256.66.0f" "e6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VCVTTPS2DQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTTPS2DQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.f3.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTPS2DQ-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VCVTTPS2DQ"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f3.0f" "5b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSD2SI-reg32.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTTSD2SI"
:req-operands (list "reg32" "xmmrm64")
:code-format (list "[rm:" "vex.lig.f2.0f.w0" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSD2SI-reg64.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTTSD2SI"
:req-operands (list "reg64" "xmmrm64")
:code-format (list "[rm:" "vex.lig.f2.0f.w1" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VCVTTSS2SI-reg32.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCVTTSS2SI"
:req-operands (list "reg32" "xmmrm32")
:code-format (list "[rm:" "vex.lig.f3.0f.w0" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VCVTTSS2SI-reg64.xmmrm32 (make-instance 'x64-asm-instruction
:name "VCVTTSS2SI"
:req-operands (list "reg64" "xmmrm32")
:code-format (list "[rm:" "vex.lig.f3.0f.w1" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VDIVPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VDIVPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VDIVPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VDIVPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VDIVPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VDIVSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDIVSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VDIVSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "5e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VDPPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "41" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VDPPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "40" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VDPPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VDPPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "40" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VEXTRACTF128-xmmrm128.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF128"
:req-operands (list "xmmrm128" "ymmreg" "imm8")
:code-format (list "[mri:" "vex.256.66.0f3a.w0" "19" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VEXTRACTPS-rm32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTPS"
:req-operands (list "rm32" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a" "17" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VHADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "7c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VHADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "7c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VHADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.f2.0f" "7c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHADDPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VHADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.f2.0f" "7c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VHSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "7d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VHSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "7d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VHSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.f2.0f" "7d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VHSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VHSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.f2.0f" "7d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF128"
:req-operands (list "ymmreg" "ymmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a.w0" "18" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "21" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDDQU-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VLDDQU"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "vex.128.f2.0f" "f0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDQQU-ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VLDQQU"
:req-operands (list "ymmreg" "mem256")
:code-format (list "[rm:" "vex.256.f2.0f" "f0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDDQU-ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VLDDQU"
:req-operands (list "ymmreg" "mem256")
:code-format (list "[rm:" "vex.256.f2.0f" "f0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VLDMXCSR-mem32 (make-instance 'x64-asm-instruction
:name "VLDMXCSR"
:req-operands (list "mem32")
:code-format (list "[m:" "vex.lz.0f" "ae" "/2")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVDQU-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMASKMOVDQU"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "f7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-xmmreg.xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VMASKMOVPS"
:req-operands (list "xmmreg" "xmmreg" "mem128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-ymmreg.ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VMASKMOVPS"
:req-operands (list "ymmreg" "ymmreg" "mem256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "2c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPS-mem128.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMASKMOVPS"
:req-operands (list "mem128" "xmmreg" "xmmreg")
:code-format (list "[mvr:" "vex.nds.128.66.0f38.w0" "2e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SO")))

(defparameter VMASKMOVPS-mem256.ymmreg.ymmreg (make-instance 'x64-asm-instruction
:name "VMASKMOVPS"
:req-operands (list "mem256" "ymmreg" "ymmreg")
:code-format (list "[mvr:" "vex.nds.256.66.0f38.w0" "2e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SY")))

(defparameter VMASKMOVPD-xmmreg.xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VMASKMOVPD"
:req-operands (list "xmmreg" "xmmreg" "mem128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-ymmreg.ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VMASKMOVPD"
:req-operands (list "ymmreg" "ymmreg" "mem256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "2d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-mem128.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMASKMOVPD"
:req-operands (list "mem128" "xmmreg" "xmmreg")
:code-format (list "[mvr:" "vex.nds.128.66.0f38.w0" "2f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMASKMOVPD-mem256.ymmreg.ymmreg (make-instance 'x64-asm-instruction
:name "VMASKMOVPD"
:req-operands (list "mem256" "ymmreg" "ymmreg")
:code-format (list "[mvr:" "vex.nds.256.66.0f38.w0" "2f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMAXPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMAXPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMAXPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMAXPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMAXSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMAXSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VMAXSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "5f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMINPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMINPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMINPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMINPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMINSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMINSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VMINSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "5d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f" "28" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "29" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f" "28" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPD-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "29" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "28" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.0f" "29" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "28" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVAPS-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.0f" "29" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVD-xmmreg.rm32 (make-instance 'x64-asm-instruction
:name "VMOVD"
:req-operands (list "xmmreg" "rm32")
:code-format (list "[rm:" "vex.128.66.0f.w0" "6e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVD-rm32.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVD"
:req-operands (list "rm32" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f.w0" "7e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQ-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.f3.0f" "7e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")))

(defparameter VMOVQ-xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmrm64" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "d6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "SQ")))

(defparameter VMOVQ-xmmreg.rm64 (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmreg" "rm64")
:code-format (list "[rm:" "vex.128.66.0f.w1" "6e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VMOVQ-rm64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "rm64" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f.w1" "7e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG" "SQ")))

(defparameter VMOVDDUP-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMOVDDUP"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.f2.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDDUP-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDDUP"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f2.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQA"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQA-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVQQA"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQA-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVQQA"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-ymmreg.ymmrm (make-instance 'x64-asm-instruction
:name "VMOVDQA"
:req-operands (list "ymmreg" "ymmrm")
:code-format (list "[rm:" "vex.256.66.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQA-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQU"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.f3.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.f3.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQU-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVQQU"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f3.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVQQU-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVQQU"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.f3.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQU"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f3.0f" "6f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVDQU-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.f3.0f" "7f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHLPS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHLPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[rvm:" "vex.nds.128.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPD-xmmreg.xmmreg*.mem64 (make-instance 'x64-asm-instruction
:name "VMOVHPD"
:req-operands (list "xmmreg" "xmmreg*" "mem64")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "16" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHPD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "17" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPS-xmmreg.xmmreg*.mem64 (make-instance 'x64-asm-instruction
:name "VMOVHPS"
:req-operands (list "xmmreg" "xmmreg*" "mem64")
:code-format (list "[rvm:" "vex.nds.128.0f" "16" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVHPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "vex.128.0f" "17" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLHPS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLHPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[rvm:" "vex.nds.128.0f" "16" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPD-xmmreg.xmmreg*.mem64 (make-instance 'x64-asm-instruction
:name "VMOVLPD"
:req-operands (list "xmmreg" "xmmreg*" "mem64")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLPD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "13" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPS-xmmreg.xmmreg*.mem64 (make-instance 'x64-asm-instruction
:name "VMOVLPS"
:req-operands (list "xmmreg" "xmmreg*" "mem64")
:code-format (list "[rvm:" "vex.nds.128.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVLPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "vex.128.0f" "13" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPD-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPD"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPD-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPD"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPD-reg64.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPD"
:req-operands (list "reg64" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPD-reg32.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPD"
:req-operands (list "reg32" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPS-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPS"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "vex.128.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPS-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPS"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "vex.128.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVMSKPS-reg64.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPS"
:req-operands (list "reg64" "ymmreg")
:code-format (list "[rm:" "vex.256.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VMOVMSKPS-reg32.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVMSKPS"
:req-operands (list "reg32" "ymmreg")
:code-format (list "[rm:" "vex.256.0f" "50" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQ-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTDQ"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "e7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTQQ-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTQQ"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "e7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQ-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTDQ"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "e7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTDQA-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VMOVNTDQA"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:" "vex.128.66.0f38" "2a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPD-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPD"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "2b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPD-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPD"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "2b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPS-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPS"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:" "vex.128.0f" "2b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVNTPS-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPS"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:" "vex.256.0f" "2b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "vex.lig.f2.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[mvr:" "vex.nds.lig.f2.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:" "vex.lig.f2.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSHDUP-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVSHDUP"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.f3.0f" "16" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSHDUP-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVSHDUP"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f3.0f" "16" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSLDUP-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVSLDUP"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.f3.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSLDUP-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVSLDUP"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.f3.0f" "12" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.mem32 (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg" "mem32")
:code-format (list "[rm:" "vex.lig.f3.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-xmmreg.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg")
:code-format (list "[mvr:" "vex.nds.lig.f3.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVSS-mem32.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "mem32" "xmmreg")
:code-format (list "[mr:" "vex.lig.f3.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.66.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPD-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.66.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "xmmrm128" "xmmreg")
:code-format (list "[mr:" "vex.128.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "10" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMOVUPS-ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "ymmrm256" "ymmreg")
:code-format (list "[mr:" "vex.256.0f" "11" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VMPSADBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "42" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMULPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMULPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMULPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMULPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMULSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VMULSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VMULSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "59" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VORPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "56" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VORPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "56" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VORPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "56" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VORPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "56" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSB-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPABSB"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "1c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSW-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPABSW"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "1d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPABSD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPABSD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "1e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKSSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKSSWB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "63" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKSSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKSSDW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "6b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKUSWB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKUSWB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "67" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPACKUSDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKUSDW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "2b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "fc" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "fd" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "fe" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d4" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "ec" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "ed" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDUSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "dc" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPADDUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDUSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "dd" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPALIGNR"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0f" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPAND"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "db" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPANDN-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPANDN"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "df" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAVGB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPAVGB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e0" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPAVGW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPAVGW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e3" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPBLENDVB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.nds.128.66.0f3a.w0" "4c" "/r" "/is4")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPBLENDW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0e" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPESTRI-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPESTRI"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "61" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPESTRM-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPESTRM"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "60" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPISTRI-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPISTRI"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "63" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPISTRM-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPISTRM"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "62" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "74" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "75" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "76" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPEQQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "29" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "64" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "65" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "66" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCMPGTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "37" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "0d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "0d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a.w0" "05" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a.w0" "05" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "0c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "0c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a.w0" "04" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERMILPS-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a.w0" "04" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERM2F128"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a.w0" "06" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "14" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "14" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "mem8" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "14" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f.w0" "c5" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f.w0" "c5" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "15" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "15" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "mem16" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "15" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRD-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRD"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "16" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRD"
:req-operands (list "rm32" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "16" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRQ"
:req-operands (list "rm64" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w1" "16" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPHADDW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHADDW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "01" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHADDD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHADDD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "02" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHADDSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHADDSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "03" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHMINPOSUW-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHMINPOSUW"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "41" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHSUBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "05" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHSUBD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "06" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPHSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPHSUBSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "07" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.mem8.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRB"
:req-operands (list "xmmreg" "xmmreg*" "mem8" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "20" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.rm8.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRB"
:req-operands (list "xmmreg" "xmmreg*" "rm8" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "20" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRB-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRB"
:req-operands (list "xmmreg" "xmmreg*" "reg32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "20" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.mem16.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRW"
:req-operands (list "xmmreg" "xmmreg*" "mem16" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f" "c4" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.rm16.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRW"
:req-operands (list "xmmreg" "xmmreg*" "rm16" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f" "c4" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRW-xmmreg.xmmreg*.reg32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRW"
:req-operands (list "xmmreg" "xmmreg*" "reg32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f" "c4" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRD-xmmreg.xmmreg*.mem32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRD"
:req-operands (list "xmmreg" "xmmreg*" "mem32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a.w0" "22" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRD-xmmreg.xmmreg*.rm32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRD"
:req-operands (list "xmmreg" "xmmreg*" "rm32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a.w0" "22" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPINSRQ-xmmreg.xmmreg*.mem64.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRQ"
:req-operands (list "xmmreg" "xmmreg*" "mem64" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a.w1" "22" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPINSRQ-xmmreg.xmmreg*.rm64.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRQ"
:req-operands (list "xmmreg" "xmmreg*" "rm64" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a.w1" "22" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPMADDWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMADDWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f5" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMADDUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMADDUBSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "04" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "ee" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXUB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "de" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXUW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMAXUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXUD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "38" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "ea" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINSD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "39" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINUB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "da" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINUW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMINUD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINUD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "3b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVMSKB-reg64.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVMSKB"
:req-operands (list "reg64" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "d7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE" "LONG")))

(defparameter VPMOVMSKB-reg32.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVMSKB"
:req-operands (list "reg32" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f" "d7" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBW-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXBW"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "20" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBD-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.128.66.0f38" "21" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXBQ-xmmreg.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "xmmreg" "xmmrm16")
:code-format (list "[rm:" "vex.128.66.0f38" "22" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXWD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXWD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "23" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXWQ-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.128.66.0f38" "24" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVSXDQ-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXDQ"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "25" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBW-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXBW"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "30" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBD-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.128.66.0f38" "31" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXBQ-xmmreg.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "xmmreg" "xmmrm16")
:code-format (list "[rm:" "vex.128.66.0f38" "32" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXWD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXWD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "33" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXWQ-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.128.66.0f38" "34" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMOVZXDQ-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXDQ"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38" "35" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHUW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHUW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e4" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHRSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHRSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "0b" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULHW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e5" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULLW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d5" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULLD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "40" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULUDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULUDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f4" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPMULDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "28" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPOR"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "eb" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSADBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSADBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f6" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHUFB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "00" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFD-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFD"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f" "70" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFHW-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFHW"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.f3.0f" "70" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSHUFLW-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFLW"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.f2.0f" "70" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGNB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSIGNB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "08" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGNW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSIGNW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "09" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSIGND-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSIGND"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38" "0a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLDQ"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "73" "/7" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLDQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLDQ"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "73" "/3" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f1" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLW-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "71" "/6" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f2" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLD-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "72" "/6" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f3" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSLLQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "73" "/6" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e1" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAW-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "71" "/4" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e2" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRAD-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "72" "/4" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d1" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLW-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "71" "/2" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d2" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLD-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "72" "/2" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d3" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSRLQ-xmmreg.xmmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "xmmreg" "xmmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.128.66.0f" "73" "/2" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPTEST-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPTEST"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38" "17" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPTEST-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPTEST"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38" "17" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f8" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "f9" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "fa" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "fb" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e8" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "e9" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBUSB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBUSB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d8" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPSUBUSW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBUSW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "d9" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "68" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "69" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "6a" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "6d" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLBW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "60" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "61" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "62" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "6c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPXOR-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPXOR"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "ef" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VRCPPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "53" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VRCPPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "53" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRCPSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VRCPSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "53" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VRSQRTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "52" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VRSQRTPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "52" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VRSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VRSQRTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "52" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPD-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDPD"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "09" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDPD"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a" "09" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPS-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDPS"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "vex.128.66.0f3a" "08" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDPS-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDPS"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a" "08" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0b" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8 (make-instance 'x64-asm-instruction
:name "VROUNDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "0a" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f" "c6" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f" "c6" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.0f" "c6" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.0f" "c6" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VSQRTPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPD-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VSQRTPD"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VSQRTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VSQRTPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VSQRTSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSQRTSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VSQRTSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "51" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSTMXCSR-mem32 (make-instance 'x64-asm-instruction
:name "VSTMXCSR"
:req-operands (list "mem32")
:code-format (list "[m:" "vex.128.0f" "ae" "/3")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBSD-xmmreg.xmmreg*.xmmrm64 (make-instance 'x64-asm-instruction
:name "VSUBSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64")
:code-format (list "[rvm:" "vex.nds.lig.f2.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VSUBSS-xmmreg.xmmreg*.xmmrm32 (make-instance 'x64-asm-instruction
:name "VSUBSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32")
:code-format (list "[rvm:" "vex.nds.lig.f3.0f" "5c" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPS-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VTESTPS"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "0e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPS-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VTESTPS"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "0e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPD-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VTESTPD"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "0f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VTESTPD-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VTESTPD"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "0f" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUCOMISD-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VUCOMISD"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.lig.66.0f" "2e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUCOMISS-xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VUCOMISS"
:req-operands (list "xmmreg" "xmmrm32")
:code-format (list "[rm:" "vex.lig.0f" "2e" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VUNPCKHPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "15" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VUNPCKHPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "15" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VUNPCKHPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "15" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKHPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VUNPCKHPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "15" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VUNPCKLPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "14" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VUNPCKLPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "14" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VUNPCKLPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "14" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VUNPCKLPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VUNPCKLPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "14" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VXORPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f" "57" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VXORPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "57" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPS-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VXORPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.0f" "57" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VXORPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VXORPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.0f" "57" "/r")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VZEROALL-void (make-instance 'x64-asm-instruction
:name "VZEROALL"
:req-operands (list "void")
:code-format (list "[" "vex.256.0f.w0" "77")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VZEROUPPER-void (make-instance 'x64-asm-instruction
:name "VZEROUPPER"
:req-operands (list "void")
:code-format (list "[" "vex.128.0f.w0" "77")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter PCLMULLQLQDQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "PCLMULLQLQDQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "3a" "44" "/r" "00")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULHQLQDQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "PCLMULHQLQDQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "3a" "44" "/r" "01")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULLQHQDQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "PCLMULLQHQDQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "3a" "44" "/r" "10")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULHQHQDQ-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "PCLMULHQHQDQ"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "66" "0f" "3a" "44" "/r" "11")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter PCLMULQDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "PCLMULQDQ"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "66" "0f" "3a" "44" "/r" "ib")
:arch-flags (list "SSE" "WESTMERE")))

(defparameter VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCLMULLQLQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f3a" "44" "/r" "00")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCLMULHQLQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f3a" "44" "/r" "01")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCLMULLQHQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f3a" "44" "/r" "10")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCLMULHQHQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f3a" "44" "/r" "11")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCLMULQDQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a" "44" "/r" "ib")
:arch-flags (list "AVX" "SANDYBRIDGE")))

(defparameter VFMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "98" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADD321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADD321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b8" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "96" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUB321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUB321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b6" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9a" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "aa" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUB321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUB321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ba" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "97" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "a7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADD321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADD321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "b7" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9c" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ac" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADD321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADD321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "bc" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB312PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB312PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB312PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB312PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "9e" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB123PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB123PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB123PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB123PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "ae" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PS-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB321PS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PS-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB321PS"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w0" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PD-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUB321PD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321PD-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUB321PD"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:" "vex.dds.256.66.0f38.w1" "be" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD132SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "99" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD132SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "99" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD312SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "99" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD312SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "99" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD213SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD213SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD123SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "a9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD123SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "a9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD231SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD231SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADD321SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "b9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADD321SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "b9" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB132SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9b" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB132SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9b" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB312SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9b" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB312SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9b" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB213SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ab" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB213SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ab" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB123SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ab" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB123SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ab" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB231SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bb" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB231SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bb" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUB321SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bb" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUB321SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bb" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD132SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9d" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD132SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9d" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD312SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9d" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD312SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9d" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD213SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ad" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD213SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ad" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD123SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "ad" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD123SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "ad" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD231SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bd" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD231SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bd" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADD321SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bd" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMADD321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADD321SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bd" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB132SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9f" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB132SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB132SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9f" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB312SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "9f" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB312SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB312SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "9f" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB213SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "af" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB213SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB213SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "af" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB123SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "af" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB123SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB123SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "af" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB231SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bf" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB231SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB231SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bf" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321SS-xmmreg.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUB321SS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w0" "bf" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter VFNMSUB321SD-xmmreg.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUB321SD"
:req-operands (list "xmmreg" "xmmreg" "xmmrm64")
:code-format (list "[rvm:" "vex.dds.128.66.0f38.w1" "bf" "/r")
:arch-flags (list "FMA" "FUTURE")))

(defparameter RDFSBASE-reg32 (make-instance 'x64-asm-instruction
:name "RDFSBASE"
:req-operands (list "reg32")
:code-format (list "[m:" "norexw" "f3" "0f" "ae" "/0")
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDFSBASE-reg64 (make-instance 'x64-asm-instruction
:name "RDFSBASE"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "f3" "0f" "ae" "/0")
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDGSBASE-reg32 (make-instance 'x64-asm-instruction
:name "RDGSBASE"
:req-operands (list "reg32")
:code-format (list "[m:" "norexw" "f3" "0f" "ae" "/1")
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDGSBASE-reg64 (make-instance 'x64-asm-instruction
:name "RDGSBASE"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "f3" "0f" "ae" "/1")
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDRAND-reg16 (make-instance 'x64-asm-instruction
:name "RDRAND"
:req-operands (list "reg16")
:code-format (list "[m:" "o16" "0f" "c7" "/6")
:arch-flags (list "FUTURE")))

(defparameter RDRAND-reg32 (make-instance 'x64-asm-instruction
:name "RDRAND"
:req-operands (list "reg32")
:code-format (list "[m:" "o32" "0f" "c7" "/6")
:arch-flags (list "FUTURE")))

(defparameter RDRAND-reg64 (make-instance 'x64-asm-instruction
:name "RDRAND"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "0f" "c7" "/6")
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRFSBASE-reg32 (make-instance 'x64-asm-instruction
:name "WRFSBASE"
:req-operands (list "reg32")
:code-format (list "[m:" "norexw" "f3" "0f" "ae" "/2")
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRFSBASE-reg64 (make-instance 'x64-asm-instruction
:name "WRFSBASE"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "f3" "0f" "ae" "/2")
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRGSBASE-reg32 (make-instance 'x64-asm-instruction
:name "WRGSBASE"
:req-operands (list "reg32")
:code-format (list "[m:" "norexw" "f3" "0f" "ae" "/3")
:arch-flags (list "LONG" "FUTURE")))

(defparameter WRGSBASE-reg64 (make-instance 'x64-asm-instruction
:name "WRGSBASE"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "f3" "0f" "ae" "/3")
:arch-flags (list "LONG" "FUTURE")))

(defparameter VCVTPH2PS-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTPH2PS"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "13" "/r")
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPH2PS-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTPH2PS"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "13" "/r")
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPS2PH-xmmrm128.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "xmmrm128" "ymmreg" "imm8")
:code-format (list "[mri:" "vex.256.66.0f3a.w0" "1d" "/r" "ib")
:arch-flags (list "AVX" "FUTURE")))

(defparameter VCVTPS2PH-xmmrm64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "xmmrm64" "xmmreg" "imm8")
:code-format (list "[mri:" "vex.128.66.0f3a.w0" "1d" "/r" "ib")
:arch-flags (list "AVX" "FUTURE")))

(defparameter ADCX-reg32.rm32 (make-instance 'x64-asm-instruction
:name "ADCX"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "norexw" "66" "0f" "38" "f6" "/r")
:arch-flags (list "FUTURE")))

(defparameter ADCX-reg64.rm64 (make-instance 'x64-asm-instruction
:name "ADCX"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "66" "0f" "38" "f6" "/r")
:arch-flags (list "LONG" "FUTURE")))

(defparameter ADOX-reg32.rm32 (make-instance 'x64-asm-instruction
:name "ADOX"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "norexw" "f3" "0f" "38" "f6" "/r")
:arch-flags (list "FUTURE")))

(defparameter ADOX-reg64.rm64 (make-instance 'x64-asm-instruction
:name "ADOX"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "f3" "0f" "38" "f6" "/r")
:arch-flags (list "LONG" "FUTURE")))

(defparameter RDSEED-reg16 (make-instance 'x64-asm-instruction
:name "RDSEED"
:req-operands (list "reg16")
:code-format (list "[m:" "o16" "0f" "c7" "/7")
:arch-flags (list "FUTURE")))

(defparameter RDSEED-reg32 (make-instance 'x64-asm-instruction
:name "RDSEED"
:req-operands (list "reg32")
:code-format (list "[m:" "o32" "0f" "c7" "/7")
:arch-flags (list "FUTURE")))

(defparameter RDSEED-reg64 (make-instance 'x64-asm-instruction
:name "RDSEED"
:req-operands (list "reg64")
:code-format (list "[m:" "o64" "0f" "c7" "/7")
:arch-flags (list "LONG" "FUTURE")))

(defparameter CLAC-void (make-instance 'x64-asm-instruction
:name "CLAC"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "ca")
:arch-flags (list "PRIV" "FUTURE")))

(defparameter STAC-void (make-instance 'x64-asm-instruction
:name "STAC"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "cb")
:arch-flags (list "PRIV" "FUTURE")))

(defparameter XSTORE-void (make-instance 'x64-asm-instruction
:name "XSTORE"
:req-operands (list "void")
:code-format (list "[" "0f" "a7" "c0")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTECB-void (make-instance 'x64-asm-instruction
:name "XCRYPTECB"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a7" "c8")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCBC-void (make-instance 'x64-asm-instruction
:name "XCRYPTCBC"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a7" "d0")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCTR-void (make-instance 'x64-asm-instruction
:name "XCRYPTCTR"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a7" "d8")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTCFB-void (make-instance 'x64-asm-instruction
:name "XCRYPTCFB"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a7" "e0")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XCRYPTOFB-void (make-instance 'x64-asm-instruction
:name "XCRYPTOFB"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a7" "e8")
:arch-flags (list "PENT" "CYRIX")))

(defparameter MONTMUL-void (make-instance 'x64-asm-instruction
:name "MONTMUL"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a6" "c0")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XSHA1-void (make-instance 'x64-asm-instruction
:name "XSHA1"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a6" "c8")
:arch-flags (list "PENT" "CYRIX")))

(defparameter XSHA256-void (make-instance 'x64-asm-instruction
:name "XSHA256"
:req-operands (list "void")
:code-format (list "[" "mustrep" "0f" "a6" "d0")
:arch-flags (list "PENT" "CYRIX")))

(defparameter LLWPCB-reg32 (make-instance 'x64-asm-instruction
:name "LLWPCB"
:req-operands (list "reg32")
:code-format (list "[m:" "xop.m9.w0.l0.p0" "12" "/0")
:arch-flags (list "AMD" "386")))

(defparameter LLWPCB-reg64 (make-instance 'x64-asm-instruction
:name "LLWPCB"
:req-operands (list "reg64")
:code-format (list "[m:" "xop.m9.w1.l0.p0" "12" "/0")
:arch-flags (list "AMD" "X64")))

(defparameter SLWPCB-reg32 (make-instance 'x64-asm-instruction
:name "SLWPCB"
:req-operands (list "reg32")
:code-format (list "[m:" "xop.m9.w0.l0.p0" "12" "/1")
:arch-flags (list "AMD" "386")))

(defparameter SLWPCB-reg64 (make-instance 'x64-asm-instruction
:name "SLWPCB"
:req-operands (list "reg64")
:code-format (list "[m:" "xop.m9.w1.l0.p0" "12" "/1")
:arch-flags (list "AMD" "X64")))

(defparameter LWPVAL-reg32.rm32.imm32 (make-instance 'x64-asm-instruction
:name "LWPVAL"
:req-operands (list "reg32" "rm32" "imm32")
:code-format (list "[vmi:" "xop.m10.w0.ndd.l0.p0" "12" "/1" "id")
:arch-flags (list "AMD" "386")))

(defparameter LWPVAL-reg64.rm32.imm32 (make-instance 'x64-asm-instruction
:name "LWPVAL"
:req-operands (list "reg64" "rm32" "imm32")
:code-format (list "[vmi:" "xop.m10.w1.ndd.l0.p0" "12" "/1" "id")
:arch-flags (list "AMD" "X64")))

(defparameter LWPINS-reg32.rm32.imm32 (make-instance 'x64-asm-instruction
:name "LWPINS"
:req-operands (list "reg32" "rm32" "imm32")
:code-format (list "[vmi:" "xop.m10.w0.ndd.l0.p0" "12" "/0" "id")
:arch-flags (list "AMD" "386")))

(defparameter LWPINS-reg64.rm32.imm32 (make-instance 'x64-asm-instruction
:name "LWPINS"
:req-operands (list "reg64" "rm32" "imm32")
:code-format (list "[vmi:" "xop.m10.w1.ndd.l0.p0" "12" "/0" "id")
:arch-flags (list "AMD" "X64")))

(defparameter VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "69" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "69" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "69" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "69" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "68" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "68" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "68" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "68" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6b" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMADDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm64")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6b" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6a" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMADDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm32")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6a" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "5d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMADDSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "5d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "5d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "5d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMADDSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "5c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMADDSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "5c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMADDSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "5c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMADDSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "5c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "5f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMSUBADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "5f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "5f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "5f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "5e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMSUBADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "5e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "5e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "5e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "6d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "6d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFMSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "6c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFMSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFMSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "6c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFMSUBSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm64")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-asm-instruction
:name "VFMSUBSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "6e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFMSUBSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm32")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "6e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "79" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFNMADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "79" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADDPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "79" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADDPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "79" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "78" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFNMADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "78" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMADDPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "78" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMADDPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "78" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMADDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7b" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMADDSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm64")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7b" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMADDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7a" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMADDSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm32")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7a" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "7d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUBPD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUBPD"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "7d" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l1.p1" "7c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VFNMSUBPS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VFNMSUBPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l1.p1" "7c" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm64" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VFNMSUBSD"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm64")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg (make-instance 'x64-asm-instruction
:name "VFNMSUBSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm32" "xmmreg")
:code-format (list "[rvms:" "vex.m3.w0.nds.l0.p1" "7e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VFNMSUBSS"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm32")
:code-format (list "[rvsm:" "vex.m3.w1.nds.l0.p1" "7e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VFRCZPD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "81" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPD-ymmreg.ymmrm256* (make-instance 'x64-asm-instruction
:name "VFRCZPD"
:req-operands (list "ymmreg" "ymmrm256*")
:code-format (list "[rm:" "xop.m9.w0.l1.p0" "81" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPS-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VFRCZPS"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "80" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZPS-ymmreg.ymmrm256* (make-instance 'x64-asm-instruction
:name "VFRCZPS"
:req-operands (list "ymmreg" "ymmrm256*")
:code-format (list "[rm:" "xop.m9.w0.l1.p0" "80" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZSD-xmmreg.xmmrm64* (make-instance 'x64-asm-instruction
:name "VFRCZSD"
:req-operands (list "xmmreg" "xmmrm64*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "83" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VFRCZSS-xmmreg.xmmrm32* (make-instance 'x64-asm-instruction
:name "VFRCZSS"
:req-operands (list "xmmreg" "xmmrm32*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "82" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPCMOV"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "a2" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VPCMOV"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l1.p0" "a2" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMOV"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "xop.m8.w1.nds.l0.p0" "a2" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMOV"
:req-operands (list "ymmreg" "ymmreg*" "ymmreg" "ymmrm256")
:code-format (list "[rvsm:" "xop.m8.w1.nds.l1.p0" "a2" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "cc" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "ce" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "cf" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMUB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "ec" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMUD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "ee" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMUQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "ef" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMUW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "ed" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCOMW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "xop.m8.w0.nds.l0.p0" "cd" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDBD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "c2" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDBQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "c3" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDBW-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDBW"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "c1" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDDQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDDQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "cb" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUBD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "d2" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUBQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "d3" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUBW-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUBW"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "d1" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUDQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUDQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "db" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUWD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUWD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "d6" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDUWQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDUWQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "d7" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDWD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDWD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "c6" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHADDWQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHADDWQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "c7" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBBW-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHSUBBW"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "e1" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBDQ-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHSUBDQ"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "e3" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPHSUBWD-xmmreg.xmmrm128* (make-instance 'x64-asm-instruction
:name "VPHSUBWD"
:req-operands (list "xmmreg" "xmmrm128*")
:code-format (list "[rm:" "xop.m9.w0.l0.p0" "e2" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSDD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "9e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSDQH"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "9f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSDQL"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "97" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSSDD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "8e" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSSDQH"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "8f" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSSDQL"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "87" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSSWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "86" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSSWW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "85" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "96" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMACSWW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "95" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMADCSSWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "a6" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPMADCSWD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "b6" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPPERM"
:req-operands (list "xmmreg" "xmmreg*" "xmmreg" "xmmrm128")
:code-format (list "[rvsm:" "xop.m8.w1.nds.l0.p0" "a3" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg (make-instance 'x64-asm-instruction
:name "VPPERM"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "xmmreg")
:code-format (list "[rvms:" "xop.m8.w0.nds.l0.p0" "a3" "/r" "/is4")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPROTB"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "90" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPROTB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "90" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTB-xmmreg.xmmrm128*.imm8 (make-instance 'x64-asm-instruction
:name "VPROTB"
:req-operands (list "xmmreg" "xmmrm128*" "imm8")
:code-format (list "[rmi:" "xop.m8.w0.l0.p0" "c0" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPROTD"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "92" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPROTD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "92" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTD-xmmreg.xmmrm128*.imm8 (make-instance 'x64-asm-instruction
:name "VPROTD"
:req-operands (list "xmmreg" "xmmrm128*" "imm8")
:code-format (list "[rmi:" "xop.m8.w0.l0.p0" "c2" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPROTQ"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "93" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPROTQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "93" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTQ-xmmreg.xmmrm128*.imm8 (make-instance 'x64-asm-instruction
:name "VPROTQ"
:req-operands (list "xmmreg" "xmmrm128*" "imm8")
:code-format (list "[rmi:" "xop.m8.w0.l0.p0" "c3" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPROTW"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "91" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPROTW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "91" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPROTW-xmmreg.xmmrm128*.imm8 (make-instance 'x64-asm-instruction
:name "VPROTW"
:req-operands (list "xmmreg" "xmmrm128*" "imm8")
:code-format (list "[rmi:" "xop.m8.w0.l0.p0" "c1" "/r" "ib")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHAB"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "98" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHAB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "98" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHAD"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "9a" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHAD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "9a" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHAQ"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "9b" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHAQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "9b" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHAW"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "99" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHAW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHAW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "99" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLB-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHLB"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "94" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLB-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHLB"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "94" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLD-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHLD"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "96" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHLD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "96" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLQ-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHLQ"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "97" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHLQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "97" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLW-xmmreg.xmmrm128*.xmmreg (make-instance 'x64-asm-instruction
:name "VPSHLW"
:req-operands (list "xmmreg" "xmmrm128*" "xmmreg")
:code-format (list "[rmv:" "xop.m9.w0.nds.l0.p0" "95" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VPSHLW-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHLW"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "xop.m9.w1.nds.l0.p0" "95" "/r")
:arch-flags (list "AMD" "SSE5")))

(defparameter VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VMPSADBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "42" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSB-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPABSB"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38" "1c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSW-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPABSW"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38" "1d" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPABSD-ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPABSD"
:req-operands (list "ymmreg" "ymmrm256")
:code-format (list "[rm:" "vex.256.66.0f38" "1e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKSSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKSSWB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "63" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKSSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKSSDW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "6b" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKUSDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKUSDW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "2b" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPACKUSWB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKUSWB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "67" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "fc" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "fd" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "fe" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d4" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "ec" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "ed" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDUSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "dc" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPADDUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDUSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "dd" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPALIGNR"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "0f" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPAND"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "db" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPANDN-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPANDN"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "df" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAVGB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPAVGB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e0" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPAVGW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPAVGW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e3" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg (make-instance 'x64-asm-instruction
:name "VPBLENDVB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "ymmreg")
:code-format (list "[rvms:" "vex.nds.256.66.0f3a" "4c" "/r" "/is4")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPBLENDW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a" "0e" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "74" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "75" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "76" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPEQQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "29" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "64" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "65" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "66" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPCMPGTQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "37" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHADDW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "01" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHADDD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "02" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHADDSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHADDSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "03" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHSUBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "05" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHSUBD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "06" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPHSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPHSUBSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "07" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMADDUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMADDUBSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "04" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMADDWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMADDWD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f5" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "ee" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXSD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3d" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXUB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "de" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXUW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMAXUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXUD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3f" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "38" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "ea" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINSD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINSD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "39" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINUB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "da" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINUW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3a" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMINUD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINUD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "3b" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVMSKB-reg32.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVMSKB"
:req-operands (list "reg32" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "d7" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVMSKB-reg64.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVMSKB"
:req-operands (list "reg64" "ymmreg")
:code-format (list "[rm:" "vex.256.66.0f" "d7" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBW-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXBW"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "20" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBD-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38" "21" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBD-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "21" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBQ-ymmreg.mem32 (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "ymmreg" "mem32")
:code-format (list "[rm:" "vex.256.66.0f38" "22" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXBQ-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "22" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWD-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXWD"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "23" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWQ-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38" "24" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXWQ-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "24" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVSXDQ-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXDQ"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "25" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBW-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXBW"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "30" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBD-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38" "31" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBD-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "31" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBQ-ymmreg.mem32 (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "ymmreg" "mem32")
:code-format (list "[rm:" "vex.256.66.0f38" "32" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXBQ-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "32" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWD-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXWD"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "33" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWQ-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38" "34" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXWQ-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38" "34" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMOVZXDQ-ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXDQ"
:req-operands (list "ymmreg" "xmmrm128")
:code-format (list "[rm:" "vex.256.66.0f38" "35" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "28" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHRSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHRSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "0b" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHUW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHUW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e4" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULHW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e5" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULLW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULLW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d5" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULLD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULLD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "40" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMULUDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULUDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f4" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPOR"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "eb" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSADBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSADBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f6" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSHUFB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "00" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFD-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFD"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f" "70" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFHW-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFHW"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.f3.0f" "70" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSHUFLW-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFLW"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.f2.0f" "70" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGNB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSIGNB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "08" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGNW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSIGNW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "09" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSIGND-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSIGND"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38" "0a" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLDQ"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "73" "/7" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f1" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLW-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "71" "/6" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f2" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLD-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "72" "/6" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f3" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "73" "/6" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e1" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAW-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "71" "/4" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e2" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAD-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "72" "/4" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLDQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLDQ"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "73" "/3" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLW-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d1" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLW-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "71" "/2" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLD-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d2" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLD-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f" "72" "/2" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLQ-ymmreg.ymmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d3" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLQ-ymmreg.ymmreg*.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "ymmreg" "ymmreg*" "imm8")
:code-format (list "[vmi:" "vex.ndd.256.66.0f.wig" "73" "/2" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f8" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "f9" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "fa" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "fb" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e8" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "e9" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBUSB-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBUSB"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d8" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSUBUSW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBUSW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "d9" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "68" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHWD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "69" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "6a" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHQDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "6d" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLBW"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "60" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLWD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "61" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "62" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLQDQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "6c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPXOR-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPXOR"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f" "ef" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VMOVNTDQA-ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VMOVNTDQA"
:req-operands (list "ymmreg" "mem256")
:code-format (list "[rm:" "vex.256.66.0f38" "2a" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSS-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "18" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSS-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "18" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTSD-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "19" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VBROADCASTI128-ymmreg.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTI128"
:req-operands (list "ymmreg" "mem128")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "5a" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPBLENDD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.128.66.0f3a.w0" "02" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPBLENDD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a.w0" "02" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-xmmreg.mem8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg" "mem8")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "78" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "78" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-ymmreg.mem8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg" "mem8")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "78" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTB-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "78" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-xmmreg.mem16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg" "mem16")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "79" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "79" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-ymmreg.mem16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg" "mem16")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "79" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTW-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "79" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-xmmreg.mem32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "xmmreg" "mem32")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "58" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "58" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-ymmreg.mem32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "ymmreg" "mem32")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "58" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTD-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "58" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "xmmreg" "mem64")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "59" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "xmmreg" "xmmreg")
:code-format (list "[rm:" "vex.128.66.0f38.w0" "59" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-ymmreg.mem64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "ymmreg" "mem64")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "59" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPBROADCASTQ-ymmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "ymmreg" "xmmreg")
:code-format (list "[rm:" "vex.256.66.0f38.w0" "59" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "36" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMPD-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERMPD"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a.w1" "01" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMPS-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMPS"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "16" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERMQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERMQ"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rmi:" "vex.256.66.0f3a.w1" "00" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPERM2I128"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a.w0" "46" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VEXTRACTI128-xmmrm128.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI128"
:req-operands (list "xmmrm128" "ymmreg" "imm8")
:code-format (list "[mri:" "vex.256.66.0f3a.w0" "39" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI128"
:req-operands (list "ymmreg" "ymmreg*" "xmmrm128" "imm8")
:code-format (list "[rvmi:" "vex.nds.256.66.0f3a.w0" "38" "/r" "ib")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-xmmreg.xmmreg*.mem128 (make-instance 'x64-asm-instruction
:name "VPMASKMOVD"
:req-operands (list "xmmreg" "xmmreg*" "mem128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "8c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-ymmreg.ymmreg*.mem256 (make-instance 'x64-asm-instruction
:name "VPMASKMOVD"
:req-operands (list "ymmreg" "ymmreg*" "mem256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "8c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-xmmreg.xmmreg*.mem128 (make-instance 'x64-asm-instruction
:name "VPMASKMOVQ"
:req-operands (list "xmmreg" "xmmreg*" "mem128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w1" "8c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-ymmreg.ymmreg*.mem256 (make-instance 'x64-asm-instruction
:name "VPMASKMOVQ"
:req-operands (list "ymmreg" "ymmreg*" "mem256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w1" "8c" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-mem128.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VPMASKMOVD"
:req-operands (list "mem128" "xmmreg*" "xmmreg")
:code-format (list "[mvr:" "vex.nds.128.66.0f38.w0" "8e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVD-mem256.ymmreg*.ymmreg (make-instance 'x64-asm-instruction
:name "VPMASKMOVD"
:req-operands (list "mem256" "ymmreg*" "ymmreg")
:code-format (list "[mvr:" "vex.nds.256.66.0f38.w0" "8e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-mem128.xmmreg*.xmmreg (make-instance 'x64-asm-instruction
:name "VPMASKMOVQ"
:req-operands (list "mem128" "xmmreg*" "xmmreg")
:code-format (list "[mvr:" "vex.nds.128.66.0f38.w1" "8e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPMASKMOVQ-mem256.ymmreg*.ymmreg (make-instance 'x64-asm-instruction
:name "VPMASKMOVQ"
:req-operands (list "mem256" "ymmreg*" "ymmreg")
:code-format (list "[mvr:" "vex.nds.256.66.0f38.w1" "8e" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLVD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "47" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLVQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w1" "47" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSLLVD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "47" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSLLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSLLVQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w1" "47" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAVD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "46" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRAVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSRAVD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "46" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVD-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLVD"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w0" "45" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVQ-xmmreg.xmmreg*.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLVQ"
:req-operands (list "xmmreg" "xmmreg*" "xmmrm128")
:code-format (list "[rvm:" "vex.nds.128.66.0f38.w1" "45" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVD-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSRLVD"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w0" "45" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPSRLVQ-ymmreg.ymmreg*.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSRLVQ"
:req-operands (list "ymmreg" "ymmreg*" "ymmrm256")
:code-format (list "[rvm:" "vex.nds.256.66.0f38.w1" "45" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPD-xmmreg.xmem64.xmmreg (make-instance 'x64-asm-instruction
:name "VGATHERDPD"
:req-operands (list "xmmreg" "xmem64" "xmmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.128.66.0f38.w1" "92" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPD-xmmreg.xmem64.xmmreg (make-instance 'x64-asm-instruction
:name "VGATHERQPD"
:req-operands (list "xmmreg" "xmem64" "xmmreg")
:code-format (list "[rmv:" "vm64x" "vex.dds.128.66.0f38.w1" "93" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPD-ymmreg.xmem64.ymmreg (make-instance 'x64-asm-instruction
:name "VGATHERDPD"
:req-operands (list "ymmreg" "xmem64" "ymmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.256.66.0f38.w1" "92" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPD-ymmreg.ymem64.ymmreg (make-instance 'x64-asm-instruction
:name "VGATHERQPD"
:req-operands (list "ymmreg" "ymem64" "ymmreg")
:code-format (list "[rmv:" "vm64y" "vex.dds.256.66.0f38.w1" "93" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPS-xmmreg.xmem32.xmmreg (make-instance 'x64-asm-instruction
:name "VGATHERDPS"
:req-operands (list "xmmreg" "xmem32" "xmmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.128.66.0f38.w0" "92" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPS-xmmreg.xmem32.xmmreg (make-instance 'x64-asm-instruction
:name "VGATHERQPS"
:req-operands (list "xmmreg" "xmem32" "xmmreg")
:code-format (list "[rmv:" "vm64x" "vex.dds.128.66.0f38.w0" "93" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERDPS-ymmreg.ymem32.ymmreg (make-instance 'x64-asm-instruction
:name "VGATHERDPS"
:req-operands (list "ymmreg" "ymem32" "ymmreg")
:code-format (list "[rmv:" "vm32y" "vex.dds.256.66.0f38.w0" "92" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VGATHERQPS-xmmreg.ymem32.xmmreg (make-instance 'x64-asm-instruction
:name "VGATHERQPS"
:req-operands (list "xmmreg" "ymem32" "xmmreg")
:code-format (list "[rmv:" "vm64y" "vex.dds.256.66.0f38.w0" "93" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDD-xmmreg.xmem32.xmmreg (make-instance 'x64-asm-instruction
:name "VPGATHERDD"
:req-operands (list "xmmreg" "xmem32" "xmmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.128.66.0f38.w0" "90" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQD-xmmreg.xmem32.xmmreg (make-instance 'x64-asm-instruction
:name "VPGATHERQD"
:req-operands (list "xmmreg" "xmem32" "xmmreg")
:code-format (list "[rmv:" "vm64x" "vex.dds.128.66.0f38.w0" "91" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDD-ymmreg.ymem32.ymmreg (make-instance 'x64-asm-instruction
:name "VPGATHERDD"
:req-operands (list "ymmreg" "ymem32" "ymmreg")
:code-format (list "[rmv:" "vm32y" "vex.dds.256.66.0f38.w0" "90" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQD-xmmreg.ymem32.xmmreg (make-instance 'x64-asm-instruction
:name "VPGATHERQD"
:req-operands (list "xmmreg" "ymem32" "xmmreg")
:code-format (list "[rmv:" "vm64y" "vex.dds.256.66.0f38.w0" "91" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDQ-xmmreg.xmem64.xmmreg (make-instance 'x64-asm-instruction
:name "VPGATHERDQ"
:req-operands (list "xmmreg" "xmem64" "xmmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.128.66.0f38.w1" "90" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQQ-xmmreg.xmem64.xmmreg (make-instance 'x64-asm-instruction
:name "VPGATHERQQ"
:req-operands (list "xmmreg" "xmem64" "xmmreg")
:code-format (list "[rmv:" "vm64x" "vex.dds.128.66.0f38.w1" "91" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERDQ-ymmreg.xmem64.ymmreg (make-instance 'x64-asm-instruction
:name "VPGATHERDQ"
:req-operands (list "ymmreg" "xmem64" "ymmreg")
:code-format (list "[rmv:" "vm32x" "vex.dds.256.66.0f38.w1" "90" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter VPGATHERQQ-ymmreg.ymem64.ymmreg (make-instance 'x64-asm-instruction
:name "VPGATHERQQ"
:req-operands (list "ymmreg" "ymem64" "ymmreg")
:code-format (list "[rmv:" "vm64y" "vex.dds.256.66.0f38.w1" "91" "/r")
:arch-flags (list "FUTURE" "AVX2")))

(defparameter XABORT-imm (make-instance 'x64-asm-instruction
:name "XABORT"
:req-operands (list "imm")
:code-format (list "[i:" "c6" "f8" "ib")
:arch-flags (list "FUTURE" "RTM")))

(defparameter XABORT-imm8 (make-instance 'x64-asm-instruction
:name "XABORT"
:req-operands (list "imm8")
:code-format (list "[i:" "c6" "f8" "ib")
:arch-flags (list "FUTURE" "RTM")))

(defparameter XBEGIN-imm (make-instance 'x64-asm-instruction
:name "XBEGIN"
:req-operands (list "imm")
:code-format (list "[i:" "odf" "c7" "f8" "rel")
:arch-flags (list "FUTURE" "RTM")))

(defparameter XBEGIN-imm-near (make-instance 'x64-asm-instruction
:name "XBEGIN"
:req-operands (list "imm|near")
:code-format (list "[i:" "odf" "c7" "f8" "rel")
:arch-flags (list "FUTURE" "RTM" "ND")))

(defparameter XBEGIN-imm64 (make-instance 'x64-asm-instruction
:name "XBEGIN"
:req-operands (list "imm64")
:code-format (list "[i:" "o64nw" "c7" "f8" "rel")
:arch-flags (list "FUTURE" "RTM" "LONG")))

(defparameter XBEGIN-imm64-near (make-instance 'x64-asm-instruction
:name "XBEGIN"
:req-operands (list "imm64|near")
:code-format (list "[i:" "o64nw" "c7" "f8" "rel")
:arch-flags (list "FUTURE" "RTM" "LONG" "ND")))

(defparameter XEND-void (make-instance 'x64-asm-instruction
:name "XEND"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d5")
:arch-flags (list "FUTURE" "RTM")))

(defparameter XTEST-void (make-instance 'x64-asm-instruction
:name "XTEST"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "d6")
:arch-flags (list "FUTURE" "HLE" "RTM")))

(defparameter ANDN-reg32.reg32.rm32-rv (make-instance 'x64-asm-instruction
:name "ANDN"
:req-operands (list "reg32" "reg32" "rm32")
:code-format (list "[rvm:" "vex.nds.lz.0f38.w0" "f2" "/r")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter ANDN-reg64.reg64.rm64-rv (make-instance 'x64-asm-instruction
:name "ANDN"
:req-operands (list "reg64" "reg64" "rm64")
:code-format (list "[rvm:" "vex.nds.lz.0f38.w1" "f2" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BEXTR-reg32.rm32.reg32 (make-instance 'x64-asm-instruction
:name "BEXTR"
:req-operands (list "reg32" "rm32" "reg32")
:code-format (list "[rmv:" "vex.nds.lz.0f38.w0" "f7" "/r")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BEXTR-reg64.rm64.reg64 (make-instance 'x64-asm-instruction
:name "BEXTR"
:req-operands (list "reg64" "rm64" "reg64")
:code-format (list "[rmv:" "vex.nds.lz.0f38.w1" "f7" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BEXTR-reg32.rm32.imm32 (make-instance 'x64-asm-instruction
:name "BEXTR"
:req-operands (list "reg32" "rm32" "imm32")
:code-format (list "[rmi:" "xop.m10.lz.w0" "10" "/r" "id")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BEXTR-reg64.rm64.imm32 (make-instance 'x64-asm-instruction
:name "BEXTR"
:req-operands (list "reg64" "rm64" "imm32")
:code-format (list "[rmi:" "xop.m10.lz.w1" "10" "/r" "id")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCI-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLCI"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "02" "/6")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCI-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLCI"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "02" "/6")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCIC-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLCIC"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/5")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCIC-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLCIC"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/5")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSI-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLSI"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w0" "f3" "/3")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSI-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLSI"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w1" "f3" "/3")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLSIC-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLSIC"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/6")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLSIC-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLSIC"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/6")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCFILL-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLCFILL"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/1")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCFILL-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLCFILL"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/1")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSFILL-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLSFILL"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/2")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLSFILL-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLSFILL"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/2")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLCMSK-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLCMSK"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "02" "/1")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCMSK-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLCMSK"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "02" "/1")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BLSMSK-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLSMSK"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w0" "f3" "/2")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSMSK-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLSMSK"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w1" "f3" "/2")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLSR-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLSR"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w0" "f3" "/1")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter BLSR-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLSR"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "vex.ndd.lz.0f38.w1" "f3" "/1")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter BLCS-reg32.rm32 (make-instance 'x64-asm-instruction
:name "BLCS"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/3")
:arch-flags (list "FUTURE" "TBM")))

(defparameter BLCS-reg64.rm64 (make-instance 'x64-asm-instruction
:name "BLCS"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/3")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter BZHI-reg32.rm32.reg32 (make-instance 'x64-asm-instruction
:name "BZHI"
:req-operands (list "reg32" "rm32" "reg32")
:code-format (list "[rmv:" "vex.nds.lz.0f38.w0" "f5" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter BZHI-reg64.rm64.reg64 (make-instance 'x64-asm-instruction
:name "BZHI"
:req-operands (list "reg64" "rm64" "reg64")
:code-format (list "[rmv:" "vex.nds.lz.0f38.w1" "f5" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter MULX-reg32.reg32.rm32-rv (make-instance 'x64-asm-instruction
:name "MULX"
:req-operands (list "reg32" "reg32" "rm32")
:code-format (list "[rvm:" "vex.ndd.lz.f2.0f38.w0" "f6" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter MULX-reg64.reg64.rm64-rv (make-instance 'x64-asm-instruction
:name "MULX"
:req-operands (list "reg64" "reg64" "rm64")
:code-format (list "[rvm:" "vex.ndd.lz.f2.0f38.w1" "f6" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter PDEP-reg32.reg32.rm32-rv (make-instance 'x64-asm-instruction
:name "PDEP"
:req-operands (list "reg32" "reg32" "rm32")
:code-format (list "[rvm:" "vex.nds.lz.f2.0f38.w0" "f5" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter PDEP-reg64.reg64.rm64-rv (make-instance 'x64-asm-instruction
:name "PDEP"
:req-operands (list "reg64" "reg64" "rm64")
:code-format (list "[rvm:" "vex.nds.lz.f2.0f38.w1" "f5" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter PEXT-reg32.reg32.rm32-rv (make-instance 'x64-asm-instruction
:name "PEXT"
:req-operands (list "reg32" "reg32" "rm32")
:code-format (list "[rvm:" "vex.nds.lz.f3.0f38.w0" "f5" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter PEXT-reg64.reg64.rm64-rv (make-instance 'x64-asm-instruction
:name "PEXT"
:req-operands (list "reg64" "reg64" "rm64")
:code-format (list "[rvm:" "vex.nds.lz.f3.0f38.w1" "f5" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter RORX-reg32.rm32.imm8 (make-instance 'x64-asm-instruction
:name "RORX"
:req-operands (list "reg32" "rm32" "imm8")
:code-format (list "[rmi:" "vex.lz.f2.0f3a.w0" "f0" "/r" "ib")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter RORX-reg64.rm64.imm8 (make-instance 'x64-asm-instruction
:name "RORX"
:req-operands (list "reg64" "rm64" "imm8")
:code-format (list "[rmi:" "vex.lz.f2.0f3a.w1" "f0" "/r" "ib")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SARX-reg32.rm32.reg32 (make-instance 'x64-asm-instruction
:name "SARX"
:req-operands (list "reg32" "rm32" "reg32")
:code-format (list "[rmv:" "vex.nds.lz.f3.0f38.w0" "f7" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SARX-reg64.rm64.reg64 (make-instance 'x64-asm-instruction
:name "SARX"
:req-operands (list "reg64" "rm64" "reg64")
:code-format (list "[rmv:" "vex.nds.lz.f3.0f38.w1" "f7" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SHLX-reg32.rm32.reg32 (make-instance 'x64-asm-instruction
:name "SHLX"
:req-operands (list "reg32" "rm32" "reg32")
:code-format (list "[rmv:" "vex.nds.lz.66.0f38.w0" "f7" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SHLX-reg64.rm64.reg64 (make-instance 'x64-asm-instruction
:name "SHLX"
:req-operands (list "reg64" "rm64" "reg64")
:code-format (list "[rmv:" "vex.nds.lz.66.0f38.w1" "f7" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter SHRX-reg32.rm32.reg32 (make-instance 'x64-asm-instruction
:name "SHRX"
:req-operands (list "reg32" "rm32" "reg32")
:code-format (list "[rmv:" "vex.nds.lz.f2.0f38.w0" "f7" "/r")
:arch-flags (list "FUTURE" "BMI2")))

(defparameter SHRX-reg64.rm64.reg64 (make-instance 'x64-asm-instruction
:name "SHRX"
:req-operands (list "reg64" "rm64" "reg64")
:code-format (list "[rmv:" "vex.nds.lz.f2.0f38.w1" "f7" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI2")))

(defparameter TZCNT-reg16.rm16 (make-instance 'x64-asm-instruction
:name "TZCNT"
:req-operands (list "reg16" "rm16")
:code-format (list "[rm:" "o16" "f3i" "0f" "bc" "/r")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter TZCNT-reg32.rm32 (make-instance 'x64-asm-instruction
:name "TZCNT"
:req-operands (list "reg32" "rm32")
:code-format (list "[rm:" "o32" "f3i" "0f" "bc" "/r")
:arch-flags (list "FUTURE" "BMI1")))

(defparameter TZCNT-reg64.rm64 (make-instance 'x64-asm-instruction
:name "TZCNT"
:req-operands (list "reg64" "rm64")
:code-format (list "[rm:" "o64" "f3i" "0f" "bc" "/r")
:arch-flags (list "LONG" "FUTURE" "BMI1")))

(defparameter TZMSK-reg32.rm32 (make-instance 'x64-asm-instruction
:name "TZMSK"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/4")
:arch-flags (list "FUTURE" "TBM")))

(defparameter TZMSK-reg64.rm64 (make-instance 'x64-asm-instruction
:name "TZMSK"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/4")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter T1MSKC-reg32.rm32 (make-instance 'x64-asm-instruction
:name "T1MSKC"
:req-operands (list "reg32" "rm32")
:code-format (list "[vm:" "xop.ndd.lz.m9.w0" "01" "/7")
:arch-flags (list "FUTURE" "TBM")))

(defparameter T1MSKC-reg64.rm64 (make-instance 'x64-asm-instruction
:name "T1MSKC"
:req-operands (list "reg64" "rm64")
:code-format (list "[vm:" "xop.ndd.lz.m9.w1" "01" "/7")
:arch-flags (list "LONG" "FUTURE" "TBM")))

(defparameter PREFETCHWT1-mem8 (make-instance 'x64-asm-instruction
:name "PREFETCHWT1"
:req-operands (list "mem8")
:code-format (list "[m:" "0f" "0d" "/2" "")
:arch-flags (list "PREFETCHWT1" "FUTURE")))

(defparameter BNDMK-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDMK"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "f3" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDCL-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDCL"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "f3" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCL-bndreg.reg64 (make-instance 'x64-asm-instruction
:name "BNDCL"
:req-operands (list "bndreg" "reg64")
:code-format (list "[rm:" "o64nw" "f3" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDCU-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDCU"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "f2" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCU-bndreg.reg64 (make-instance 'x64-asm-instruction
:name "BNDCU"
:req-operands (list "bndreg" "reg64")
:code-format (list "[rm:" "o64nw" "f2" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDCN-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDCN"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "f2" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDCN-bndreg.reg64 (make-instance 'x64-asm-instruction
:name "BNDCN"
:req-operands (list "bndreg" "reg64")
:code-format (list "[rm:" "o64nw" "f2" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "LONG" "FUTURE")))

(defparameter BNDMOV-bndreg.bndreg (make-instance 'x64-asm-instruction
:name "BNDMOV"
:req-operands (list "bndreg" "bndreg")
:code-format (list "[rm:" "66" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDMOV"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "66" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-bndreg.bndreg (make-instance 'x64-asm-instruction
:name "BNDMOV"
:req-operands (list "bndreg" "bndreg")
:code-format (list "[mr:" "66" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDMOV-mem.bndreg (make-instance 'x64-asm-instruction
:name "BNDMOV"
:req-operands (list "mem" "bndreg")
:code-format (list "[mr:" "66" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "FUTURE")))

(defparameter BNDLDX-bndreg.mem (make-instance 'x64-asm-instruction
:name "BNDLDX"
:req-operands (list "bndreg" "mem")
:code-format (list "[rm:" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDLDX-bndreg.mem.reg64 (make-instance 'x64-asm-instruction
:name "BNDLDX"
:req-operands (list "bndreg" "mem" "reg64")
:code-format (list "[rmx:" "0f" "1a" "/r" "")
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter BNDSTX-mem.bndreg (make-instance 'x64-asm-instruction
:name "BNDSTX"
:req-operands (list "mem" "bndreg")
:code-format (list "[mr:" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "MIB" "FUTURE")))

(defparameter BNDSTX-mem.reg64.bndreg (make-instance 'x64-asm-instruction
:name "BNDSTX"
:req-operands (list "mem" "reg64" "bndreg")
:code-format (list "[mxr:" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter BNDSTX-mem.bndreg.reg64 (make-instance 'x64-asm-instruction
:name "BNDSTX"
:req-operands (list "mem" "bndreg" "reg64")
:code-format (list "[mrx:" "0f" "1b" "/r" "")
:arch-flags (list "MPX" "MIB" "LONG" "FUTURE")))

(defparameter KADDB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KADDB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "4a" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KADDD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KADDD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "4a" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KADDQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KADDQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "4a" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KADDW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KADDW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "4a" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "41" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "41" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDNB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDNB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "42" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDND-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDND"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "42" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDNQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDNQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "42" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDNW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDNW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "42" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "41" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KANDW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KANDW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "41" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVB-kreg.krm8 (make-instance 'x64-asm-instruction
:name "KMOVB"
:req-operands (list "kreg" "krm8")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "90" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVB-mem8.kreg (make-instance 'x64-asm-instruction
:name "KMOVB"
:req-operands (list "mem8" "kreg")
:code-format (list "[mr:" "vex.l0.66.0f.w0" "91" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVB-kreg.reg32 (make-instance 'x64-asm-instruction
:name "KMOVB"
:req-operands (list "kreg" "reg32")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "92" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVB-reg32.kreg (make-instance 'x64-asm-instruction
:name "KMOVB"
:req-operands (list "reg32" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "93" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVD-kreg.krm32 (make-instance 'x64-asm-instruction
:name "KMOVD"
:req-operands (list "kreg" "krm32")
:code-format (list "[rm:" "vex.l0.66.0f.w1" "90" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVD-mem32.kreg (make-instance 'x64-asm-instruction
:name "KMOVD"
:req-operands (list "mem32" "kreg")
:code-format (list "[mr:" "vex.l0.66.0f.w1" "91" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVD-kreg.reg32 (make-instance 'x64-asm-instruction
:name "KMOVD"
:req-operands (list "kreg" "reg32")
:code-format (list "[rm:" "vex.l0.f2.0f.w0" "92" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVD-reg32.kreg (make-instance 'x64-asm-instruction
:name "KMOVD"
:req-operands (list "reg32" "kreg")
:code-format (list "[rm:" "vex.l0.f2.0f.w0" "93" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-kreg.krm64 (make-instance 'x64-asm-instruction
:name "KMOVQ"
:req-operands (list "kreg" "krm64")
:code-format (list "[rm:" "vex.l0.0f.w1" "90" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-mem64.kreg (make-instance 'x64-asm-instruction
:name "KMOVQ"
:req-operands (list "mem64" "kreg")
:code-format (list "[mr:" "vex.l0.0f.w1" "91" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-kreg.reg64 (make-instance 'x64-asm-instruction
:name "KMOVQ"
:req-operands (list "kreg" "reg64")
:code-format (list "[rm:" "vex.l0.f2.0f.w1" "92" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVQ-reg64.kreg (make-instance 'x64-asm-instruction
:name "KMOVQ"
:req-operands (list "reg64" "kreg")
:code-format (list "[rm:" "vex.l0.f2.0f.w1" "93" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVW-kreg.krm16 (make-instance 'x64-asm-instruction
:name "KMOVW"
:req-operands (list "kreg" "krm16")
:code-format (list "[rm:" "vex.l0.0f.w0" "90" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVW-mem16.kreg (make-instance 'x64-asm-instruction
:name "KMOVW"
:req-operands (list "mem16" "kreg")
:code-format (list "[mr:" "vex.l0.0f.w0" "91" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVW-kreg.reg32 (make-instance 'x64-asm-instruction
:name "KMOVW"
:req-operands (list "kreg" "reg32")
:code-format (list "[rm:" "vex.l0.0f.w0" "92" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KMOVW-reg32.kreg (make-instance 'x64-asm-instruction
:name "KMOVW"
:req-operands (list "reg32" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w0" "93" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KNOTB-kreg.kreg (make-instance 'x64-asm-instruction
:name "KNOTB"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "44" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KNOTD-kreg.kreg (make-instance 'x64-asm-instruction
:name "KNOTD"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w1" "44" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KNOTQ-kreg.kreg (make-instance 'x64-asm-instruction
:name "KNOTQ"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w1" "44" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KNOTW-kreg.kreg (make-instance 'x64-asm-instruction
:name "KNOTW"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w0" "44" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KORB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "45" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KORD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "45" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KORQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "45" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORTESTB-kreg.kreg (make-instance 'x64-asm-instruction
:name "KORTESTB"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "98" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORTESTD-kreg.kreg (make-instance 'x64-asm-instruction
:name "KORTESTD"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w1" "98" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORTESTQ-kreg.kreg (make-instance 'x64-asm-instruction
:name "KORTESTQ"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w1" "98" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORTESTW-kreg.kreg (make-instance 'x64-asm-instruction
:name "KORTESTW"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w0" "98" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KORW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KORW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "45" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLB-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTLB"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w0" "32" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLD-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTLD"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w0" "33" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLQ-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTLQ"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w1" "33" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTLW-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTLW"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w1" "32" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRB-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTRB"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w0" "30" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRD-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTRD"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w0" "31" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRQ-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTRQ"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w1" "31" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KSHIFTRW-kreg.kreg.imm8 (make-instance 'x64-asm-instruction
:name "KSHIFTRW"
:req-operands (list "kreg" "kreg" "imm8")
:code-format (list "[rmi:" "vex.l0.66.0f3a.w1" "30" "/r" "ib" "")
:arch-flags (list "FUTURE")))

(defparameter KTESTB-kreg.kreg (make-instance 'x64-asm-instruction
:name "KTESTB"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w0" "99" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KTESTD-kreg.kreg (make-instance 'x64-asm-instruction
:name "KTESTD"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.66.0f.w1" "99" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KTESTQ-kreg.kreg (make-instance 'x64-asm-instruction
:name "KTESTQ"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w1" "99" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KTESTW-kreg.kreg (make-instance 'x64-asm-instruction
:name "KTESTW"
:req-operands (list "kreg" "kreg")
:code-format (list "[rm:" "vex.l0.0f.w0" "99" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KUNPCKBW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KUNPCKBW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "4b" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KUNPCKDQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KUNPCKDQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "4b" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KUNPCKWD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KUNPCKWD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "4b" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXNORB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXNORB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "46" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXNORD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXNORD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "46" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXNORQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXNORQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "46" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXNORW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXNORW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "46" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXORB-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXORB"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w0" "47" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXORD-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXORD"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.66.0f.w1" "47" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXORQ-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXORQ"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w1" "47" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter KXORW-kreg.kreg.kreg (make-instance 'x64-asm-instruction
:name "KXORW"
:req-operands (list "kreg" "kreg" "kreg")
:code-format (list "[rvm:" "vex.nds.l1.0f.w0" "47" "/r" "")
:arch-flags (list "FUTURE")))

(defparameter SHA1MSG1-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SHA1MSG1"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "0f" "38" "c9" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1MSG2-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SHA1MSG2"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "0f" "38" "ca" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1NEXTE-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SHA1NEXTE"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "0f" "38" "c8" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA1RNDS4-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "SHA1RNDS4"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rmi:" "0f" "3a" "cc" "/r" "ib" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256MSG1-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SHA256MSG1"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "0f" "38" "cc" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256MSG2-xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "SHA256MSG2"
:req-operands (list "xmmreg" "xmmrm128")
:code-format (list "[rm:" "0f" "38" "cd" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter SHA256RNDS2-xmmreg.xmmrm128.xmm0 (make-instance 'x64-asm-instruction
:name "SHA256RNDS2"
:req-operands (list "xmmreg" "xmmrm128" "xmm0")
:code-format (list "[rm-:" "0f" "38" "cb" "/r" "")
:arch-flags (list "SHA" "FUTURE")))

(defparameter VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VADDPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VADDPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VADDPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VADDPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VADDPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VADDPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VADDSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VADDSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VALIGND"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "03" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VALIGND"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "03" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VALIGND"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "03" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VALIGNQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "03" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VALIGNQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "03" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VALIGNQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "03" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VANDNPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "55" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VANDNPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "55" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VANDNPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "55" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VANDNPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "55" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VANDNPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "55" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VANDNPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "55" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VANDPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "54" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VANDPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "54" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VANDPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "54" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VANDPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "54" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VANDPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "54" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VANDPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "54" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VBLENDMPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VBLENDMPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VBLENDMPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "65" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VBLENDMPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VBLENDMPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VBLENDMPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "65" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VBROADCASTF32X2"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:t2:" "evex.256.66.0f38.w0" "19" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VBROADCASTF32X2"
:req-operands (list "zmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:t2:" "evex.512.66.0f38.w0" "19" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF32X4-ymmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTF32X4"
:req-operands (list "ymmreg|mask|z" "mem128")
:code-format (list "[rm:t4:" "evex.256.66.0f38.w0" "1a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X4-zmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTF32X4"
:req-operands (list "zmmreg|mask|z" "mem128")
:code-format (list "[rm:t4:" "evex.512.66.0f38.w0" "1a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTF32X8-zmmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VBROADCASTF32X8"
:req-operands (list "zmmreg|mask|z" "mem256")
:code-format (list "[rm:t8:" "evex.512.66.0f38.w0" "1b" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X2-ymmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTF64X2"
:req-operands (list "ymmreg|mask|z" "mem128")
:code-format (list "[rm:t2:" "evex.256.66.0f38.w1" "1a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X2-zmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTF64X2"
:req-operands (list "zmmreg|mask|z" "mem128")
:code-format (list "[rm:t2:" "evex.512.66.0f38.w1" "1a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTF64X4-zmmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VBROADCASTF64X4"
:req-operands (list "zmmreg|mask|z" "mem256")
:code-format (list "[rm:t4:" "evex.512.66.0f38.w1" "1b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X2-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X2"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:t2:" "evex.128.66.0f38.w0" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X2-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X2"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:t2:" "evex.256.66.0f38.w0" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X2-zmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X2"
:req-operands (list "zmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:t2:" "evex.512.66.0f38.w0" "59" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI32X4-ymmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X4"
:req-operands (list "ymmreg|mask|z" "mem128")
:code-format (list "[rm:t4:" "evex.256.66.0f38.w0" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X4-zmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X4"
:req-operands (list "zmmreg|mask|z" "mem128")
:code-format (list "[rm:t4:" "evex.512.66.0f38.w0" "5a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTI32X8-zmmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VBROADCASTI32X8"
:req-operands (list "zmmreg|mask|z" "mem256")
:code-format (list "[rm:t8:" "evex.512.66.0f38.w0" "5b" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X2-ymmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTI64X2"
:req-operands (list "ymmreg|mask|z" "mem128")
:code-format (list "[rm:t2:" "evex.256.66.0f38.w1" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X2-zmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VBROADCASTI64X2"
:req-operands (list "zmmreg|mask|z" "mem128")
:code-format (list "[rm:t2:" "evex.512.66.0f38.w1" "5a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VBROADCASTI64X4-zmmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VBROADCASTI64X4"
:req-operands (list "zmmreg|mask|z" "mem256")
:code-format (list "[rm:t4:" "evex.512.66.0f38.w1" "5b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-ymmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "ymmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "19" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-zmmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "zmmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "19" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-ymmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "ymmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.256.66.0f38.w1" "19" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSD-zmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSD"
:req-operands (list "zmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.512.66.0f38.w1" "19" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-xmmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "xmmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-ymmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "ymmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-zmmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "zmmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-ymmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "ymmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VBROADCASTSS-zmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VBROADCASTSS"
:req-operands (list "zmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "18" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f.w1" "c2" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f.w1" "c2" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f.w1" "c2" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPS"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.0f.w0" "c2" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPS"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.0f.w0" "c2" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCMPPS"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.0f.w0" "c2" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCMPSD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.f2.0f.w1" "c2" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCMPSS"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.f3.0f.w0" "c2" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMISD-xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VCOMISD"
:req-operands (list "xmmreg" "xmmrm64|sae")
:code-format (list "[rm:t1s:" "evex.128.66.0f.w1" "2f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMISS-xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCOMISS"
:req-operands (list "xmmreg" "xmmrm32|sae")
:code-format (list "[rm:t1s:" "evex.128.0f.w0" "2f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:t1s:" "evex.256.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:t1s:" "evex.512.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f38.w1" "8a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:t1s:" "evex.256.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:t1s:" "evex.512.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCOMPRESSPS-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VCOMPRESSPS"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f38.w0" "8a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PD"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.f3.0f.w0" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PD"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.f3.0f.w0" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-asm-instruction
:name "VCVTDQ2PD"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|er")
:code-format (list "[rm:hv:" "evex.512.f3.0f.w0" "e6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTDQ2PS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VCVTDQ2PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|er")
:code-format (list "[rm:fv:" "evex.512.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.f2.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.f2.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTPD2DQ"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.f2.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTPD2PS"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "5a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2QQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2QQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTPD2QQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "7b" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2UDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2UDQ"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTPD2UDQ"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2UQQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTPD2UQQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTPD2UQQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPH2PS-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VCVTPH2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPH2PS-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VCVTPH2PS"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae (make-instance 'x64-asm-instruction
:name "VCVTPH2PS"
:req-operands (list "zmmreg|mask|z" "ymmrm256|sae")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2DQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2DQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VCVTPS2DQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|er")
:code-format (list "[rm:fv:" "evex.512.66.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2PD"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.0f.w0" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2PD"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.0f.w0" "5a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-asm-instruction
:name "VCVTPS2PD"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|sae")
:code-format (list "[rm:hv:" "evex.512.0f.w0" "5a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "xmmreg|mask|z" "xmmreg" "imm8")
:code-format (list "[mri:hvm:" "evex.128.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "xmmreg|mask|z" "ymmreg" "imm8")
:code-format (list "[mri:hvm:" "evex.256.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "ymmreg|mask|z" "zmmreg|sae" "imm8")
:code-format (list "[mri:hvm:" "evex.512.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem64-mask.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "mem64|mask" "xmmreg" "imm8")
:code-format (list "[mri:hvm:" "evex.128.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem128-mask.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "mem128|mask" "ymmreg" "imm8")
:code-format (list "[mri:hvm:" "evex.256.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2PH-mem256-mask.zmmreg-sae.imm8 (make-instance 'x64-asm-instruction
:name "VCVTPS2PH"
:req-operands (list "mem256|mask" "zmmreg|sae" "imm8")
:code-format (list "[mri:hvm:" "evex.512.66.0f3a.w0" "1d" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2QQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.66.0f.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2QQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.66.0f.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-asm-instruction
:name "VCVTPS2QQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|er")
:code-format (list "[rm:hv:" "evex.512.66.0f.w0" "7b" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2UDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2UDQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VCVTPS2UDQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|er")
:code-format (list "[rm:fv:" "evex.512.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2UQQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.66.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTPS2UQQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.66.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-asm-instruction
:name "VCVTPS2UQQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|er")
:code-format (list "[rm:hv:" "evex.512.66.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTQQ2PD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.f3.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTQQ2PD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.f3.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTQQ2PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.f3.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTQQ2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.0f.w1" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTQQ2PS"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.0f.w1" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTQQ2PS"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.0f.w1" "5b" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTSD2SI-reg32.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VCVTSD2SI"
:req-operands (list "reg32" "xmmrm64|er")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w0" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2SI-reg64.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VCVTSD2SI"
:req-operands (list "reg64" "xmmrm64|er")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w1" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VCVTSD2SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "5a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2USI-reg32.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VCVTSD2USI"
:req-operands (list "reg32" "xmmrm64|er")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSD2USI-reg64.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VCVTSD2USI"
:req-operands (list "reg64" "xmmrm64|er")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SD"
:req-operands (list "xmmreg" "xmmreg|er" "rm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w0" "2a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x64-asm-instruction
:name "VCVTSI2SD"
:req-operands (list "xmmreg" "xmmreg|er" "rm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "2a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x64-asm-instruction
:name "VCVTSI2SS"
:req-operands (list "xmmreg" "xmmreg|er" "rm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "2a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x64-asm-instruction
:name "VCVTSI2SS"
:req-operands (list "xmmreg" "xmmreg|er" "rm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w1" "2a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCVTSS2SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "5a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SI-reg32.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VCVTSS2SI"
:req-operands (list "reg32" "xmmrm32|er")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w0" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2SI-reg64.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VCVTSS2SI"
:req-operands (list "reg64" "xmmrm32|er")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w1" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2USI-reg32.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VCVTSS2USI"
:req-operands (list "reg32" "xmmrm32|er")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w0" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTSS2USI-reg64.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VCVTSS2USI"
:req-operands (list "reg64" "xmmrm32|er")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w1" "79" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VCVTTPD2DQ"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "e6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2QQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2QQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VCVTTPD2QQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2UDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2UDQ"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VCVTTPD2UDQ"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2UQQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTTPD2UQQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VCVTTPD2UQQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2DQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.f3.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2DQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.f3.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VCVTTPS2DQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.f3.0f.w0" "5b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2QQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.66.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2QQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.66.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-asm-instruction
:name "VCVTTPS2QQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|sae")
:code-format (list "[rm:hv:" "evex.512.66.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2UDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2UDQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VCVTTPS2UDQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2UQQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.66.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTTPS2UQQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.66.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae (make-instance 'x64-asm-instruction
:name "VCVTTPS2UQQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|sae")
:code-format (list "[rm:hv:" "evex.512.66.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTTSD2SI-reg32.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VCVTTSD2SI"
:req-operands (list "reg32" "xmmrm64|sae")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w0" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2SI-reg64.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VCVTTSD2SI"
:req-operands (list "reg64" "xmmrm64|sae")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w1" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2USI-reg32.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VCVTTSD2USI"
:req-operands (list "reg32" "xmmrm64|sae")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSD2USI-reg64.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VCVTTSD2USI"
:req-operands (list "reg64" "xmmrm64|sae")
:code-format (list "[rm:t1f64:" "evex.128.f2.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2SI-reg32.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCVTTSS2SI"
:req-operands (list "reg32" "xmmrm32|sae")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w0" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2SI-reg64.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCVTTSS2SI"
:req-operands (list "reg64" "xmmrm32|sae")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w1" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2USI-reg32.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCVTTSS2USI"
:req-operands (list "reg32" "xmmrm32|sae")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w0" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTTSS2USI-reg64.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VCVTTSS2USI"
:req-operands (list "reg64" "xmmrm32|sae")
:code-format (list "[rm:t1f32:" "evex.128.f3.0f.w1" "78" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32 (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PD"
:req-operands (list "xmmreg|mask|z" "xmmrm64|b32")
:code-format (list "[rm:hv:" "evex.128.f3.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PD"
:req-operands (list "ymmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:hv:" "evex.256.f3.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PD"
:req-operands (list "zmmreg|mask|z" "ymmrm256|b32|er")
:code-format (list "[rm:hv:" "evex.512.f3.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.f2.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.f2.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VCVTUDQ2PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|er")
:code-format (list "[rm:fv:" "evex.512.f2.0f.w0" "7a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.f3.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.f3.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.f3.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.f2.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PS"
:req-operands (list "xmmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.f2.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VCVTUQQ2PS"
:req-operands (list "ymmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.f2.0f.w1" "7a" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VCVTUSI2SD-xmmreg.xmmreg-er.rm32 (make-instance 'x64-asm-instruction
:name "VCVTUSI2SD"
:req-operands (list "xmmreg" "xmmreg|er" "rm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w0" "7b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SD-xmmreg.xmmreg-er.rm64 (make-instance 'x64-asm-instruction
:name "VCVTUSI2SD"
:req-operands (list "xmmreg" "xmmreg|er" "rm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "7b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SS-xmmreg.xmmreg-er.rm32 (make-instance 'x64-asm-instruction
:name "VCVTUSI2SS"
:req-operands (list "xmmreg" "xmmreg|er" "rm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "7b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VCVTUSI2SS-xmmreg.xmmreg-er.rm64 (make-instance 'x64-asm-instruction
:name "VCVTUSI2SS"
:req-operands (list "xmmreg" "xmmreg|er" "rm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w1" "7b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VDBPSADBW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.w0" "42" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VDBPSADBW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.w0" "42" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VDBPSADBW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.w0" "42" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VDIVPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "5e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VDIVPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "5e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VDIVPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "5e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VDIVPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "5e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VDIVPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "5e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VDIVPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "5e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VDIVSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "5e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VDIVSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "5e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VEXP2PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "c8" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VEXP2PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "c8" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VEXPANDPD-xmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "xmmreg|mask|z" "mem128")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-ymmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "ymmreg|mask|z" "mem256")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-zmmreg-mask-z.mem512 (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "zmmreg|mask|z" "mem512")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "88" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPS-xmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "xmmreg|mask|z" "mem128")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-ymmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "ymmreg|mask|z" "mem256")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-zmmreg-mask-z.mem512 (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "zmmreg|mask|z" "mem512")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXPANDPS-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXPANDPS-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VEXPANDPS"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "88" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X4"
:req-operands (list "xmmreg|mask|z" "ymmreg" "imm8")
:code-format (list "[mri:" "evex.256.66.0f3a.w0" "19" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X4"
:req-operands (list "xmmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w0" "19" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-mem128-mask.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X4"
:req-operands (list "mem128|mask" "ymmreg" "imm8")
:code-format (list "[mri:t4:" "evex.256.66.0f3a.w0" "19" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X4-mem128-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X4"
:req-operands (list "mem128|mask" "zmmreg" "imm8")
:code-format (list "[mri:t4:" "evex.512.66.0f3a.w0" "19" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X8"
:req-operands (list "ymmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w0" "1b" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF32X8-mem256-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF32X8"
:req-operands (list "mem256|mask" "zmmreg" "imm8")
:code-format (list "[mri:t8:" "evex.512.66.0f3a.w0" "1b" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X2"
:req-operands (list "xmmreg|mask|z" "ymmreg" "imm8")
:code-format (list "[mri:" "evex.256.66.0f3a.w1" "19" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X2"
:req-operands (list "xmmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w1" "19" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-mem128-mask.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X2"
:req-operands (list "mem128|mask" "ymmreg" "imm8")
:code-format (list "[mri:t2:" "evex.256.66.0f3a.w1" "19" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X2-mem128-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X2"
:req-operands (list "mem128|mask" "zmmreg" "imm8")
:code-format (list "[mri:t2:" "evex.512.66.0f3a.w1" "19" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X4"
:req-operands (list "ymmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w1" "1b" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTF64X4-mem256-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTF64X4"
:req-operands (list "mem256|mask" "zmmreg" "imm8")
:code-format (list "[mri:t4:" "evex.512.66.0f3a.w1" "1b" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X4"
:req-operands (list "xmmreg|mask|z" "ymmreg" "imm8")
:code-format (list "[mri:" "evex.256.66.0f3a.w0" "39" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X4"
:req-operands (list "xmmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w0" "39" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-mem128-mask.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X4"
:req-operands (list "mem128|mask" "ymmreg" "imm8")
:code-format (list "[mri:t4:" "evex.256.66.0f3a.w0" "39" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X4-mem128-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X4"
:req-operands (list "mem128|mask" "zmmreg" "imm8")
:code-format (list "[mri:t4:" "evex.512.66.0f3a.w0" "39" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X8"
:req-operands (list "ymmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w0" "3b" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI32X8-mem256-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI32X8"
:req-operands (list "mem256|mask" "zmmreg" "imm8")
:code-format (list "[mri:t8:" "evex.512.66.0f3a.w0" "3b" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X2"
:req-operands (list "xmmreg|mask|z" "ymmreg" "imm8")
:code-format (list "[mri:" "evex.256.66.0f3a.w1" "39" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X2"
:req-operands (list "xmmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w1" "39" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-mem128-mask.ymmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X2"
:req-operands (list "mem128|mask" "ymmreg" "imm8")
:code-format (list "[mri:t2:" "evex.256.66.0f3a.w1" "39" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X2-mem128-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X2"
:req-operands (list "mem128|mask" "zmmreg" "imm8")
:code-format (list "[mri:t2:" "evex.512.66.0f3a.w1" "39" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X4"
:req-operands (list "ymmreg|mask|z" "zmmreg" "imm8")
:code-format (list "[mri:" "evex.512.66.0f3a.w1" "3b" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTI64X4-mem256-mask.zmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTI64X4"
:req-operands (list "mem256|mask" "zmmreg" "imm8")
:code-format (list "[mri:t4:" "evex.512.66.0f3a.w1" "3b" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTPS"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "17" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTPS"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "17" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VEXTRACTPS-mem32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VEXTRACTPS"
:req-operands (list "mem32" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "17" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "54" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "54" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "54" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "54" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "54" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "54" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "55" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VFIXUPIMMSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "55" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADD132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "98" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADD132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "98" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADD132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "98" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADD132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "98" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADD132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "98" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADD132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "98" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMADD132SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "99" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMADD132SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "99" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADD213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "a8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADD213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "a8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADD213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "a8" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADD213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "a8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADD213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "a8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADD213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "a8" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMADD213SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "a9" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMADD213SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "a9" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADD231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "b8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADD231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "b8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADD231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "b8" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADD231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "b8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADD231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "b8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADD231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "b8" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMADD231SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "b9" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMADD231SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "b9" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "96" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "96" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "96" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "96" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "96" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "96" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "a6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "a6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "a6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "a6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "a6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "a6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "b6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "b6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "b6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "b6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "b6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMADDSUB231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "b6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "9a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "9a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUB132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "9a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "9a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "9a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUB132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "9a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMSUB132SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "9b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMSUB132SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "9b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "aa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "aa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUB213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "aa" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "aa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "aa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUB213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "aa" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMSUB213SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "ab" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMSUB213SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "ab" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "ba" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUB231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "ba" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUB231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "ba" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "ba" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUB231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "ba" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUB231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "ba" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFMSUB231SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "bb" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFMSUB231SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "bb" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "97" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "97" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "97" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "97" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "97" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "97" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "a7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "a7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "a7" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "a7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "a7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "a7" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "b7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "b7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "b7" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "b7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "b7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFMSUBADD231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "b7" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "9c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "9c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMADD132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "9c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "9c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "9c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMADD132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "9c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMADD132SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "9d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMADD132SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "9d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "ac" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "ac" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMADD213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "ac" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "ac" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "ac" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMADD213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "ac" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMADD213SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "ad" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMADD213SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "ad" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "bc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMADD231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "bc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMADD231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "bc" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "bc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMADD231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "bc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMADD231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "bc" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMADD231SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "bd" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMADD231SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "bd" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "9e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "9e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB132PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "9e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "9e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB132PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "9e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB132PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "9e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB132SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "9f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB132SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "9f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "ae" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "ae" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB213PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "ae" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "ae" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB213PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "ae" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB213PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "ae" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB213SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "af" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB213SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "af" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "be" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "be" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB231PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "be" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "be" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VFNMSUB231PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "be" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB231PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "be" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VFNMSUB231SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "bf" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VFNMSUB231SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "bf" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPD"
:req-operands (list "kreg|mask" "xmmrm128|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w1" "66" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPD"
:req-operands (list "kreg|mask" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "66" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPD"
:req-operands (list "kreg|mask" "zmmrm512|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "66" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPS"
:req-operands (list "kreg|mask" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w0" "66" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPS"
:req-operands (list "kreg|mask" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w0" "66" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSPS"
:req-operands (list "kreg|mask" "zmmrm512|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w0" "66" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSSD-kreg-mask.xmmrm64.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSSD"
:req-operands (list "kreg|mask" "xmmrm64" "imm8")
:code-format (list "[rmi:t1s:" "evex.128.66.0f3a.w1" "67" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VFPCLASSSS-kreg-mask.xmmrm32.imm8 (make-instance 'x64-asm-instruction
:name "VFPCLASSSS"
:req-operands (list "kreg|mask" "xmmrm32" "imm8")
:code-format (list "[rmi:t1s:" "evex.128.66.0f3a.w0" "67" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VGATHERDPD-xmmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VGATHERDPD"
:req-operands (list "xmmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w1" "92" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPD-ymmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VGATHERDPD"
:req-operands (list "ymmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.256.66.0f38.w1" "92" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPD-zmmreg-mask.ymem64 (make-instance 'x64-asm-instruction
:name "VGATHERDPD"
:req-operands (list "zmmreg|mask" "ymem64")
:code-format (list "[rm:t1s:" "vsiby" "evex.512.66.0f38.w1" "92" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERDPS-xmmreg-mask.xmem32 (make-instance 'x64-asm-instruction
:name "VGATHERDPS"
:req-operands (list "xmmreg|mask" "xmem32")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w0" "92" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPS-ymmreg-mask.ymem32 (make-instance 'x64-asm-instruction
:name "VGATHERDPS"
:req-operands (list "ymmreg|mask" "ymem32")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w0" "92" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERDPS-zmmreg-mask.zmem32 (make-instance 'x64-asm-instruction
:name "VGATHERDPS"
:req-operands (list "zmmreg|mask" "zmem32")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w0" "92" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERPF0DPD-ymem64-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF0DPD"
:req-operands (list "ymem64|mask")
:code-format (list "[m:t1s:" "vsiby" "evex.512.66.0f38.w1" "c6" "/1" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0DPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF0DPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c6" "/1" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0QPD-zmem64-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF0QPD"
:req-operands (list "zmem64|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w1" "c7" "/1" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF0QPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF0QPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c7" "/1" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1DPD-ymem64-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF1DPD"
:req-operands (list "ymem64|mask")
:code-format (list "[m:t1s:" "vsiby" "evex.512.66.0f38.w1" "c6" "/2" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1DPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF1DPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c6" "/2" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1QPD-zmem64-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF1QPD"
:req-operands (list "zmem64|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w1" "c7" "/2" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERPF1QPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VGATHERPF1QPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c7" "/2" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VGATHERQPD-xmmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VGATHERQPD"
:req-operands (list "xmmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w1" "93" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPD-ymmreg-mask.ymem64 (make-instance 'x64-asm-instruction
:name "VGATHERQPD"
:req-operands (list "ymmreg|mask" "ymem64")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w1" "93" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPD-zmmreg-mask.zmem64 (make-instance 'x64-asm-instruction
:name "VGATHERQPD"
:req-operands (list "zmmreg|mask" "zmem64")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w1" "93" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGATHERQPS-xmmreg-mask.xmem32 (make-instance 'x64-asm-instruction
:name "VGATHERQPS"
:req-operands (list "xmmreg|mask" "xmem32")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w0" "93" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPS-xmmreg-mask.ymem32 (make-instance 'x64-asm-instruction
:name "VGATHERQPS"
:req-operands (list "xmmreg|mask" "ymem32")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w0" "93" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGATHERQPS-ymmreg-mask.zmem32 (make-instance 'x64-asm-instruction
:name "VGATHERQPS"
:req-operands (list "ymmreg|mask" "zmem32")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w0" "93" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VGETEXPPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "42" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VGETEXPPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "42" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VGETEXPPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "42" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VGETEXPPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "42" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VGETEXPPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "42" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VGETEXPPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "42" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VGETEXPSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "43" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VGETEXPSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "43" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w1" "26" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "26" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "26" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w0" "26" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w0" "26" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w0" "26" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "27" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VGETMANTSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "27" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF32X4"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.256.66.0f3a.w0" "18" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF32X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.512.66.0f3a.w0" "18" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF32X8"
:req-operands (list "zmmreg|mask|z" "zmmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:t8:" "evex.nds.512.66.0f3a.w0" "1a" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF64X2"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t2:" "evex.nds.256.66.0f3a.w1" "18" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF64X2"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t2:" "evex.nds.512.66.0f3a.w1" "18" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTF64X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.512.66.0f3a.w1" "1a" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI32X4"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.256.66.0f3a.w0" "38" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI32X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.512.66.0f3a.w0" "38" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI32X8"
:req-operands (list "zmmreg|mask|z" "zmmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:t8:" "evex.nds.512.66.0f3a.w0" "3a" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI64X2"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t2:" "evex.nds.256.66.0f3a.w1" "38" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI64X2"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:t2:" "evex.nds.512.66.0f3a.w1" "38" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTI64X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:t4:" "evex.nds.512.66.0f3a.w1" "3a" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8 (make-instance 'x64-asm-instruction
:name "VINSERTPS"
:req-operands (list "xmmreg" "xmmreg" "xmmrm32" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "21" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VMAXPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "5f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VMAXPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "5f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VMAXPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|sae")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "5f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VMAXPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "5f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VMAXPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "5f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VMAXPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|sae")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "5f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VMAXSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "5f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VMAXSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "5f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VMINPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "5d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VMINPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "5d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VMINPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|sae")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "5d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VMINPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "5d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VMINPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "5d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VMINPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|sae")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "5d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VMINSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "5d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VMINSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "5d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f.w1" "28" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPD-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPD"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w1" "29" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.0f.w0" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.0f.w0" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.0f.w0" "28" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVAPS-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVAPS"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.0f.w0" "29" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVD-xmmreg.rm32 (make-instance 'x64-asm-instruction
:name "VMOVD"
:req-operands (list "xmmreg" "rm32")
:code-format (list "[rm:t1s:" "evex.128.66.0f.w0" "6e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVD-rm32.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVD"
:req-operands (list "rm32" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f.w0" "7e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDDUP-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMOVDDUP"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:dup:" "evex.128.f2.0f.w1" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDDUP"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:dup:" "evex.256.f2.0f.w1" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDDUP"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:dup:" "evex.512.f2.0f.w1" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA32-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA32"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQA64-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQA64"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU16-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f2.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f2.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f2.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU16-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU16"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.f2.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU32-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f3.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f3.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f3.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU32-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU32-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU32"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.f3.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f3.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f3.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f3.0f.w1" "6f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVDQU64-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU64"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.f3.0f.w1" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVDQU8-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f2.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f2.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f2.0f.w0" "6f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VMOVDQU8-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVDQU8"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.f2.0f.w0" "7f" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VMOVHLPS-xmmreg.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHLPS"
:req-operands (list "xmmreg" "xmmreg" "xmmreg")
:code-format (list "[rvm:" "evex.nds.128.0f.w0" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPD-xmmreg.xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VMOVHPD"
:req-operands (list "xmmreg" "xmmreg" "mem64")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f.w1" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHPD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f.w1" "17" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPS-xmmreg.xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VMOVHPS"
:req-operands (list "xmmreg" "xmmreg" "mem64")
:code-format (list "[rvm:t2:" "evex.nds.128.0f.w0" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVHPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVHPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:t2:" "evex.128.0f.w0" "17" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLHPS-xmmreg.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLHPS"
:req-operands (list "xmmreg" "xmmreg" "xmmreg")
:code-format (list "[rvm:" "evex.nds.128.0f.w0" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPD-xmmreg.xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VMOVLPD"
:req-operands (list "xmmreg" "xmmreg" "mem64")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f.w1" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPD-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLPD"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f.w1" "13" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPS-xmmreg.xmmreg.mem64 (make-instance 'x64-asm-instruction
:name "VMOVLPS"
:req-operands (list "xmmreg" "xmmreg" "mem64")
:code-format (list "[rvm:t2:" "evex.nds.128.0f.w0" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVLPS-mem64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVLPS"
:req-operands (list "mem64" "xmmreg")
:code-format (list "[mr:t2:" "evex.128.0f.w0" "13" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTDQ"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w0" "e7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTDQ"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w0" "e7" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQ-mem512.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTDQ"
:req-operands (list "mem512" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w0" "e7" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-xmmreg.mem128 (make-instance 'x64-asm-instruction
:name "VMOVNTDQA"
:req-operands (list "xmmreg" "mem128")
:code-format (list "[rm:fvm:" "evex.128.66.0f38.w0" "2a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-ymmreg.mem256 (make-instance 'x64-asm-instruction
:name "VMOVNTDQA"
:req-operands (list "ymmreg" "mem256")
:code-format (list "[rm:fvm:" "evex.256.66.0f38.w0" "2a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTDQA-zmmreg.mem512 (make-instance 'x64-asm-instruction
:name "VMOVNTDQA"
:req-operands (list "zmmreg" "mem512")
:code-format (list "[rm:fvm:" "evex.512.66.0f38.w0" "2a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPD"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w1" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPD"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w1" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPD-mem512.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPD"
:req-operands (list "mem512" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w1" "2b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem128.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPS"
:req-operands (list "mem128" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.0f.w0" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem256.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPS"
:req-operands (list "mem256" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.0f.w0" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVNTPS-mem512.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVNTPS"
:req-operands (list "mem512" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.0f.w0" "2b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmreg.rm64 (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmreg" "rm64")
:code-format (list "[rm:t1s:" "evex.128.66.0f.w1" "6e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-rm64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "rm64" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f.w1" "7e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmreg" "xmmrm64")
:code-format (list "[rm:t1s:" "evex.128.f3.0f.w1" "7e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVQ-xmmrm64.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVQ"
:req-operands (list "xmmrm64" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f.w1" "d6" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.128.f2.0f.w1" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.f2.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmreg")
:code-format (list "[rvm:" "evex.nds.128.f2.0f.w1" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSD-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmreg")
:code-format (list "[mvr:" "evex.nds.128.f2.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVSHDUP"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f3.0f.w0" "16" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVSHDUP"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f3.0f.w0" "16" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSHDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVSHDUP"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f3.0f.w0" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVSLDUP"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.f3.0f.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVSLDUP"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.f3.0f.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVSLDUP-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVSLDUP"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.f3.0f.w0" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.128.f3.0f.w0" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.f3.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmreg")
:code-format (list "[rvm:" "evex.nds.128.f3.0f.w0" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVSS-xmmreg-mask-z.xmmreg.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmreg")
:code-format (list "[mvr:" "evex.nds.128.f3.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f.w1" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f.w1" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f.w1" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPD-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPD"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.66.0f.w1" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.0f.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.0f.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.0f.w0" "10" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:fvm:" "evex.128.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:fvm:" "evex.256.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMOVUPS-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VMOVUPS"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:fvm:" "evex.512.0f.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VMULPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VMULPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VMULPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VMULPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VMULPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VMULPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VMULSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VMULSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VORPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "56" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VORPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "56" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VORPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "56" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VORPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "56" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VORPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "56" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VORPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "56" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPABSB-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPABSB"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f38.wig" "1c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSB-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPABSB"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f38.wig" "1c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSB-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPABSB"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f38.wig" "1c" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPABSD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPABSD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "1e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPABSD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "1e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPABSD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "1e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPABSQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPABSQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "1f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPABSQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "1f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPABSQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPABSQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "1f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPABSW-xmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPABSW"
:req-operands (list "xmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:fvm:" "evex.128.66.0f38.wig" "1d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSW-ymmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPABSW"
:req-operands (list "ymmreg|mask|z" "ymmrm256")
:code-format (list "[rm:fvm:" "evex.256.66.0f38.wig" "1d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPABSW-zmmreg-mask-z.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPABSW"
:req-operands (list "zmmreg|mask|z" "zmmrm512")
:code-format (list "[rm:fvm:" "evex.512.66.0f38.wig" "1d" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPACKSSDW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "6b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPACKSSDW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "6b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPACKSSDW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "6b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKSSWB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "63" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKSSWB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "63" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPACKSSWB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "63" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPACKUSDW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPACKUSDW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "2b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPACKUSDW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "2b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPACKUSWB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "67" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPACKUSWB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "67" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPACKUSWB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "67" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "fc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "fc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "fc" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPADDD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "fe" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPADDD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "fe" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPADDD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "fe" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPADDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "d4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPADDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "d4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPADDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "d4" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "ec" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "ec" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "ec" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "ed" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "ed" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "ed" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDUSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "dc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDUSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "dc" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDUSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "dc" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDUSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "dd" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDUSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "dd" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDUSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "dd" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPADDW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPADDW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "fd" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPADDW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "fd" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPADDW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPADDW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "fd" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPALIGNR"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.wig" "0f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPALIGNR"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.wig" "0f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPALIGNR"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.wig" "0f" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPANDD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "db" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPANDD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "db" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPANDD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "db" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPANDND"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "df" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPANDND"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "df" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPANDND"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "df" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPANDNQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "df" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPANDNQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "df" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPANDNQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "df" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPANDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "db" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPANDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "db" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPANDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "db" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPAVGB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPAVGB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPAVGB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e0" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPAVGW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPAVGW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPAVGW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e3" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPBLENDMB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w0" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPBLENDMB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w0" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPBLENDMB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w0" "66" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPBLENDMD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPBLENDMD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPBLENDMD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "64" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPBLENDMQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPBLENDMQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPBLENDMQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "64" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPBLENDMW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPBLENDMW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPBLENDMW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "66" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.xmmrm8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg|mask|z" "xmmrm8")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.xmmrm8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg|mask|z" "xmmrm8")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "78" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.xmmrm8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "zmmreg|mask|z" "xmmrm8")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "78" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg|mask|z" "reg8")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-xmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "xmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg|mask|z" "reg8")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-ymmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "ymmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg8 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "zmmreg|mask|z" "reg8")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "zmmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "zmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTB-zmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTB"
:req-operands (list "zmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7a" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "xmmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "ymmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.mem32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "zmmreg|mask|z" "mem32")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "ymmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "zmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "58" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-xmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "xmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-ymmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "ymmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTD-zmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTD"
:req-operands (list "zmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTMB2Q-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMB2Q"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w1" "2a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMB2Q-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMB2Q"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w1" "2a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMB2Q-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMB2Q"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w1" "2a" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMW2D"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w0" "3a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMW2D"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w0" "3a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTMW2D-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTMW2D"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w0" "3a" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "xmmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "ymmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.mem64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "zmmreg|mask|z" "mem64")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.128.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "ymmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.256.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "zmmreg|mask|z" "xmmreg")
:code-format (list "[rm:" "evex.512.66.0f38.w1" "59" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-xmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "xmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.128.66.0f38.w1" "7c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-ymmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "ymmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.256.66.0f38.w1" "7c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPBROADCASTQ-zmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTQ"
:req-operands (list "zmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.512.66.0f38.w1" "7c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg|mask|z" "xmmrm16")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg|mask|z" "xmmrm16")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "79" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "zmmreg|mask|z" "xmmrm16")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "79" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-xmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "xmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.128.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-ymmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "ymmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.256.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg16 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "zmmreg|mask|z" "reg16")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg32 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "zmmreg|mask|z" "reg32")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPBROADCASTW-zmmreg-mask-z.reg64 (make-instance 'x64-asm-instruction
:name "VPBROADCASTW"
:req-operands (list "zmmreg|mask|z" "reg64")
:code-format (list "[rm:" "evex.512.66.0f38.w0" "7b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.w0" "3f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.w0" "3f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.w0" "3f" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "1f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "1f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "1f" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "74" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "74" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPCMPEQB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "74" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPCMPEQD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPCMPEQD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPCMPEQD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "76" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPCMPEQQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPCMPEQQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPCMPEQQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPEQW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPEQW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPEQW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPCMPEQW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "75" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "64" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPCMPGTB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "64" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPCMPGTD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPCMPGTD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "66" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPCMPGTD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "66" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPCMPGTQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "37" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPCMPGTQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "37" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPCMPGTQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "37" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPCMPGTW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPCMPGTW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "65" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPGTW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPCMPGTW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "65" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "1f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "1f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "1f" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.w0" "3e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.w0" "3e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.w0" "3e" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "1e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "1e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "1e" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "1e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "1e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "1e" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.w1" "3e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.w1" "3e" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPUW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.w1" "3e" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.128.66.0f3a.w1" "3f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.256.66.0f3a.w1" "3f" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPCMPW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512" "imm8")
:code-format (list "[rvmi:fvm:" "evex.nds.512.66.0f3a.w1" "3f" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPCOMPRESSD-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:t1s:" "evex.256.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:t1s:" "evex.512.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f38.w0" "8b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem128-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "mem128|mask" "xmmreg")
:code-format (list "[mr:t1s:" "evex.128.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem256-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "mem256|mask" "ymmreg")
:code-format (list "[mr:t1s:" "evex.256.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-mem512-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "mem512|mask" "zmmreg")
:code-format (list "[mr:t1s:" "evex.512.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPCOMPRESSQ-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPCOMPRESSQ"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.66.0f38.w1" "8b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPCONFLICTD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "c4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPCONFLICTD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "c4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPCONFLICTD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "c4" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPCONFLICTQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "c4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPCONFLICTQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "c4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPCONFLICTQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "c4" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPERMB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w0" "8d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w0" "8d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w0" "8d" "/r" "")
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "36" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "36" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMI2B"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w0" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMI2B"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w0" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMI2B"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w0" "75" "/r" "")
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2D"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2D"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2D"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "76" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "77" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "77" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "77" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "77" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "77" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMI2PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "77" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2Q"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2Q"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "76" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMI2Q"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "76" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMI2W"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMI2W"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "75" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMI2W"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "75" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w1" "05" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "05" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "05" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "0d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "0d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMILPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "0d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w0" "04" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w0" "04" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w0" "04" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "0c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "0c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMILPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "0c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "01" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "01" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "16" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "16" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "16" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "00" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPERMQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "00" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "36" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "36" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMT2B"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w0" "7d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMT2B"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w0" "7d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMT2B"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w0" "7d" "/r" "")
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2D"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "7e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2D"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "7e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2D"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "7e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2PD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2PD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2PD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2PS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2PS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "7f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPERMT2PS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "7f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2Q"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "7e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2Q"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "7e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPERMT2Q"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "7e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMT2W"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "7d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMT2W"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "7d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMT2W"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "7d" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPERMW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPERMW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "8d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPERMW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "8d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPERMW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPERMW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "8d" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXPANDD-xmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "xmmreg|mask|z" "mem128")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-ymmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "ymmreg|mask|z" "mem256")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-zmmreg-mask-z.mem512 (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "zmmreg|mask|z" "mem512")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDD-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDD"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w0" "89" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-xmmreg-mask-z.mem128 (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "xmmreg|mask|z" "mem128")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-ymmreg-mask-z.mem256 (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "ymmreg|mask|z" "mem256")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-zmmreg-mask-z.mem512 (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "zmmreg|mask|z" "mem512")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[rm:t1s:" "evex.128.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-ymmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg")
:code-format (list "[rm:t1s:" "evex.256.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPEXPANDQ-zmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPEXPANDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg")
:code-format (list "[rm:t1s:" "evex.512.66.0f38.w1" "89" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPEXTRB-reg8.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg8" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "14" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg16.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg16" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "14" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "14" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "14" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRB-mem8.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRB"
:req-operands (list "mem8" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "14" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRD-rm32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRD"
:req-operands (list "rm32" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.w0" "16" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPEXTRQ-rm64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRQ"
:req-operands (list "rm64" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.w1" "16" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg16" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "15" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "15" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "15" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-mem16.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "mem16" "xmmreg" "imm8")
:code-format (list "[mri:t1s:" "evex.128.66.0f3a.wig" "15" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg16.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg16" "xmmreg" "imm8")
:code-format (list "[rmi:" "evex.128.66.0f.wig" "c5" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg32.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg32" "xmmreg" "imm8")
:code-format (list "[rmi:" "evex.128.66.0f.wig" "c5" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPEXTRW-reg64.xmmreg.imm8 (make-instance 'x64-asm-instruction
:name "VPEXTRW"
:req-operands (list "reg64" "xmmreg" "imm8")
:code-format (list "[rmi:" "evex.128.66.0f.wig" "c5" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPGATHERDD-xmmreg-mask.xmem32 (make-instance 'x64-asm-instruction
:name "VPGATHERDD"
:req-operands (list "xmmreg|mask" "xmem32")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w0" "90" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDD-ymmreg-mask.ymem32 (make-instance 'x64-asm-instruction
:name "VPGATHERDD"
:req-operands (list "ymmreg|mask" "ymem32")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w0" "90" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDD-zmmreg-mask.zmem32 (make-instance 'x64-asm-instruction
:name "VPGATHERDD"
:req-operands (list "zmmreg|mask" "zmem32")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w0" "90" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-xmmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VPGATHERDQ"
:req-operands (list "xmmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w1" "90" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-ymmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VPGATHERDQ"
:req-operands (list "ymmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.256.66.0f38.w1" "90" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERDQ-zmmreg-mask.ymem64 (make-instance 'x64-asm-instruction
:name "VPGATHERDQ"
:req-operands (list "zmmreg|mask" "ymem64")
:code-format (list "[rm:t1s:" "vsiby" "evex.512.66.0f38.w1" "90" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERQD-xmmreg-mask.xmem32 (make-instance 'x64-asm-instruction
:name "VPGATHERQD"
:req-operands (list "xmmreg|mask" "xmem32")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w0" "91" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQD-xmmreg-mask.ymem32 (make-instance 'x64-asm-instruction
:name "VPGATHERQD"
:req-operands (list "xmmreg|mask" "ymem32")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w0" "91" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQD-ymmreg-mask.zmem32 (make-instance 'x64-asm-instruction
:name "VPGATHERQD"
:req-operands (list "ymmreg|mask" "zmem32")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w0" "91" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-xmmreg-mask.xmem64 (make-instance 'x64-asm-instruction
:name "VPGATHERQQ"
:req-operands (list "xmmreg|mask" "xmem64")
:code-format (list "[rm:t1s:" "vsibx" "evex.128.66.0f38.w1" "91" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-ymmreg-mask.ymem64 (make-instance 'x64-asm-instruction
:name "VPGATHERQQ"
:req-operands (list "ymmreg|mask" "ymem64")
:code-format (list "[rm:t1s:" "vsiby" "evex.256.66.0f38.w1" "91" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPGATHERQQ-zmmreg-mask.zmem64 (make-instance 'x64-asm-instruction
:name "VPGATHERQQ"
:req-operands (list "zmmreg|mask" "zmem64")
:code-format (list "[rm:t1s:" "vsibz" "evex.512.66.0f38.w1" "91" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPINSRB-xmmreg.xmmreg.reg32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRB"
:req-operands (list "xmmreg" "xmmreg" "reg32" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.wig" "20" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRB-xmmreg.xmmreg.mem8.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRB"
:req-operands (list "xmmreg" "xmmreg" "mem8" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.wig" "20" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRD-xmmreg.xmmreg.rm32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRD"
:req-operands (list "xmmreg" "xmmreg" "rm32" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "22" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPINSRQ-xmmreg.xmmreg.rm64.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRQ"
:req-operands (list "xmmreg" "xmmreg" "rm64" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "22" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPINSRW-xmmreg.xmmreg.reg32.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRW"
:req-operands (list "xmmreg" "xmmreg" "reg32" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f.wig" "c4" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPINSRW-xmmreg.xmmreg.mem16.imm8 (make-instance 'x64-asm-instruction
:name "VPINSRW"
:req-operands (list "xmmreg" "xmmreg" "mem16" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f.wig" "c4" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPLZCNTD-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPLZCNTD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "44" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTD-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPLZCNTD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "44" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTD-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPLZCNTD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "44" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPLZCNTQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "44" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPLZCNTQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "44" "/r" "")
:arch-flags (list "AVX512VL" "AVX512CD" "FUTURE")))

(defparameter VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPLZCNTQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "44" "/r" "")
:arch-flags (list "AVX512CD" "FUTURE")))

(defparameter VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52HUQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "b5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52HUQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "b5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52HUQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "b5" "/r" "")
:arch-flags (list "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52LUQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "b4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52LUQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "b4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512IFMA" "FUTURE")))

(defparameter VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMADD52LUQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "b4" "/r" "")
:arch-flags (list "AVX512IFMA" "FUTURE")))

(defparameter VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMADDUBSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "04" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMADDUBSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "04" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMADDUBSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "04" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMADDWD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "f5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMADDWD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "f5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMADDWD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "f5" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "3c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "3c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMAXSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "3c" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPMAXSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "3d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPMAXSD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "3d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPMAXSD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "3d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMAXSQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "3d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMAXSQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "3d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMAXSQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "3d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "ee" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "ee" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMAXSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "ee" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXUB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "de" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXUB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "de" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMAXUB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "de" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPMAXUD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "3f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPMAXUD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "3f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPMAXUD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "3f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMAXUQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "3f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMAXUQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "3f" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMAXUQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "3f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMAXUW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "3e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMAXUW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "3e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMAXUW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "3e" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMINSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "38" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPMINSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPMINSD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPMINSD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMINSQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMINSQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMINSQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "ea" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "ea" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMINSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "ea" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINUB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "da" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINUB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "da" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMINUB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "da" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPMINUD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "3b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPMINUD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "3b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPMINUD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "3b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMINUQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "3b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMINUQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "3b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMINUQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "3b" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMINUW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "3a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMINUW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "3a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMINUW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "3a" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVB2M"
:req-operands (list "kreg" "xmmreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVB2M"
:req-operands (list "kreg" "ymmreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w0" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVB2M-kreg.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVB2M"
:req-operands (list "kreg" "zmmreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w0" "29" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVD2M-kreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVD2M"
:req-operands (list "kreg" "xmmreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVD2M-kreg.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVD2M"
:req-operands (list "kreg" "ymmreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVD2M-kreg.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVD2M"
:req-operands (list "kreg" "zmmreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w0" "39" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDB-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDB"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "31" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVDW-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVDW"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "33" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVM2B-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2B"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w0" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2B-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2B"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w0" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2B-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2B"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w0" "28" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVM2D-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2D"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w0" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2D-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2D"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w0" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2D-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2D"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w0" "38" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2Q"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w1" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2Q"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w1" "38" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2Q-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2Q"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w1" "38" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVM2W-xmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2W"
:req-operands (list "xmmreg" "kreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2W-ymmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2W"
:req-operands (list "ymmreg" "kreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVM2W-zmmreg.kreg (make-instance 'x64-asm-instruction
:name "VPMOVM2W"
:req-operands (list "zmmreg" "kreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVQ2M-kreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQ2M"
:req-operands (list "kreg" "xmmreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVQ2M-kreg.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQ2M"
:req-operands (list "kreg" "ymmreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMOVQ2M-kreg.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQ2M"
:req-operands (list "kreg" "zmmreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w1" "39" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem16-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "mem16|mask" "xmmreg")
:code-format (list "[mr:ovm:" "evex.128.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "mem32|mask" "ymmreg")
:code-format (list "[mr:ovm:" "evex.256.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQB-mem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQB"
:req-operands (list "mem64|mask" "zmmreg")
:code-format (list "[mr:ovm:" "evex.512.f3.0f38.w0" "32" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQD-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQD"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVQW-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVQW"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "34" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDB-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDB"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "21" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSDW-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSDW"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "23" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem16-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "mem16|mask" "xmmreg")
:code-format (list "[mr:ovm:" "evex.128.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "mem32|mask" "ymmreg")
:code-format (list "[mr:ovm:" "evex.256.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQB-mem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQB"
:req-operands (list "mem64|mask" "zmmreg")
:code-format (list "[mr:ovm:" "evex.512.f3.0f38.w0" "22" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQD-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQD"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSQW-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSQW"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "24" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSWB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSWB-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVSWB"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "20" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "xmmreg|mask|z" "xmmrm32")
:code-format (list "[rm:qvm:" "evex.128.66.0f38.wig" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:qvm:" "evex.256.66.0f38.wig" "21" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXBD"
:req-operands (list "zmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:qvm:" "evex.512.66.0f38.wig" "21" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "xmmreg|mask|z" "xmmrm16")
:code-format (list "[rm:ovm:" "evex.128.66.0f38.wig" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "ymmreg|mask|z" "xmmrm32")
:code-format (list "[rm:ovm:" "evex.256.66.0f38.wig" "22" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXBQ"
:req-operands (list "zmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:ovm:" "evex.512.66.0f38.wig" "22" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXBW"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.wig" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXBW"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.wig" "20" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVSXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVSXBW"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.wig" "20" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVSXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXDQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVSXDQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.w0" "25" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXWD"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.wig" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXWD"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.wig" "23" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVSXWD"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.wig" "23" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "xmmreg|mask|z" "xmmrm32")
:code-format (list "[rm:qvm:" "evex.128.66.0f38.wig" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:qvm:" "evex.256.66.0f38.wig" "24" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVSXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVSXWQ"
:req-operands (list "zmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:qvm:" "evex.512.66.0f38.wig" "24" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDB-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDB"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "11" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSDW-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSDW"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "13" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem16-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "mem16|mask" "xmmreg")
:code-format (list "[mr:ovm:" "evex.128.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "mem32|mask" "ymmreg")
:code-format (list "[mr:ovm:" "evex.256.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQB-mem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQB"
:req-operands (list "mem64|mask" "zmmreg")
:code-format (list "[mr:ovm:" "evex.512.f3.0f38.w0" "12" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQD-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQD"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-xmmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "xmmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "mem32|mask" "xmmreg")
:code-format (list "[mr:qvm:" "evex.128.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "mem64|mask" "ymmreg")
:code-format (list "[mr:qvm:" "evex.256.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVUSQW-mem128-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSQW"
:req-operands (list "mem128|mask" "zmmreg")
:code-format (list "[mr:qvm:" "evex.512.f3.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVUSWB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVUSWB-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVUSWB"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "10" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVW2M"
:req-operands (list "kreg" "xmmreg")
:code-format (list "[rm:" "evex.128.f3.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVW2M"
:req-operands (list "kreg" "ymmreg")
:code-format (list "[rm:" "evex.256.f3.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVW2M-kreg.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVW2M"
:req-operands (list "kreg" "zmmreg")
:code-format (list "[rm:" "evex.512.f3.0f38.w1" "29" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-xmmreg-mask-z.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "xmmreg|mask|z" "xmmreg")
:code-format (list "[mr:" "evex.128.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-xmmreg-mask-z.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "xmmreg|mask|z" "ymmreg")
:code-format (list "[mr:" "evex.256.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-ymmreg-mask-z.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "ymmreg|mask|z" "zmmreg")
:code-format (list "[mr:" "evex.512.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "mem64|mask" "xmmreg")
:code-format (list "[mr:hvm:" "evex.128.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem128-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "mem128|mask" "ymmreg")
:code-format (list "[mr:hvm:" "evex.256.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVWB-mem256-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPMOVWB"
:req-operands (list "mem256|mask" "zmmreg")
:code-format (list "[mr:hvm:" "evex.512.f3.0f38.w0" "30" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBD-xmmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "xmmreg|mask|z" "xmmrm32")
:code-format (list "[rm:qvm:" "evex.128.66.0f38.wig" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBD-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:qvm:" "evex.256.66.0f38.wig" "31" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBD-zmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXBD"
:req-operands (list "zmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:qvm:" "evex.512.66.0f38.wig" "31" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-xmmreg-mask-z.xmmrm16 (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "xmmreg|mask|z" "xmmrm16")
:code-format (list "[rm:ovm:" "evex.128.66.0f38.wig" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-ymmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "ymmreg|mask|z" "xmmrm32")
:code-format (list "[rm:ovm:" "evex.256.66.0f38.wig" "32" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXBQ-zmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXBQ"
:req-operands (list "zmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:ovm:" "evex.512.66.0f38.wig" "32" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXBW-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXBW"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.wig" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBW-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXBW"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.wig" "30" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMOVZXBW-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVZXBW"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.wig" "30" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMOVZXDQ-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXDQ"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXDQ-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXDQ"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXDQ-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVZXDQ"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.w0" "35" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-xmmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXWD"
:req-operands (list "xmmreg|mask|z" "xmmrm64")
:code-format (list "[rm:hvm:" "evex.128.66.0f38.wig" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-ymmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXWD"
:req-operands (list "ymmreg|mask|z" "xmmrm128")
:code-format (list "[rm:hvm:" "evex.256.66.0f38.wig" "33" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWD-zmmreg-mask-z.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMOVZXWD"
:req-operands (list "zmmreg|mask|z" "ymmrm256")
:code-format (list "[rm:hvm:" "evex.512.66.0f38.wig" "33" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-xmmreg-mask-z.xmmrm32 (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "xmmreg|mask|z" "xmmrm32")
:code-format (list "[rm:qvm:" "evex.128.66.0f38.wig" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-ymmreg-mask-z.xmmrm64 (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "ymmreg|mask|z" "xmmrm64")
:code-format (list "[rm:qvm:" "evex.256.66.0f38.wig" "34" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMOVZXWQ-zmmreg-mask-z.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMOVZXWQ"
:req-operands (list "zmmreg|mask|z" "xmmrm128")
:code-format (list "[rm:qvm:" "evex.512.66.0f38.wig" "34" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMULDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMULDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMULDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "28" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHRSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "0b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHRSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "0b" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMULHRSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "0b" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHUW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHUW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMULHUW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e4" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULHW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULHW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMULHW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e5" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPMULLD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "40" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPMULLD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "40" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPMULLD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "40" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMULLQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "40" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMULLQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "40" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMULLQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "40" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPMULLW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "d5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPMULLW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "d5" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPMULLW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "d5" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMULTISHIFTQB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "83" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMULTISHIFTQB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "83" "/r" "")
:arch-flags (list "AVX512VL" "AVX512VBMI" "FUTURE")))

(defparameter VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMULTISHIFTQB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "83" "/r" "")
:arch-flags (list "AVX512VBMI" "FUTURE")))

(defparameter VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPMULUDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "f4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPMULUDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "f4" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPMULUDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "f4" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPORD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "eb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPORD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "eb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPORD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "eb" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPORQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "eb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPORQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "eb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPORQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "eb" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPROLD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w0" "72" "/1" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPROLD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w0" "72" "/1" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPROLD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w0" "72" "/1" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPROLQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w1" "72" "/1" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPROLQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w1" "72" "/1" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPROLQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w1" "72" "/1" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPROLVD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPROLVD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPROLVD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPROLVQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPROLVQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPROLVQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPRORD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w0" "72" "/0" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPRORD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w0" "72" "/0" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPRORD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w0" "72" "/0" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPRORQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w1" "72" "/0" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPRORQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w1" "72" "/0" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPRORQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w1" "72" "/0" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPRORVD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPRORVD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPRORVD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPRORVQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPRORVQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPRORVQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSADBW-xmmreg.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSADBW"
:req-operands (list "xmmreg" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "f6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSADBW-ymmreg.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSADBW"
:req-operands (list "ymmreg" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "f6" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSADBW-zmmreg.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSADBW"
:req-operands (list "zmmreg" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "f6" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSCATTERDD-xmem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDD"
:req-operands (list "xmem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w0" "a0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDD-ymem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDD"
:req-operands (list "ymem32|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w0" "a0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDD-zmem32-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDD"
:req-operands (list "zmem32|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w0" "a0" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-xmem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDQ"
:req-operands (list "xmem64|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w1" "a0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-xmem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDQ"
:req-operands (list "xmem64|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.256.66.0f38.w1" "a0" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERDQ-ymem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERDQ"
:req-operands (list "ymem64|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.512.66.0f38.w1" "a0" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-xmem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQD"
:req-operands (list "xmem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w0" "a1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-ymem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQD"
:req-operands (list "ymem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w0" "a1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQD-zmem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQD"
:req-operands (list "zmem32|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w0" "a1" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-xmem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQQ"
:req-operands (list "xmem64|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w1" "a1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-ymem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQQ"
:req-operands (list "ymem64|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w1" "a1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSCATTERQQ-zmem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VPSCATTERQQ"
:req-operands (list "zmem64|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w1" "a1" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSHUFB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.wig" "00" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSHUFB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.wig" "00" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSHUFB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.wig" "00" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f.w0" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f.w0" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f.w0" "70" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFHW"
:req-operands (list "xmmreg|mask|z" "xmmrm128" "imm8")
:code-format (list "[rmi:fvm:" "evex.128.f3.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFHW"
:req-operands (list "ymmreg|mask|z" "ymmrm256" "imm8")
:code-format (list "[rmi:fvm:" "evex.256.f3.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFHW"
:req-operands (list "zmmreg|mask|z" "zmmrm512" "imm8")
:code-format (list "[rmi:fvm:" "evex.512.f3.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFLW"
:req-operands (list "xmmreg|mask|z" "xmmrm128" "imm8")
:code-format (list "[rmi:fvm:" "evex.128.f2.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFLW"
:req-operands (list "ymmreg|mask|z" "ymmrm256" "imm8")
:code-format (list "[rmi:fvm:" "evex.256.f2.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSHUFLW"
:req-operands (list "zmmreg|mask|z" "zmmrm512" "imm8")
:code-format (list "[rmi:fvm:" "evex.512.f2.0f.wig" "70" "/r" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w0" "f2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w0" "f2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w0" "f2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w0" "72" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w0" "72" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w0" "72" "/6" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLDQ"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.128.66.0f.wig" "73" "/7" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLDQ"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.256.66.0f.wig" "73" "/7" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLDQ"
:req-operands (list "zmmreg" "zmmrm512" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.512.66.0f.wig" "73" "/7" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w1" "f3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w1" "f3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w1" "f3" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w1" "73" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w1" "73" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w1" "73" "/6" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPSLLVD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "47" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPSLLVD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "47" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPSLLVD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "47" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPSLLVQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "47" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPSLLVQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "47" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPSLLVQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "47" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLVW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSLLVW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "12" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSLLVW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "12" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.wig" "f1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.wig" "f1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.wig" "f1" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSLLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "xmmreg|mask|z" "xmmrm128" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.128.66.0f.wig" "71" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "ymmreg|mask|z" "ymmrm256" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.256.66.0f.wig" "71" "/6" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSLLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSLLW"
:req-operands (list "zmmreg|mask|z" "zmmrm512" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.512.66.0f.wig" "71" "/6" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w0" "e2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w0" "e2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w0" "e2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w0" "72" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w0" "72" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w0" "72" "/4" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w1" "e2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w1" "e2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w1" "e2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w1" "72" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w1" "72" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w1" "72" "/4" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPSRAVD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "46" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPSRAVD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "46" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPSRAVD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "46" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPSRAVQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "46" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPSRAVQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "46" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPSRAVQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "46" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAVW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSRAVW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "11" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSRAVW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "11" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.wig" "e1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.wig" "e1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.wig" "e1" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRAW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "xmmreg|mask|z" "xmmrm128" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.128.66.0f.wig" "71" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "ymmreg|mask|z" "ymmrm256" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.256.66.0f.wig" "71" "/4" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRAW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSRAW"
:req-operands (list "zmmreg|mask|z" "zmmrm512" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.512.66.0f.wig" "71" "/4" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w0" "d2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w0" "d2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w0" "d2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w0" "72" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w0" "72" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w0" "72" "/2" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLDQ-xmmreg.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLDQ"
:req-operands (list "xmmreg" "xmmrm128" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.128.66.0f.wig" "73" "/3" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLDQ-ymmreg.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLDQ"
:req-operands (list "ymmreg" "ymmrm256" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.256.66.0f.wig" "73" "/3" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLDQ-zmmreg.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLDQ"
:req-operands (list "zmmreg" "zmmrm512" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.512.66.0f.wig" "73" "/3" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.w1" "d3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.w1" "d3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.w1" "d3" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.128.66.0f.w1" "73" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.256.66.0f.w1" "73" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLQ"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64" "imm8")
:code-format (list "[vmi:fv:" "evex.nds.512.66.0f.w1" "73" "/2" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPSRLVD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "45" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPSRLVD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "45" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPSRLVD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "45" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPSRLVQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "45" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPSRLVQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "45" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPSRLVQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "45" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLVW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSRLVW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "10" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSRLVW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "10" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.128.66.0f.wig" "d1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.256.66.0f.wig" "d1" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "xmmrm128")
:code-format (list "[rvm:m128:" "evex.nds.512.66.0f.wig" "d1" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSRLW-xmmreg-mask-z.xmmrm128.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "xmmreg|mask|z" "xmmrm128" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.128.66.0f.wig" "71" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-ymmreg-mask-z.ymmrm256.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "ymmreg|mask|z" "ymmrm256" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.256.66.0f.wig" "71" "/2" "ib" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSRLW-zmmreg-mask-z.zmmrm512.imm8 (make-instance 'x64-asm-instruction
:name "VPSRLW"
:req-operands (list "zmmreg|mask|z" "zmmrm512" "imm8")
:code-format (list "[vmi:fvm:" "evex.nds.512.66.0f.wig" "71" "/2" "ib" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "f8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "f8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "f8" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPSUBD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "fa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPSUBD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "fa" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPSUBD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "fa" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPSUBQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "fb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPSUBQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "fb" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPSUBQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "fb" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e8" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "e9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "e9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "e9" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBUSB"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "d8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBUSB"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "d8" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBUSB"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "d8" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBUSW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "d9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBUSW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "d9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBUSW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "d9" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPSUBW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "f9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPSUBW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "f9" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPSUBW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "f9" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "25" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "25" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "25" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "25" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "25" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VPTERNLOGQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "25" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPTESTMB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPTESTMB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPTESTMB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPTESTMD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPTESTMD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPTESTMD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPTESTMQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPTESTMQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPTESTMQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPTESTMW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPTESTMW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPTESTMW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPTESTNMB"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.f3.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPTESTNMB"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.f3.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMB-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPTESTNMB"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.f3.0f38.w0" "26" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPTESTNMD"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.f3.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPTESTNMD"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.f3.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPTESTNMD"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.f3.0f38.w0" "27" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPTESTNMQ"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.f3.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPTESTNMQ"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.f3.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPTESTNMQ"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.f3.0f38.w1" "27" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPTESTNMW"
:req-operands (list "kreg|mask" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.f3.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPTESTNMW"
:req-operands (list "kreg|mask" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.f3.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPTESTNMW-kreg-mask.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPTESTNMW"
:req-operands (list "kreg|mask" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.f3.0f38.w1" "26" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHBW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "68" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHBW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "68" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPUNPCKHBW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "68" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKHDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "6a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKHDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "6a" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKHDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "6a" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKHQDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "6d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKHQDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "6d" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKHQDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "6d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKHWD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "69" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKHWD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "69" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPUNPCKHWD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "69" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLBW"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "60" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLBW"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "60" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPUNPCKLBW"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "60" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKLDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "62" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKLDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "62" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPUNPCKLDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "62" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKLQDQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "6c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKLQDQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "6c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPUNPCKLQDQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "6c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128 (make-instance 'x64-asm-instruction
:name "VPUNPCKLWD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128")
:code-format (list "[rvm:fvm:" "evex.nds.128.66.0f.wig" "61" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256 (make-instance 'x64-asm-instruction
:name "VPUNPCKLWD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256")
:code-format (list "[rvm:fvm:" "evex.nds.256.66.0f.wig" "61" "/r" "")
:arch-flags (list "AVX512VL" "AVX512BW" "FUTURE")))

(defparameter VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512 (make-instance 'x64-asm-instruction
:name "VPUNPCKLWD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512")
:code-format (list "[rvm:fvm:" "evex.nds.512.66.0f.wig" "61" "/r" "")
:arch-flags (list "AVX512BW" "FUTURE")))

(defparameter VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VPXORD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w0" "ef" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VPXORD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w0" "ef" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VPXORD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w0" "ef" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VPXORQ"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "ef" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VPXORQ"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "ef" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VPXORQ"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "ef" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w1" "50" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "50" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "50" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f3a.w0" "50" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "50" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRANGEPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "50" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRANGESD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "51" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRANGESS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "51" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRCP14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VRCP14PD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "4c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VRCP14PD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "4c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VRCP14PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "4c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VRCP14PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "4c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VRCP14PS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "4c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRCP14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VRCP14PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "4c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VRCP14SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "4d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VRCP14SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "4d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VRCP28PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "ca" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VRCP28PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "ca" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VRCP28SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "cb" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VRCP28SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "cb" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w1" "56" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "56" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "56" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w0" "56" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w0" "56" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCEPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w0" "56" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCESD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "57" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VREDUCESS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "57" "/r" "ib" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w1" "09" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w1" "09" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w1" "09" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.128.66.0f3a.w0" "08" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32" "imm8")
:code-format (list "[rmi:fv:" "evex.256.66.0f3a.w0" "08" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALEPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae" "imm8")
:code-format (list "[rmi:fv:" "evex.512.66.0f3a.w0" "08" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALESD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w1" "0b" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8 (make-instance 'x64-asm-instruction
:name "VRNDSCALESS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae" "imm8")
:code-format (list "[rvmi:t1s:" "evex.nds.128.66.0f3a.w0" "0a" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VRSQRT14PD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w1" "4e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VRSQRT14PD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w1" "4e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VRSQRT14PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "4e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VRSQRT14PS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.66.0f38.w0" "4e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VRSQRT14PS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.66.0f38.w0" "4e" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VRSQRT14PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "4e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64 (make-instance 'x64-asm-instruction
:name "VRSQRT14SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "4f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32 (make-instance 'x64-asm-instruction
:name "VRSQRT14SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "4f" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae (make-instance 'x64-asm-instruction
:name "VRSQRT28PD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w1" "cc" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae (make-instance 'x64-asm-instruction
:name "VRSQRT28PS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|sae")
:code-format (list "[rm:fv:" "evex.512.66.0f38.w0" "cc" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VRSQRT28SD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "cd" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VRSQRT28SS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|sae")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "cd" "/r" "")
:arch-flags (list "AVX512ER" "FUTURE")))

(defparameter VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VSCALEFPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w1" "2c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VSCALEFPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w1" "2c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VSCALEFPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w1" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VSCALEFPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f38.w0" "2c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VSCALEFPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f38.w0" "2c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VSCALEFPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f38.w0" "2c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VSCALEFSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w1" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VSCALEFSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.66.0f38.w0" "2d" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-xmem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPD"
:req-operands (list "xmem64|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w1" "a2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-xmem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPD"
:req-operands (list "xmem64|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.256.66.0f38.w1" "a2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPD-ymem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPD"
:req-operands (list "ymem64|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.512.66.0f38.w1" "a2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-xmem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPS"
:req-operands (list "xmem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w0" "a2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-ymem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPS"
:req-operands (list "ymem32|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w0" "a2" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERDPS-zmem32-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERDPS"
:req-operands (list "zmem32|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w0" "a2" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERPF0DPD-ymem64-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF0DPD"
:req-operands (list "ymem64|mask")
:code-format (list "[m:t1s:" "vsiby" "evex.512.66.0f38.w1" "c6" "/5" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0DPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF0DPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c6" "/5" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0QPD-zmem64-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF0QPD"
:req-operands (list "zmem64|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w1" "c7" "/5" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF0QPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF0QPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c7" "/5" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1DPD-ymem64-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF1DPD"
:req-operands (list "ymem64|mask")
:code-format (list "[m:t1s:" "vsiby" "evex.512.66.0f38.w1" "c6" "/6" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1DPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF1DPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c6" "/6" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1QPD-zmem64-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF1QPD"
:req-operands (list "zmem64|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w1" "c7" "/6" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERPF1QPS-zmem32-mask (make-instance 'x64-asm-instruction
:name "VSCATTERPF1QPS"
:req-operands (list "zmem32|mask")
:code-format (list "[m:t1s:" "vsibz" "evex.512.66.0f38.w0" "c7" "/6" "")
:arch-flags (list "AVX512PF" "FUTURE")))

(defparameter VSCATTERQPD-xmem64-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPD"
:req-operands (list "xmem64|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w1" "a3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPD-ymem64-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPD"
:req-operands (list "ymem64|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w1" "a3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPD-zmem64-mask.zmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPD"
:req-operands (list "zmem64|mask" "zmmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w1" "a3" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-xmem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPS"
:req-operands (list "xmem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsibx" "evex.128.66.0f38.w0" "a3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-ymem32-mask.xmmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPS"
:req-operands (list "ymem32|mask" "xmmreg")
:code-format (list "[mr:t1s:" "vsiby" "evex.256.66.0f38.w0" "a3" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSCATTERQPS-zmem32-mask.ymmreg (make-instance 'x64-asm-instruction
:name "VSCATTERQPS"
:req-operands (list "zmem32|mask" "ymmreg")
:code-format (list "[mr:t1s:" "vsibz" "evex.512.66.0f38.w0" "a3" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFF32X4"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "23" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFF32X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "23" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFF64X2"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "23" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFF64X2"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "23" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFI32X4"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w0" "43" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFI32X4"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w0" "43" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFI64X2"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f3a.w1" "43" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFI64X2"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f3a.w1" "43" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.66.0f.w1" "c6" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.66.0f.w1" "c6" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.66.0f.w1" "c6" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.128.0f.w0" "c6" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.256.0f.w0" "c6" "/r" "ib" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8 (make-instance 'x64-asm-instruction
:name "VSHUFPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32" "imm8")
:code-format (list "[rvmi:fv:" "evex.nds.512.0f.w0" "c6" "/r" "ib" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTPD-xmmreg-mask-z.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VSQRTPD"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b64")
:code-format (list "[rm:fv:" "evex.128.66.0f.w1" "51" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPD-ymmreg-mask-z.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VSQRTPD"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b64")
:code-format (list "[rm:fv:" "evex.256.66.0f.w1" "51" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VSQRTPD"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b64|er")
:code-format (list "[rm:fv:" "evex.512.66.0f.w1" "51" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTPS-xmmreg-mask-z.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VSQRTPS"
:req-operands (list "xmmreg|mask|z" "xmmrm128|b32")
:code-format (list "[rm:fv:" "evex.128.0f.w0" "51" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPS-ymmreg-mask-z.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VSQRTPS"
:req-operands (list "ymmreg|mask|z" "ymmrm256|b32")
:code-format (list "[rm:fv:" "evex.256.0f.w0" "51" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VSQRTPS"
:req-operands (list "zmmreg|mask|z" "zmmrm512|b32|er")
:code-format (list "[rm:fv:" "evex.512.0f.w0" "51" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VSQRTSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "51" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VSQRTSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "51" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VSUBPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "5c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VSUBPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "5c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er (make-instance 'x64-asm-instruction
:name "VSUBPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64|er")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "5c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VSUBPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "5c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VSUBPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "5c" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er (make-instance 'x64-asm-instruction
:name "VSUBPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32|er")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "5c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er (make-instance 'x64-asm-instruction
:name "VSUBSD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm64|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f2.0f.w1" "5c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er (make-instance 'x64-asm-instruction
:name "VSUBSS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm32|er")
:code-format (list "[rvm:t1s:" "evex.nds.128.f3.0f.w0" "5c" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUCOMISD-xmmreg.xmmrm64-sae (make-instance 'x64-asm-instruction
:name "VUCOMISD"
:req-operands (list "xmmreg" "xmmrm64|sae")
:code-format (list "[rm:t1s:" "evex.128.66.0f.w1" "2e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUCOMISS-xmmreg.xmmrm32-sae (make-instance 'x64-asm-instruction
:name "VUCOMISS"
:req-operands (list "xmmreg" "xmmrm32|sae")
:code-format (list "[rm:t1s:" "evex.128.0f.w0" "2e" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKHPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKHPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKHPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKHPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKHPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "15" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKHPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "15" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKLPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKLPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VUNPCKLPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKLPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKLPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "14" "/r" "")
:arch-flags (list "AVX512VL" "AVX512" "FUTURE")))

(defparameter VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VUNPCKLPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "14" "/r" "")
:arch-flags (list "AVX512" "FUTURE")))

(defparameter VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64 (make-instance 'x64-asm-instruction
:name "VXORPD"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b64")
:code-format (list "[rvm:fv:" "evex.nds.128.66.0f.w1" "57" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64 (make-instance 'x64-asm-instruction
:name "VXORPD"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b64")
:code-format (list "[rvm:fv:" "evex.nds.256.66.0f.w1" "57" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64 (make-instance 'x64-asm-instruction
:name "VXORPD"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b64")
:code-format (list "[rvm:fv:" "evex.nds.512.66.0f.w1" "57" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32 (make-instance 'x64-asm-instruction
:name "VXORPS"
:req-operands (list "xmmreg|mask|z" "xmmreg" "xmmrm128|b32")
:code-format (list "[rvm:fv:" "evex.nds.128.0f.w0" "57" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32 (make-instance 'x64-asm-instruction
:name "VXORPS"
:req-operands (list "ymmreg|mask|z" "ymmreg" "ymmrm256|b32")
:code-format (list "[rvm:fv:" "evex.nds.256.0f.w0" "57" "/r" "")
:arch-flags (list "AVX512VL" "AVX512DQ" "FUTURE")))

(defparameter VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32 (make-instance 'x64-asm-instruction
:name "VXORPS"
:req-operands (list "zmmreg|mask|z" "zmmreg" "zmmrm512|b32")
:code-format (list "[rvm:fv:" "evex.nds.512.0f.w0" "57" "/r" "")
:arch-flags (list "AVX512DQ" "FUTURE")))

(defparameter RDPKRU-void (make-instance 'x64-asm-instruction
:name "RDPKRU"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "ee")
:arch-flags (list "X64" "FUTURE")))

(defparameter WRPKRU-void (make-instance 'x64-asm-instruction
:name "WRPKRU"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "ef")
:arch-flags (list "X64" "FUTURE")))

(defparameter CLFLUSHOPT-mem (make-instance 'x64-asm-instruction
:name "CLFLUSHOPT"
:req-operands (list "mem")
:code-format (list "[m:" "66" "0f" "ae" "/7")
:arch-flags (list "FUTURE")))

(defparameter CLZERO-void (make-instance 'x64-asm-instruction
:name "CLZERO"
:req-operands (list "void")
:code-format (list "[" "0f" "01" "fc")
:arch-flags (list "FUTURE" "AMD")))

(defparameter HINT_NOP0-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP0"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP0-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP0"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP0-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP0"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP1-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP1"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP1-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP1"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP1-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP1"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP2-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP2"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP2-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP2"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP2-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP2"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP3-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP3"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP3-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP3"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP3-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP3"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP4-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP4"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP4-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP4"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP4-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP4"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP5-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP5"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP5-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP5"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP5-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP5"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP6-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP6"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP6-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP6"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP6-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP6"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP7-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP7"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "18" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP7-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP7"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "18" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP7-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP7"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "18" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP8-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP8"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP8-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP8"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP8-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP8"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP9-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP9"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP9-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP9"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP9-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP9"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP10-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP10"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP10-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP10"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP10-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP10"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP11-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP11"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP11-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP11"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP11-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP11"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP12-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP12"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP12-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP12"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP12-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP12"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP13-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP13"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP13-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP13"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP13-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP13"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP14-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP14"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP14-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP14"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP14-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP14"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP15-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP15"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "19" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP15-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP15"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "19" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP15-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP15"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "19" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP16-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP16"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP16-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP16"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP16-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP16"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP17-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP17"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP17-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP17"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP17-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP17"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP18-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP18"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP18-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP18"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP18-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP18"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP19-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP19"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP19-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP19"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP19-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP19"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP20-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP20"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP20-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP20"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP20-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP20"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP21-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP21"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP21-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP21"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP21-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP21"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP22-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP22"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP22-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP22"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP22-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP22"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP23-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP23"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1a" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP23-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP23"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1a" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP23-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP23"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1a" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP24-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP24"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP24-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP24"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP24-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP24"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP25-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP25"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP25-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP25"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP25-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP25"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP26-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP26"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP26-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP26"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP26-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP26"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP27-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP27"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP27-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP27"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP27-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP27"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP28-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP28"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP28-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP28"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP28-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP28"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP29-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP29"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP29-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP29"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP29-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP29"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP30-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP30"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP30-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP30"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP30-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP30"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP31-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP31"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1b" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP31-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP31"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1b" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP31-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP31"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1b" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP32-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP32"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP32-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP32"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP32-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP32"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP33-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP33"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP33-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP33"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP33-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP33"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP34-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP34"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP34-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP34"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP34-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP34"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP35-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP35"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP35-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP35"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP35-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP35"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP36-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP36"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP36-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP36"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP36-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP36"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP37-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP37"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP37-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP37"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP37-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP37"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP38-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP38"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP38-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP38"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP38-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP38"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP39-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP39"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1c" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP39-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP39"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1c" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP39-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP39"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1c" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP40-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP40"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP40-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP40"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP40-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP40"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP41-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP41"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP41-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP41"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP41-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP41"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP42-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP42"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP42-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP42"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP42-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP42"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP43-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP43"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP43-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP43"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP43-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP43"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP44-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP44"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP44-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP44"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP44-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP44"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP45-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP45"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP45-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP45"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP45-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP45"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP46-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP46"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP46-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP46"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP46-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP46"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP47-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP47"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1d" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP47-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP47"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1d" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP47-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP47"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1d" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP48-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP48"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP48-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP48"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP48-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP48"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP49-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP49"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP49-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP49"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP49-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP49"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP50-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP50"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP50-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP50"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP50-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP50"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP51-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP51"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP51-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP51"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP51-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP51"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP52-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP52"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP52-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP52"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP52-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP52"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP53-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP53"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP53-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP53"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP53-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP53"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP54-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP54"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP54-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP54"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP54-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP54"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP55-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP55"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1e" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP55-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP55"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1e" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP55-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP55"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1e" "/7")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP56-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP56"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP56-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP56"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/0")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP56-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP56"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/0")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP57-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP57"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP57-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP57"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/1")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP57-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP57"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/1")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP58-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP58"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP58-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP58"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/2")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP58-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP58"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/2")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP59-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP59"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP59-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP59"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/3")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP59-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP59"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/3")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP60-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP60"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP60-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP60"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/4")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP60-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP60"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/4")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP61-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP61"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP61-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP61"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/5")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP61-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP61"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/5")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP62-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP62"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP62-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP62"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/6")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP62-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP62"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/6")
:arch-flags (list "X64" "UNDOC")))

(defparameter HINT_NOP63-rm16 (make-instance 'x64-asm-instruction
:name "HINT_NOP63"
:req-operands (list "rm16")
:code-format (list "[m:" "o16" "0f" "1f" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP63-rm32 (make-instance 'x64-asm-instruction
:name "HINT_NOP63"
:req-operands (list "rm32")
:code-format (list "[m:" "o32" "0f" "1f" "/7")
:arch-flags (list "P6" "UNDOC")))

(defparameter HINT_NOP63-rm64 (make-instance 'x64-asm-instruction
:name "HINT_NOP63"
:req-operands (list "rm64")
:code-format (list "[m:" "o64" "0f" "1f" "/7")
:arch-flags (list "X64" "UNDOC")))

(setf (gethash "REP" *x64-instruction-variants-hash-table*) (list REP))

(setf (gethash "REPE" *x64-instruction-variants-hash-table*) (list REPE))

(setf (gethash "REPZ" *x64-instruction-variants-hash-table*) (list REPZ))

(setf (gethash "REPNE" *x64-instruction-variants-hash-table*) (list REPNE))

(setf (gethash "REPNZ" *x64-instruction-variants-hash-table*) (list REPNZ))

(setf (gethash "ADC" *x64-instruction-variants-hash-table*) (list
ADC-mem.reg8
ADC-reg8.reg8-mr
ADC-mem.reg16
ADC-reg16.reg16-mr
ADC-mem.reg32
ADC-reg32.reg32-mr
ADC-mem.reg64
ADC-reg64.reg64-mr
ADC-reg8.mem
ADC-reg8.reg8-rm
ADC-reg16.mem
ADC-reg16.reg16-rm
ADC-reg32.mem
ADC-reg32.reg32-rm
ADC-reg64.mem
ADC-reg64.reg64-rm
ADC-rm16.imm8
ADC-rm32.imm8
ADC-rm64.imm8
ADC-reg_al.imm
ADC-reg_ax.sbyteword
ADC-reg_ax.imm
ADC-reg_eax.sbytedword
ADC-reg_eax.imm
ADC-reg_rax.sbytedword
ADC-reg_rax.imm
ADC-rm8.imm
ADC-rm16.sbyteword
ADC-rm16.imm
ADC-rm32.sbytedword
ADC-rm32.imm
ADC-rm64.sbytedword
ADC-rm64.imm
ADC-mem.imm8
ADC-mem.sbyteword16
ADC-mem.imm16
ADC-mem.sbytedword32
ADC-mem.imm32))

(setf (gethash "ADC-mem.imm16" *x64-instruction-variants-hash-table*) (list
ADC-mem.imm16))

(setf (gethash "ADC-mem.imm32" *x64-instruction-variants-hash-table*) (list
ADC-mem.imm32))

(setf (gethash "ADC-mem.imm8" *x64-instruction-variants-hash-table*) (list
ADC-mem.imm8))

(setf (gethash "ADC-mem.reg16" *x64-instruction-variants-hash-table*) (list
ADC-mem.reg16))

(setf (gethash "ADC-mem.reg32" *x64-instruction-variants-hash-table*) (list
ADC-mem.reg32))

(setf (gethash "ADC-mem.reg64" *x64-instruction-variants-hash-table*) (list
ADC-mem.reg64))

(setf (gethash "ADC-mem.reg8" *x64-instruction-variants-hash-table*) (list
ADC-mem.reg8))

(setf (gethash "ADC-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
ADC-mem.sbytedword32))

(setf (gethash "ADC-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
ADC-mem.sbyteword16))

(setf (gethash "ADC-reg16.mem" *x64-instruction-variants-hash-table*) (list
ADC-reg16.mem))

(setf (gethash "ADC-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
ADC-reg16.reg16-mr))

(setf (gethash "ADC-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
ADC-reg16.reg16-rm))

(setf (gethash "ADC-reg32.mem" *x64-instruction-variants-hash-table*) (list
ADC-reg32.mem))

(setf (gethash "ADC-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
ADC-reg32.reg32-mr))

(setf (gethash "ADC-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
ADC-reg32.reg32-rm))

(setf (gethash "ADC-reg64.mem" *x64-instruction-variants-hash-table*) (list
ADC-reg64.mem))

(setf (gethash "ADC-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
ADC-reg64.reg64-mr))

(setf (gethash "ADC-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
ADC-reg64.reg64-rm))

(setf (gethash "ADC-reg8.mem" *x64-instruction-variants-hash-table*) (list
ADC-reg8.mem))

(setf (gethash "ADC-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
ADC-reg8.reg8-mr))

(setf (gethash "ADC-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
ADC-reg8.reg8-rm))

(setf (gethash "ADC-reg_al.imm" *x64-instruction-variants-hash-table*) (list
ADC-reg_al.imm))

(setf (gethash "ADC-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
ADC-reg_ax.imm))

(setf (gethash "ADC-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
ADC-reg_ax.sbyteword))

(setf (gethash "ADC-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
ADC-reg_eax.imm))

(setf (gethash "ADC-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
ADC-reg_eax.sbytedword))

(setf (gethash "ADC-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
ADC-reg_rax.imm))

(setf (gethash "ADC-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
ADC-reg_rax.sbytedword))

(setf (gethash "ADC-rm16.imm" *x64-instruction-variants-hash-table*) (list
ADC-rm16.imm))

(setf (gethash "ADC-rm16.imm8" *x64-instruction-variants-hash-table*) (list
ADC-rm16.imm8))

(setf (gethash "ADC-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
ADC-rm16.sbyteword))

(setf (gethash "ADC-rm32.imm" *x64-instruction-variants-hash-table*) (list
ADC-rm32.imm))

(setf (gethash "ADC-rm32.imm8" *x64-instruction-variants-hash-table*) (list
ADC-rm32.imm8))

(setf (gethash "ADC-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
ADC-rm32.sbytedword))

(setf (gethash "ADC-rm64.imm" *x64-instruction-variants-hash-table*) (list
ADC-rm64.imm))

(setf (gethash "ADC-rm64.imm8" *x64-instruction-variants-hash-table*) (list
ADC-rm64.imm8))

(setf (gethash "ADC-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
ADC-rm64.sbytedword))

(setf (gethash "ADC-rm8.imm" *x64-instruction-variants-hash-table*) (list
ADC-rm8.imm))

(setf (gethash "ADCX" *x64-instruction-variants-hash-table*) (list
ADCX-reg32.rm32
ADCX-reg64.rm64))

(setf (gethash "ADCX-reg32.rm32" *x64-instruction-variants-hash-table*) (list
ADCX-reg32.rm32))

(setf (gethash "ADCX-reg64.rm64" *x64-instruction-variants-hash-table*) (list
ADCX-reg64.rm64))

(setf (gethash "ADD" *x64-instruction-variants-hash-table*) (list
ADD-mem.reg8
ADD-reg8.reg8-mr
ADD-mem.reg16
ADD-reg16.reg16-mr
ADD-mem.reg32
ADD-reg32.reg32-mr
ADD-mem.reg64
ADD-reg64.reg64-mr
ADD-reg8.mem
ADD-reg8.reg8-rm
ADD-reg16.mem
ADD-reg16.reg16-rm
ADD-reg32.mem
ADD-reg32.reg32-rm
ADD-reg64.mem
ADD-reg64.reg64-rm
ADD-rm16.imm8
ADD-rm32.imm8
ADD-rm64.imm8
ADD-reg_al.imm
ADD-reg_ax.sbyteword
ADD-reg_ax.imm
ADD-reg_eax.sbytedword
ADD-reg_eax.imm
ADD-reg_rax.sbytedword
ADD-reg_rax.imm
ADD-rm8.imm
ADD-rm16.sbyteword
ADD-rm16.imm
ADD-rm32.sbytedword
ADD-rm32.imm
ADD-rm64.sbytedword
ADD-rm64.imm
ADD-mem.imm8
ADD-mem.sbyteword16
ADD-mem.imm16
ADD-mem.sbytedword32
ADD-mem.imm32))

(setf (gethash "ADD-mem.imm16" *x64-instruction-variants-hash-table*) (list
ADD-mem.imm16))

(setf (gethash "ADD-mem.imm32" *x64-instruction-variants-hash-table*) (list
ADD-mem.imm32))

(setf (gethash "ADD-mem.imm8" *x64-instruction-variants-hash-table*) (list
ADD-mem.imm8))

(setf (gethash "ADD-mem.reg16" *x64-instruction-variants-hash-table*) (list
ADD-mem.reg16))

(setf (gethash "ADD-mem.reg32" *x64-instruction-variants-hash-table*) (list
ADD-mem.reg32))

(setf (gethash "ADD-mem.reg64" *x64-instruction-variants-hash-table*) (list
ADD-mem.reg64))

(setf (gethash "ADD-mem.reg8" *x64-instruction-variants-hash-table*) (list
ADD-mem.reg8))

(setf (gethash "ADD-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
ADD-mem.sbytedword32))

(setf (gethash "ADD-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
ADD-mem.sbyteword16))

(setf (gethash "ADD-reg16.mem" *x64-instruction-variants-hash-table*) (list
ADD-reg16.mem))

(setf (gethash "ADD-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
ADD-reg16.reg16-mr))

(setf (gethash "ADD-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
ADD-reg16.reg16-rm))

(setf (gethash "ADD-reg32.mem" *x64-instruction-variants-hash-table*) (list
ADD-reg32.mem))

(setf (gethash "ADD-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
ADD-reg32.reg32-mr))

(setf (gethash "ADD-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
ADD-reg32.reg32-rm))

(setf (gethash "ADD-reg64.mem" *x64-instruction-variants-hash-table*) (list
ADD-reg64.mem))

(setf (gethash "ADD-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
ADD-reg64.reg64-mr))

(setf (gethash "ADD-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
ADD-reg64.reg64-rm))

(setf (gethash "ADD-reg8.mem" *x64-instruction-variants-hash-table*) (list
ADD-reg8.mem))

(setf (gethash "ADD-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
ADD-reg8.reg8-mr))

(setf (gethash "ADD-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
ADD-reg8.reg8-rm))

(setf (gethash "ADD-reg_al.imm" *x64-instruction-variants-hash-table*) (list
ADD-reg_al.imm))

(setf (gethash "ADD-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
ADD-reg_ax.imm))

(setf (gethash "ADD-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
ADD-reg_ax.sbyteword))

(setf (gethash "ADD-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
ADD-reg_eax.imm))

(setf (gethash "ADD-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
ADD-reg_eax.sbytedword))

(setf (gethash "ADD-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
ADD-reg_rax.imm))

(setf (gethash "ADD-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
ADD-reg_rax.sbytedword))

(setf (gethash "ADD-rm16.imm" *x64-instruction-variants-hash-table*) (list
ADD-rm16.imm))

(setf (gethash "ADD-rm16.imm8" *x64-instruction-variants-hash-table*) (list
ADD-rm16.imm8))

(setf (gethash "ADD-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
ADD-rm16.sbyteword))

(setf (gethash "ADD-rm32.imm" *x64-instruction-variants-hash-table*) (list
ADD-rm32.imm))

(setf (gethash "ADD-rm32.imm8" *x64-instruction-variants-hash-table*) (list
ADD-rm32.imm8))

(setf (gethash "ADD-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
ADD-rm32.sbytedword))

(setf (gethash "ADD-rm64.imm" *x64-instruction-variants-hash-table*) (list
ADD-rm64.imm))

(setf (gethash "ADD-rm64.imm8" *x64-instruction-variants-hash-table*) (list
ADD-rm64.imm8))

(setf (gethash "ADD-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
ADD-rm64.sbytedword))

(setf (gethash "ADD-rm8.imm" *x64-instruction-variants-hash-table*) (list
ADD-rm8.imm))

(setf (gethash "ADDPD" *x64-instruction-variants-hash-table*) (list
ADDPD-xmmreg.xmmrm))

(setf (gethash "ADDPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ADDPD-xmmreg.xmmrm))

(setf (gethash "ADDPS" *x64-instruction-variants-hash-table*) (list
ADDPS-xmmreg.xmmrm128))

(setf (gethash "ADDPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
ADDPS-xmmreg.xmmrm128))

(setf (gethash "ADDSD" *x64-instruction-variants-hash-table*) (list
ADDSD-xmmreg.xmmrm))

(setf (gethash "ADDSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ADDSD-xmmreg.xmmrm))

(setf (gethash "ADDSS" *x64-instruction-variants-hash-table*) (list
ADDSS-xmmreg.xmmrm32))

(setf (gethash "ADDSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
ADDSS-xmmreg.xmmrm32))

(setf (gethash "ADDSUBPD" *x64-instruction-variants-hash-table*) (list
ADDSUBPD-xmmreg.xmmrm))

(setf (gethash "ADDSUBPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ADDSUBPD-xmmreg.xmmrm))

(setf (gethash "ADDSUBPS" *x64-instruction-variants-hash-table*) (list
ADDSUBPS-xmmreg.xmmrm))

(setf (gethash "ADDSUBPS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ADDSUBPS-xmmreg.xmmrm))

(setf (gethash "ADOX" *x64-instruction-variants-hash-table*) (list
ADOX-reg32.rm32
ADOX-reg64.rm64))

(setf (gethash "ADOX-reg32.rm32" *x64-instruction-variants-hash-table*) (list
ADOX-reg32.rm32))

(setf (gethash "ADOX-reg64.rm64" *x64-instruction-variants-hash-table*) (list
ADOX-reg64.rm64))

(setf (gethash "AESDEC" *x64-instruction-variants-hash-table*) (list
AESDEC-xmmreg.xmmrm128))

(setf (gethash "AESDEC-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
AESDEC-xmmreg.xmmrm128))

(setf (gethash "AESDECLAST" *x64-instruction-variants-hash-table*) (list
AESDECLAST-xmmreg.xmmrm128))

(setf (gethash "AESDECLAST-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
AESDECLAST-xmmreg.xmmrm128))

(setf (gethash "AESENC" *x64-instruction-variants-hash-table*) (list
AESENC-xmmreg.xmmrm128))

(setf (gethash "AESENC-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
AESENC-xmmreg.xmmrm128))

(setf (gethash "AESENCLAST" *x64-instruction-variants-hash-table*) (list
AESENCLAST-xmmreg.xmmrm128))

(setf (gethash "AESENCLAST-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
AESENCLAST-xmmreg.xmmrm128))

(setf (gethash "AESIMC" *x64-instruction-variants-hash-table*) (list
AESIMC-xmmreg.xmmrm128))

(setf (gethash "AESIMC-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
AESIMC-xmmreg.xmmrm128))

(setf (gethash "AESKEYGENASSIST" *x64-instruction-variants-hash-table*) (list
AESKEYGENASSIST-xmmreg.xmmrm128.imm8))

(setf (gethash "AESKEYGENASSIST-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
AESKEYGENASSIST-xmmreg.xmmrm128.imm8))

(setf (gethash "AND" *x64-instruction-variants-hash-table*) (list
AND-mem.reg8
AND-reg8.reg8-mr
AND-mem.reg16
AND-reg16.reg16-mr
AND-mem.reg32
AND-reg32.reg32-mr
AND-mem.reg64
AND-reg64.reg64-mr
AND-reg8.mem
AND-reg8.reg8-rm
AND-reg16.mem
AND-reg16.reg16-rm
AND-reg32.mem
AND-reg32.reg32-rm
AND-reg64.mem
AND-reg64.reg64-rm
AND-rm16.imm8
AND-rm32.imm8
AND-rm64.imm8
AND-reg_al.imm
AND-reg_ax.sbyteword
AND-reg_ax.imm
AND-reg_eax.sbytedword
AND-reg_eax.imm
AND-reg_rax.sbytedword
AND-reg_rax.imm
AND-rm8.imm
AND-rm16.sbyteword
AND-rm16.imm
AND-rm32.sbytedword
AND-rm32.imm
AND-rm64.sbytedword
AND-rm64.imm
AND-mem.imm8
AND-mem.sbyteword16
AND-mem.imm16
AND-mem.sbytedword32
AND-mem.imm32))

(setf (gethash "AND-mem.imm16" *x64-instruction-variants-hash-table*) (list
AND-mem.imm16))

(setf (gethash "AND-mem.imm32" *x64-instruction-variants-hash-table*) (list
AND-mem.imm32))

(setf (gethash "AND-mem.imm8" *x64-instruction-variants-hash-table*) (list
AND-mem.imm8))

(setf (gethash "AND-mem.reg16" *x64-instruction-variants-hash-table*) (list
AND-mem.reg16))

(setf (gethash "AND-mem.reg32" *x64-instruction-variants-hash-table*) (list
AND-mem.reg32))

(setf (gethash "AND-mem.reg64" *x64-instruction-variants-hash-table*) (list
AND-mem.reg64))

(setf (gethash "AND-mem.reg8" *x64-instruction-variants-hash-table*) (list
AND-mem.reg8))

(setf (gethash "AND-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
AND-mem.sbytedword32))

(setf (gethash "AND-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
AND-mem.sbyteword16))

(setf (gethash "AND-reg16.mem" *x64-instruction-variants-hash-table*) (list
AND-reg16.mem))

(setf (gethash "AND-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
AND-reg16.reg16-mr))

(setf (gethash "AND-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
AND-reg16.reg16-rm))

(setf (gethash "AND-reg32.mem" *x64-instruction-variants-hash-table*) (list
AND-reg32.mem))

(setf (gethash "AND-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
AND-reg32.reg32-mr))

(setf (gethash "AND-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
AND-reg32.reg32-rm))

(setf (gethash "AND-reg64.mem" *x64-instruction-variants-hash-table*) (list
AND-reg64.mem))

(setf (gethash "AND-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
AND-reg64.reg64-mr))

(setf (gethash "AND-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
AND-reg64.reg64-rm))

(setf (gethash "AND-reg8.mem" *x64-instruction-variants-hash-table*) (list
AND-reg8.mem))

(setf (gethash "AND-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
AND-reg8.reg8-mr))

(setf (gethash "AND-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
AND-reg8.reg8-rm))

(setf (gethash "AND-reg_al.imm" *x64-instruction-variants-hash-table*) (list
AND-reg_al.imm))

(setf (gethash "AND-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
AND-reg_ax.imm))

(setf (gethash "AND-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
AND-reg_ax.sbyteword))

(setf (gethash "AND-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
AND-reg_eax.imm))

(setf (gethash "AND-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
AND-reg_eax.sbytedword))

(setf (gethash "AND-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
AND-reg_rax.imm))

(setf (gethash "AND-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
AND-reg_rax.sbytedword))

(setf (gethash "AND-rm16.imm" *x64-instruction-variants-hash-table*) (list
AND-rm16.imm))

(setf (gethash "AND-rm16.imm8" *x64-instruction-variants-hash-table*) (list
AND-rm16.imm8))

(setf (gethash "AND-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
AND-rm16.sbyteword))

(setf (gethash "AND-rm32.imm" *x64-instruction-variants-hash-table*) (list
AND-rm32.imm))

(setf (gethash "AND-rm32.imm8" *x64-instruction-variants-hash-table*) (list
AND-rm32.imm8))

(setf (gethash "AND-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
AND-rm32.sbytedword))

(setf (gethash "AND-rm64.imm" *x64-instruction-variants-hash-table*) (list
AND-rm64.imm))

(setf (gethash "AND-rm64.imm8" *x64-instruction-variants-hash-table*) (list
AND-rm64.imm8))

(setf (gethash "AND-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
AND-rm64.sbytedword))

(setf (gethash "AND-rm8.imm" *x64-instruction-variants-hash-table*) (list
AND-rm8.imm))

(setf (gethash "ANDN" *x64-instruction-variants-hash-table*) (list
ANDN-reg32.reg32.rm32-rv
ANDN-reg64.reg64.rm64-rv))

(setf (gethash "ANDN-reg32.reg32.rm32-rv" *x64-instruction-variants-hash-table*) (list
ANDN-reg32.reg32.rm32-rv))

(setf (gethash "ANDN-reg64.reg64.rm64-rv" *x64-instruction-variants-hash-table*) (list
ANDN-reg64.reg64.rm64-rv))

(setf (gethash "ANDNPD" *x64-instruction-variants-hash-table*) (list
ANDNPD-xmmreg.xmmrm))

(setf (gethash "ANDNPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ANDNPD-xmmreg.xmmrm))

(setf (gethash "ANDNPS" *x64-instruction-variants-hash-table*) (list
ANDNPS-xmmreg.xmmrm128))

(setf (gethash "ANDNPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
ANDNPS-xmmreg.xmmrm128))

(setf (gethash "ANDPD" *x64-instruction-variants-hash-table*) (list
ANDPD-xmmreg.xmmrm))

(setf (gethash "ANDPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ANDPD-xmmreg.xmmrm))

(setf (gethash "ANDPS" *x64-instruction-variants-hash-table*) (list
ANDPS-xmmreg.xmmrm128))

(setf (gethash "ANDPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
ANDPS-xmmreg.xmmrm128))

(setf (gethash "BB0_RESET" *x64-instruction-variants-hash-table*) (list
BB0_RESET-void))

(setf (gethash "BB0_RESET-void" *x64-instruction-variants-hash-table*) (list
BB0_RESET-void))

(setf (gethash "BB1_RESET" *x64-instruction-variants-hash-table*) (list
BB1_RESET-void))

(setf (gethash "BB1_RESET-void" *x64-instruction-variants-hash-table*) (list
BB1_RESET-void))

(setf (gethash "BEXTR" *x64-instruction-variants-hash-table*) (list
BEXTR-reg32.rm32.reg32
BEXTR-reg64.rm64.reg64
BEXTR-reg32.rm32.imm32
BEXTR-reg64.rm64.imm32))

(setf (gethash "BEXTR-reg32.rm32.imm32" *x64-instruction-variants-hash-table*) (list
BEXTR-reg32.rm32.imm32))

(setf (gethash "BEXTR-reg32.rm32.reg32" *x64-instruction-variants-hash-table*) (list
BEXTR-reg32.rm32.reg32))

(setf (gethash "BEXTR-reg64.rm64.imm32" *x64-instruction-variants-hash-table*) (list
BEXTR-reg64.rm64.imm32))

(setf (gethash "BEXTR-reg64.rm64.reg64" *x64-instruction-variants-hash-table*) (list
BEXTR-reg64.rm64.reg64))

(setf (gethash "BLCFILL" *x64-instruction-variants-hash-table*) (list
BLCFILL-reg32.rm32
BLCFILL-reg64.rm64))

(setf (gethash "BLCFILL-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLCFILL-reg32.rm32))

(setf (gethash "BLCFILL-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLCFILL-reg64.rm64))

(setf (gethash "BLCI" *x64-instruction-variants-hash-table*) (list
BLCI-reg32.rm32
BLCI-reg64.rm64))

(setf (gethash "BLCI-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLCI-reg32.rm32))

(setf (gethash "BLCI-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLCI-reg64.rm64))

(setf (gethash "BLCIC" *x64-instruction-variants-hash-table*) (list
BLCIC-reg32.rm32
BLCIC-reg64.rm64))

(setf (gethash "BLCIC-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLCIC-reg32.rm32))

(setf (gethash "BLCIC-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLCIC-reg64.rm64))

(setf (gethash "BLCMSK" *x64-instruction-variants-hash-table*) (list
BLCMSK-reg32.rm32
BLCMSK-reg64.rm64))

(setf (gethash "BLCMSK-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLCMSK-reg32.rm32))

(setf (gethash "BLCMSK-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLCMSK-reg64.rm64))

(setf (gethash "BLCS" *x64-instruction-variants-hash-table*) (list
BLCS-reg32.rm32
BLCS-reg64.rm64))

(setf (gethash "BLCS-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLCS-reg32.rm32))

(setf (gethash "BLCS-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLCS-reg64.rm64))

(setf (gethash "BLENDPD" *x64-instruction-variants-hash-table*) (list
BLENDPD-xmmreg.xmmrm.imm))

(setf (gethash "BLENDPD-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
BLENDPD-xmmreg.xmmrm.imm))

(setf (gethash "BLENDPS" *x64-instruction-variants-hash-table*) (list
BLENDPS-xmmreg.xmmrm.imm))

(setf (gethash "BLENDPS-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
BLENDPS-xmmreg.xmmrm.imm))

(setf (gethash "BLENDVPD" *x64-instruction-variants-hash-table*) (list
BLENDVPD-xmmreg.xmmrm.xmm0
BLENDVPD-xmmreg.xmmrm))

(setf (gethash "BLENDVPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
BLENDVPD-xmmreg.xmmrm))

(setf (gethash "BLENDVPD-xmmreg.xmmrm.xmm0" *x64-instruction-variants-hash-table*) (list
BLENDVPD-xmmreg.xmmrm.xmm0))

(setf (gethash "BLENDVPS" *x64-instruction-variants-hash-table*) (list
BLENDVPS-xmmreg.xmmrm.xmm0
BLENDVPS-xmmreg.xmmrm))

(setf (gethash "BLENDVPS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
BLENDVPS-xmmreg.xmmrm))

(setf (gethash "BLENDVPS-xmmreg.xmmrm.xmm0" *x64-instruction-variants-hash-table*) (list
BLENDVPS-xmmreg.xmmrm.xmm0))

(setf (gethash "BLSFILL" *x64-instruction-variants-hash-table*) (list
BLSFILL-reg32.rm32
BLSFILL-reg64.rm64))

(setf (gethash "BLSFILL-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLSFILL-reg32.rm32))

(setf (gethash "BLSFILL-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLSFILL-reg64.rm64))

(setf (gethash "BLSI" *x64-instruction-variants-hash-table*) (list
BLSI-reg32.rm32
BLSI-reg64.rm64))

(setf (gethash "BLSI-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLSI-reg32.rm32))

(setf (gethash "BLSI-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLSI-reg64.rm64))

(setf (gethash "BLSIC" *x64-instruction-variants-hash-table*) (list
BLSIC-reg32.rm32
BLSIC-reg64.rm64))

(setf (gethash "BLSIC-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLSIC-reg32.rm32))

(setf (gethash "BLSIC-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLSIC-reg64.rm64))

(setf (gethash "BLSMSK" *x64-instruction-variants-hash-table*) (list
BLSMSK-reg32.rm32
BLSMSK-reg64.rm64))

(setf (gethash "BLSMSK-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLSMSK-reg32.rm32))

(setf (gethash "BLSMSK-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLSMSK-reg64.rm64))

(setf (gethash "BLSR" *x64-instruction-variants-hash-table*) (list
BLSR-reg32.rm32
BLSR-reg64.rm64))

(setf (gethash "BLSR-reg32.rm32" *x64-instruction-variants-hash-table*) (list
BLSR-reg32.rm32))

(setf (gethash "BLSR-reg64.rm64" *x64-instruction-variants-hash-table*) (list
BLSR-reg64.rm64))

(setf (gethash "BNDCL" *x64-instruction-variants-hash-table*) (list
BNDCL-bndreg.mem
BNDCL-bndreg.reg64))

(setf (gethash "BNDCL-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDCL-bndreg.mem))

(setf (gethash "BNDCL-bndreg.reg64" *x64-instruction-variants-hash-table*) (list
BNDCL-bndreg.reg64))

(setf (gethash "BNDCN" *x64-instruction-variants-hash-table*) (list
BNDCN-bndreg.mem
BNDCN-bndreg.reg64))

(setf (gethash "BNDCN-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDCN-bndreg.mem))

(setf (gethash "BNDCN-bndreg.reg64" *x64-instruction-variants-hash-table*) (list
BNDCN-bndreg.reg64))

(setf (gethash "BNDCU" *x64-instruction-variants-hash-table*) (list
BNDCU-bndreg.mem
BNDCU-bndreg.reg64))

(setf (gethash "BNDCU-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDCU-bndreg.mem))

(setf (gethash "BNDCU-bndreg.reg64" *x64-instruction-variants-hash-table*) (list
BNDCU-bndreg.reg64))

(setf (gethash "BNDLDX" *x64-instruction-variants-hash-table*) (list
BNDLDX-bndreg.mem
BNDLDX-bndreg.mem.reg64))

(setf (gethash "BNDLDX-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDLDX-bndreg.mem))

(setf (gethash "BNDLDX-bndreg.mem.reg64" *x64-instruction-variants-hash-table*) (list
BNDLDX-bndreg.mem.reg64))

(setf (gethash "BNDMK" *x64-instruction-variants-hash-table*) (list
BNDMK-bndreg.mem))

(setf (gethash "BNDMK-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDMK-bndreg.mem))

(setf (gethash "BNDMOV" *x64-instruction-variants-hash-table*) (list
BNDMOV-bndreg.bndreg
BNDMOV-bndreg.mem
BNDMOV-bndreg.bndreg
BNDMOV-mem.bndreg))

(setf (gethash "BNDMOV-bndreg.bndreg" *x64-instruction-variants-hash-table*) (list
BNDMOV-bndreg.bndreg
BNDMOV-bndreg.bndreg))

(setf (gethash "BNDMOV-bndreg.mem" *x64-instruction-variants-hash-table*) (list
BNDMOV-bndreg.mem))

(setf (gethash "BNDMOV-mem.bndreg" *x64-instruction-variants-hash-table*) (list
BNDMOV-mem.bndreg))

(setf (gethash "BNDSTX" *x64-instruction-variants-hash-table*) (list
BNDSTX-mem.bndreg
BNDSTX-mem.reg64.bndreg
BNDSTX-mem.bndreg.reg64))

(setf (gethash "BNDSTX-mem.bndreg" *x64-instruction-variants-hash-table*) (list
BNDSTX-mem.bndreg))

(setf (gethash "BNDSTX-mem.bndreg.reg64" *x64-instruction-variants-hash-table*) (list
BNDSTX-mem.bndreg.reg64))

(setf (gethash "BNDSTX-mem.reg64.bndreg" *x64-instruction-variants-hash-table*) (list
BNDSTX-mem.reg64.bndreg))

(setf (gethash "BSF" *x64-instruction-variants-hash-table*) (list
BSF-reg16.mem
BSF-reg16.reg16-rm
BSF-reg32.mem
BSF-reg32.reg32-rm
BSF-reg64.mem
BSF-reg64.reg64-rm))

(setf (gethash "BSF-reg16.mem" *x64-instruction-variants-hash-table*) (list
BSF-reg16.mem))

(setf (gethash "BSF-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
BSF-reg16.reg16-rm))

(setf (gethash "BSF-reg32.mem" *x64-instruction-variants-hash-table*) (list
BSF-reg32.mem))

(setf (gethash "BSF-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
BSF-reg32.reg32-rm))

(setf (gethash "BSF-reg64.mem" *x64-instruction-variants-hash-table*) (list
BSF-reg64.mem))

(setf (gethash "BSF-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
BSF-reg64.reg64-rm))

(setf (gethash "BSR" *x64-instruction-variants-hash-table*) (list
BSR-reg16.mem
BSR-reg16.reg16-rm
BSR-reg32.mem
BSR-reg32.reg32-rm
BSR-reg64.mem
BSR-reg64.reg64-rm))

(setf (gethash "BSR-reg16.mem" *x64-instruction-variants-hash-table*) (list
BSR-reg16.mem))

(setf (gethash "BSR-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
BSR-reg16.reg16-rm))

(setf (gethash "BSR-reg32.mem" *x64-instruction-variants-hash-table*) (list
BSR-reg32.mem))

(setf (gethash "BSR-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
BSR-reg32.reg32-rm))

(setf (gethash "BSR-reg64.mem" *x64-instruction-variants-hash-table*) (list
BSR-reg64.mem))

(setf (gethash "BSR-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
BSR-reg64.reg64-rm))

(setf (gethash "BSWAP" *x64-instruction-variants-hash-table*) (list
BSWAP-reg32
BSWAP-reg64))

(setf (gethash "BSWAP-reg32" *x64-instruction-variants-hash-table*) (list
BSWAP-reg32))

(setf (gethash "BSWAP-reg64" *x64-instruction-variants-hash-table*) (list
BSWAP-reg64))

(setf (gethash "BT" *x64-instruction-variants-hash-table*) (list
BT-mem.reg16
BT-reg16.reg16-mr
BT-mem.reg32
BT-reg32.reg32-mr
BT-mem.reg64
BT-reg64.reg64-mr
BT-rm16.imm
BT-rm32.imm
BT-rm64.imm))

(setf (gethash "BT-mem.reg16" *x64-instruction-variants-hash-table*) (list
BT-mem.reg16))

(setf (gethash "BT-mem.reg32" *x64-instruction-variants-hash-table*) (list
BT-mem.reg32))

(setf (gethash "BT-mem.reg64" *x64-instruction-variants-hash-table*) (list
BT-mem.reg64))

(setf (gethash "BT-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
BT-reg16.reg16-mr))

(setf (gethash "BT-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
BT-reg32.reg32-mr))

(setf (gethash "BT-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
BT-reg64.reg64-mr))

(setf (gethash "BT-rm16.imm" *x64-instruction-variants-hash-table*) (list
BT-rm16.imm))

(setf (gethash "BT-rm32.imm" *x64-instruction-variants-hash-table*) (list
BT-rm32.imm))

(setf (gethash "BT-rm64.imm" *x64-instruction-variants-hash-table*) (list
BT-rm64.imm))

(setf (gethash "BTC" *x64-instruction-variants-hash-table*) (list
BTC-mem.reg16
BTC-reg16.reg16-mr
BTC-mem.reg32
BTC-reg32.reg32-mr
BTC-mem.reg64
BTC-reg64.reg64-mr
BTC-rm16.imm
BTC-rm32.imm
BTC-rm64.imm))

(setf (gethash "BTC-mem.reg16" *x64-instruction-variants-hash-table*) (list
BTC-mem.reg16))

(setf (gethash "BTC-mem.reg32" *x64-instruction-variants-hash-table*) (list
BTC-mem.reg32))

(setf (gethash "BTC-mem.reg64" *x64-instruction-variants-hash-table*) (list
BTC-mem.reg64))

(setf (gethash "BTC-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
BTC-reg16.reg16-mr))

(setf (gethash "BTC-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
BTC-reg32.reg32-mr))

(setf (gethash "BTC-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
BTC-reg64.reg64-mr))

(setf (gethash "BTC-rm16.imm" *x64-instruction-variants-hash-table*) (list
BTC-rm16.imm))

(setf (gethash "BTC-rm32.imm" *x64-instruction-variants-hash-table*) (list
BTC-rm32.imm))

(setf (gethash "BTC-rm64.imm" *x64-instruction-variants-hash-table*) (list
BTC-rm64.imm))

(setf (gethash "BTR" *x64-instruction-variants-hash-table*) (list
BTR-mem.reg16
BTR-reg16.reg16-mr
BTR-mem.reg32
BTR-reg32.reg32-mr
BTR-mem.reg64
BTR-reg64.reg64-mr
BTR-rm16.imm
BTR-rm32.imm
BTR-rm64.imm))

(setf (gethash "BTR-mem.reg16" *x64-instruction-variants-hash-table*) (list
BTR-mem.reg16))

(setf (gethash "BTR-mem.reg32" *x64-instruction-variants-hash-table*) (list
BTR-mem.reg32))

(setf (gethash "BTR-mem.reg64" *x64-instruction-variants-hash-table*) (list
BTR-mem.reg64))

(setf (gethash "BTR-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
BTR-reg16.reg16-mr))

(setf (gethash "BTR-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
BTR-reg32.reg32-mr))

(setf (gethash "BTR-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
BTR-reg64.reg64-mr))

(setf (gethash "BTR-rm16.imm" *x64-instruction-variants-hash-table*) (list
BTR-rm16.imm))

(setf (gethash "BTR-rm32.imm" *x64-instruction-variants-hash-table*) (list
BTR-rm32.imm))

(setf (gethash "BTR-rm64.imm" *x64-instruction-variants-hash-table*) (list
BTR-rm64.imm))

(setf (gethash "BTS" *x64-instruction-variants-hash-table*) (list
BTS-mem.reg16
BTS-reg16.reg16-mr
BTS-mem.reg32
BTS-reg32.reg32-mr
BTS-mem.reg64
BTS-reg64.reg64-mr
BTS-rm16.imm
BTS-rm32.imm
BTS-rm64.imm))

(setf (gethash "BTS-mem.reg16" *x64-instruction-variants-hash-table*) (list
BTS-mem.reg16))

(setf (gethash "BTS-mem.reg32" *x64-instruction-variants-hash-table*) (list
BTS-mem.reg32))

(setf (gethash "BTS-mem.reg64" *x64-instruction-variants-hash-table*) (list
BTS-mem.reg64))

(setf (gethash "BTS-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
BTS-reg16.reg16-mr))

(setf (gethash "BTS-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
BTS-reg32.reg32-mr))

(setf (gethash "BTS-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
BTS-reg64.reg64-mr))

(setf (gethash "BTS-rm16.imm" *x64-instruction-variants-hash-table*) (list
BTS-rm16.imm))

(setf (gethash "BTS-rm32.imm" *x64-instruction-variants-hash-table*) (list
BTS-rm32.imm))

(setf (gethash "BTS-rm64.imm" *x64-instruction-variants-hash-table*) (list
BTS-rm64.imm))

(setf (gethash "BZHI" *x64-instruction-variants-hash-table*) (list
BZHI-reg32.rm32.reg32
BZHI-reg64.rm64.reg64))

(setf (gethash "BZHI-reg32.rm32.reg32" *x64-instruction-variants-hash-table*) (list
BZHI-reg32.rm32.reg32))

(setf (gethash "BZHI-reg64.rm64.reg64" *x64-instruction-variants-hash-table*) (list
BZHI-reg64.rm64.reg64))

(setf (gethash "CALL" *x64-instruction-variants-hash-table*) (list
CALL-imm
CALL-imm-near
CALL-imm64
CALL-imm64-near
CALL-mem-far
CALL-mem16-far
CALL-mem32-far
CALL-mem64-far
CALL-mem-near
CALL-rm64-near
CALL-mem
CALL-rm64))

(setf (gethash "CALL-imm" *x64-instruction-variants-hash-table*) (list
CALL-imm))

(setf (gethash "CALL-imm-near" *x64-instruction-variants-hash-table*) (list
CALL-imm-near))

(setf (gethash "CALL-imm64" *x64-instruction-variants-hash-table*) (list
CALL-imm64))

(setf (gethash "CALL-imm64-near" *x64-instruction-variants-hash-table*) (list
CALL-imm64-near))

(setf (gethash "CALL-mem" *x64-instruction-variants-hash-table*) (list
CALL-mem))

(setf (gethash "CALL-mem-far" *x64-instruction-variants-hash-table*) (list
CALL-mem-far))

(setf (gethash "CALL-mem-near" *x64-instruction-variants-hash-table*) (list
CALL-mem-near))

(setf (gethash "CALL-mem16-far" *x64-instruction-variants-hash-table*) (list
CALL-mem16-far))

(setf (gethash "CALL-mem32-far" *x64-instruction-variants-hash-table*) (list
CALL-mem32-far))

(setf (gethash "CALL-mem64-far" *x64-instruction-variants-hash-table*) (list
CALL-mem64-far))

(setf (gethash "CALL-rm64" *x64-instruction-variants-hash-table*) (list
CALL-rm64))

(setf (gethash "CALL-rm64-near" *x64-instruction-variants-hash-table*) (list
CALL-rm64-near))

(setf (gethash "CBW" *x64-instruction-variants-hash-table*) (list
CBW-void))

(setf (gethash "CBW-void" *x64-instruction-variants-hash-table*) (list
CBW-void))

(setf (gethash "CDQ" *x64-instruction-variants-hash-table*) (list
CDQ-void))

(setf (gethash "CDQ-void" *x64-instruction-variants-hash-table*) (list
CDQ-void))

(setf (gethash "CDQE" *x64-instruction-variants-hash-table*) (list
CDQE-void))

(setf (gethash "CDQE-void" *x64-instruction-variants-hash-table*) (list
CDQE-void))

(setf (gethash "CLAC" *x64-instruction-variants-hash-table*) (list
CLAC-void))

(setf (gethash "CLAC-void" *x64-instruction-variants-hash-table*) (list
CLAC-void))

(setf (gethash "CLC" *x64-instruction-variants-hash-table*) (list
CLC-void))

(setf (gethash "CLC-void" *x64-instruction-variants-hash-table*) (list
CLC-void))

(setf (gethash "CLD" *x64-instruction-variants-hash-table*) (list
CLD-void))

(setf (gethash "CLD-void" *x64-instruction-variants-hash-table*) (list
CLD-void))

(setf (gethash "CLFLUSH" *x64-instruction-variants-hash-table*) (list
CLFLUSH-mem))

(setf (gethash "CLFLUSH-mem" *x64-instruction-variants-hash-table*) (list
CLFLUSH-mem))

(setf (gethash "CLFLUSHOPT" *x64-instruction-variants-hash-table*) (list
CLFLUSHOPT-mem))

(setf (gethash "CLFLUSHOPT-mem" *x64-instruction-variants-hash-table*) (list
CLFLUSHOPT-mem))

(setf (gethash "CLGI" *x64-instruction-variants-hash-table*) (list
CLGI-void))

(setf (gethash "CLGI-void" *x64-instruction-variants-hash-table*) (list
CLGI-void))

(setf (gethash "CLI" *x64-instruction-variants-hash-table*) (list
CLI-void))

(setf (gethash "CLI-void" *x64-instruction-variants-hash-table*) (list
CLI-void))

(setf (gethash "CLTS" *x64-instruction-variants-hash-table*) (list
CLTS-void))

(setf (gethash "CLTS-void" *x64-instruction-variants-hash-table*) (list
CLTS-void))

(setf (gethash "CLZERO" *x64-instruction-variants-hash-table*) (list
CLZERO-void))

(setf (gethash "CLZERO-void" *x64-instruction-variants-hash-table*) (list
CLZERO-void))

(setf (gethash "CMC" *x64-instruction-variants-hash-table*) (list
CMC-void))

(setf (gethash "CMC-void" *x64-instruction-variants-hash-table*) (list
CMC-void))

(setf (gethash "CMOVcc" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg16.mem
CMOVcc-reg16.reg16-rm
CMOVcc-reg32.mem
CMOVcc-reg32.reg32-rm
CMOVcc-reg64.mem
CMOVcc-reg64.reg64-rm))

(setf (gethash "CMOVcc-reg16.mem" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg16.mem))

(setf (gethash "CMOVcc-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg16.reg16-rm))

(setf (gethash "CMOVcc-reg32.mem" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg32.mem))

(setf (gethash "CMOVcc-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg32.reg32-rm))

(setf (gethash "CMOVcc-reg64.mem" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg64.mem))

(setf (gethash "CMOVcc-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
CMOVcc-reg64.reg64-rm))

(setf (gethash "CMP" *x64-instruction-variants-hash-table*) (list
CMP-mem.reg8
CMP-reg8.reg8-mr
CMP-mem.reg16
CMP-reg16.reg16-mr
CMP-mem.reg32
CMP-reg32.reg32-mr
CMP-mem.reg64
CMP-reg64.reg64-mr
CMP-reg8.mem
CMP-reg8.reg8-rm
CMP-reg16.mem
CMP-reg16.reg16-rm
CMP-reg32.mem
CMP-reg32.reg32-rm
CMP-reg64.mem
CMP-reg64.reg64-rm
CMP-rm16.imm8
CMP-rm32.imm8
CMP-rm64.imm8
CMP-reg_al.imm
CMP-reg_ax.sbyteword
CMP-reg_ax.imm
CMP-reg_eax.sbytedword
CMP-reg_eax.imm
CMP-reg_rax.sbytedword
CMP-reg_rax.imm
CMP-rm8.imm
CMP-rm16.sbyteword
CMP-rm16.imm
CMP-rm32.sbytedword
CMP-rm32.imm
CMP-rm64.sbytedword
CMP-rm64.imm
CMP-mem.imm8
CMP-mem.sbyteword16
CMP-mem.imm16
CMP-mem.sbytedword32
CMP-mem.imm32))

(setf (gethash "CMP-mem.imm16" *x64-instruction-variants-hash-table*) (list
CMP-mem.imm16))

(setf (gethash "CMP-mem.imm32" *x64-instruction-variants-hash-table*) (list
CMP-mem.imm32))

(setf (gethash "CMP-mem.imm8" *x64-instruction-variants-hash-table*) (list
CMP-mem.imm8))

(setf (gethash "CMP-mem.reg16" *x64-instruction-variants-hash-table*) (list
CMP-mem.reg16))

(setf (gethash "CMP-mem.reg32" *x64-instruction-variants-hash-table*) (list
CMP-mem.reg32))

(setf (gethash "CMP-mem.reg64" *x64-instruction-variants-hash-table*) (list
CMP-mem.reg64))

(setf (gethash "CMP-mem.reg8" *x64-instruction-variants-hash-table*) (list
CMP-mem.reg8))

(setf (gethash "CMP-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
CMP-mem.sbytedword32))

(setf (gethash "CMP-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
CMP-mem.sbyteword16))

(setf (gethash "CMP-reg16.mem" *x64-instruction-variants-hash-table*) (list
CMP-reg16.mem))

(setf (gethash "CMP-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
CMP-reg16.reg16-mr))

(setf (gethash "CMP-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
CMP-reg16.reg16-rm))

(setf (gethash "CMP-reg32.mem" *x64-instruction-variants-hash-table*) (list
CMP-reg32.mem))

(setf (gethash "CMP-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
CMP-reg32.reg32-mr))

(setf (gethash "CMP-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
CMP-reg32.reg32-rm))

(setf (gethash "CMP-reg64.mem" *x64-instruction-variants-hash-table*) (list
CMP-reg64.mem))

(setf (gethash "CMP-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
CMP-reg64.reg64-mr))

(setf (gethash "CMP-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
CMP-reg64.reg64-rm))

(setf (gethash "CMP-reg8.mem" *x64-instruction-variants-hash-table*) (list
CMP-reg8.mem))

(setf (gethash "CMP-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
CMP-reg8.reg8-mr))

(setf (gethash "CMP-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
CMP-reg8.reg8-rm))

(setf (gethash "CMP-reg_al.imm" *x64-instruction-variants-hash-table*) (list
CMP-reg_al.imm))

(setf (gethash "CMP-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
CMP-reg_ax.imm))

(setf (gethash "CMP-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
CMP-reg_ax.sbyteword))

(setf (gethash "CMP-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
CMP-reg_eax.imm))

(setf (gethash "CMP-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
CMP-reg_eax.sbytedword))

(setf (gethash "CMP-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
CMP-reg_rax.imm))

(setf (gethash "CMP-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
CMP-reg_rax.sbytedword))

(setf (gethash "CMP-rm16.imm" *x64-instruction-variants-hash-table*) (list
CMP-rm16.imm))

(setf (gethash "CMP-rm16.imm8" *x64-instruction-variants-hash-table*) (list
CMP-rm16.imm8))

(setf (gethash "CMP-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
CMP-rm16.sbyteword))

(setf (gethash "CMP-rm32.imm" *x64-instruction-variants-hash-table*) (list
CMP-rm32.imm))

(setf (gethash "CMP-rm32.imm8" *x64-instruction-variants-hash-table*) (list
CMP-rm32.imm8))

(setf (gethash "CMP-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
CMP-rm32.sbytedword))

(setf (gethash "CMP-rm64.imm" *x64-instruction-variants-hash-table*) (list
CMP-rm64.imm))

(setf (gethash "CMP-rm64.imm8" *x64-instruction-variants-hash-table*) (list
CMP-rm64.imm8))

(setf (gethash "CMP-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
CMP-rm64.sbytedword))

(setf (gethash "CMP-rm8.imm" *x64-instruction-variants-hash-table*) (list
CMP-rm8.imm))

(setf (gethash "CMPEQPD" *x64-instruction-variants-hash-table*) (list
CMPEQPD-xmmreg.xmmrm))

(setf (gethash "CMPEQPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPEQPD-xmmreg.xmmrm))

(setf (gethash "CMPEQPS" *x64-instruction-variants-hash-table*) (list
CMPEQPS-xmmreg.xmmrm128))

(setf (gethash "CMPEQPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPEQPS-xmmreg.xmmrm128))

(setf (gethash "CMPEQSD" *x64-instruction-variants-hash-table*) (list
CMPEQSD-xmmreg.xmmrm))

(setf (gethash "CMPEQSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPEQSD-xmmreg.xmmrm))

(setf (gethash "CMPEQSS" *x64-instruction-variants-hash-table*) (list
CMPEQSS-xmmreg.xmmrm32))

(setf (gethash "CMPEQSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPEQSS-xmmreg.xmmrm32))

(setf (gethash "CMPLEPD" *x64-instruction-variants-hash-table*) (list
CMPLEPD-xmmreg.xmmrm))

(setf (gethash "CMPLEPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPLEPD-xmmreg.xmmrm))

(setf (gethash "CMPLEPS" *x64-instruction-variants-hash-table*) (list
CMPLEPS-xmmreg.xmmrm128))

(setf (gethash "CMPLEPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPLEPS-xmmreg.xmmrm128))

(setf (gethash "CMPLESD" *x64-instruction-variants-hash-table*) (list
CMPLESD-xmmreg.xmmrm))

(setf (gethash "CMPLESD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPLESD-xmmreg.xmmrm))

(setf (gethash "CMPLESS" *x64-instruction-variants-hash-table*) (list
CMPLESS-xmmreg.xmmrm32))

(setf (gethash "CMPLESS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPLESS-xmmreg.xmmrm32))

(setf (gethash "CMPLTPD" *x64-instruction-variants-hash-table*) (list
CMPLTPD-xmmreg.xmmrm))

(setf (gethash "CMPLTPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPLTPD-xmmreg.xmmrm))

(setf (gethash "CMPLTPS" *x64-instruction-variants-hash-table*) (list
CMPLTPS-xmmreg.xmmrm128))

(setf (gethash "CMPLTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPLTPS-xmmreg.xmmrm128))

(setf (gethash "CMPLTSD" *x64-instruction-variants-hash-table*) (list
CMPLTSD-xmmreg.xmmrm))

(setf (gethash "CMPLTSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPLTSD-xmmreg.xmmrm))

(setf (gethash "CMPLTSS" *x64-instruction-variants-hash-table*) (list
CMPLTSS-xmmreg.xmmrm32))

(setf (gethash "CMPLTSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPLTSS-xmmreg.xmmrm32))

(setf (gethash "CMPNEQPD" *x64-instruction-variants-hash-table*) (list
CMPNEQPD-xmmreg.xmmrm))

(setf (gethash "CMPNEQPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNEQPD-xmmreg.xmmrm))

(setf (gethash "CMPNEQPS" *x64-instruction-variants-hash-table*) (list
CMPNEQPS-xmmreg.xmmrm128))

(setf (gethash "CMPNEQPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPNEQPS-xmmreg.xmmrm128))

(setf (gethash "CMPNEQSD" *x64-instruction-variants-hash-table*) (list
CMPNEQSD-xmmreg.xmmrm))

(setf (gethash "CMPNEQSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNEQSD-xmmreg.xmmrm))

(setf (gethash "CMPNEQSS" *x64-instruction-variants-hash-table*) (list
CMPNEQSS-xmmreg.xmmrm32))

(setf (gethash "CMPNEQSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPNEQSS-xmmreg.xmmrm32))

(setf (gethash "CMPNLEPD" *x64-instruction-variants-hash-table*) (list
CMPNLEPD-xmmreg.xmmrm))

(setf (gethash "CMPNLEPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNLEPD-xmmreg.xmmrm))

(setf (gethash "CMPNLEPS" *x64-instruction-variants-hash-table*) (list
CMPNLEPS-xmmreg.xmmrm128))

(setf (gethash "CMPNLEPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPNLEPS-xmmreg.xmmrm128))

(setf (gethash "CMPNLESD" *x64-instruction-variants-hash-table*) (list
CMPNLESD-xmmreg.xmmrm))

(setf (gethash "CMPNLESD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNLESD-xmmreg.xmmrm))

(setf (gethash "CMPNLESS" *x64-instruction-variants-hash-table*) (list
CMPNLESS-xmmreg.xmmrm32))

(setf (gethash "CMPNLESS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPNLESS-xmmreg.xmmrm32))

(setf (gethash "CMPNLTPD" *x64-instruction-variants-hash-table*) (list
CMPNLTPD-xmmreg.xmmrm))

(setf (gethash "CMPNLTPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNLTPD-xmmreg.xmmrm))

(setf (gethash "CMPNLTPS" *x64-instruction-variants-hash-table*) (list
CMPNLTPS-xmmreg.xmmrm128))

(setf (gethash "CMPNLTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPNLTPS-xmmreg.xmmrm128))

(setf (gethash "CMPNLTSD" *x64-instruction-variants-hash-table*) (list
CMPNLTSD-xmmreg.xmmrm))

(setf (gethash "CMPNLTSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPNLTSD-xmmreg.xmmrm))

(setf (gethash "CMPNLTSS" *x64-instruction-variants-hash-table*) (list
CMPNLTSS-xmmreg.xmmrm32))

(setf (gethash "CMPNLTSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPNLTSS-xmmreg.xmmrm32))

(setf (gethash "CMPORDPD" *x64-instruction-variants-hash-table*) (list
CMPORDPD-xmmreg.xmmrm))

(setf (gethash "CMPORDPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPORDPD-xmmreg.xmmrm))

(setf (gethash "CMPORDPS" *x64-instruction-variants-hash-table*) (list
CMPORDPS-xmmreg.xmmrm128))

(setf (gethash "CMPORDPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPORDPS-xmmreg.xmmrm128))

(setf (gethash "CMPORDSD" *x64-instruction-variants-hash-table*) (list
CMPORDSD-xmmreg.xmmrm))

(setf (gethash "CMPORDSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPORDSD-xmmreg.xmmrm))

(setf (gethash "CMPORDSS" *x64-instruction-variants-hash-table*) (list
CMPORDSS-xmmreg.xmmrm32))

(setf (gethash "CMPORDSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPORDSS-xmmreg.xmmrm32))

(setf (gethash "CMPPD" *x64-instruction-variants-hash-table*) (list
CMPPD-xmmreg.xmmrm128.imm8))

(setf (gethash "CMPPD-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
CMPPD-xmmreg.xmmrm128.imm8))

(setf (gethash "CMPPS" *x64-instruction-variants-hash-table*) (list
CMPPS-xmmreg.mem.imm
CMPPS-xmmreg.xmmreg.imm))

(setf (gethash "CMPPS-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
CMPPS-xmmreg.mem.imm))

(setf (gethash "CMPPS-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
CMPPS-xmmreg.xmmreg.imm))

(setf (gethash "CMPSB" *x64-instruction-variants-hash-table*) (list
CMPSB-void))

(setf (gethash "CMPSB-void" *x64-instruction-variants-hash-table*) (list
CMPSB-void))

(setf (gethash "CMPSD" *x64-instruction-variants-hash-table*) (list
CMPSD-void
CMPSD-xmmreg.xmmrm128.imm8))

(setf (gethash "CMPSD-void" *x64-instruction-variants-hash-table*) (list
CMPSD-void))

(setf (gethash "CMPSD-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
CMPSD-xmmreg.xmmrm128.imm8))

(setf (gethash "CMPSQ" *x64-instruction-variants-hash-table*) (list
CMPSQ-void))

(setf (gethash "CMPSQ-void" *x64-instruction-variants-hash-table*) (list
CMPSQ-void))

(setf (gethash "CMPSS" *x64-instruction-variants-hash-table*) (list
CMPSS-xmmreg.mem.imm
CMPSS-xmmreg.xmmreg.imm))

(setf (gethash "CMPSS-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
CMPSS-xmmreg.mem.imm))

(setf (gethash "CMPSS-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
CMPSS-xmmreg.xmmreg.imm))

(setf (gethash "CMPSW" *x64-instruction-variants-hash-table*) (list
CMPSW-void))

(setf (gethash "CMPSW-void" *x64-instruction-variants-hash-table*) (list
CMPSW-void))

(setf (gethash "CMPUNORDPD" *x64-instruction-variants-hash-table*) (list
CMPUNORDPD-xmmreg.xmmrm))

(setf (gethash "CMPUNORDPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPUNORDPD-xmmreg.xmmrm))

(setf (gethash "CMPUNORDPS" *x64-instruction-variants-hash-table*) (list
CMPUNORDPS-xmmreg.xmmrm128))

(setf (gethash "CMPUNORDPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
CMPUNORDPS-xmmreg.xmmrm128))

(setf (gethash "CMPUNORDSD" *x64-instruction-variants-hash-table*) (list
CMPUNORDSD-xmmreg.xmmrm))

(setf (gethash "CMPUNORDSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CMPUNORDSD-xmmreg.xmmrm))

(setf (gethash "CMPUNORDSS" *x64-instruction-variants-hash-table*) (list
CMPUNORDSS-xmmreg.xmmrm32))

(setf (gethash "CMPUNORDSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
CMPUNORDSS-xmmreg.xmmrm32))

(setf (gethash "CMPXCHG" *x64-instruction-variants-hash-table*) (list
CMPXCHG-mem.reg8
CMPXCHG-reg8.reg8-mr
CMPXCHG-mem.reg16
CMPXCHG-reg16.reg16-mr
CMPXCHG-mem.reg32
CMPXCHG-reg32.reg32-mr
CMPXCHG-mem.reg64
CMPXCHG-reg64.reg64-mr))

(setf (gethash "CMPXCHG-mem.reg16" *x64-instruction-variants-hash-table*) (list
CMPXCHG-mem.reg16))

(setf (gethash "CMPXCHG-mem.reg32" *x64-instruction-variants-hash-table*) (list
CMPXCHG-mem.reg32))

(setf (gethash "CMPXCHG-mem.reg64" *x64-instruction-variants-hash-table*) (list
CMPXCHG-mem.reg64))

(setf (gethash "CMPXCHG-mem.reg8" *x64-instruction-variants-hash-table*) (list
CMPXCHG-mem.reg8))

(setf (gethash "CMPXCHG-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG-reg16.reg16-mr))

(setf (gethash "CMPXCHG-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG-reg32.reg32-mr))

(setf (gethash "CMPXCHG-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG-reg64.reg64-mr))

(setf (gethash "CMPXCHG-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG-reg8.reg8-mr))

(setf (gethash "CMPXCHG16B" *x64-instruction-variants-hash-table*) (list
CMPXCHG16B-mem))

(setf (gethash "CMPXCHG16B-mem" *x64-instruction-variants-hash-table*) (list
CMPXCHG16B-mem))

(setf (gethash "CMPXCHG486" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-mem.reg8
CMPXCHG486-reg8.reg8-mr
CMPXCHG486-mem.reg16
CMPXCHG486-reg16.reg16-mr
CMPXCHG486-mem.reg32
CMPXCHG486-reg32.reg32-mr))

(setf (gethash "CMPXCHG486-mem.reg16" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-mem.reg16))

(setf (gethash "CMPXCHG486-mem.reg32" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-mem.reg32))

(setf (gethash "CMPXCHG486-mem.reg8" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-mem.reg8))

(setf (gethash "CMPXCHG486-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-reg16.reg16-mr))

(setf (gethash "CMPXCHG486-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-reg32.reg32-mr))

(setf (gethash "CMPXCHG486-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
CMPXCHG486-reg8.reg8-mr))

(setf (gethash "CMPXCHG8B" *x64-instruction-variants-hash-table*) (list
CMPXCHG8B-mem))

(setf (gethash "CMPXCHG8B-mem" *x64-instruction-variants-hash-table*) (list
CMPXCHG8B-mem))

(setf (gethash "COMISD" *x64-instruction-variants-hash-table*) (list
COMISD-xmmreg.xmmrm))

(setf (gethash "COMISD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
COMISD-xmmreg.xmmrm))

(setf (gethash "COMISS" *x64-instruction-variants-hash-table*) (list
COMISS-xmmreg.xmmrm32))

(setf (gethash "COMISS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
COMISS-xmmreg.xmmrm32))

(setf (gethash "CPUID" *x64-instruction-variants-hash-table*) (list
CPUID-void))

(setf (gethash "CPUID-void" *x64-instruction-variants-hash-table*) (list
CPUID-void))

(setf (gethash "CPU_READ" *x64-instruction-variants-hash-table*) (list
CPU_READ-void))

(setf (gethash "CPU_READ-void" *x64-instruction-variants-hash-table*) (list
CPU_READ-void))

(setf (gethash "CPU_WRITE" *x64-instruction-variants-hash-table*) (list
CPU_WRITE-void))

(setf (gethash "CPU_WRITE-void" *x64-instruction-variants-hash-table*) (list
CPU_WRITE-void))

(setf (gethash "CQO" *x64-instruction-variants-hash-table*) (list
CQO-void))

(setf (gethash "CQO-void" *x64-instruction-variants-hash-table*) (list
CQO-void))

(setf (gethash "CRC32" *x64-instruction-variants-hash-table*) (list
CRC32-reg32.rm8
CRC32-reg32.rm16
CRC32-reg32.rm32
CRC32-reg64.rm8
CRC32-reg64.rm64))

(setf (gethash "CRC32-reg32.rm16" *x64-instruction-variants-hash-table*) (list
CRC32-reg32.rm16))

(setf (gethash "CRC32-reg32.rm32" *x64-instruction-variants-hash-table*) (list
CRC32-reg32.rm32))

(setf (gethash "CRC32-reg32.rm8" *x64-instruction-variants-hash-table*) (list
CRC32-reg32.rm8))

(setf (gethash "CRC32-reg64.rm64" *x64-instruction-variants-hash-table*) (list
CRC32-reg64.rm64))

(setf (gethash "CRC32-reg64.rm8" *x64-instruction-variants-hash-table*) (list
CRC32-reg64.rm8))

(setf (gethash "CVTDQ2PD" *x64-instruction-variants-hash-table*) (list
CVTDQ2PD-xmmreg.xmmrm))

(setf (gethash "CVTDQ2PD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTDQ2PD-xmmreg.xmmrm))

(setf (gethash "CVTDQ2PS" *x64-instruction-variants-hash-table*) (list
CVTDQ2PS-xmmreg.xmmrm))

(setf (gethash "CVTDQ2PS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTDQ2PS-xmmreg.xmmrm))

(setf (gethash "CVTPD2DQ" *x64-instruction-variants-hash-table*) (list
CVTPD2DQ-xmmreg.xmmrm))

(setf (gethash "CVTPD2DQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTPD2DQ-xmmreg.xmmrm))

(setf (gethash "CVTPD2PI" *x64-instruction-variants-hash-table*) (list
CVTPD2PI-mmxreg.xmmrm))

(setf (gethash "CVTPD2PI-mmxreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTPD2PI-mmxreg.xmmrm))

(setf (gethash "CVTPD2PS" *x64-instruction-variants-hash-table*) (list
CVTPD2PS-xmmreg.xmmrm))

(setf (gethash "CVTPD2PS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTPD2PS-xmmreg.xmmrm))

(setf (gethash "CVTPI2PD" *x64-instruction-variants-hash-table*) (list
CVTPI2PD-xmmreg.mmxrm))

(setf (gethash "CVTPI2PD-xmmreg.mmxrm" *x64-instruction-variants-hash-table*) (list
CVTPI2PD-xmmreg.mmxrm))

(setf (gethash "CVTPI2PS" *x64-instruction-variants-hash-table*) (list
CVTPI2PS-xmmreg.mmxrm64))

(setf (gethash "CVTPI2PS-xmmreg.mmxrm64" *x64-instruction-variants-hash-table*) (list
CVTPI2PS-xmmreg.mmxrm64))

(setf (gethash "CVTPS2DQ" *x64-instruction-variants-hash-table*) (list
CVTPS2DQ-xmmreg.xmmrm))

(setf (gethash "CVTPS2DQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTPS2DQ-xmmreg.xmmrm))

(setf (gethash "CVTPS2PD" *x64-instruction-variants-hash-table*) (list
CVTPS2PD-xmmreg.xmmrm))

(setf (gethash "CVTPS2PD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTPS2PD-xmmreg.xmmrm))

(setf (gethash "CVTPS2PI" *x64-instruction-variants-hash-table*) (list
CVTPS2PI-mmxreg.xmmrm64))

(setf (gethash "CVTPS2PI-mmxreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
CVTPS2PI-mmxreg.xmmrm64))

(setf (gethash "CVTSD2SI" *x64-instruction-variants-hash-table*) (list
CVTSD2SI-reg32.xmmreg
CVTSD2SI-reg32.mem
CVTSD2SI-reg64.xmmreg
CVTSD2SI-reg64.mem))

(setf (gethash "CVTSD2SI-reg32.mem" *x64-instruction-variants-hash-table*) (list
CVTSD2SI-reg32.mem))

(setf (gethash "CVTSD2SI-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTSD2SI-reg32.xmmreg))

(setf (gethash "CVTSD2SI-reg64.mem" *x64-instruction-variants-hash-table*) (list
CVTSD2SI-reg64.mem))

(setf (gethash "CVTSD2SI-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTSD2SI-reg64.xmmreg))

(setf (gethash "CVTSD2SS" *x64-instruction-variants-hash-table*) (list
CVTSD2SS-xmmreg.xmmrm))

(setf (gethash "CVTSD2SS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTSD2SS-xmmreg.xmmrm))

(setf (gethash "CVTSI2SD" *x64-instruction-variants-hash-table*) (list
CVTSI2SD-xmmreg.mem
CVTSI2SD-xmmreg.rm32
CVTSI2SD-xmmreg.rm64))

(setf (gethash "CVTSI2SD-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
CVTSI2SD-xmmreg.mem))

(setf (gethash "CVTSI2SD-xmmreg.rm32" *x64-instruction-variants-hash-table*) (list
CVTSI2SD-xmmreg.rm32))

(setf (gethash "CVTSI2SD-xmmreg.rm64" *x64-instruction-variants-hash-table*) (list
CVTSI2SD-xmmreg.rm64))

(setf (gethash "CVTSI2SS" *x64-instruction-variants-hash-table*) (list
CVTSI2SS-xmmreg.mem
CVTSI2SS-xmmreg.rm32
CVTSI2SS-xmmreg.rm64))

(setf (gethash "CVTSI2SS-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
CVTSI2SS-xmmreg.mem))

(setf (gethash "CVTSI2SS-xmmreg.rm32" *x64-instruction-variants-hash-table*) (list
CVTSI2SS-xmmreg.rm32))

(setf (gethash "CVTSI2SS-xmmreg.rm64" *x64-instruction-variants-hash-table*) (list
CVTSI2SS-xmmreg.rm64))

(setf (gethash "CVTSS2SD" *x64-instruction-variants-hash-table*) (list
CVTSS2SD-xmmreg.xmmrm))

(setf (gethash "CVTSS2SD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTSS2SD-xmmreg.xmmrm))

(setf (gethash "CVTSS2SI" *x64-instruction-variants-hash-table*) (list
CVTSS2SI-reg32.xmmreg
CVTSS2SI-reg32.mem
CVTSS2SI-reg64.xmmreg
CVTSS2SI-reg64.mem))

(setf (gethash "CVTSS2SI-reg32.mem" *x64-instruction-variants-hash-table*) (list
CVTSS2SI-reg32.mem))

(setf (gethash "CVTSS2SI-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTSS2SI-reg32.xmmreg))

(setf (gethash "CVTSS2SI-reg64.mem" *x64-instruction-variants-hash-table*) (list
CVTSS2SI-reg64.mem))

(setf (gethash "CVTSS2SI-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTSS2SI-reg64.xmmreg))

(setf (gethash "CVTTPD2DQ" *x64-instruction-variants-hash-table*) (list
CVTTPD2DQ-xmmreg.xmmrm))

(setf (gethash "CVTTPD2DQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTPD2DQ-xmmreg.xmmrm))

(setf (gethash "CVTTPD2PI" *x64-instruction-variants-hash-table*) (list
CVTTPD2PI-mmxreg.xmmrm))

(setf (gethash "CVTTPD2PI-mmxreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTPD2PI-mmxreg.xmmrm))

(setf (gethash "CVTTPS2DQ" *x64-instruction-variants-hash-table*) (list
CVTTPS2DQ-xmmreg.xmmrm))

(setf (gethash "CVTTPS2DQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTPS2DQ-xmmreg.xmmrm))

(setf (gethash "CVTTPS2PI" *x64-instruction-variants-hash-table*) (list
CVTTPS2PI-mmxreg.xmmrm))

(setf (gethash "CVTTPS2PI-mmxreg.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTPS2PI-mmxreg.xmmrm))

(setf (gethash "CVTTSD2SI" *x64-instruction-variants-hash-table*) (list
CVTTSD2SI-reg32.xmmreg
CVTTSD2SI-reg32.mem
CVTTSD2SI-reg64.xmmreg
CVTTSD2SI-reg64.mem))

(setf (gethash "CVTTSD2SI-reg32.mem" *x64-instruction-variants-hash-table*) (list
CVTTSD2SI-reg32.mem))

(setf (gethash "CVTTSD2SI-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTTSD2SI-reg32.xmmreg))

(setf (gethash "CVTTSD2SI-reg64.mem" *x64-instruction-variants-hash-table*) (list
CVTTSD2SI-reg64.mem))

(setf (gethash "CVTTSD2SI-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
CVTTSD2SI-reg64.xmmreg))

(setf (gethash "CVTTSS2SI" *x64-instruction-variants-hash-table*) (list
CVTTSS2SI-reg32.xmmrm
CVTTSS2SI-reg64.xmmrm))

(setf (gethash "CVTTSS2SI-reg32.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTSS2SI-reg32.xmmrm))

(setf (gethash "CVTTSS2SI-reg64.xmmrm" *x64-instruction-variants-hash-table*) (list
CVTTSS2SI-reg64.xmmrm))

(setf (gethash "CWD" *x64-instruction-variants-hash-table*) (list
CWD-void))

(setf (gethash "CWD-void" *x64-instruction-variants-hash-table*) (list
CWD-void))

(setf (gethash "CWDE" *x64-instruction-variants-hash-table*) (list
CWDE-void))

(setf (gethash "CWDE-void" *x64-instruction-variants-hash-table*) (list
CWDE-void))

(setf (gethash "DB" *x64-instruction-variants-hash-table*) (list
DB-ignore))

(setf (gethash "DB-ignore" *x64-instruction-variants-hash-table*) (list
DB-ignore))

(setf (gethash "DD" *x64-instruction-variants-hash-table*) (list
DD-ignore))

(setf (gethash "DD-ignore" *x64-instruction-variants-hash-table*) (list
DD-ignore))

(setf (gethash "DEC" *x64-instruction-variants-hash-table*) (list
DEC-rm8
DEC-rm16
DEC-rm32
DEC-rm64))

(setf (gethash "DEC-rm16" *x64-instruction-variants-hash-table*) (list
DEC-rm16))

(setf (gethash "DEC-rm32" *x64-instruction-variants-hash-table*) (list
DEC-rm32))

(setf (gethash "DEC-rm64" *x64-instruction-variants-hash-table*) (list
DEC-rm64))

(setf (gethash "DEC-rm8" *x64-instruction-variants-hash-table*) (list
DEC-rm8))

(setf (gethash "DIV" *x64-instruction-variants-hash-table*) (list
DIV-rm8
DIV-rm16
DIV-rm32
DIV-rm64))

(setf (gethash "DIV-rm16" *x64-instruction-variants-hash-table*) (list
DIV-rm16))

(setf (gethash "DIV-rm32" *x64-instruction-variants-hash-table*) (list
DIV-rm32))

(setf (gethash "DIV-rm64" *x64-instruction-variants-hash-table*) (list
DIV-rm64))

(setf (gethash "DIV-rm8" *x64-instruction-variants-hash-table*) (list
DIV-rm8))

(setf (gethash "DIVPD" *x64-instruction-variants-hash-table*) (list
DIVPD-xmmreg.xmmrm))

(setf (gethash "DIVPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
DIVPD-xmmreg.xmmrm))

(setf (gethash "DIVPS" *x64-instruction-variants-hash-table*) (list
DIVPS-xmmreg.xmmrm128))

(setf (gethash "DIVPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
DIVPS-xmmreg.xmmrm128))

(setf (gethash "DIVSD" *x64-instruction-variants-hash-table*) (list
DIVSD-xmmreg.xmmrm))

(setf (gethash "DIVSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
DIVSD-xmmreg.xmmrm))

(setf (gethash "DIVSS" *x64-instruction-variants-hash-table*) (list
DIVSS-xmmreg.xmmrm32))

(setf (gethash "DIVSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
DIVSS-xmmreg.xmmrm32))

(setf (gethash "DMINT" *x64-instruction-variants-hash-table*) (list
DMINT-void))

(setf (gethash "DMINT-void" *x64-instruction-variants-hash-table*) (list
DMINT-void))

(setf (gethash "DO" *x64-instruction-variants-hash-table*) (list
DO-ignore))

(setf (gethash "DO-ignore" *x64-instruction-variants-hash-table*) (list
DO-ignore))

(setf (gethash "DPPD" *x64-instruction-variants-hash-table*) (list
DPPD-xmmreg.xmmrm.imm))

(setf (gethash "DPPD-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
DPPD-xmmreg.xmmrm.imm))

(setf (gethash "DPPS" *x64-instruction-variants-hash-table*) (list
DPPS-xmmreg.xmmrm.imm))

(setf (gethash "DPPS-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
DPPS-xmmreg.xmmrm.imm))

(setf (gethash "DQ" *x64-instruction-variants-hash-table*) (list
DQ-ignore))

(setf (gethash "DQ-ignore" *x64-instruction-variants-hash-table*) (list
DQ-ignore))

(setf (gethash "DT" *x64-instruction-variants-hash-table*) (list
DT-ignore))

(setf (gethash "DT-ignore" *x64-instruction-variants-hash-table*) (list
DT-ignore))

(setf (gethash "DW" *x64-instruction-variants-hash-table*) (list
DW-ignore))

(setf (gethash "DW-ignore" *x64-instruction-variants-hash-table*) (list
DW-ignore))

(setf (gethash "DY" *x64-instruction-variants-hash-table*) (list
DY-ignore))

(setf (gethash "DY-ignore" *x64-instruction-variants-hash-table*) (list
DY-ignore))

(setf (gethash "DZ" *x64-instruction-variants-hash-table*) (list
DZ-ignore))

(setf (gethash "DZ-ignore" *x64-instruction-variants-hash-table*) (list
DZ-ignore))

(setf (gethash "EMMS" *x64-instruction-variants-hash-table*) (list
EMMS-void))

(setf (gethash "EMMS-void" *x64-instruction-variants-hash-table*) (list
EMMS-void))

(setf (gethash "ENTER" *x64-instruction-variants-hash-table*) (list
ENTER-imm.imm))

(setf (gethash "ENTER-imm.imm" *x64-instruction-variants-hash-table*) (list
ENTER-imm.imm))

(setf (gethash "EQU" *x64-instruction-variants-hash-table*) (list
EQU-imm
EQU-imm.imm))

(setf (gethash "EQU-imm" *x64-instruction-variants-hash-table*) (list
EQU-imm))

(setf (gethash "EQU-imm.imm" *x64-instruction-variants-hash-table*) (list
EQU-imm.imm))

(setf (gethash "EXTRACTPS" *x64-instruction-variants-hash-table*) (list
EXTRACTPS-rm32.xmmreg.imm
EXTRACTPS-reg64.xmmreg.imm))

(setf (gethash "EXTRACTPS-reg64.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
EXTRACTPS-reg64.xmmreg.imm))

(setf (gethash "EXTRACTPS-rm32.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
EXTRACTPS-rm32.xmmreg.imm))

(setf (gethash "EXTRQ" *x64-instruction-variants-hash-table*) (list
EXTRQ-xmmreg.imm.imm
EXTRQ-xmmreg.xmmreg))

(setf (gethash "EXTRQ-xmmreg.imm.imm" *x64-instruction-variants-hash-table*) (list
EXTRQ-xmmreg.imm.imm))

(setf (gethash "EXTRQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
EXTRQ-xmmreg.xmmreg))

(setf (gethash "F2XM1" *x64-instruction-variants-hash-table*) (list
F2XM1-void))

(setf (gethash "F2XM1-void" *x64-instruction-variants-hash-table*) (list
F2XM1-void))

(setf (gethash "FABS" *x64-instruction-variants-hash-table*) (list
FABS-void))

(setf (gethash "FABS-void" *x64-instruction-variants-hash-table*) (list
FABS-void))

(setf (gethash "FADD" *x64-instruction-variants-hash-table*) (list
FADD-mem32
FADD-mem64
FADD-fpureg-to
FADD-fpureg
FADD-fpureg.fpu0
FADD-fpu0.fpureg
FADD-void))

(setf (gethash "FADD-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FADD-fpu0.fpureg))

(setf (gethash "FADD-fpureg" *x64-instruction-variants-hash-table*) (list
FADD-fpureg))

(setf (gethash "FADD-fpureg-to" *x64-instruction-variants-hash-table*) (list
FADD-fpureg-to))

(setf (gethash "FADD-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FADD-fpureg.fpu0))

(setf (gethash "FADD-mem32" *x64-instruction-variants-hash-table*) (list
FADD-mem32))

(setf (gethash "FADD-mem64" *x64-instruction-variants-hash-table*) (list
FADD-mem64))

(setf (gethash "FADD-void" *x64-instruction-variants-hash-table*) (list
FADD-void))

(setf (gethash "FADDP" *x64-instruction-variants-hash-table*) (list
FADDP-fpureg
FADDP-fpureg.fpu0
FADDP-void))

(setf (gethash "FADDP-fpureg" *x64-instruction-variants-hash-table*) (list
FADDP-fpureg))

(setf (gethash "FADDP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FADDP-fpureg.fpu0))

(setf (gethash "FADDP-void" *x64-instruction-variants-hash-table*) (list
FADDP-void))

(setf (gethash "FBLD" *x64-instruction-variants-hash-table*) (list
FBLD-mem80
FBLD-mem))

(setf (gethash "FBLD-mem" *x64-instruction-variants-hash-table*) (list
FBLD-mem))

(setf (gethash "FBLD-mem80" *x64-instruction-variants-hash-table*) (list
FBLD-mem80))

(setf (gethash "FBSTP" *x64-instruction-variants-hash-table*) (list
FBSTP-mem80
FBSTP-mem))

(setf (gethash "FBSTP-mem" *x64-instruction-variants-hash-table*) (list
FBSTP-mem))

(setf (gethash "FBSTP-mem80" *x64-instruction-variants-hash-table*) (list
FBSTP-mem80))

(setf (gethash "FCHS" *x64-instruction-variants-hash-table*) (list
FCHS-void))

(setf (gethash "FCHS-void" *x64-instruction-variants-hash-table*) (list
FCHS-void))

(setf (gethash "FCLEX" *x64-instruction-variants-hash-table*) (list
FCLEX-void))

(setf (gethash "FCLEX-void" *x64-instruction-variants-hash-table*) (list
FCLEX-void))

(setf (gethash "FCMOVB" *x64-instruction-variants-hash-table*) (list
FCMOVB-fpureg
FCMOVB-fpu0.fpureg
FCMOVB-void))

(setf (gethash "FCMOVB-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVB-fpu0.fpureg))

(setf (gethash "FCMOVB-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVB-fpureg))

(setf (gethash "FCMOVB-void" *x64-instruction-variants-hash-table*) (list
FCMOVB-void))

(setf (gethash "FCMOVBE" *x64-instruction-variants-hash-table*) (list
FCMOVBE-fpureg
FCMOVBE-fpu0.fpureg
FCMOVBE-void))

(setf (gethash "FCMOVBE-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVBE-fpu0.fpureg))

(setf (gethash "FCMOVBE-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVBE-fpureg))

(setf (gethash "FCMOVBE-void" *x64-instruction-variants-hash-table*) (list
FCMOVBE-void))

(setf (gethash "FCMOVE" *x64-instruction-variants-hash-table*) (list
FCMOVE-fpureg
FCMOVE-fpu0.fpureg
FCMOVE-void))

(setf (gethash "FCMOVE-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVE-fpu0.fpureg))

(setf (gethash "FCMOVE-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVE-fpureg))

(setf (gethash "FCMOVE-void" *x64-instruction-variants-hash-table*) (list
FCMOVE-void))

(setf (gethash "FCMOVNB" *x64-instruction-variants-hash-table*) (list
FCMOVNB-fpureg
FCMOVNB-fpu0.fpureg
FCMOVNB-void))

(setf (gethash "FCMOVNB-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNB-fpu0.fpureg))

(setf (gethash "FCMOVNB-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNB-fpureg))

(setf (gethash "FCMOVNB-void" *x64-instruction-variants-hash-table*) (list
FCMOVNB-void))

(setf (gethash "FCMOVNBE" *x64-instruction-variants-hash-table*) (list
FCMOVNBE-fpureg
FCMOVNBE-fpu0.fpureg
FCMOVNBE-void))

(setf (gethash "FCMOVNBE-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNBE-fpu0.fpureg))

(setf (gethash "FCMOVNBE-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNBE-fpureg))

(setf (gethash "FCMOVNBE-void" *x64-instruction-variants-hash-table*) (list
FCMOVNBE-void))

(setf (gethash "FCMOVNE" *x64-instruction-variants-hash-table*) (list
FCMOVNE-fpureg
FCMOVNE-fpu0.fpureg
FCMOVNE-void))

(setf (gethash "FCMOVNE-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNE-fpu0.fpureg))

(setf (gethash "FCMOVNE-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNE-fpureg))

(setf (gethash "FCMOVNE-void" *x64-instruction-variants-hash-table*) (list
FCMOVNE-void))

(setf (gethash "FCMOVNU" *x64-instruction-variants-hash-table*) (list
FCMOVNU-fpureg
FCMOVNU-fpu0.fpureg
FCMOVNU-void))

(setf (gethash "FCMOVNU-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNU-fpu0.fpureg))

(setf (gethash "FCMOVNU-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVNU-fpureg))

(setf (gethash "FCMOVNU-void" *x64-instruction-variants-hash-table*) (list
FCMOVNU-void))

(setf (gethash "FCMOVU" *x64-instruction-variants-hash-table*) (list
FCMOVU-fpureg
FCMOVU-fpu0.fpureg
FCMOVU-void))

(setf (gethash "FCMOVU-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVU-fpu0.fpureg))

(setf (gethash "FCMOVU-fpureg" *x64-instruction-variants-hash-table*) (list
FCMOVU-fpureg))

(setf (gethash "FCMOVU-void" *x64-instruction-variants-hash-table*) (list
FCMOVU-void))

(setf (gethash "FCOM" *x64-instruction-variants-hash-table*) (list
FCOM-mem32
FCOM-mem64
FCOM-fpureg
FCOM-fpu0.fpureg
FCOM-void))

(setf (gethash "FCOM-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCOM-fpu0.fpureg))

(setf (gethash "FCOM-fpureg" *x64-instruction-variants-hash-table*) (list
FCOM-fpureg))

(setf (gethash "FCOM-mem32" *x64-instruction-variants-hash-table*) (list
FCOM-mem32))

(setf (gethash "FCOM-mem64" *x64-instruction-variants-hash-table*) (list
FCOM-mem64))

(setf (gethash "FCOM-void" *x64-instruction-variants-hash-table*) (list
FCOM-void))

(setf (gethash "FCOMI" *x64-instruction-variants-hash-table*) (list
FCOMI-fpureg
FCOMI-fpu0.fpureg
FCOMI-void))

(setf (gethash "FCOMI-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCOMI-fpu0.fpureg))

(setf (gethash "FCOMI-fpureg" *x64-instruction-variants-hash-table*) (list
FCOMI-fpureg))

(setf (gethash "FCOMI-void" *x64-instruction-variants-hash-table*) (list
FCOMI-void))

(setf (gethash "FCOMIP" *x64-instruction-variants-hash-table*) (list
FCOMIP-fpureg
FCOMIP-fpu0.fpureg
FCOMIP-void))

(setf (gethash "FCOMIP-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCOMIP-fpu0.fpureg))

(setf (gethash "FCOMIP-fpureg" *x64-instruction-variants-hash-table*) (list
FCOMIP-fpureg))

(setf (gethash "FCOMIP-void" *x64-instruction-variants-hash-table*) (list
FCOMIP-void))

(setf (gethash "FCOMP" *x64-instruction-variants-hash-table*) (list
FCOMP-mem32
FCOMP-mem64
FCOMP-fpureg
FCOMP-fpu0.fpureg
FCOMP-void))

(setf (gethash "FCOMP-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FCOMP-fpu0.fpureg))

(setf (gethash "FCOMP-fpureg" *x64-instruction-variants-hash-table*) (list
FCOMP-fpureg))

(setf (gethash "FCOMP-mem32" *x64-instruction-variants-hash-table*) (list
FCOMP-mem32))

(setf (gethash "FCOMP-mem64" *x64-instruction-variants-hash-table*) (list
FCOMP-mem64))

(setf (gethash "FCOMP-void" *x64-instruction-variants-hash-table*) (list
FCOMP-void))

(setf (gethash "FCOMPP" *x64-instruction-variants-hash-table*) (list
FCOMPP-void))

(setf (gethash "FCOMPP-void" *x64-instruction-variants-hash-table*) (list
FCOMPP-void))

(setf (gethash "FCOS" *x64-instruction-variants-hash-table*) (list
FCOS-void))

(setf (gethash "FCOS-void" *x64-instruction-variants-hash-table*) (list
FCOS-void))

(setf (gethash "FDECSTP" *x64-instruction-variants-hash-table*) (list
FDECSTP-void))

(setf (gethash "FDECSTP-void" *x64-instruction-variants-hash-table*) (list
FDECSTP-void))

(setf (gethash "FDISI" *x64-instruction-variants-hash-table*) (list
FDISI-void))

(setf (gethash "FDISI-void" *x64-instruction-variants-hash-table*) (list
FDISI-void))

(setf (gethash "FDIV" *x64-instruction-variants-hash-table*) (list
FDIV-mem32
FDIV-mem64
FDIV-fpureg-to
FDIV-fpureg
FDIV-fpureg.fpu0
FDIV-fpu0.fpureg
FDIV-void))

(setf (gethash "FDIV-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FDIV-fpu0.fpureg))

(setf (gethash "FDIV-fpureg" *x64-instruction-variants-hash-table*) (list
FDIV-fpureg))

(setf (gethash "FDIV-fpureg-to" *x64-instruction-variants-hash-table*) (list
FDIV-fpureg-to))

(setf (gethash "FDIV-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FDIV-fpureg.fpu0))

(setf (gethash "FDIV-mem32" *x64-instruction-variants-hash-table*) (list
FDIV-mem32))

(setf (gethash "FDIV-mem64" *x64-instruction-variants-hash-table*) (list
FDIV-mem64))

(setf (gethash "FDIV-void" *x64-instruction-variants-hash-table*) (list
FDIV-void))

(setf (gethash "FDIVP" *x64-instruction-variants-hash-table*) (list
FDIVP-fpureg
FDIVP-fpureg.fpu0
FDIVP-void))

(setf (gethash "FDIVP-fpureg" *x64-instruction-variants-hash-table*) (list
FDIVP-fpureg))

(setf (gethash "FDIVP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FDIVP-fpureg.fpu0))

(setf (gethash "FDIVP-void" *x64-instruction-variants-hash-table*) (list
FDIVP-void))

(setf (gethash "FDIVR" *x64-instruction-variants-hash-table*) (list
FDIVR-mem32
FDIVR-mem64
FDIVR-fpureg-to
FDIVR-fpureg.fpu0
FDIVR-fpureg
FDIVR-fpu0.fpureg
FDIVR-void))

(setf (gethash "FDIVR-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FDIVR-fpu0.fpureg))

(setf (gethash "FDIVR-fpureg" *x64-instruction-variants-hash-table*) (list
FDIVR-fpureg))

(setf (gethash "FDIVR-fpureg-to" *x64-instruction-variants-hash-table*) (list
FDIVR-fpureg-to))

(setf (gethash "FDIVR-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FDIVR-fpureg.fpu0))

(setf (gethash "FDIVR-mem32" *x64-instruction-variants-hash-table*) (list
FDIVR-mem32))

(setf (gethash "FDIVR-mem64" *x64-instruction-variants-hash-table*) (list
FDIVR-mem64))

(setf (gethash "FDIVR-void" *x64-instruction-variants-hash-table*) (list
FDIVR-void))

(setf (gethash "FDIVRP" *x64-instruction-variants-hash-table*) (list
FDIVRP-fpureg
FDIVRP-fpureg.fpu0
FDIVRP-void))

(setf (gethash "FDIVRP-fpureg" *x64-instruction-variants-hash-table*) (list
FDIVRP-fpureg))

(setf (gethash "FDIVRP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FDIVRP-fpureg.fpu0))

(setf (gethash "FDIVRP-void" *x64-instruction-variants-hash-table*) (list
FDIVRP-void))

(setf (gethash "FEMMS" *x64-instruction-variants-hash-table*) (list
FEMMS-void))

(setf (gethash "FEMMS-void" *x64-instruction-variants-hash-table*) (list
FEMMS-void))

(setf (gethash "FENI" *x64-instruction-variants-hash-table*) (list
FENI-void))

(setf (gethash "FENI-void" *x64-instruction-variants-hash-table*) (list
FENI-void))

(setf (gethash "FFREE" *x64-instruction-variants-hash-table*) (list
FFREE-fpureg
FFREE-void))

(setf (gethash "FFREE-fpureg" *x64-instruction-variants-hash-table*) (list
FFREE-fpureg))

(setf (gethash "FFREE-void" *x64-instruction-variants-hash-table*) (list
FFREE-void))

(setf (gethash "FFREEP" *x64-instruction-variants-hash-table*) (list
FFREEP-fpureg
FFREEP-void))

(setf (gethash "FFREEP-fpureg" *x64-instruction-variants-hash-table*) (list
FFREEP-fpureg))

(setf (gethash "FFREEP-void" *x64-instruction-variants-hash-table*) (list
FFREEP-void))

(setf (gethash "FIADD" *x64-instruction-variants-hash-table*) (list
FIADD-mem32
FIADD-mem16))

(setf (gethash "FIADD-mem16" *x64-instruction-variants-hash-table*) (list
FIADD-mem16))

(setf (gethash "FIADD-mem32" *x64-instruction-variants-hash-table*) (list
FIADD-mem32))

(setf (gethash "FICOM" *x64-instruction-variants-hash-table*) (list
FICOM-mem32
FICOM-mem16))

(setf (gethash "FICOM-mem16" *x64-instruction-variants-hash-table*) (list
FICOM-mem16))

(setf (gethash "FICOM-mem32" *x64-instruction-variants-hash-table*) (list
FICOM-mem32))

(setf (gethash "FICOMP" *x64-instruction-variants-hash-table*) (list
FICOMP-mem32
FICOMP-mem16))

(setf (gethash "FICOMP-mem16" *x64-instruction-variants-hash-table*) (list
FICOMP-mem16))

(setf (gethash "FICOMP-mem32" *x64-instruction-variants-hash-table*) (list
FICOMP-mem32))

(setf (gethash "FIDIV" *x64-instruction-variants-hash-table*) (list
FIDIV-mem32
FIDIV-mem16))

(setf (gethash "FIDIV-mem16" *x64-instruction-variants-hash-table*) (list
FIDIV-mem16))

(setf (gethash "FIDIV-mem32" *x64-instruction-variants-hash-table*) (list
FIDIV-mem32))

(setf (gethash "FIDIVR" *x64-instruction-variants-hash-table*) (list
FIDIVR-mem32
FIDIVR-mem16))

(setf (gethash "FIDIVR-mem16" *x64-instruction-variants-hash-table*) (list
FIDIVR-mem16))

(setf (gethash "FIDIVR-mem32" *x64-instruction-variants-hash-table*) (list
FIDIVR-mem32))

(setf (gethash "FILD" *x64-instruction-variants-hash-table*) (list
FILD-mem32
FILD-mem16
FILD-mem64))

(setf (gethash "FILD-mem16" *x64-instruction-variants-hash-table*) (list
FILD-mem16))

(setf (gethash "FILD-mem32" *x64-instruction-variants-hash-table*) (list
FILD-mem32))

(setf (gethash "FILD-mem64" *x64-instruction-variants-hash-table*) (list
FILD-mem64))

(setf (gethash "FIMUL" *x64-instruction-variants-hash-table*) (list
FIMUL-mem32
FIMUL-mem16))

(setf (gethash "FIMUL-mem16" *x64-instruction-variants-hash-table*) (list
FIMUL-mem16))

(setf (gethash "FIMUL-mem32" *x64-instruction-variants-hash-table*) (list
FIMUL-mem32))

(setf (gethash "FINCSTP" *x64-instruction-variants-hash-table*) (list
FINCSTP-void))

(setf (gethash "FINCSTP-void" *x64-instruction-variants-hash-table*) (list
FINCSTP-void))

(setf (gethash "FINIT" *x64-instruction-variants-hash-table*) (list
FINIT-void))

(setf (gethash "FINIT-void" *x64-instruction-variants-hash-table*) (list
FINIT-void))

(setf (gethash "FIST" *x64-instruction-variants-hash-table*) (list
FIST-mem32
FIST-mem16))

(setf (gethash "FIST-mem16" *x64-instruction-variants-hash-table*) (list
FIST-mem16))

(setf (gethash "FIST-mem32" *x64-instruction-variants-hash-table*) (list
FIST-mem32))

(setf (gethash "FISTP" *x64-instruction-variants-hash-table*) (list
FISTP-mem32
FISTP-mem16
FISTP-mem64))

(setf (gethash "FISTP-mem16" *x64-instruction-variants-hash-table*) (list
FISTP-mem16))

(setf (gethash "FISTP-mem32" *x64-instruction-variants-hash-table*) (list
FISTP-mem32))

(setf (gethash "FISTP-mem64" *x64-instruction-variants-hash-table*) (list
FISTP-mem64))

(setf (gethash "FISTTP" *x64-instruction-variants-hash-table*) (list
FISTTP-mem16
FISTTP-mem32
FISTTP-mem64))

(setf (gethash "FISTTP-mem16" *x64-instruction-variants-hash-table*) (list
FISTTP-mem16))

(setf (gethash "FISTTP-mem32" *x64-instruction-variants-hash-table*) (list
FISTTP-mem32))

(setf (gethash "FISTTP-mem64" *x64-instruction-variants-hash-table*) (list
FISTTP-mem64))

(setf (gethash "FISUB" *x64-instruction-variants-hash-table*) (list
FISUB-mem32
FISUB-mem16))

(setf (gethash "FISUB-mem16" *x64-instruction-variants-hash-table*) (list
FISUB-mem16))

(setf (gethash "FISUB-mem32" *x64-instruction-variants-hash-table*) (list
FISUB-mem32))

(setf (gethash "FISUBR" *x64-instruction-variants-hash-table*) (list
FISUBR-mem32
FISUBR-mem16))

(setf (gethash "FISUBR-mem16" *x64-instruction-variants-hash-table*) (list
FISUBR-mem16))

(setf (gethash "FISUBR-mem32" *x64-instruction-variants-hash-table*) (list
FISUBR-mem32))

(setf (gethash "FLD" *x64-instruction-variants-hash-table*) (list
FLD-mem32
FLD-mem64
FLD-mem80
FLD-fpureg
FLD-void))

(setf (gethash "FLD-fpureg" *x64-instruction-variants-hash-table*) (list
FLD-fpureg))

(setf (gethash "FLD-mem32" *x64-instruction-variants-hash-table*) (list
FLD-mem32))

(setf (gethash "FLD-mem64" *x64-instruction-variants-hash-table*) (list
FLD-mem64))

(setf (gethash "FLD-mem80" *x64-instruction-variants-hash-table*) (list
FLD-mem80))

(setf (gethash "FLD-void" *x64-instruction-variants-hash-table*) (list
FLD-void))

(setf (gethash "FLD1" *x64-instruction-variants-hash-table*) (list
FLD1-void))

(setf (gethash "FLD1-void" *x64-instruction-variants-hash-table*) (list
FLD1-void))

(setf (gethash "FLDCW" *x64-instruction-variants-hash-table*) (list
FLDCW-mem))

(setf (gethash "FLDCW-mem" *x64-instruction-variants-hash-table*) (list
FLDCW-mem))

(setf (gethash "FLDENV" *x64-instruction-variants-hash-table*) (list
FLDENV-mem))

(setf (gethash "FLDENV-mem" *x64-instruction-variants-hash-table*) (list
FLDENV-mem))

(setf (gethash "FLDL2E" *x64-instruction-variants-hash-table*) (list
FLDL2E-void))

(setf (gethash "FLDL2E-void" *x64-instruction-variants-hash-table*) (list
FLDL2E-void))

(setf (gethash "FLDL2T" *x64-instruction-variants-hash-table*) (list
FLDL2T-void))

(setf (gethash "FLDL2T-void" *x64-instruction-variants-hash-table*) (list
FLDL2T-void))

(setf (gethash "FLDLG2" *x64-instruction-variants-hash-table*) (list
FLDLG2-void))

(setf (gethash "FLDLG2-void" *x64-instruction-variants-hash-table*) (list
FLDLG2-void))

(setf (gethash "FLDLN2" *x64-instruction-variants-hash-table*) (list
FLDLN2-void))

(setf (gethash "FLDLN2-void" *x64-instruction-variants-hash-table*) (list
FLDLN2-void))

(setf (gethash "FLDPI" *x64-instruction-variants-hash-table*) (list
FLDPI-void))

(setf (gethash "FLDPI-void" *x64-instruction-variants-hash-table*) (list
FLDPI-void))

(setf (gethash "FLDZ" *x64-instruction-variants-hash-table*) (list
FLDZ-void))

(setf (gethash "FLDZ-void" *x64-instruction-variants-hash-table*) (list
FLDZ-void))

(setf (gethash "FMUL" *x64-instruction-variants-hash-table*) (list
FMUL-mem32
FMUL-mem64
FMUL-fpureg-to
FMUL-fpureg.fpu0
FMUL-fpureg
FMUL-fpu0.fpureg
FMUL-void))

(setf (gethash "FMUL-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FMUL-fpu0.fpureg))

(setf (gethash "FMUL-fpureg" *x64-instruction-variants-hash-table*) (list
FMUL-fpureg))

(setf (gethash "FMUL-fpureg-to" *x64-instruction-variants-hash-table*) (list
FMUL-fpureg-to))

(setf (gethash "FMUL-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FMUL-fpureg.fpu0))

(setf (gethash "FMUL-mem32" *x64-instruction-variants-hash-table*) (list
FMUL-mem32))

(setf (gethash "FMUL-mem64" *x64-instruction-variants-hash-table*) (list
FMUL-mem64))

(setf (gethash "FMUL-void" *x64-instruction-variants-hash-table*) (list
FMUL-void))

(setf (gethash "FMULP" *x64-instruction-variants-hash-table*) (list
FMULP-fpureg
FMULP-fpureg.fpu0
FMULP-void))

(setf (gethash "FMULP-fpureg" *x64-instruction-variants-hash-table*) (list
FMULP-fpureg))

(setf (gethash "FMULP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FMULP-fpureg.fpu0))

(setf (gethash "FMULP-void" *x64-instruction-variants-hash-table*) (list
FMULP-void))

(setf (gethash "FNCLEX" *x64-instruction-variants-hash-table*) (list
FNCLEX-void))

(setf (gethash "FNCLEX-void" *x64-instruction-variants-hash-table*) (list
FNCLEX-void))

(setf (gethash "FNDISI" *x64-instruction-variants-hash-table*) (list
FNDISI-void))

(setf (gethash "FNDISI-void" *x64-instruction-variants-hash-table*) (list
FNDISI-void))

(setf (gethash "FNENI" *x64-instruction-variants-hash-table*) (list
FNENI-void))

(setf (gethash "FNENI-void" *x64-instruction-variants-hash-table*) (list
FNENI-void))

(setf (gethash "FNINIT" *x64-instruction-variants-hash-table*) (list
FNINIT-void))

(setf (gethash "FNINIT-void" *x64-instruction-variants-hash-table*) (list
FNINIT-void))

(setf (gethash "FNOP" *x64-instruction-variants-hash-table*) (list
FNOP-void))

(setf (gethash "FNOP-void" *x64-instruction-variants-hash-table*) (list
FNOP-void))

(setf (gethash "FNSAVE" *x64-instruction-variants-hash-table*) (list
FNSAVE-mem))

(setf (gethash "FNSAVE-mem" *x64-instruction-variants-hash-table*) (list
FNSAVE-mem))

(setf (gethash "FNSTCW" *x64-instruction-variants-hash-table*) (list
FNSTCW-mem))

(setf (gethash "FNSTCW-mem" *x64-instruction-variants-hash-table*) (list
FNSTCW-mem))

(setf (gethash "FNSTENV" *x64-instruction-variants-hash-table*) (list
FNSTENV-mem))

(setf (gethash "FNSTENV-mem" *x64-instruction-variants-hash-table*) (list
FNSTENV-mem))

(setf (gethash "FNSTSW" *x64-instruction-variants-hash-table*) (list
FNSTSW-mem
FNSTSW-reg_ax))

(setf (gethash "FNSTSW-mem" *x64-instruction-variants-hash-table*) (list
FNSTSW-mem))

(setf (gethash "FNSTSW-reg_ax" *x64-instruction-variants-hash-table*) (list
FNSTSW-reg_ax))

(setf (gethash "FPATAN" *x64-instruction-variants-hash-table*) (list
FPATAN-void))

(setf (gethash "FPATAN-void" *x64-instruction-variants-hash-table*) (list
FPATAN-void))

(setf (gethash "FPREM" *x64-instruction-variants-hash-table*) (list
FPREM-void))

(setf (gethash "FPREM-void" *x64-instruction-variants-hash-table*) (list
FPREM-void))

(setf (gethash "FPREM1" *x64-instruction-variants-hash-table*) (list
FPREM1-void))

(setf (gethash "FPREM1-void" *x64-instruction-variants-hash-table*) (list
FPREM1-void))

(setf (gethash "FPTAN" *x64-instruction-variants-hash-table*) (list
FPTAN-void))

(setf (gethash "FPTAN-void" *x64-instruction-variants-hash-table*) (list
FPTAN-void))

(setf (gethash "FRNDINT" *x64-instruction-variants-hash-table*) (list
FRNDINT-void))

(setf (gethash "FRNDINT-void" *x64-instruction-variants-hash-table*) (list
FRNDINT-void))

(setf (gethash "FRSTOR" *x64-instruction-variants-hash-table*) (list
FRSTOR-mem))

(setf (gethash "FRSTOR-mem" *x64-instruction-variants-hash-table*) (list
FRSTOR-mem))

(setf (gethash "FSAVE" *x64-instruction-variants-hash-table*) (list
FSAVE-mem))

(setf (gethash "FSAVE-mem" *x64-instruction-variants-hash-table*) (list
FSAVE-mem))

(setf (gethash "FSCALE" *x64-instruction-variants-hash-table*) (list
FSCALE-void))

(setf (gethash "FSCALE-void" *x64-instruction-variants-hash-table*) (list
FSCALE-void))

(setf (gethash "FSETPM" *x64-instruction-variants-hash-table*) (list
FSETPM-void))

(setf (gethash "FSETPM-void" *x64-instruction-variants-hash-table*) (list
FSETPM-void))

(setf (gethash "FSIN" *x64-instruction-variants-hash-table*) (list
FSIN-void))

(setf (gethash "FSIN-void" *x64-instruction-variants-hash-table*) (list
FSIN-void))

(setf (gethash "FSINCOS" *x64-instruction-variants-hash-table*) (list
FSINCOS-void))

(setf (gethash "FSINCOS-void" *x64-instruction-variants-hash-table*) (list
FSINCOS-void))

(setf (gethash "FSQRT" *x64-instruction-variants-hash-table*) (list
FSQRT-void))

(setf (gethash "FSQRT-void" *x64-instruction-variants-hash-table*) (list
FSQRT-void))

(setf (gethash "FST" *x64-instruction-variants-hash-table*) (list
FST-mem32
FST-mem64
FST-fpureg
FST-void))

(setf (gethash "FST-fpureg" *x64-instruction-variants-hash-table*) (list
FST-fpureg))

(setf (gethash "FST-mem32" *x64-instruction-variants-hash-table*) (list
FST-mem32))

(setf (gethash "FST-mem64" *x64-instruction-variants-hash-table*) (list
FST-mem64))

(setf (gethash "FST-void" *x64-instruction-variants-hash-table*) (list
FST-void))

(setf (gethash "FSTCW" *x64-instruction-variants-hash-table*) (list
FSTCW-mem))

(setf (gethash "FSTCW-mem" *x64-instruction-variants-hash-table*) (list
FSTCW-mem))

(setf (gethash "FSTENV" *x64-instruction-variants-hash-table*) (list
FSTENV-mem))

(setf (gethash "FSTENV-mem" *x64-instruction-variants-hash-table*) (list
FSTENV-mem))

(setf (gethash "FSTP" *x64-instruction-variants-hash-table*) (list
FSTP-mem32
FSTP-mem64
FSTP-mem80
FSTP-fpureg
FSTP-void))

(setf (gethash "FSTP-fpureg" *x64-instruction-variants-hash-table*) (list
FSTP-fpureg))

(setf (gethash "FSTP-mem32" *x64-instruction-variants-hash-table*) (list
FSTP-mem32))

(setf (gethash "FSTP-mem64" *x64-instruction-variants-hash-table*) (list
FSTP-mem64))

(setf (gethash "FSTP-mem80" *x64-instruction-variants-hash-table*) (list
FSTP-mem80))

(setf (gethash "FSTP-void" *x64-instruction-variants-hash-table*) (list
FSTP-void))

(setf (gethash "FSTSW" *x64-instruction-variants-hash-table*) (list
FSTSW-mem
FSTSW-reg_ax))

(setf (gethash "FSTSW-mem" *x64-instruction-variants-hash-table*) (list
FSTSW-mem))

(setf (gethash "FSTSW-reg_ax" *x64-instruction-variants-hash-table*) (list
FSTSW-reg_ax))

(setf (gethash "FSUB" *x64-instruction-variants-hash-table*) (list
FSUB-mem32
FSUB-mem64
FSUB-fpureg-to
FSUB-fpureg.fpu0
FSUB-fpureg
FSUB-fpu0.fpureg
FSUB-void))

(setf (gethash "FSUB-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FSUB-fpu0.fpureg))

(setf (gethash "FSUB-fpureg" *x64-instruction-variants-hash-table*) (list
FSUB-fpureg))

(setf (gethash "FSUB-fpureg-to" *x64-instruction-variants-hash-table*) (list
FSUB-fpureg-to))

(setf (gethash "FSUB-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FSUB-fpureg.fpu0))

(setf (gethash "FSUB-mem32" *x64-instruction-variants-hash-table*) (list
FSUB-mem32))

(setf (gethash "FSUB-mem64" *x64-instruction-variants-hash-table*) (list
FSUB-mem64))

(setf (gethash "FSUB-void" *x64-instruction-variants-hash-table*) (list
FSUB-void))

(setf (gethash "FSUBP" *x64-instruction-variants-hash-table*) (list
FSUBP-fpureg
FSUBP-fpureg.fpu0
FSUBP-void))

(setf (gethash "FSUBP-fpureg" *x64-instruction-variants-hash-table*) (list
FSUBP-fpureg))

(setf (gethash "FSUBP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FSUBP-fpureg.fpu0))

(setf (gethash "FSUBP-void" *x64-instruction-variants-hash-table*) (list
FSUBP-void))

(setf (gethash "FSUBR" *x64-instruction-variants-hash-table*) (list
FSUBR-mem32
FSUBR-mem64
FSUBR-fpureg-to
FSUBR-fpureg.fpu0
FSUBR-fpureg
FSUBR-fpu0.fpureg
FSUBR-void))

(setf (gethash "FSUBR-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FSUBR-fpu0.fpureg))

(setf (gethash "FSUBR-fpureg" *x64-instruction-variants-hash-table*) (list
FSUBR-fpureg))

(setf (gethash "FSUBR-fpureg-to" *x64-instruction-variants-hash-table*) (list
FSUBR-fpureg-to))

(setf (gethash "FSUBR-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FSUBR-fpureg.fpu0))

(setf (gethash "FSUBR-mem32" *x64-instruction-variants-hash-table*) (list
FSUBR-mem32))

(setf (gethash "FSUBR-mem64" *x64-instruction-variants-hash-table*) (list
FSUBR-mem64))

(setf (gethash "FSUBR-void" *x64-instruction-variants-hash-table*) (list
FSUBR-void))

(setf (gethash "FSUBRP" *x64-instruction-variants-hash-table*) (list
FSUBRP-fpureg
FSUBRP-fpureg.fpu0
FSUBRP-void))

(setf (gethash "FSUBRP-fpureg" *x64-instruction-variants-hash-table*) (list
FSUBRP-fpureg))

(setf (gethash "FSUBRP-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FSUBRP-fpureg.fpu0))

(setf (gethash "FSUBRP-void" *x64-instruction-variants-hash-table*) (list
FSUBRP-void))

(setf (gethash "FTST" *x64-instruction-variants-hash-table*) (list
FTST-void))

(setf (gethash "FTST-void" *x64-instruction-variants-hash-table*) (list
FTST-void))

(setf (gethash "FUCOM" *x64-instruction-variants-hash-table*) (list
FUCOM-fpureg
FUCOM-fpu0.fpureg
FUCOM-void))

(setf (gethash "FUCOM-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FUCOM-fpu0.fpureg))

(setf (gethash "FUCOM-fpureg" *x64-instruction-variants-hash-table*) (list
FUCOM-fpureg))

(setf (gethash "FUCOM-void" *x64-instruction-variants-hash-table*) (list
FUCOM-void))

(setf (gethash "FUCOMI" *x64-instruction-variants-hash-table*) (list
FUCOMI-fpureg
FUCOMI-fpu0.fpureg
FUCOMI-void))

(setf (gethash "FUCOMI-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMI-fpu0.fpureg))

(setf (gethash "FUCOMI-fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMI-fpureg))

(setf (gethash "FUCOMI-void" *x64-instruction-variants-hash-table*) (list
FUCOMI-void))

(setf (gethash "FUCOMIP" *x64-instruction-variants-hash-table*) (list
FUCOMIP-fpureg
FUCOMIP-fpu0.fpureg
FUCOMIP-void))

(setf (gethash "FUCOMIP-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMIP-fpu0.fpureg))

(setf (gethash "FUCOMIP-fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMIP-fpureg))

(setf (gethash "FUCOMIP-void" *x64-instruction-variants-hash-table*) (list
FUCOMIP-void))

(setf (gethash "FUCOMP" *x64-instruction-variants-hash-table*) (list
FUCOMP-fpureg
FUCOMP-fpu0.fpureg
FUCOMP-void))

(setf (gethash "FUCOMP-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMP-fpu0.fpureg))

(setf (gethash "FUCOMP-fpureg" *x64-instruction-variants-hash-table*) (list
FUCOMP-fpureg))

(setf (gethash "FUCOMP-void" *x64-instruction-variants-hash-table*) (list
FUCOMP-void))

(setf (gethash "FUCOMPP" *x64-instruction-variants-hash-table*) (list
FUCOMPP-void))

(setf (gethash "FUCOMPP-void" *x64-instruction-variants-hash-table*) (list
FUCOMPP-void))

(setf (gethash "FWAIT" *x64-instruction-variants-hash-table*) (list
FWAIT-void))

(setf (gethash "FWAIT-void" *x64-instruction-variants-hash-table*) (list
FWAIT-void))

(setf (gethash "FXAM" *x64-instruction-variants-hash-table*) (list
FXAM-void))

(setf (gethash "FXAM-void" *x64-instruction-variants-hash-table*) (list
FXAM-void))

(setf (gethash "FXCH" *x64-instruction-variants-hash-table*) (list
FXCH-fpureg
FXCH-fpureg.fpu0
FXCH-fpu0.fpureg
FXCH-void))

(setf (gethash "FXCH-fpu0.fpureg" *x64-instruction-variants-hash-table*) (list
FXCH-fpu0.fpureg))

(setf (gethash "FXCH-fpureg" *x64-instruction-variants-hash-table*) (list
FXCH-fpureg))

(setf (gethash "FXCH-fpureg.fpu0" *x64-instruction-variants-hash-table*) (list
FXCH-fpureg.fpu0))

(setf (gethash "FXCH-void" *x64-instruction-variants-hash-table*) (list
FXCH-void))

(setf (gethash "FXRSTOR" *x64-instruction-variants-hash-table*) (list
FXRSTOR-mem))

(setf (gethash "FXRSTOR-mem" *x64-instruction-variants-hash-table*) (list
FXRSTOR-mem))

(setf (gethash "FXRSTOR64" *x64-instruction-variants-hash-table*) (list
FXRSTOR64-mem))

(setf (gethash "FXRSTOR64-mem" *x64-instruction-variants-hash-table*) (list
FXRSTOR64-mem))

(setf (gethash "FXSAVE" *x64-instruction-variants-hash-table*) (list
FXSAVE-mem))

(setf (gethash "FXSAVE-mem" *x64-instruction-variants-hash-table*) (list
FXSAVE-mem))

(setf (gethash "FXSAVE64" *x64-instruction-variants-hash-table*) (list
FXSAVE64-mem))

(setf (gethash "FXSAVE64-mem" *x64-instruction-variants-hash-table*) (list
FXSAVE64-mem))

(setf (gethash "FXTRACT" *x64-instruction-variants-hash-table*) (list
FXTRACT-void))

(setf (gethash "FXTRACT-void" *x64-instruction-variants-hash-table*) (list
FXTRACT-void))

(setf (gethash "FYL2X" *x64-instruction-variants-hash-table*) (list
FYL2X-void))

(setf (gethash "FYL2X-void" *x64-instruction-variants-hash-table*) (list
FYL2X-void))

(setf (gethash "FYL2XP1" *x64-instruction-variants-hash-table*) (list
FYL2XP1-void))

(setf (gethash "FYL2XP1-void" *x64-instruction-variants-hash-table*) (list
FYL2XP1-void))

(setf (gethash "GETSEC" *x64-instruction-variants-hash-table*) (list
GETSEC-void))

(setf (gethash "GETSEC-void" *x64-instruction-variants-hash-table*) (list
GETSEC-void))

(setf (gethash "HADDPD" *x64-instruction-variants-hash-table*) (list
HADDPD-xmmreg.xmmrm))

(setf (gethash "HADDPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
HADDPD-xmmreg.xmmrm))

(setf (gethash "HADDPS" *x64-instruction-variants-hash-table*) (list
HADDPS-xmmreg.xmmrm))

(setf (gethash "HADDPS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
HADDPS-xmmreg.xmmrm))

(setf (gethash "HINT_NOP0" *x64-instruction-variants-hash-table*) (list
HINT_NOP0-rm16
HINT_NOP0-rm32
HINT_NOP0-rm64))

(setf (gethash "HINT_NOP0-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP0-rm16))

(setf (gethash "HINT_NOP0-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP0-rm32))

(setf (gethash "HINT_NOP0-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP0-rm64))

(setf (gethash "HINT_NOP1" *x64-instruction-variants-hash-table*) (list
HINT_NOP1-rm16
HINT_NOP1-rm32
HINT_NOP1-rm64))

(setf (gethash "HINT_NOP1-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP1-rm16))

(setf (gethash "HINT_NOP1-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP1-rm32))

(setf (gethash "HINT_NOP1-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP1-rm64))

(setf (gethash "HINT_NOP10" *x64-instruction-variants-hash-table*) (list
HINT_NOP10-rm16
HINT_NOP10-rm32
HINT_NOP10-rm64))

(setf (gethash "HINT_NOP10-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP10-rm16))

(setf (gethash "HINT_NOP10-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP10-rm32))

(setf (gethash "HINT_NOP10-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP10-rm64))

(setf (gethash "HINT_NOP11" *x64-instruction-variants-hash-table*) (list
HINT_NOP11-rm16
HINT_NOP11-rm32
HINT_NOP11-rm64))

(setf (gethash "HINT_NOP11-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP11-rm16))

(setf (gethash "HINT_NOP11-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP11-rm32))

(setf (gethash "HINT_NOP11-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP11-rm64))

(setf (gethash "HINT_NOP12" *x64-instruction-variants-hash-table*) (list
HINT_NOP12-rm16
HINT_NOP12-rm32
HINT_NOP12-rm64))

(setf (gethash "HINT_NOP12-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP12-rm16))

(setf (gethash "HINT_NOP12-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP12-rm32))

(setf (gethash "HINT_NOP12-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP12-rm64))

(setf (gethash "HINT_NOP13" *x64-instruction-variants-hash-table*) (list
HINT_NOP13-rm16
HINT_NOP13-rm32
HINT_NOP13-rm64))

(setf (gethash "HINT_NOP13-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP13-rm16))

(setf (gethash "HINT_NOP13-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP13-rm32))

(setf (gethash "HINT_NOP13-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP13-rm64))

(setf (gethash "HINT_NOP14" *x64-instruction-variants-hash-table*) (list
HINT_NOP14-rm16
HINT_NOP14-rm32
HINT_NOP14-rm64))

(setf (gethash "HINT_NOP14-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP14-rm16))

(setf (gethash "HINT_NOP14-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP14-rm32))

(setf (gethash "HINT_NOP14-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP14-rm64))

(setf (gethash "HINT_NOP15" *x64-instruction-variants-hash-table*) (list
HINT_NOP15-rm16
HINT_NOP15-rm32
HINT_NOP15-rm64))

(setf (gethash "HINT_NOP15-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP15-rm16))

(setf (gethash "HINT_NOP15-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP15-rm32))

(setf (gethash "HINT_NOP15-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP15-rm64))

(setf (gethash "HINT_NOP16" *x64-instruction-variants-hash-table*) (list
HINT_NOP16-rm16
HINT_NOP16-rm32
HINT_NOP16-rm64))

(setf (gethash "HINT_NOP16-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP16-rm16))

(setf (gethash "HINT_NOP16-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP16-rm32))

(setf (gethash "HINT_NOP16-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP16-rm64))

(setf (gethash "HINT_NOP17" *x64-instruction-variants-hash-table*) (list
HINT_NOP17-rm16
HINT_NOP17-rm32
HINT_NOP17-rm64))

(setf (gethash "HINT_NOP17-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP17-rm16))

(setf (gethash "HINT_NOP17-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP17-rm32))

(setf (gethash "HINT_NOP17-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP17-rm64))

(setf (gethash "HINT_NOP18" *x64-instruction-variants-hash-table*) (list
HINT_NOP18-rm16
HINT_NOP18-rm32
HINT_NOP18-rm64))

(setf (gethash "HINT_NOP18-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP18-rm16))

(setf (gethash "HINT_NOP18-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP18-rm32))

(setf (gethash "HINT_NOP18-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP18-rm64))

(setf (gethash "HINT_NOP19" *x64-instruction-variants-hash-table*) (list
HINT_NOP19-rm16
HINT_NOP19-rm32
HINT_NOP19-rm64))

(setf (gethash "HINT_NOP19-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP19-rm16))

(setf (gethash "HINT_NOP19-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP19-rm32))

(setf (gethash "HINT_NOP19-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP19-rm64))

(setf (gethash "HINT_NOP2" *x64-instruction-variants-hash-table*) (list
HINT_NOP2-rm16
HINT_NOP2-rm32
HINT_NOP2-rm64))

(setf (gethash "HINT_NOP2-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP2-rm16))

(setf (gethash "HINT_NOP2-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP2-rm32))

(setf (gethash "HINT_NOP2-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP2-rm64))

(setf (gethash "HINT_NOP20" *x64-instruction-variants-hash-table*) (list
HINT_NOP20-rm16
HINT_NOP20-rm32
HINT_NOP20-rm64))

(setf (gethash "HINT_NOP20-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP20-rm16))

(setf (gethash "HINT_NOP20-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP20-rm32))

(setf (gethash "HINT_NOP20-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP20-rm64))

(setf (gethash "HINT_NOP21" *x64-instruction-variants-hash-table*) (list
HINT_NOP21-rm16
HINT_NOP21-rm32
HINT_NOP21-rm64))

(setf (gethash "HINT_NOP21-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP21-rm16))

(setf (gethash "HINT_NOP21-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP21-rm32))

(setf (gethash "HINT_NOP21-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP21-rm64))

(setf (gethash "HINT_NOP22" *x64-instruction-variants-hash-table*) (list
HINT_NOP22-rm16
HINT_NOP22-rm32
HINT_NOP22-rm64))

(setf (gethash "HINT_NOP22-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP22-rm16))

(setf (gethash "HINT_NOP22-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP22-rm32))

(setf (gethash "HINT_NOP22-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP22-rm64))

(setf (gethash "HINT_NOP23" *x64-instruction-variants-hash-table*) (list
HINT_NOP23-rm16
HINT_NOP23-rm32
HINT_NOP23-rm64))

(setf (gethash "HINT_NOP23-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP23-rm16))

(setf (gethash "HINT_NOP23-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP23-rm32))

(setf (gethash "HINT_NOP23-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP23-rm64))

(setf (gethash "HINT_NOP24" *x64-instruction-variants-hash-table*) (list
HINT_NOP24-rm16
HINT_NOP24-rm32
HINT_NOP24-rm64))

(setf (gethash "HINT_NOP24-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP24-rm16))

(setf (gethash "HINT_NOP24-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP24-rm32))

(setf (gethash "HINT_NOP24-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP24-rm64))

(setf (gethash "HINT_NOP25" *x64-instruction-variants-hash-table*) (list
HINT_NOP25-rm16
HINT_NOP25-rm32
HINT_NOP25-rm64))

(setf (gethash "HINT_NOP25-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP25-rm16))

(setf (gethash "HINT_NOP25-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP25-rm32))

(setf (gethash "HINT_NOP25-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP25-rm64))

(setf (gethash "HINT_NOP26" *x64-instruction-variants-hash-table*) (list
HINT_NOP26-rm16
HINT_NOP26-rm32
HINT_NOP26-rm64))

(setf (gethash "HINT_NOP26-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP26-rm16))

(setf (gethash "HINT_NOP26-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP26-rm32))

(setf (gethash "HINT_NOP26-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP26-rm64))

(setf (gethash "HINT_NOP27" *x64-instruction-variants-hash-table*) (list
HINT_NOP27-rm16
HINT_NOP27-rm32
HINT_NOP27-rm64))

(setf (gethash "HINT_NOP27-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP27-rm16))

(setf (gethash "HINT_NOP27-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP27-rm32))

(setf (gethash "HINT_NOP27-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP27-rm64))

(setf (gethash "HINT_NOP28" *x64-instruction-variants-hash-table*) (list
HINT_NOP28-rm16
HINT_NOP28-rm32
HINT_NOP28-rm64))

(setf (gethash "HINT_NOP28-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP28-rm16))

(setf (gethash "HINT_NOP28-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP28-rm32))

(setf (gethash "HINT_NOP28-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP28-rm64))

(setf (gethash "HINT_NOP29" *x64-instruction-variants-hash-table*) (list
HINT_NOP29-rm16
HINT_NOP29-rm32
HINT_NOP29-rm64))

(setf (gethash "HINT_NOP29-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP29-rm16))

(setf (gethash "HINT_NOP29-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP29-rm32))

(setf (gethash "HINT_NOP29-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP29-rm64))

(setf (gethash "HINT_NOP3" *x64-instruction-variants-hash-table*) (list
HINT_NOP3-rm16
HINT_NOP3-rm32
HINT_NOP3-rm64))

(setf (gethash "HINT_NOP3-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP3-rm16))

(setf (gethash "HINT_NOP3-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP3-rm32))

(setf (gethash "HINT_NOP3-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP3-rm64))

(setf (gethash "HINT_NOP30" *x64-instruction-variants-hash-table*) (list
HINT_NOP30-rm16
HINT_NOP30-rm32
HINT_NOP30-rm64))

(setf (gethash "HINT_NOP30-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP30-rm16))

(setf (gethash "HINT_NOP30-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP30-rm32))

(setf (gethash "HINT_NOP30-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP30-rm64))

(setf (gethash "HINT_NOP31" *x64-instruction-variants-hash-table*) (list
HINT_NOP31-rm16
HINT_NOP31-rm32
HINT_NOP31-rm64))

(setf (gethash "HINT_NOP31-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP31-rm16))

(setf (gethash "HINT_NOP31-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP31-rm32))

(setf (gethash "HINT_NOP31-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP31-rm64))

(setf (gethash "HINT_NOP32" *x64-instruction-variants-hash-table*) (list
HINT_NOP32-rm16
HINT_NOP32-rm32
HINT_NOP32-rm64))

(setf (gethash "HINT_NOP32-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP32-rm16))

(setf (gethash "HINT_NOP32-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP32-rm32))

(setf (gethash "HINT_NOP32-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP32-rm64))

(setf (gethash "HINT_NOP33" *x64-instruction-variants-hash-table*) (list
HINT_NOP33-rm16
HINT_NOP33-rm32
HINT_NOP33-rm64))

(setf (gethash "HINT_NOP33-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP33-rm16))

(setf (gethash "HINT_NOP33-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP33-rm32))

(setf (gethash "HINT_NOP33-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP33-rm64))

(setf (gethash "HINT_NOP34" *x64-instruction-variants-hash-table*) (list
HINT_NOP34-rm16
HINT_NOP34-rm32
HINT_NOP34-rm64))

(setf (gethash "HINT_NOP34-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP34-rm16))

(setf (gethash "HINT_NOP34-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP34-rm32))

(setf (gethash "HINT_NOP34-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP34-rm64))

(setf (gethash "HINT_NOP35" *x64-instruction-variants-hash-table*) (list
HINT_NOP35-rm16
HINT_NOP35-rm32
HINT_NOP35-rm64))

(setf (gethash "HINT_NOP35-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP35-rm16))

(setf (gethash "HINT_NOP35-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP35-rm32))

(setf (gethash "HINT_NOP35-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP35-rm64))

(setf (gethash "HINT_NOP36" *x64-instruction-variants-hash-table*) (list
HINT_NOP36-rm16
HINT_NOP36-rm32
HINT_NOP36-rm64))

(setf (gethash "HINT_NOP36-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP36-rm16))

(setf (gethash "HINT_NOP36-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP36-rm32))

(setf (gethash "HINT_NOP36-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP36-rm64))

(setf (gethash "HINT_NOP37" *x64-instruction-variants-hash-table*) (list
HINT_NOP37-rm16
HINT_NOP37-rm32
HINT_NOP37-rm64))

(setf (gethash "HINT_NOP37-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP37-rm16))

(setf (gethash "HINT_NOP37-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP37-rm32))

(setf (gethash "HINT_NOP37-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP37-rm64))

(setf (gethash "HINT_NOP38" *x64-instruction-variants-hash-table*) (list
HINT_NOP38-rm16
HINT_NOP38-rm32
HINT_NOP38-rm64))

(setf (gethash "HINT_NOP38-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP38-rm16))

(setf (gethash "HINT_NOP38-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP38-rm32))

(setf (gethash "HINT_NOP38-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP38-rm64))

(setf (gethash "HINT_NOP39" *x64-instruction-variants-hash-table*) (list
HINT_NOP39-rm16
HINT_NOP39-rm32
HINT_NOP39-rm64))

(setf (gethash "HINT_NOP39-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP39-rm16))

(setf (gethash "HINT_NOP39-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP39-rm32))

(setf (gethash "HINT_NOP39-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP39-rm64))

(setf (gethash "HINT_NOP4" *x64-instruction-variants-hash-table*) (list
HINT_NOP4-rm16
HINT_NOP4-rm32
HINT_NOP4-rm64))

(setf (gethash "HINT_NOP4-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP4-rm16))

(setf (gethash "HINT_NOP4-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP4-rm32))

(setf (gethash "HINT_NOP4-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP4-rm64))

(setf (gethash "HINT_NOP40" *x64-instruction-variants-hash-table*) (list
HINT_NOP40-rm16
HINT_NOP40-rm32
HINT_NOP40-rm64))

(setf (gethash "HINT_NOP40-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP40-rm16))

(setf (gethash "HINT_NOP40-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP40-rm32))

(setf (gethash "HINT_NOP40-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP40-rm64))

(setf (gethash "HINT_NOP41" *x64-instruction-variants-hash-table*) (list
HINT_NOP41-rm16
HINT_NOP41-rm32
HINT_NOP41-rm64))

(setf (gethash "HINT_NOP41-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP41-rm16))

(setf (gethash "HINT_NOP41-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP41-rm32))

(setf (gethash "HINT_NOP41-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP41-rm64))

(setf (gethash "HINT_NOP42" *x64-instruction-variants-hash-table*) (list
HINT_NOP42-rm16
HINT_NOP42-rm32
HINT_NOP42-rm64))

(setf (gethash "HINT_NOP42-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP42-rm16))

(setf (gethash "HINT_NOP42-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP42-rm32))

(setf (gethash "HINT_NOP42-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP42-rm64))

(setf (gethash "HINT_NOP43" *x64-instruction-variants-hash-table*) (list
HINT_NOP43-rm16
HINT_NOP43-rm32
HINT_NOP43-rm64))

(setf (gethash "HINT_NOP43-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP43-rm16))

(setf (gethash "HINT_NOP43-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP43-rm32))

(setf (gethash "HINT_NOP43-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP43-rm64))

(setf (gethash "HINT_NOP44" *x64-instruction-variants-hash-table*) (list
HINT_NOP44-rm16
HINT_NOP44-rm32
HINT_NOP44-rm64))

(setf (gethash "HINT_NOP44-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP44-rm16))

(setf (gethash "HINT_NOP44-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP44-rm32))

(setf (gethash "HINT_NOP44-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP44-rm64))

(setf (gethash "HINT_NOP45" *x64-instruction-variants-hash-table*) (list
HINT_NOP45-rm16
HINT_NOP45-rm32
HINT_NOP45-rm64))

(setf (gethash "HINT_NOP45-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP45-rm16))

(setf (gethash "HINT_NOP45-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP45-rm32))

(setf (gethash "HINT_NOP45-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP45-rm64))

(setf (gethash "HINT_NOP46" *x64-instruction-variants-hash-table*) (list
HINT_NOP46-rm16
HINT_NOP46-rm32
HINT_NOP46-rm64))

(setf (gethash "HINT_NOP46-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP46-rm16))

(setf (gethash "HINT_NOP46-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP46-rm32))

(setf (gethash "HINT_NOP46-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP46-rm64))

(setf (gethash "HINT_NOP47" *x64-instruction-variants-hash-table*) (list
HINT_NOP47-rm16
HINT_NOP47-rm32
HINT_NOP47-rm64))

(setf (gethash "HINT_NOP47-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP47-rm16))

(setf (gethash "HINT_NOP47-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP47-rm32))

(setf (gethash "HINT_NOP47-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP47-rm64))

(setf (gethash "HINT_NOP48" *x64-instruction-variants-hash-table*) (list
HINT_NOP48-rm16
HINT_NOP48-rm32
HINT_NOP48-rm64))

(setf (gethash "HINT_NOP48-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP48-rm16))

(setf (gethash "HINT_NOP48-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP48-rm32))

(setf (gethash "HINT_NOP48-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP48-rm64))

(setf (gethash "HINT_NOP49" *x64-instruction-variants-hash-table*) (list
HINT_NOP49-rm16
HINT_NOP49-rm32
HINT_NOP49-rm64))

(setf (gethash "HINT_NOP49-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP49-rm16))

(setf (gethash "HINT_NOP49-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP49-rm32))

(setf (gethash "HINT_NOP49-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP49-rm64))

(setf (gethash "HINT_NOP5" *x64-instruction-variants-hash-table*) (list
HINT_NOP5-rm16
HINT_NOP5-rm32
HINT_NOP5-rm64))

(setf (gethash "HINT_NOP5-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP5-rm16))

(setf (gethash "HINT_NOP5-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP5-rm32))

(setf (gethash "HINT_NOP5-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP5-rm64))

(setf (gethash "HINT_NOP50" *x64-instruction-variants-hash-table*) (list
HINT_NOP50-rm16
HINT_NOP50-rm32
HINT_NOP50-rm64))

(setf (gethash "HINT_NOP50-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP50-rm16))

(setf (gethash "HINT_NOP50-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP50-rm32))

(setf (gethash "HINT_NOP50-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP50-rm64))

(setf (gethash "HINT_NOP51" *x64-instruction-variants-hash-table*) (list
HINT_NOP51-rm16
HINT_NOP51-rm32
HINT_NOP51-rm64))

(setf (gethash "HINT_NOP51-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP51-rm16))

(setf (gethash "HINT_NOP51-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP51-rm32))

(setf (gethash "HINT_NOP51-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP51-rm64))

(setf (gethash "HINT_NOP52" *x64-instruction-variants-hash-table*) (list
HINT_NOP52-rm16
HINT_NOP52-rm32
HINT_NOP52-rm64))

(setf (gethash "HINT_NOP52-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP52-rm16))

(setf (gethash "HINT_NOP52-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP52-rm32))

(setf (gethash "HINT_NOP52-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP52-rm64))

(setf (gethash "HINT_NOP53" *x64-instruction-variants-hash-table*) (list
HINT_NOP53-rm16
HINT_NOP53-rm32
HINT_NOP53-rm64))

(setf (gethash "HINT_NOP53-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP53-rm16))

(setf (gethash "HINT_NOP53-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP53-rm32))

(setf (gethash "HINT_NOP53-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP53-rm64))

(setf (gethash "HINT_NOP54" *x64-instruction-variants-hash-table*) (list
HINT_NOP54-rm16
HINT_NOP54-rm32
HINT_NOP54-rm64))

(setf (gethash "HINT_NOP54-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP54-rm16))

(setf (gethash "HINT_NOP54-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP54-rm32))

(setf (gethash "HINT_NOP54-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP54-rm64))

(setf (gethash "HINT_NOP55" *x64-instruction-variants-hash-table*) (list
HINT_NOP55-rm16
HINT_NOP55-rm32
HINT_NOP55-rm64))

(setf (gethash "HINT_NOP55-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP55-rm16))

(setf (gethash "HINT_NOP55-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP55-rm32))

(setf (gethash "HINT_NOP55-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP55-rm64))

(setf (gethash "HINT_NOP56" *x64-instruction-variants-hash-table*) (list
HINT_NOP56-rm16
HINT_NOP56-rm32
HINT_NOP56-rm64))

(setf (gethash "HINT_NOP56-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP56-rm16))

(setf (gethash "HINT_NOP56-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP56-rm32))

(setf (gethash "HINT_NOP56-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP56-rm64))

(setf (gethash "HINT_NOP57" *x64-instruction-variants-hash-table*) (list
HINT_NOP57-rm16
HINT_NOP57-rm32
HINT_NOP57-rm64))

(setf (gethash "HINT_NOP57-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP57-rm16))

(setf (gethash "HINT_NOP57-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP57-rm32))

(setf (gethash "HINT_NOP57-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP57-rm64))

(setf (gethash "HINT_NOP58" *x64-instruction-variants-hash-table*) (list
HINT_NOP58-rm16
HINT_NOP58-rm32
HINT_NOP58-rm64))

(setf (gethash "HINT_NOP58-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP58-rm16))

(setf (gethash "HINT_NOP58-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP58-rm32))

(setf (gethash "HINT_NOP58-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP58-rm64))

(setf (gethash "HINT_NOP59" *x64-instruction-variants-hash-table*) (list
HINT_NOP59-rm16
HINT_NOP59-rm32
HINT_NOP59-rm64))

(setf (gethash "HINT_NOP59-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP59-rm16))

(setf (gethash "HINT_NOP59-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP59-rm32))

(setf (gethash "HINT_NOP59-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP59-rm64))

(setf (gethash "HINT_NOP6" *x64-instruction-variants-hash-table*) (list
HINT_NOP6-rm16
HINT_NOP6-rm32
HINT_NOP6-rm64))

(setf (gethash "HINT_NOP6-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP6-rm16))

(setf (gethash "HINT_NOP6-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP6-rm32))

(setf (gethash "HINT_NOP6-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP6-rm64))

(setf (gethash "HINT_NOP60" *x64-instruction-variants-hash-table*) (list
HINT_NOP60-rm16
HINT_NOP60-rm32
HINT_NOP60-rm64))

(setf (gethash "HINT_NOP60-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP60-rm16))

(setf (gethash "HINT_NOP60-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP60-rm32))

(setf (gethash "HINT_NOP60-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP60-rm64))

(setf (gethash "HINT_NOP61" *x64-instruction-variants-hash-table*) (list
HINT_NOP61-rm16
HINT_NOP61-rm32
HINT_NOP61-rm64))

(setf (gethash "HINT_NOP61-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP61-rm16))

(setf (gethash "HINT_NOP61-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP61-rm32))

(setf (gethash "HINT_NOP61-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP61-rm64))

(setf (gethash "HINT_NOP62" *x64-instruction-variants-hash-table*) (list
HINT_NOP62-rm16
HINT_NOP62-rm32
HINT_NOP62-rm64))

(setf (gethash "HINT_NOP62-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP62-rm16))

(setf (gethash "HINT_NOP62-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP62-rm32))

(setf (gethash "HINT_NOP62-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP62-rm64))

(setf (gethash "HINT_NOP63" *x64-instruction-variants-hash-table*) (list
HINT_NOP63-rm16
HINT_NOP63-rm32
HINT_NOP63-rm64))

(setf (gethash "HINT_NOP63-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP63-rm16))

(setf (gethash "HINT_NOP63-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP63-rm32))

(setf (gethash "HINT_NOP63-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP63-rm64))

(setf (gethash "HINT_NOP7" *x64-instruction-variants-hash-table*) (list
HINT_NOP7-rm16
HINT_NOP7-rm32
HINT_NOP7-rm64))

(setf (gethash "HINT_NOP7-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP7-rm16))

(setf (gethash "HINT_NOP7-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP7-rm32))

(setf (gethash "HINT_NOP7-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP7-rm64))

(setf (gethash "HINT_NOP8" *x64-instruction-variants-hash-table*) (list
HINT_NOP8-rm16
HINT_NOP8-rm32
HINT_NOP8-rm64))

(setf (gethash "HINT_NOP8-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP8-rm16))

(setf (gethash "HINT_NOP8-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP8-rm32))

(setf (gethash "HINT_NOP8-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP8-rm64))

(setf (gethash "HINT_NOP9" *x64-instruction-variants-hash-table*) (list
HINT_NOP9-rm16
HINT_NOP9-rm32
HINT_NOP9-rm64))

(setf (gethash "HINT_NOP9-rm16" *x64-instruction-variants-hash-table*) (list
HINT_NOP9-rm16))

(setf (gethash "HINT_NOP9-rm32" *x64-instruction-variants-hash-table*) (list
HINT_NOP9-rm32))

(setf (gethash "HINT_NOP9-rm64" *x64-instruction-variants-hash-table*) (list
HINT_NOP9-rm64))

(setf (gethash "HLT" *x64-instruction-variants-hash-table*) (list
HLT-void))

(setf (gethash "HLT-void" *x64-instruction-variants-hash-table*) (list
HLT-void))

(setf (gethash "HSUBPD" *x64-instruction-variants-hash-table*) (list
HSUBPD-xmmreg.xmmrm))

(setf (gethash "HSUBPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
HSUBPD-xmmreg.xmmrm))

(setf (gethash "HSUBPS" *x64-instruction-variants-hash-table*) (list
HSUBPS-xmmreg.xmmrm))

(setf (gethash "HSUBPS-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
HSUBPS-xmmreg.xmmrm))

(setf (gethash "IBTS" *x64-instruction-variants-hash-table*) (list
IBTS-mem.reg16
IBTS-reg16.reg16-mr
IBTS-mem.reg32
IBTS-reg32.reg32-mr))

(setf (gethash "IBTS-mem.reg16" *x64-instruction-variants-hash-table*) (list
IBTS-mem.reg16))

(setf (gethash "IBTS-mem.reg32" *x64-instruction-variants-hash-table*) (list
IBTS-mem.reg32))

(setf (gethash "IBTS-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
IBTS-reg16.reg16-mr))

(setf (gethash "IBTS-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
IBTS-reg32.reg32-mr))

(setf (gethash "ICEBP" *x64-instruction-variants-hash-table*) (list
ICEBP-void))

(setf (gethash "ICEBP-void" *x64-instruction-variants-hash-table*) (list
ICEBP-void))

(setf (gethash "IDIV" *x64-instruction-variants-hash-table*) (list
IDIV-rm8
IDIV-rm16
IDIV-rm32
IDIV-rm64))

(setf (gethash "IDIV-rm16" *x64-instruction-variants-hash-table*) (list
IDIV-rm16))

(setf (gethash "IDIV-rm32" *x64-instruction-variants-hash-table*) (list
IDIV-rm32))

(setf (gethash "IDIV-rm64" *x64-instruction-variants-hash-table*) (list
IDIV-rm64))

(setf (gethash "IDIV-rm8" *x64-instruction-variants-hash-table*) (list
IDIV-rm8))

(setf (gethash "IMUL" *x64-instruction-variants-hash-table*) (list
IMUL-rm8
IMUL-rm16
IMUL-rm32
IMUL-rm64
IMUL-reg16.mem
IMUL-reg16.reg16-rm
IMUL-reg32.mem
IMUL-reg32.reg32-rm
IMUL-reg64.mem
IMUL-reg64.reg64-rm
IMUL-reg16.mem.imm8
IMUL-reg16.mem.sbyteword
IMUL-reg16.mem.imm16
IMUL-reg16.mem.imm
IMUL-reg16.reg16.imm8-rm
IMUL-reg16.reg16.sbyteword-rm
IMUL-reg16.reg16.imm16-rm
IMUL-reg16.reg16.imm-rm
IMUL-reg32.mem.imm8
IMUL-reg32.mem.sbytedword
IMUL-reg32.mem.imm32
IMUL-reg32.mem.imm
IMUL-reg32.reg32.imm8-rm
IMUL-reg32.reg32.sbytedword-rm
IMUL-reg32.reg32.imm32-rm
IMUL-reg32.reg32.imm-rm
IMUL-reg64.mem.imm8
IMUL-reg64.mem.sbytedword
IMUL-reg64.mem.imm32
IMUL-reg64.mem.imm
IMUL-reg64.reg64.imm8-rm
IMUL-reg64.reg64.sbytedword-rm
IMUL-reg64.reg64.imm32-rm
IMUL-reg64.reg64.imm-rm
IMUL-reg16.imm8
IMUL-reg16.sbyteword
IMUL-reg16.imm16
IMUL-reg16.imm
IMUL-reg32.imm8
IMUL-reg32.sbytedword
IMUL-reg32.imm32
IMUL-reg32.imm
IMUL-reg64.imm8
IMUL-reg64.sbytedword
IMUL-reg64.imm32
IMUL-reg64.imm))

(setf (gethash "IMUL-reg16.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.imm))

(setf (gethash "IMUL-reg16.imm16" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.imm16))

(setf (gethash "IMUL-reg16.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.imm8))

(setf (gethash "IMUL-reg16.mem" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.mem))

(setf (gethash "IMUL-reg16.mem.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.mem.imm))

(setf (gethash "IMUL-reg16.mem.imm16" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.mem.imm16))

(setf (gethash "IMUL-reg16.mem.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.mem.imm8))

(setf (gethash "IMUL-reg16.mem.sbyteword" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.mem.sbyteword))

(setf (gethash "IMUL-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.reg16-rm))

(setf (gethash "IMUL-reg16.reg16.imm-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.reg16.imm-rm))

(setf (gethash "IMUL-reg16.reg16.imm16-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.reg16.imm16-rm))

(setf (gethash "IMUL-reg16.reg16.imm8-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.reg16.imm8-rm))

(setf (gethash "IMUL-reg16.reg16.sbyteword-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.reg16.sbyteword-rm))

(setf (gethash "IMUL-reg16.sbyteword" *x64-instruction-variants-hash-table*) (list
IMUL-reg16.sbyteword))

(setf (gethash "IMUL-reg32.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.imm))

(setf (gethash "IMUL-reg32.imm32" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.imm32))

(setf (gethash "IMUL-reg32.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.imm8))

(setf (gethash "IMUL-reg32.mem" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.mem))

(setf (gethash "IMUL-reg32.mem.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.mem.imm))

(setf (gethash "IMUL-reg32.mem.imm32" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.mem.imm32))

(setf (gethash "IMUL-reg32.mem.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.mem.imm8))

(setf (gethash "IMUL-reg32.mem.sbytedword" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.mem.sbytedword))

(setf (gethash "IMUL-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.reg32-rm))

(setf (gethash "IMUL-reg32.reg32.imm-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.reg32.imm-rm))

(setf (gethash "IMUL-reg32.reg32.imm32-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.reg32.imm32-rm))

(setf (gethash "IMUL-reg32.reg32.imm8-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.reg32.imm8-rm))

(setf (gethash "IMUL-reg32.reg32.sbytedword-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.reg32.sbytedword-rm))

(setf (gethash "IMUL-reg32.sbytedword" *x64-instruction-variants-hash-table*) (list
IMUL-reg32.sbytedword))

(setf (gethash "IMUL-reg64.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.imm))

(setf (gethash "IMUL-reg64.imm32" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.imm32))

(setf (gethash "IMUL-reg64.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.imm8))

(setf (gethash "IMUL-reg64.mem" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.mem))

(setf (gethash "IMUL-reg64.mem.imm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.mem.imm))

(setf (gethash "IMUL-reg64.mem.imm32" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.mem.imm32))

(setf (gethash "IMUL-reg64.mem.imm8" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.mem.imm8))

(setf (gethash "IMUL-reg64.mem.sbytedword" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.mem.sbytedword))

(setf (gethash "IMUL-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.reg64-rm))

(setf (gethash "IMUL-reg64.reg64.imm-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.reg64.imm-rm))

(setf (gethash "IMUL-reg64.reg64.imm32-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.reg64.imm32-rm))

(setf (gethash "IMUL-reg64.reg64.imm8-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.reg64.imm8-rm))

(setf (gethash "IMUL-reg64.reg64.sbytedword-rm" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.reg64.sbytedword-rm))

(setf (gethash "IMUL-reg64.sbytedword" *x64-instruction-variants-hash-table*) (list
IMUL-reg64.sbytedword))

(setf (gethash "IMUL-rm16" *x64-instruction-variants-hash-table*) (list
IMUL-rm16))

(setf (gethash "IMUL-rm32" *x64-instruction-variants-hash-table*) (list
IMUL-rm32))

(setf (gethash "IMUL-rm64" *x64-instruction-variants-hash-table*) (list
IMUL-rm64))

(setf (gethash "IMUL-rm8" *x64-instruction-variants-hash-table*) (list
IMUL-rm8))

(setf (gethash "IN" *x64-instruction-variants-hash-table*) (list
IN-reg_al.imm
IN-reg_ax.imm
IN-reg_eax.imm
IN-reg_al.reg_dx
IN-reg_ax.reg_dx
IN-reg_eax.reg_dx))

(setf (gethash "IN-reg_al.imm" *x64-instruction-variants-hash-table*) (list
IN-reg_al.imm))

(setf (gethash "IN-reg_al.reg_dx" *x64-instruction-variants-hash-table*) (list
IN-reg_al.reg_dx))

(setf (gethash "IN-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
IN-reg_ax.imm))

(setf (gethash "IN-reg_ax.reg_dx" *x64-instruction-variants-hash-table*) (list
IN-reg_ax.reg_dx))

(setf (gethash "IN-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
IN-reg_eax.imm))

(setf (gethash "IN-reg_eax.reg_dx" *x64-instruction-variants-hash-table*) (list
IN-reg_eax.reg_dx))

(setf (gethash "INC" *x64-instruction-variants-hash-table*) (list
INC-rm8
INC-rm16
INC-rm32
INC-rm64))

(setf (gethash "INC-rm16" *x64-instruction-variants-hash-table*) (list
INC-rm16))

(setf (gethash "INC-rm32" *x64-instruction-variants-hash-table*) (list
INC-rm32))

(setf (gethash "INC-rm64" *x64-instruction-variants-hash-table*) (list
INC-rm64))

(setf (gethash "INC-rm8" *x64-instruction-variants-hash-table*) (list
INC-rm8))

(setf (gethash "INCBIN" *x64-instruction-variants-hash-table*) (list
INCBIN-ignore))

(setf (gethash "INCBIN-ignore" *x64-instruction-variants-hash-table*) (list
INCBIN-ignore))

(setf (gethash "INSB" *x64-instruction-variants-hash-table*) (list
INSB-void))

(setf (gethash "INSB-void" *x64-instruction-variants-hash-table*) (list
INSB-void))

(setf (gethash "INSD" *x64-instruction-variants-hash-table*) (list
INSD-void))

(setf (gethash "INSD-void" *x64-instruction-variants-hash-table*) (list
INSD-void))

(setf (gethash "INSERTPS" *x64-instruction-variants-hash-table*) (list
INSERTPS-xmmreg.xmmrm.imm))

(setf (gethash "INSERTPS-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
INSERTPS-xmmreg.xmmrm.imm))

(setf (gethash "INSERTQ" *x64-instruction-variants-hash-table*) (list
INSERTQ-xmmreg.xmmreg.imm.imm
INSERTQ-xmmreg.xmmreg))

(setf (gethash "INSERTQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
INSERTQ-xmmreg.xmmreg))

(setf (gethash "INSERTQ-xmmreg.xmmreg.imm.imm" *x64-instruction-variants-hash-table*) (list
INSERTQ-xmmreg.xmmreg.imm.imm))

(setf (gethash "INSW" *x64-instruction-variants-hash-table*) (list
INSW-void))

(setf (gethash "INSW-void" *x64-instruction-variants-hash-table*) (list
INSW-void))

(setf (gethash "INT" *x64-instruction-variants-hash-table*) (list
INT-imm))

(setf (gethash "INT-imm" *x64-instruction-variants-hash-table*) (list
INT-imm))

(setf (gethash "INT01" *x64-instruction-variants-hash-table*) (list
INT01-void))

(setf (gethash "INT01-void" *x64-instruction-variants-hash-table*) (list
INT01-void))

(setf (gethash "INT03" *x64-instruction-variants-hash-table*) (list
INT03-void))

(setf (gethash "INT03-void" *x64-instruction-variants-hash-table*) (list
INT03-void))

(setf (gethash "INT1" *x64-instruction-variants-hash-table*) (list
INT1-void))

(setf (gethash "INT1-void" *x64-instruction-variants-hash-table*) (list
INT1-void))

(setf (gethash "INT3" *x64-instruction-variants-hash-table*) (list
INT3-void))

(setf (gethash "INT3-void" *x64-instruction-variants-hash-table*) (list
INT3-void))

(setf (gethash "INVD" *x64-instruction-variants-hash-table*) (list
INVD-void))

(setf (gethash "INVD-void" *x64-instruction-variants-hash-table*) (list
INVD-void))

(setf (gethash "INVEPT" *x64-instruction-variants-hash-table*) (list
INVEPT-reg64.mem))

(setf (gethash "INVEPT-reg64.mem" *x64-instruction-variants-hash-table*) (list
INVEPT-reg64.mem))

(setf (gethash "INVLPG" *x64-instruction-variants-hash-table*) (list
INVLPG-mem))

(setf (gethash "INVLPG-mem" *x64-instruction-variants-hash-table*) (list
INVLPG-mem))

(setf (gethash "INVLPGA" *x64-instruction-variants-hash-table*) (list
INVLPGA-reg_eax.reg_ecx
INVLPGA-reg_rax.reg_ecx
INVLPGA-void))

(setf (gethash "INVLPGA-reg_eax.reg_ecx" *x64-instruction-variants-hash-table*) (list
INVLPGA-reg_eax.reg_ecx))

(setf (gethash "INVLPGA-reg_rax.reg_ecx" *x64-instruction-variants-hash-table*) (list
INVLPGA-reg_rax.reg_ecx))

(setf (gethash "INVLPGA-void" *x64-instruction-variants-hash-table*) (list
INVLPGA-void))

(setf (gethash "INVPCID" *x64-instruction-variants-hash-table*) (list
INVPCID-reg64.mem128))

(setf (gethash "INVPCID-reg64.mem128" *x64-instruction-variants-hash-table*) (list
INVPCID-reg64.mem128))

(setf (gethash "INVVPID" *x64-instruction-variants-hash-table*) (list
INVVPID-reg64.mem))

(setf (gethash "INVVPID-reg64.mem" *x64-instruction-variants-hash-table*) (list
INVVPID-reg64.mem))

(setf (gethash "IRET" *x64-instruction-variants-hash-table*) (list
IRET-void))

(setf (gethash "IRET-void" *x64-instruction-variants-hash-table*) (list
IRET-void))

(setf (gethash "IRETD" *x64-instruction-variants-hash-table*) (list
IRETD-void))

(setf (gethash "IRETD-void" *x64-instruction-variants-hash-table*) (list
IRETD-void))

(setf (gethash "IRETQ" *x64-instruction-variants-hash-table*) (list
IRETQ-void))

(setf (gethash "IRETQ-void" *x64-instruction-variants-hash-table*) (list
IRETQ-void))

(setf (gethash "IRETW" *x64-instruction-variants-hash-table*) (list
IRETW-void))

(setf (gethash "IRETW-void" *x64-instruction-variants-hash-table*) (list
IRETW-void))

(setf (gethash "JECXZ" *x64-instruction-variants-hash-table*) (list
JECXZ-imm))

(setf (gethash "JECXZ-imm" *x64-instruction-variants-hash-table*) (list
JECXZ-imm))

(setf (gethash "JMP" *x64-instruction-variants-hash-table*) (list
JMP-imm-short
JMP-imm
JMP-imm
JMP-imm-near
JMP-imm64
JMP-imm64-near
JMP-mem-far
JMP-mem16-far
JMP-mem32-far
JMP-mem64-far
JMP-mem-near
JMP-rm64-near
JMP-mem
JMP-rm64))

(setf (gethash "JMP-imm" *x64-instruction-variants-hash-table*) (list
JMP-imm
JMP-imm))

(setf (gethash "JMP-imm-near" *x64-instruction-variants-hash-table*) (list
JMP-imm-near))

(setf (gethash "JMP-imm-short" *x64-instruction-variants-hash-table*) (list
JMP-imm-short))

(setf (gethash "JMP-imm64" *x64-instruction-variants-hash-table*) (list
JMP-imm64))

(setf (gethash "JMP-imm64-near" *x64-instruction-variants-hash-table*) (list
JMP-imm64-near))

(setf (gethash "JMP-mem" *x64-instruction-variants-hash-table*) (list
JMP-mem))

(setf (gethash "JMP-mem-far" *x64-instruction-variants-hash-table*) (list
JMP-mem-far))

(setf (gethash "JMP-mem-near" *x64-instruction-variants-hash-table*) (list
JMP-mem-near))

(setf (gethash "JMP-mem16-far" *x64-instruction-variants-hash-table*) (list
JMP-mem16-far))

(setf (gethash "JMP-mem32-far" *x64-instruction-variants-hash-table*) (list
JMP-mem32-far))

(setf (gethash "JMP-mem64-far" *x64-instruction-variants-hash-table*) (list
JMP-mem64-far))

(setf (gethash "JMP-rm64" *x64-instruction-variants-hash-table*) (list
JMP-rm64))

(setf (gethash "JMP-rm64-near" *x64-instruction-variants-hash-table*) (list
JMP-rm64-near))

(setf (gethash "JMPE" *x64-instruction-variants-hash-table*) (list
JMPE-imm
JMPE-imm16
JMPE-imm32
JMPE-rm16
JMPE-rm32))

(setf (gethash "JMPE-imm" *x64-instruction-variants-hash-table*) (list
JMPE-imm))

(setf (gethash "JMPE-imm16" *x64-instruction-variants-hash-table*) (list
JMPE-imm16))

(setf (gethash "JMPE-imm32" *x64-instruction-variants-hash-table*) (list
JMPE-imm32))

(setf (gethash "JMPE-rm16" *x64-instruction-variants-hash-table*) (list
JMPE-rm16))

(setf (gethash "JMPE-rm32" *x64-instruction-variants-hash-table*) (list
JMPE-rm32))

(setf (gethash "JRCXZ" *x64-instruction-variants-hash-table*) (list
JRCXZ-imm))

(setf (gethash "JRCXZ-imm" *x64-instruction-variants-hash-table*) (list
JRCXZ-imm))

(setf (gethash "Jcc" *x64-instruction-variants-hash-table*) (list
Jcc-imm-near
Jcc-imm64-near
Jcc-imm-short
Jcc-imm
Jcc-imm
Jcc-imm
Jcc-imm))

(setf (gethash "Jcc-imm" *x64-instruction-variants-hash-table*) (list
Jcc-imm
Jcc-imm
Jcc-imm
Jcc-imm))

(setf (gethash "Jcc-imm-near" *x64-instruction-variants-hash-table*) (list
Jcc-imm-near))

(setf (gethash "Jcc-imm-short" *x64-instruction-variants-hash-table*) (list
Jcc-imm-short))

(setf (gethash "Jcc-imm64-near" *x64-instruction-variants-hash-table*) (list
Jcc-imm64-near))

(setf (gethash "KADDB" *x64-instruction-variants-hash-table*) (list
KADDB-kreg.kreg.kreg))

(setf (gethash "KADDB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KADDB-kreg.kreg.kreg))

(setf (gethash "KADDD" *x64-instruction-variants-hash-table*) (list
KADDD-kreg.kreg.kreg))

(setf (gethash "KADDD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KADDD-kreg.kreg.kreg))

(setf (gethash "KADDQ" *x64-instruction-variants-hash-table*) (list
KADDQ-kreg.kreg.kreg))

(setf (gethash "KADDQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KADDQ-kreg.kreg.kreg))

(setf (gethash "KADDW" *x64-instruction-variants-hash-table*) (list
KADDW-kreg.kreg.kreg))

(setf (gethash "KADDW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KADDW-kreg.kreg.kreg))

(setf (gethash "KANDB" *x64-instruction-variants-hash-table*) (list
KANDB-kreg.kreg.kreg))

(setf (gethash "KANDB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDB-kreg.kreg.kreg))

(setf (gethash "KANDD" *x64-instruction-variants-hash-table*) (list
KANDD-kreg.kreg.kreg))

(setf (gethash "KANDD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDD-kreg.kreg.kreg))

(setf (gethash "KANDNB" *x64-instruction-variants-hash-table*) (list
KANDNB-kreg.kreg.kreg))

(setf (gethash "KANDNB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDNB-kreg.kreg.kreg))

(setf (gethash "KANDND" *x64-instruction-variants-hash-table*) (list
KANDND-kreg.kreg.kreg))

(setf (gethash "KANDND-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDND-kreg.kreg.kreg))

(setf (gethash "KANDNQ" *x64-instruction-variants-hash-table*) (list
KANDNQ-kreg.kreg.kreg))

(setf (gethash "KANDNQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDNQ-kreg.kreg.kreg))

(setf (gethash "KANDNW" *x64-instruction-variants-hash-table*) (list
KANDNW-kreg.kreg.kreg))

(setf (gethash "KANDNW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDNW-kreg.kreg.kreg))

(setf (gethash "KANDQ" *x64-instruction-variants-hash-table*) (list
KANDQ-kreg.kreg.kreg))

(setf (gethash "KANDQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDQ-kreg.kreg.kreg))

(setf (gethash "KANDW" *x64-instruction-variants-hash-table*) (list
KANDW-kreg.kreg.kreg))

(setf (gethash "KANDW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KANDW-kreg.kreg.kreg))

(setf (gethash "KMOVB" *x64-instruction-variants-hash-table*) (list
KMOVB-kreg.krm8
KMOVB-mem8.kreg
KMOVB-kreg.reg32
KMOVB-reg32.kreg))

(setf (gethash "KMOVB-kreg.krm8" *x64-instruction-variants-hash-table*) (list
KMOVB-kreg.krm8))

(setf (gethash "KMOVB-kreg.reg32" *x64-instruction-variants-hash-table*) (list
KMOVB-kreg.reg32))

(setf (gethash "KMOVB-mem8.kreg" *x64-instruction-variants-hash-table*) (list
KMOVB-mem8.kreg))

(setf (gethash "KMOVB-reg32.kreg" *x64-instruction-variants-hash-table*) (list
KMOVB-reg32.kreg))

(setf (gethash "KMOVD" *x64-instruction-variants-hash-table*) (list
KMOVD-kreg.krm32
KMOVD-mem32.kreg
KMOVD-kreg.reg32
KMOVD-reg32.kreg))

(setf (gethash "KMOVD-kreg.krm32" *x64-instruction-variants-hash-table*) (list
KMOVD-kreg.krm32))

(setf (gethash "KMOVD-kreg.reg32" *x64-instruction-variants-hash-table*) (list
KMOVD-kreg.reg32))

(setf (gethash "KMOVD-mem32.kreg" *x64-instruction-variants-hash-table*) (list
KMOVD-mem32.kreg))

(setf (gethash "KMOVD-reg32.kreg" *x64-instruction-variants-hash-table*) (list
KMOVD-reg32.kreg))

(setf (gethash "KMOVQ" *x64-instruction-variants-hash-table*) (list
KMOVQ-kreg.krm64
KMOVQ-mem64.kreg
KMOVQ-kreg.reg64
KMOVQ-reg64.kreg))

(setf (gethash "KMOVQ-kreg.krm64" *x64-instruction-variants-hash-table*) (list
KMOVQ-kreg.krm64))

(setf (gethash "KMOVQ-kreg.reg64" *x64-instruction-variants-hash-table*) (list
KMOVQ-kreg.reg64))

(setf (gethash "KMOVQ-mem64.kreg" *x64-instruction-variants-hash-table*) (list
KMOVQ-mem64.kreg))

(setf (gethash "KMOVQ-reg64.kreg" *x64-instruction-variants-hash-table*) (list
KMOVQ-reg64.kreg))

(setf (gethash "KMOVW" *x64-instruction-variants-hash-table*) (list
KMOVW-kreg.krm16
KMOVW-mem16.kreg
KMOVW-kreg.reg32
KMOVW-reg32.kreg))

(setf (gethash "KMOVW-kreg.krm16" *x64-instruction-variants-hash-table*) (list
KMOVW-kreg.krm16))

(setf (gethash "KMOVW-kreg.reg32" *x64-instruction-variants-hash-table*) (list
KMOVW-kreg.reg32))

(setf (gethash "KMOVW-mem16.kreg" *x64-instruction-variants-hash-table*) (list
KMOVW-mem16.kreg))

(setf (gethash "KMOVW-reg32.kreg" *x64-instruction-variants-hash-table*) (list
KMOVW-reg32.kreg))

(setf (gethash "KNOTB" *x64-instruction-variants-hash-table*) (list
KNOTB-kreg.kreg))

(setf (gethash "KNOTB-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KNOTB-kreg.kreg))

(setf (gethash "KNOTD" *x64-instruction-variants-hash-table*) (list
KNOTD-kreg.kreg))

(setf (gethash "KNOTD-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KNOTD-kreg.kreg))

(setf (gethash "KNOTQ" *x64-instruction-variants-hash-table*) (list
KNOTQ-kreg.kreg))

(setf (gethash "KNOTQ-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KNOTQ-kreg.kreg))

(setf (gethash "KNOTW" *x64-instruction-variants-hash-table*) (list
KNOTW-kreg.kreg))

(setf (gethash "KNOTW-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KNOTW-kreg.kreg))

(setf (gethash "KORB" *x64-instruction-variants-hash-table*) (list
KORB-kreg.kreg.kreg))

(setf (gethash "KORB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORB-kreg.kreg.kreg))

(setf (gethash "KORD" *x64-instruction-variants-hash-table*) (list
KORD-kreg.kreg.kreg))

(setf (gethash "KORD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORD-kreg.kreg.kreg))

(setf (gethash "KORQ" *x64-instruction-variants-hash-table*) (list
KORQ-kreg.kreg.kreg))

(setf (gethash "KORQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORQ-kreg.kreg.kreg))

(setf (gethash "KORTESTB" *x64-instruction-variants-hash-table*) (list
KORTESTB-kreg.kreg))

(setf (gethash "KORTESTB-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORTESTB-kreg.kreg))

(setf (gethash "KORTESTD" *x64-instruction-variants-hash-table*) (list
KORTESTD-kreg.kreg))

(setf (gethash "KORTESTD-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORTESTD-kreg.kreg))

(setf (gethash "KORTESTQ" *x64-instruction-variants-hash-table*) (list
KORTESTQ-kreg.kreg))

(setf (gethash "KORTESTQ-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORTESTQ-kreg.kreg))

(setf (gethash "KORTESTW" *x64-instruction-variants-hash-table*) (list
KORTESTW-kreg.kreg))

(setf (gethash "KORTESTW-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORTESTW-kreg.kreg))

(setf (gethash "KORW" *x64-instruction-variants-hash-table*) (list
KORW-kreg.kreg.kreg))

(setf (gethash "KORW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KORW-kreg.kreg.kreg))

(setf (gethash "KSHIFTLB" *x64-instruction-variants-hash-table*) (list
KSHIFTLB-kreg.kreg.imm8))

(setf (gethash "KSHIFTLB-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTLB-kreg.kreg.imm8))

(setf (gethash "KSHIFTLD" *x64-instruction-variants-hash-table*) (list
KSHIFTLD-kreg.kreg.imm8))

(setf (gethash "KSHIFTLD-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTLD-kreg.kreg.imm8))

(setf (gethash "KSHIFTLQ" *x64-instruction-variants-hash-table*) (list
KSHIFTLQ-kreg.kreg.imm8))

(setf (gethash "KSHIFTLQ-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTLQ-kreg.kreg.imm8))

(setf (gethash "KSHIFTLW" *x64-instruction-variants-hash-table*) (list
KSHIFTLW-kreg.kreg.imm8))

(setf (gethash "KSHIFTLW-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTLW-kreg.kreg.imm8))

(setf (gethash "KSHIFTRB" *x64-instruction-variants-hash-table*) (list
KSHIFTRB-kreg.kreg.imm8))

(setf (gethash "KSHIFTRB-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTRB-kreg.kreg.imm8))

(setf (gethash "KSHIFTRD" *x64-instruction-variants-hash-table*) (list
KSHIFTRD-kreg.kreg.imm8))

(setf (gethash "KSHIFTRD-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTRD-kreg.kreg.imm8))

(setf (gethash "KSHIFTRQ" *x64-instruction-variants-hash-table*) (list
KSHIFTRQ-kreg.kreg.imm8))

(setf (gethash "KSHIFTRQ-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTRQ-kreg.kreg.imm8))

(setf (gethash "KSHIFTRW" *x64-instruction-variants-hash-table*) (list
KSHIFTRW-kreg.kreg.imm8))

(setf (gethash "KSHIFTRW-kreg.kreg.imm8" *x64-instruction-variants-hash-table*) (list
KSHIFTRW-kreg.kreg.imm8))

(setf (gethash "KTESTB" *x64-instruction-variants-hash-table*) (list
KTESTB-kreg.kreg))

(setf (gethash "KTESTB-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KTESTB-kreg.kreg))

(setf (gethash "KTESTD" *x64-instruction-variants-hash-table*) (list
KTESTD-kreg.kreg))

(setf (gethash "KTESTD-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KTESTD-kreg.kreg))

(setf (gethash "KTESTQ" *x64-instruction-variants-hash-table*) (list
KTESTQ-kreg.kreg))

(setf (gethash "KTESTQ-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KTESTQ-kreg.kreg))

(setf (gethash "KTESTW" *x64-instruction-variants-hash-table*) (list
KTESTW-kreg.kreg))

(setf (gethash "KTESTW-kreg.kreg" *x64-instruction-variants-hash-table*) (list
KTESTW-kreg.kreg))

(setf (gethash "KUNPCKBW" *x64-instruction-variants-hash-table*) (list
KUNPCKBW-kreg.kreg.kreg))

(setf (gethash "KUNPCKBW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KUNPCKBW-kreg.kreg.kreg))

(setf (gethash "KUNPCKDQ" *x64-instruction-variants-hash-table*) (list
KUNPCKDQ-kreg.kreg.kreg))

(setf (gethash "KUNPCKDQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KUNPCKDQ-kreg.kreg.kreg))

(setf (gethash "KUNPCKWD" *x64-instruction-variants-hash-table*) (list
KUNPCKWD-kreg.kreg.kreg))

(setf (gethash "KUNPCKWD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KUNPCKWD-kreg.kreg.kreg))

(setf (gethash "KXNORB" *x64-instruction-variants-hash-table*) (list
KXNORB-kreg.kreg.kreg))

(setf (gethash "KXNORB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXNORB-kreg.kreg.kreg))

(setf (gethash "KXNORD" *x64-instruction-variants-hash-table*) (list
KXNORD-kreg.kreg.kreg))

(setf (gethash "KXNORD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXNORD-kreg.kreg.kreg))

(setf (gethash "KXNORQ" *x64-instruction-variants-hash-table*) (list
KXNORQ-kreg.kreg.kreg))

(setf (gethash "KXNORQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXNORQ-kreg.kreg.kreg))

(setf (gethash "KXNORW" *x64-instruction-variants-hash-table*) (list
KXNORW-kreg.kreg.kreg))

(setf (gethash "KXNORW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXNORW-kreg.kreg.kreg))

(setf (gethash "KXORB" *x64-instruction-variants-hash-table*) (list
KXORB-kreg.kreg.kreg))

(setf (gethash "KXORB-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXORB-kreg.kreg.kreg))

(setf (gethash "KXORD" *x64-instruction-variants-hash-table*) (list
KXORD-kreg.kreg.kreg))

(setf (gethash "KXORD-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXORD-kreg.kreg.kreg))

(setf (gethash "KXORQ" *x64-instruction-variants-hash-table*) (list
KXORQ-kreg.kreg.kreg))

(setf (gethash "KXORQ-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXORQ-kreg.kreg.kreg))

(setf (gethash "KXORW" *x64-instruction-variants-hash-table*) (list
KXORW-kreg.kreg.kreg))

(setf (gethash "KXORW-kreg.kreg.kreg" *x64-instruction-variants-hash-table*) (list
KXORW-kreg.kreg.kreg))

(setf (gethash "LAHF" *x64-instruction-variants-hash-table*) (list
LAHF-void))

(setf (gethash "LAHF-void" *x64-instruction-variants-hash-table*) (list
LAHF-void))

(setf (gethash "LAR" *x64-instruction-variants-hash-table*) (list
LAR-reg16.mem
LAR-reg16.reg16-rm
LAR-reg16.reg32-rm
LAR-reg16.reg64-rm
LAR-reg32.mem
LAR-reg32.reg16-rm
LAR-reg32.reg32-rm
LAR-reg32.reg64-rm
LAR-reg64.mem
LAR-reg64.reg16-rm
LAR-reg64.reg32-rm
LAR-reg64.reg64-rm))

(setf (gethash "LAR-reg16.mem" *x64-instruction-variants-hash-table*) (list
LAR-reg16.mem))

(setf (gethash "LAR-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg16.reg16-rm))

(setf (gethash "LAR-reg16.reg32-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg16.reg32-rm))

(setf (gethash "LAR-reg16.reg64-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg16.reg64-rm))

(setf (gethash "LAR-reg32.mem" *x64-instruction-variants-hash-table*) (list
LAR-reg32.mem))

(setf (gethash "LAR-reg32.reg16-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg32.reg16-rm))

(setf (gethash "LAR-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg32.reg32-rm))

(setf (gethash "LAR-reg32.reg64-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg32.reg64-rm))

(setf (gethash "LAR-reg64.mem" *x64-instruction-variants-hash-table*) (list
LAR-reg64.mem))

(setf (gethash "LAR-reg64.reg16-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg64.reg16-rm))

(setf (gethash "LAR-reg64.reg32-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg64.reg32-rm))

(setf (gethash "LAR-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
LAR-reg64.reg64-rm))

(setf (gethash "LDDQU" *x64-instruction-variants-hash-table*) (list
LDDQU-xmmreg.mem))

(setf (gethash "LDDQU-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
LDDQU-xmmreg.mem))

(setf (gethash "LDMXCSR" *x64-instruction-variants-hash-table*) (list
LDMXCSR-mem32))

(setf (gethash "LDMXCSR-mem32" *x64-instruction-variants-hash-table*) (list
LDMXCSR-mem32))

(setf (gethash "LEA" *x64-instruction-variants-hash-table*) (list
LEA-reg16.mem
LEA-reg32.mem
LEA-reg64.mem))

(setf (gethash "LEA-reg16.mem" *x64-instruction-variants-hash-table*) (list
LEA-reg16.mem))

(setf (gethash "LEA-reg32.mem" *x64-instruction-variants-hash-table*) (list
LEA-reg32.mem))

(setf (gethash "LEA-reg64.mem" *x64-instruction-variants-hash-table*) (list
LEA-reg64.mem))

(setf (gethash "LEAVE" *x64-instruction-variants-hash-table*) (list
LEAVE-void))

(setf (gethash "LEAVE-void" *x64-instruction-variants-hash-table*) (list
LEAVE-void))

(setf (gethash "LFENCE" *x64-instruction-variants-hash-table*) (list
LFENCE-void
LFENCE-void))

(setf (gethash "LFENCE-void" *x64-instruction-variants-hash-table*) (list
LFENCE-void
LFENCE-void))

(setf (gethash "LFS" *x64-instruction-variants-hash-table*) (list
LFS-reg16.mem
LFS-reg32.mem
LFS-reg64.mem))

(setf (gethash "LFS-reg16.mem" *x64-instruction-variants-hash-table*) (list
LFS-reg16.mem))

(setf (gethash "LFS-reg32.mem" *x64-instruction-variants-hash-table*) (list
LFS-reg32.mem))

(setf (gethash "LFS-reg64.mem" *x64-instruction-variants-hash-table*) (list
LFS-reg64.mem))

(setf (gethash "LGDT" *x64-instruction-variants-hash-table*) (list
LGDT-mem))

(setf (gethash "LGDT-mem" *x64-instruction-variants-hash-table*) (list
LGDT-mem))

(setf (gethash "LGS" *x64-instruction-variants-hash-table*) (list
LGS-reg16.mem
LGS-reg32.mem
LGS-reg64.mem))

(setf (gethash "LGS-reg16.mem" *x64-instruction-variants-hash-table*) (list
LGS-reg16.mem))

(setf (gethash "LGS-reg32.mem" *x64-instruction-variants-hash-table*) (list
LGS-reg32.mem))

(setf (gethash "LGS-reg64.mem" *x64-instruction-variants-hash-table*) (list
LGS-reg64.mem))

(setf (gethash "LIDT" *x64-instruction-variants-hash-table*) (list
LIDT-mem))

(setf (gethash "LIDT-mem" *x64-instruction-variants-hash-table*) (list
LIDT-mem))

(setf (gethash "LLDT" *x64-instruction-variants-hash-table*) (list
LLDT-mem
LLDT-mem16
LLDT-reg16))

(setf (gethash "LLDT-mem" *x64-instruction-variants-hash-table*) (list
LLDT-mem))

(setf (gethash "LLDT-mem16" *x64-instruction-variants-hash-table*) (list
LLDT-mem16))

(setf (gethash "LLDT-reg16" *x64-instruction-variants-hash-table*) (list
LLDT-reg16))

(setf (gethash "LLWPCB" *x64-instruction-variants-hash-table*) (list
LLWPCB-reg32
LLWPCB-reg64))

(setf (gethash "LLWPCB-reg32" *x64-instruction-variants-hash-table*) (list
LLWPCB-reg32))

(setf (gethash "LLWPCB-reg64" *x64-instruction-variants-hash-table*) (list
LLWPCB-reg64))

(setf (gethash "LMSW" *x64-instruction-variants-hash-table*) (list
LMSW-mem
LMSW-mem16
LMSW-reg16))

(setf (gethash "LMSW-mem" *x64-instruction-variants-hash-table*) (list
LMSW-mem))

(setf (gethash "LMSW-mem16" *x64-instruction-variants-hash-table*) (list
LMSW-mem16))

(setf (gethash "LMSW-reg16" *x64-instruction-variants-hash-table*) (list
LMSW-reg16))

(setf (gethash "LOADALL" *x64-instruction-variants-hash-table*) (list
LOADALL-void))

(setf (gethash "LOADALL-void" *x64-instruction-variants-hash-table*) (list
LOADALL-void))

(setf (gethash "LOADALL286" *x64-instruction-variants-hash-table*) (list
LOADALL286-void))

(setf (gethash "LOADALL286-void" *x64-instruction-variants-hash-table*) (list
LOADALL286-void))

(setf (gethash "LODSB" *x64-instruction-variants-hash-table*) (list
LODSB-void))

(setf (gethash "LODSB-void" *x64-instruction-variants-hash-table*) (list
LODSB-void))

(setf (gethash "LODSD" *x64-instruction-variants-hash-table*) (list
LODSD-void))

(setf (gethash "LODSD-void" *x64-instruction-variants-hash-table*) (list
LODSD-void))

(setf (gethash "LODSQ" *x64-instruction-variants-hash-table*) (list
LODSQ-void))

(setf (gethash "LODSQ-void" *x64-instruction-variants-hash-table*) (list
LODSQ-void))

(setf (gethash "LODSW" *x64-instruction-variants-hash-table*) (list
LODSW-void))

(setf (gethash "LODSW-void" *x64-instruction-variants-hash-table*) (list
LODSW-void))

(setf (gethash "LOOP" *x64-instruction-variants-hash-table*) (list
LOOP-imm
LOOP-imm.reg_ecx
LOOP-imm.reg_rcx))

(setf (gethash "LOOP-imm" *x64-instruction-variants-hash-table*) (list
LOOP-imm))

(setf (gethash "LOOP-imm.reg_ecx" *x64-instruction-variants-hash-table*) (list
LOOP-imm.reg_ecx))

(setf (gethash "LOOP-imm.reg_rcx" *x64-instruction-variants-hash-table*) (list
LOOP-imm.reg_rcx))

(setf (gethash "LOOPE" *x64-instruction-variants-hash-table*) (list
LOOPE-imm
LOOPE-imm.reg_ecx
LOOPE-imm.reg_rcx))

(setf (gethash "LOOPE-imm" *x64-instruction-variants-hash-table*) (list
LOOPE-imm))

(setf (gethash "LOOPE-imm.reg_ecx" *x64-instruction-variants-hash-table*) (list
LOOPE-imm.reg_ecx))

(setf (gethash "LOOPE-imm.reg_rcx" *x64-instruction-variants-hash-table*) (list
LOOPE-imm.reg_rcx))

(setf (gethash "LOOPNE" *x64-instruction-variants-hash-table*) (list
LOOPNE-imm
LOOPNE-imm.reg_ecx
LOOPNE-imm.reg_rcx))

(setf (gethash "LOOPNE-imm" *x64-instruction-variants-hash-table*) (list
LOOPNE-imm))

(setf (gethash "LOOPNE-imm.reg_ecx" *x64-instruction-variants-hash-table*) (list
LOOPNE-imm.reg_ecx))

(setf (gethash "LOOPNE-imm.reg_rcx" *x64-instruction-variants-hash-table*) (list
LOOPNE-imm.reg_rcx))

(setf (gethash "LOOPNZ" *x64-instruction-variants-hash-table*) (list
LOOPNZ-imm
LOOPNZ-imm.reg_ecx
LOOPNZ-imm.reg_rcx))

(setf (gethash "LOOPNZ-imm" *x64-instruction-variants-hash-table*) (list
LOOPNZ-imm))

(setf (gethash "LOOPNZ-imm.reg_ecx" *x64-instruction-variants-hash-table*) (list
LOOPNZ-imm.reg_ecx))

(setf (gethash "LOOPNZ-imm.reg_rcx" *x64-instruction-variants-hash-table*) (list
LOOPNZ-imm.reg_rcx))

(setf (gethash "LOOPZ" *x64-instruction-variants-hash-table*) (list
LOOPZ-imm
LOOPZ-imm.reg_ecx
LOOPZ-imm.reg_rcx))

(setf (gethash "LOOPZ-imm" *x64-instruction-variants-hash-table*) (list
LOOPZ-imm))

(setf (gethash "LOOPZ-imm.reg_ecx" *x64-instruction-variants-hash-table*) (list
LOOPZ-imm.reg_ecx))

(setf (gethash "LOOPZ-imm.reg_rcx" *x64-instruction-variants-hash-table*) (list
LOOPZ-imm.reg_rcx))

(setf (gethash "LSL" *x64-instruction-variants-hash-table*) (list
LSL-reg16.mem
LSL-reg16.reg16-rm
LSL-reg16.reg32-rm
LSL-reg16.reg64-rm
LSL-reg32.mem
LSL-reg32.reg16-rm
LSL-reg32.reg32-rm
LSL-reg32.reg64-rm
LSL-reg64.mem
LSL-reg64.reg16-rm
LSL-reg64.reg32-rm
LSL-reg64.reg64-rm))

(setf (gethash "LSL-reg16.mem" *x64-instruction-variants-hash-table*) (list
LSL-reg16.mem))

(setf (gethash "LSL-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg16.reg16-rm))

(setf (gethash "LSL-reg16.reg32-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg16.reg32-rm))

(setf (gethash "LSL-reg16.reg64-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg16.reg64-rm))

(setf (gethash "LSL-reg32.mem" *x64-instruction-variants-hash-table*) (list
LSL-reg32.mem))

(setf (gethash "LSL-reg32.reg16-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg32.reg16-rm))

(setf (gethash "LSL-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg32.reg32-rm))

(setf (gethash "LSL-reg32.reg64-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg32.reg64-rm))

(setf (gethash "LSL-reg64.mem" *x64-instruction-variants-hash-table*) (list
LSL-reg64.mem))

(setf (gethash "LSL-reg64.reg16-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg64.reg16-rm))

(setf (gethash "LSL-reg64.reg32-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg64.reg32-rm))

(setf (gethash "LSL-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
LSL-reg64.reg64-rm))

(setf (gethash "LSS" *x64-instruction-variants-hash-table*) (list
LSS-reg16.mem
LSS-reg32.mem
LSS-reg64.mem))

(setf (gethash "LSS-reg16.mem" *x64-instruction-variants-hash-table*) (list
LSS-reg16.mem))

(setf (gethash "LSS-reg32.mem" *x64-instruction-variants-hash-table*) (list
LSS-reg32.mem))

(setf (gethash "LSS-reg64.mem" *x64-instruction-variants-hash-table*) (list
LSS-reg64.mem))

(setf (gethash "LTR" *x64-instruction-variants-hash-table*) (list
LTR-mem
LTR-mem16
LTR-reg16))

(setf (gethash "LTR-mem" *x64-instruction-variants-hash-table*) (list
LTR-mem))

(setf (gethash "LTR-mem16" *x64-instruction-variants-hash-table*) (list
LTR-mem16))

(setf (gethash "LTR-reg16" *x64-instruction-variants-hash-table*) (list
LTR-reg16))

(setf (gethash "LWPINS" *x64-instruction-variants-hash-table*) (list
LWPINS-reg32.rm32.imm32
LWPINS-reg64.rm32.imm32))

(setf (gethash "LWPINS-reg32.rm32.imm32" *x64-instruction-variants-hash-table*) (list
LWPINS-reg32.rm32.imm32))

(setf (gethash "LWPINS-reg64.rm32.imm32" *x64-instruction-variants-hash-table*) (list
LWPINS-reg64.rm32.imm32))

(setf (gethash "LWPVAL" *x64-instruction-variants-hash-table*) (list
LWPVAL-reg32.rm32.imm32
LWPVAL-reg64.rm32.imm32))

(setf (gethash "LWPVAL-reg32.rm32.imm32" *x64-instruction-variants-hash-table*) (list
LWPVAL-reg32.rm32.imm32))

(setf (gethash "LWPVAL-reg64.rm32.imm32" *x64-instruction-variants-hash-table*) (list
LWPVAL-reg64.rm32.imm32))

(setf (gethash "LZCNT" *x64-instruction-variants-hash-table*) (list
LZCNT-reg16.rm16
LZCNT-reg32.rm32
LZCNT-reg64.rm64))

(setf (gethash "LZCNT-reg16.rm16" *x64-instruction-variants-hash-table*) (list
LZCNT-reg16.rm16))

(setf (gethash "LZCNT-reg32.rm32" *x64-instruction-variants-hash-table*) (list
LZCNT-reg32.rm32))

(setf (gethash "LZCNT-reg64.rm64" *x64-instruction-variants-hash-table*) (list
LZCNT-reg64.rm64))

(setf (gethash "MASKMOVDQU" *x64-instruction-variants-hash-table*) (list
MASKMOVDQU-xmmreg.xmmreg))

(setf (gethash "MASKMOVDQU-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MASKMOVDQU-xmmreg.xmmreg))

(setf (gethash "MASKMOVQ" *x64-instruction-variants-hash-table*) (list
MASKMOVQ-mmxreg.mmxreg))

(setf (gethash "MASKMOVQ-mmxreg.mmxreg" *x64-instruction-variants-hash-table*) (list
MASKMOVQ-mmxreg.mmxreg))

(setf (gethash "MAXPD" *x64-instruction-variants-hash-table*) (list
MAXPD-xmmreg.xmmrm))

(setf (gethash "MAXPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MAXPD-xmmreg.xmmrm))

(setf (gethash "MAXPS" *x64-instruction-variants-hash-table*) (list
MAXPS-xmmreg.xmmrm128))

(setf (gethash "MAXPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
MAXPS-xmmreg.xmmrm128))

(setf (gethash "MAXSD" *x64-instruction-variants-hash-table*) (list
MAXSD-xmmreg.xmmrm))

(setf (gethash "MAXSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MAXSD-xmmreg.xmmrm))

(setf (gethash "MAXSS" *x64-instruction-variants-hash-table*) (list
MAXSS-xmmreg.xmmrm32))

(setf (gethash "MAXSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
MAXSS-xmmreg.xmmrm32))

(setf (gethash "MFENCE" *x64-instruction-variants-hash-table*) (list
MFENCE-void
MFENCE-void))

(setf (gethash "MFENCE-void" *x64-instruction-variants-hash-table*) (list
MFENCE-void
MFENCE-void))

(setf (gethash "MINPD" *x64-instruction-variants-hash-table*) (list
MINPD-xmmreg.xmmrm))

(setf (gethash "MINPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MINPD-xmmreg.xmmrm))

(setf (gethash "MINPS" *x64-instruction-variants-hash-table*) (list
MINPS-xmmreg.xmmrm128))

(setf (gethash "MINPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
MINPS-xmmreg.xmmrm128))

(setf (gethash "MINSD" *x64-instruction-variants-hash-table*) (list
MINSD-xmmreg.xmmrm))

(setf (gethash "MINSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MINSD-xmmreg.xmmrm))

(setf (gethash "MINSS" *x64-instruction-variants-hash-table*) (list
MINSS-xmmreg.xmmrm32))

(setf (gethash "MINSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
MINSS-xmmreg.xmmrm32))

(setf (gethash "MONITOR" *x64-instruction-variants-hash-table*) (list
MONITOR-void
MONITOR-reg_rax.reg_ecx.reg_edx))

(setf (gethash "MONITOR-reg_rax.reg_ecx.reg_edx" *x64-instruction-variants-hash-table*) (list
MONITOR-reg_rax.reg_ecx.reg_edx))

(setf (gethash "MONITOR-void" *x64-instruction-variants-hash-table*) (list
MONITOR-void))

(setf (gethash "MONITORX" *x64-instruction-variants-hash-table*) (list
MONITORX-void
MONITORX-reg_rax.reg_ecx.reg_edx
MONITORX-reg_eax.reg_ecx.reg_edx
MONITORX-reg_ax.reg_ecx.reg_edx))

(setf (gethash "MONITORX-reg_ax.reg_ecx.reg_edx" *x64-instruction-variants-hash-table*) (list
MONITORX-reg_ax.reg_ecx.reg_edx))

(setf (gethash "MONITORX-reg_eax.reg_ecx.reg_edx" *x64-instruction-variants-hash-table*) (list
MONITORX-reg_eax.reg_ecx.reg_edx))

(setf (gethash "MONITORX-reg_rax.reg_ecx.reg_edx" *x64-instruction-variants-hash-table*) (list
MONITORX-reg_rax.reg_ecx.reg_edx))

(setf (gethash "MONITORX-void" *x64-instruction-variants-hash-table*) (list
MONITORX-void))

(setf (gethash "MONTMUL" *x64-instruction-variants-hash-table*) (list
MONTMUL-void))

(setf (gethash "MONTMUL-void" *x64-instruction-variants-hash-table*) (list
MONTMUL-void))

(setf (gethash "MOV" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg_sreg
MOV-reg16.reg_sreg
MOV-reg32.reg_sreg
MOV-reg64.reg_sreg
MOV-rm64.reg_sreg
MOV-reg_sreg.mem
MOV-reg_sreg.reg16
MOV-reg_sreg.reg32
MOV-reg_sreg.reg64
MOV-reg_sreg.reg16
MOV-reg_sreg.reg32
MOV-reg_sreg.rm64
MOV-reg_al.mem_offs
MOV-reg_ax.mem_offs
MOV-reg_eax.mem_offs
MOV-reg_rax.mem_offs
MOV-mem_offs.reg_al
MOV-mem_offs.reg_ax
MOV-mem_offs.reg_eax
MOV-mem_offs.reg_rax
MOV-reg64.reg_creg
MOV-reg_creg.reg64
MOV-reg64.reg_dreg
MOV-reg_dreg.reg64
MOV-mem.reg8
MOV-reg8.reg8-mr
MOV-mem.reg16
MOV-reg16.reg16-mr
MOV-mem.reg32
MOV-reg32.reg32-mr
MOV-mem.reg64
MOV-reg64.reg64-mr
MOV-reg8.mem
MOV-reg8.reg8-rm
MOV-reg16.mem
MOV-reg16.reg16-rm
MOV-reg32.mem
MOV-reg32.reg32-rm
MOV-reg64.mem
MOV-reg64.reg64-rm
MOV-reg8.imm
MOV-reg16.imm
MOV-reg32.imm
MOV-reg64.udword
MOV-reg64.sdword
MOV-reg64.imm
MOV-rm8.imm
MOV-rm16.imm
MOV-rm32.imm
MOV-rm64.imm
MOV-rm64.imm32
MOV-mem.imm8
MOV-mem.imm16
MOV-mem.imm32))

(setf (gethash "MOV-mem.imm16" *x64-instruction-variants-hash-table*) (list
MOV-mem.imm16))

(setf (gethash "MOV-mem.imm32" *x64-instruction-variants-hash-table*) (list
MOV-mem.imm32))

(setf (gethash "MOV-mem.imm8" *x64-instruction-variants-hash-table*) (list
MOV-mem.imm8))

(setf (gethash "MOV-mem.reg16" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg16))

(setf (gethash "MOV-mem.reg32" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg32))

(setf (gethash "MOV-mem.reg64" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg64))

(setf (gethash "MOV-mem.reg8" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg8))

(setf (gethash "MOV-mem.reg_sreg" *x64-instruction-variants-hash-table*) (list
MOV-mem.reg_sreg))

(setf (gethash "MOV-mem_offs.reg_al" *x64-instruction-variants-hash-table*) (list
MOV-mem_offs.reg_al))

(setf (gethash "MOV-mem_offs.reg_ax" *x64-instruction-variants-hash-table*) (list
MOV-mem_offs.reg_ax))

(setf (gethash "MOV-mem_offs.reg_eax" *x64-instruction-variants-hash-table*) (list
MOV-mem_offs.reg_eax))

(setf (gethash "MOV-mem_offs.reg_rax" *x64-instruction-variants-hash-table*) (list
MOV-mem_offs.reg_rax))

(setf (gethash "MOV-reg16.imm" *x64-instruction-variants-hash-table*) (list
MOV-reg16.imm))

(setf (gethash "MOV-reg16.mem" *x64-instruction-variants-hash-table*) (list
MOV-reg16.mem))

(setf (gethash "MOV-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
MOV-reg16.reg16-mr))

(setf (gethash "MOV-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
MOV-reg16.reg16-rm))

(setf (gethash "MOV-reg16.reg_sreg" *x64-instruction-variants-hash-table*) (list
MOV-reg16.reg_sreg))

(setf (gethash "MOV-reg32.imm" *x64-instruction-variants-hash-table*) (list
MOV-reg32.imm))

(setf (gethash "MOV-reg32.mem" *x64-instruction-variants-hash-table*) (list
MOV-reg32.mem))

(setf (gethash "MOV-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
MOV-reg32.reg32-mr))

(setf (gethash "MOV-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
MOV-reg32.reg32-rm))

(setf (gethash "MOV-reg32.reg_sreg" *x64-instruction-variants-hash-table*) (list
MOV-reg32.reg_sreg))

(setf (gethash "MOV-reg64.imm" *x64-instruction-variants-hash-table*) (list
MOV-reg64.imm))

(setf (gethash "MOV-reg64.mem" *x64-instruction-variants-hash-table*) (list
MOV-reg64.mem))

(setf (gethash "MOV-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
MOV-reg64.reg64-mr))

(setf (gethash "MOV-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
MOV-reg64.reg64-rm))

(setf (gethash "MOV-reg64.reg_creg" *x64-instruction-variants-hash-table*) (list
MOV-reg64.reg_creg))

(setf (gethash "MOV-reg64.reg_dreg" *x64-instruction-variants-hash-table*) (list
MOV-reg64.reg_dreg))

(setf (gethash "MOV-reg64.reg_sreg" *x64-instruction-variants-hash-table*) (list
MOV-reg64.reg_sreg))

(setf (gethash "MOV-reg64.sdword" *x64-instruction-variants-hash-table*) (list
MOV-reg64.sdword))

(setf (gethash "MOV-reg64.udword" *x64-instruction-variants-hash-table*) (list
MOV-reg64.udword))

(setf (gethash "MOV-reg8.imm" *x64-instruction-variants-hash-table*) (list
MOV-reg8.imm))

(setf (gethash "MOV-reg8.mem" *x64-instruction-variants-hash-table*) (list
MOV-reg8.mem))

(setf (gethash "MOV-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
MOV-reg8.reg8-mr))

(setf (gethash "MOV-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
MOV-reg8.reg8-rm))

(setf (gethash "MOV-reg_al.mem_offs" *x64-instruction-variants-hash-table*) (list
MOV-reg_al.mem_offs))

(setf (gethash "MOV-reg_ax.mem_offs" *x64-instruction-variants-hash-table*) (list
MOV-reg_ax.mem_offs))

(setf (gethash "MOV-reg_creg.reg64" *x64-instruction-variants-hash-table*) (list
MOV-reg_creg.reg64))

(setf (gethash "MOV-reg_dreg.reg64" *x64-instruction-variants-hash-table*) (list
MOV-reg_dreg.reg64))

(setf (gethash "MOV-reg_eax.mem_offs" *x64-instruction-variants-hash-table*) (list
MOV-reg_eax.mem_offs))

(setf (gethash "MOV-reg_rax.mem_offs" *x64-instruction-variants-hash-table*) (list
MOV-reg_rax.mem_offs))

(setf (gethash "MOV-reg_sreg.mem" *x64-instruction-variants-hash-table*) (list
MOV-reg_sreg.mem))

(setf (gethash "MOV-reg_sreg.reg16" *x64-instruction-variants-hash-table*) (list
MOV-reg_sreg.reg16
MOV-reg_sreg.reg16))

(setf (gethash "MOV-reg_sreg.reg32" *x64-instruction-variants-hash-table*) (list
MOV-reg_sreg.reg32
MOV-reg_sreg.reg32))

(setf (gethash "MOV-reg_sreg.reg64" *x64-instruction-variants-hash-table*) (list
MOV-reg_sreg.reg64))

(setf (gethash "MOV-reg_sreg.rm64" *x64-instruction-variants-hash-table*) (list
MOV-reg_sreg.rm64))

(setf (gethash "MOV-rm16.imm" *x64-instruction-variants-hash-table*) (list
MOV-rm16.imm))

(setf (gethash "MOV-rm32.imm" *x64-instruction-variants-hash-table*) (list
MOV-rm32.imm))

(setf (gethash "MOV-rm64.imm" *x64-instruction-variants-hash-table*) (list
MOV-rm64.imm))

(setf (gethash "MOV-rm64.imm32" *x64-instruction-variants-hash-table*) (list
MOV-rm64.imm32))

(setf (gethash "MOV-rm64.reg_sreg" *x64-instruction-variants-hash-table*) (list
MOV-rm64.reg_sreg))

(setf (gethash "MOV-rm8.imm" *x64-instruction-variants-hash-table*) (list
MOV-rm8.imm))

(setf (gethash "MOVAPD" *x64-instruction-variants-hash-table*) (list
MOVAPD-xmmreg.xmmreg
MOVAPD-xmmreg.xmmreg
MOVAPD-mem.xmmreg
MOVAPD-xmmreg.mem))

(setf (gethash "MOVAPD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVAPD-mem.xmmreg))

(setf (gethash "MOVAPD-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVAPD-xmmreg.mem))

(setf (gethash "MOVAPD-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVAPD-xmmreg.xmmreg
MOVAPD-xmmreg.xmmreg))

(setf (gethash "MOVAPS" *x64-instruction-variants-hash-table*) (list
MOVAPS-xmmreg.xmmrm128
MOVAPS-xmmrm128.xmmreg))

(setf (gethash "MOVAPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
MOVAPS-xmmreg.xmmrm128))

(setf (gethash "MOVAPS-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVAPS-xmmrm128.xmmreg))

(setf (gethash "MOVBE" *x64-instruction-variants-hash-table*) (list
MOVBE-reg16.mem16
MOVBE-reg32.mem32
MOVBE-reg64.mem64
MOVBE-mem16.reg16
MOVBE-mem32.reg32
MOVBE-mem64.reg64))

(setf (gethash "MOVBE-mem16.reg16" *x64-instruction-variants-hash-table*) (list
MOVBE-mem16.reg16))

(setf (gethash "MOVBE-mem32.reg32" *x64-instruction-variants-hash-table*) (list
MOVBE-mem32.reg32))

(setf (gethash "MOVBE-mem64.reg64" *x64-instruction-variants-hash-table*) (list
MOVBE-mem64.reg64))

(setf (gethash "MOVBE-reg16.mem16" *x64-instruction-variants-hash-table*) (list
MOVBE-reg16.mem16))

(setf (gethash "MOVBE-reg32.mem32" *x64-instruction-variants-hash-table*) (list
MOVBE-reg32.mem32))

(setf (gethash "MOVBE-reg64.mem64" *x64-instruction-variants-hash-table*) (list
MOVBE-reg64.mem64))

(setf (gethash "MOVD" *x64-instruction-variants-hash-table*) (list
MOVD-mmxreg.rm32
MOVD-rm32.mmxreg
MOVD-mmxreg.rm64
MOVD-rm64.mmxreg
MOVD-mem.xmmreg
MOVD-xmmreg.mem
MOVD-xmmreg.rm32
MOVD-rm32.xmmreg))

(setf (gethash "MOVD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVD-mem.xmmreg))

(setf (gethash "MOVD-mmxreg.rm32" *x64-instruction-variants-hash-table*) (list
MOVD-mmxreg.rm32))

(setf (gethash "MOVD-mmxreg.rm64" *x64-instruction-variants-hash-table*) (list
MOVD-mmxreg.rm64))

(setf (gethash "MOVD-rm32.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVD-rm32.mmxreg))

(setf (gethash "MOVD-rm32.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVD-rm32.xmmreg))

(setf (gethash "MOVD-rm64.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVD-rm64.mmxreg))

(setf (gethash "MOVD-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVD-xmmreg.mem))

(setf (gethash "MOVD-xmmreg.rm32" *x64-instruction-variants-hash-table*) (list
MOVD-xmmreg.rm32))

(setf (gethash "MOVDDUP" *x64-instruction-variants-hash-table*) (list
MOVDDUP-xmmreg.xmmrm))

(setf (gethash "MOVDDUP-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MOVDDUP-xmmreg.xmmrm))

(setf (gethash "MOVDQ2Q" *x64-instruction-variants-hash-table*) (list
MOVDQ2Q-mmxreg.xmmreg))

(setf (gethash "MOVDQ2Q-mmxreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVDQ2Q-mmxreg.xmmreg))

(setf (gethash "MOVDQA" *x64-instruction-variants-hash-table*) (list
MOVDQA-xmmreg.xmmreg
MOVDQA-mem.xmmreg
MOVDQA-xmmreg.mem
MOVDQA-xmmreg.xmmreg))

(setf (gethash "MOVDQA-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVDQA-mem.xmmreg))

(setf (gethash "MOVDQA-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVDQA-xmmreg.mem))

(setf (gethash "MOVDQA-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVDQA-xmmreg.xmmreg
MOVDQA-xmmreg.xmmreg))

(setf (gethash "MOVDQU" *x64-instruction-variants-hash-table*) (list
MOVDQU-xmmreg.xmmreg
MOVDQU-mem.xmmreg
MOVDQU-xmmreg.mem
MOVDQU-xmmreg.xmmreg))

(setf (gethash "MOVDQU-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVDQU-mem.xmmreg))

(setf (gethash "MOVDQU-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVDQU-xmmreg.mem))

(setf (gethash "MOVDQU-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVDQU-xmmreg.xmmreg
MOVDQU-xmmreg.xmmreg))

(setf (gethash "MOVHLPS" *x64-instruction-variants-hash-table*) (list
MOVHLPS-xmmreg.xmmreg))

(setf (gethash "MOVHLPS-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVHLPS-xmmreg.xmmreg))

(setf (gethash "MOVHPD" *x64-instruction-variants-hash-table*) (list
MOVHPD-mem.xmmreg
MOVHPD-xmmreg.mem))

(setf (gethash "MOVHPD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVHPD-mem.xmmreg))

(setf (gethash "MOVHPD-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVHPD-xmmreg.mem))

(setf (gethash "MOVHPS" *x64-instruction-variants-hash-table*) (list
MOVHPS-xmmreg.mem64
MOVHPS-mem64.xmmreg))

(setf (gethash "MOVHPS-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVHPS-mem64.xmmreg))

(setf (gethash "MOVHPS-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
MOVHPS-xmmreg.mem64))

(setf (gethash "MOVLHPS" *x64-instruction-variants-hash-table*) (list
MOVLHPS-xmmreg.xmmreg))

(setf (gethash "MOVLHPS-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVLHPS-xmmreg.xmmreg))

(setf (gethash "MOVLPD" *x64-instruction-variants-hash-table*) (list
MOVLPD-mem64.xmmreg
MOVLPD-xmmreg.mem64))

(setf (gethash "MOVLPD-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVLPD-mem64.xmmreg))

(setf (gethash "MOVLPD-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
MOVLPD-xmmreg.mem64))

(setf (gethash "MOVLPS" *x64-instruction-variants-hash-table*) (list
MOVLPS-xmmreg.mem64
MOVLPS-mem64.xmmreg))

(setf (gethash "MOVLPS-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVLPS-mem64.xmmreg))

(setf (gethash "MOVLPS-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
MOVLPS-xmmreg.mem64))

(setf (gethash "MOVMSKPD" *x64-instruction-variants-hash-table*) (list
MOVMSKPD-reg32.xmmreg
MOVMSKPD-reg64.xmmreg))

(setf (gethash "MOVMSKPD-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVMSKPD-reg32.xmmreg))

(setf (gethash "MOVMSKPD-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVMSKPD-reg64.xmmreg))

(setf (gethash "MOVMSKPS" *x64-instruction-variants-hash-table*) (list
MOVMSKPS-reg32.xmmreg
MOVMSKPS-reg64.xmmreg))

(setf (gethash "MOVMSKPS-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVMSKPS-reg32.xmmreg))

(setf (gethash "MOVMSKPS-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVMSKPS-reg64.xmmreg))

(setf (gethash "MOVNTDQ" *x64-instruction-variants-hash-table*) (list
MOVNTDQ-mem.xmmreg))

(setf (gethash "MOVNTDQ-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVNTDQ-mem.xmmreg))

(setf (gethash "MOVNTDQA" *x64-instruction-variants-hash-table*) (list
MOVNTDQA-xmmreg.mem128))

(setf (gethash "MOVNTDQA-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
MOVNTDQA-xmmreg.mem128))

(setf (gethash "MOVNTI" *x64-instruction-variants-hash-table*) (list
MOVNTI-mem.reg32
MOVNTI-mem.reg64))

(setf (gethash "MOVNTI-mem.reg32" *x64-instruction-variants-hash-table*) (list
MOVNTI-mem.reg32))

(setf (gethash "MOVNTI-mem.reg64" *x64-instruction-variants-hash-table*) (list
MOVNTI-mem.reg64))

(setf (gethash "MOVNTPD" *x64-instruction-variants-hash-table*) (list
MOVNTPD-mem.xmmreg))

(setf (gethash "MOVNTPD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVNTPD-mem.xmmreg))

(setf (gethash "MOVNTPS" *x64-instruction-variants-hash-table*) (list
MOVNTPS-mem128.xmmreg))

(setf (gethash "MOVNTPS-mem128.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVNTPS-mem128.xmmreg))

(setf (gethash "MOVNTQ" *x64-instruction-variants-hash-table*) (list
MOVNTQ-mem.mmxreg))

(setf (gethash "MOVNTQ-mem.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVNTQ-mem.mmxreg))

(setf (gethash "MOVNTSD" *x64-instruction-variants-hash-table*) (list
MOVNTSD-mem.xmmreg))

(setf (gethash "MOVNTSD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVNTSD-mem.xmmreg))

(setf (gethash "MOVNTSS" *x64-instruction-variants-hash-table*) (list
MOVNTSS-mem.xmmreg))

(setf (gethash "MOVNTSS-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVNTSS-mem.xmmreg))

(setf (gethash "MOVQ" *x64-instruction-variants-hash-table*) (list
MOVQ-mmxreg.mmxrm
MOVQ-mmxrm.mmxreg
MOVQ-mmxreg.rm64
MOVQ-rm64.mmxreg
MOVQ-xmmreg.xmmreg
MOVQ-xmmreg.xmmreg
MOVQ-mem.xmmreg
MOVQ-xmmreg.mem
MOVQ-xmmreg.rm64
MOVQ-rm64.xmmreg))

(setf (gethash "MOVQ-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVQ-mem.xmmreg))

(setf (gethash "MOVQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
MOVQ-mmxreg.mmxrm))

(setf (gethash "MOVQ-mmxreg.rm64" *x64-instruction-variants-hash-table*) (list
MOVQ-mmxreg.rm64))

(setf (gethash "MOVQ-mmxrm.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVQ-mmxrm.mmxreg))

(setf (gethash "MOVQ-rm64.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVQ-rm64.mmxreg))

(setf (gethash "MOVQ-rm64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVQ-rm64.xmmreg))

(setf (gethash "MOVQ-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVQ-xmmreg.mem))

(setf (gethash "MOVQ-xmmreg.rm64" *x64-instruction-variants-hash-table*) (list
MOVQ-xmmreg.rm64))

(setf (gethash "MOVQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVQ-xmmreg.xmmreg
MOVQ-xmmreg.xmmreg))

(setf (gethash "MOVQ2DQ" *x64-instruction-variants-hash-table*) (list
MOVQ2DQ-xmmreg.mmxreg))

(setf (gethash "MOVQ2DQ-xmmreg.mmxreg" *x64-instruction-variants-hash-table*) (list
MOVQ2DQ-xmmreg.mmxreg))

(setf (gethash "MOVSB" *x64-instruction-variants-hash-table*) (list
MOVSB-void))

(setf (gethash "MOVSB-void" *x64-instruction-variants-hash-table*) (list
MOVSB-void))

(setf (gethash "MOVSD" *x64-instruction-variants-hash-table*) (list
MOVSD-void
MOVSD-xmmreg.xmmreg
MOVSD-xmmreg.xmmreg
MOVSD-mem64.xmmreg
MOVSD-xmmreg.mem64))

(setf (gethash "MOVSD-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVSD-mem64.xmmreg))

(setf (gethash "MOVSD-void" *x64-instruction-variants-hash-table*) (list
MOVSD-void))

(setf (gethash "MOVSD-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
MOVSD-xmmreg.mem64))

(setf (gethash "MOVSD-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVSD-xmmreg.xmmreg
MOVSD-xmmreg.xmmreg))

(setf (gethash "MOVSHDUP" *x64-instruction-variants-hash-table*) (list
MOVSHDUP-xmmreg.xmmrm))

(setf (gethash "MOVSHDUP-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MOVSHDUP-xmmreg.xmmrm))

(setf (gethash "MOVSLDUP" *x64-instruction-variants-hash-table*) (list
MOVSLDUP-xmmreg.xmmrm))

(setf (gethash "MOVSLDUP-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MOVSLDUP-xmmreg.xmmrm))

(setf (gethash "MOVSQ" *x64-instruction-variants-hash-table*) (list
MOVSQ-void))

(setf (gethash "MOVSQ-void" *x64-instruction-variants-hash-table*) (list
MOVSQ-void))

(setf (gethash "MOVSS" *x64-instruction-variants-hash-table*) (list
MOVSS-xmmreg.xmmrm32
MOVSS-mem32.xmmreg
MOVSS-xmmreg.xmmreg))

(setf (gethash "MOVSS-mem32.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVSS-mem32.xmmreg))

(setf (gethash "MOVSS-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVSS-xmmreg.xmmreg))

(setf (gethash "MOVSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
MOVSS-xmmreg.xmmrm32))

(setf (gethash "MOVSW" *x64-instruction-variants-hash-table*) (list
MOVSW-void))

(setf (gethash "MOVSW-void" *x64-instruction-variants-hash-table*) (list
MOVSW-void))

(setf (gethash "MOVSX" *x64-instruction-variants-hash-table*) (list
MOVSX-reg16.mem
MOVSX-reg16.reg8-rm
MOVSX-reg32.rm8
MOVSX-reg32.rm16
MOVSX-reg64.rm8
MOVSX-reg64.rm16
MOVSX-reg64.rm32))

(setf (gethash "MOVSX-reg16.mem" *x64-instruction-variants-hash-table*) (list
MOVSX-reg16.mem))

(setf (gethash "MOVSX-reg16.reg8-rm" *x64-instruction-variants-hash-table*) (list
MOVSX-reg16.reg8-rm))

(setf (gethash "MOVSX-reg32.rm16" *x64-instruction-variants-hash-table*) (list
MOVSX-reg32.rm16))

(setf (gethash "MOVSX-reg32.rm8" *x64-instruction-variants-hash-table*) (list
MOVSX-reg32.rm8))

(setf (gethash "MOVSX-reg64.rm16" *x64-instruction-variants-hash-table*) (list
MOVSX-reg64.rm16))

(setf (gethash "MOVSX-reg64.rm32" *x64-instruction-variants-hash-table*) (list
MOVSX-reg64.rm32))

(setf (gethash "MOVSX-reg64.rm8" *x64-instruction-variants-hash-table*) (list
MOVSX-reg64.rm8))

(setf (gethash "MOVSXD" *x64-instruction-variants-hash-table*) (list
MOVSXD-reg64.rm32))

(setf (gethash "MOVSXD-reg64.rm32" *x64-instruction-variants-hash-table*) (list
MOVSXD-reg64.rm32))

(setf (gethash "MOVUPD" *x64-instruction-variants-hash-table*) (list
MOVUPD-xmmreg.xmmreg
MOVUPD-xmmreg.xmmreg
MOVUPD-mem.xmmreg
MOVUPD-xmmreg.mem))

(setf (gethash "MOVUPD-mem.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVUPD-mem.xmmreg))

(setf (gethash "MOVUPD-xmmreg.mem" *x64-instruction-variants-hash-table*) (list
MOVUPD-xmmreg.mem))

(setf (gethash "MOVUPD-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVUPD-xmmreg.xmmreg
MOVUPD-xmmreg.xmmreg))

(setf (gethash "MOVUPS" *x64-instruction-variants-hash-table*) (list
MOVUPS-xmmreg.xmmrm128
MOVUPS-xmmrm128.xmmreg))

(setf (gethash "MOVUPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
MOVUPS-xmmreg.xmmrm128))

(setf (gethash "MOVUPS-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
MOVUPS-xmmrm128.xmmreg))

(setf (gethash "MOVZX" *x64-instruction-variants-hash-table*) (list
MOVZX-reg16.mem
MOVZX-reg16.reg8-rm
MOVZX-reg32.rm8
MOVZX-reg32.rm16
MOVZX-reg64.rm8
MOVZX-reg64.rm16))

(setf (gethash "MOVZX-reg16.mem" *x64-instruction-variants-hash-table*) (list
MOVZX-reg16.mem))

(setf (gethash "MOVZX-reg16.reg8-rm" *x64-instruction-variants-hash-table*) (list
MOVZX-reg16.reg8-rm))

(setf (gethash "MOVZX-reg32.rm16" *x64-instruction-variants-hash-table*) (list
MOVZX-reg32.rm16))

(setf (gethash "MOVZX-reg32.rm8" *x64-instruction-variants-hash-table*) (list
MOVZX-reg32.rm8))

(setf (gethash "MOVZX-reg64.rm16" *x64-instruction-variants-hash-table*) (list
MOVZX-reg64.rm16))

(setf (gethash "MOVZX-reg64.rm8" *x64-instruction-variants-hash-table*) (list
MOVZX-reg64.rm8))

(setf (gethash "MPSADBW" *x64-instruction-variants-hash-table*) (list
MPSADBW-xmmreg.xmmrm.imm))

(setf (gethash "MPSADBW-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
MPSADBW-xmmreg.xmmrm.imm))

(setf (gethash "MUL" *x64-instruction-variants-hash-table*) (list
MUL-rm8
MUL-rm16
MUL-rm32
MUL-rm64))

(setf (gethash "MUL-rm16" *x64-instruction-variants-hash-table*) (list
MUL-rm16))

(setf (gethash "MUL-rm32" *x64-instruction-variants-hash-table*) (list
MUL-rm32))

(setf (gethash "MUL-rm64" *x64-instruction-variants-hash-table*) (list
MUL-rm64))

(setf (gethash "MUL-rm8" *x64-instruction-variants-hash-table*) (list
MUL-rm8))

(setf (gethash "MULPD" *x64-instruction-variants-hash-table*) (list
MULPD-xmmreg.xmmrm))

(setf (gethash "MULPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MULPD-xmmreg.xmmrm))

(setf (gethash "MULPS" *x64-instruction-variants-hash-table*) (list
MULPS-xmmreg.xmmrm128))

(setf (gethash "MULPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
MULPS-xmmreg.xmmrm128))

(setf (gethash "MULSD" *x64-instruction-variants-hash-table*) (list
MULSD-xmmreg.xmmrm))

(setf (gethash "MULSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
MULSD-xmmreg.xmmrm))

(setf (gethash "MULSS" *x64-instruction-variants-hash-table*) (list
MULSS-xmmreg.xmmrm32))

(setf (gethash "MULSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
MULSS-xmmreg.xmmrm32))

(setf (gethash "MULX" *x64-instruction-variants-hash-table*) (list
MULX-reg32.reg32.rm32-rv
MULX-reg64.reg64.rm64-rv))

(setf (gethash "MULX-reg32.reg32.rm32-rv" *x64-instruction-variants-hash-table*) (list
MULX-reg32.reg32.rm32-rv))

(setf (gethash "MULX-reg64.reg64.rm64-rv" *x64-instruction-variants-hash-table*) (list
MULX-reg64.reg64.rm64-rv))

(setf (gethash "MWAIT" *x64-instruction-variants-hash-table*) (list
MWAIT-void
MWAIT-reg_eax.reg_ecx))

(setf (gethash "MWAIT-reg_eax.reg_ecx" *x64-instruction-variants-hash-table*) (list
MWAIT-reg_eax.reg_ecx))

(setf (gethash "MWAIT-void" *x64-instruction-variants-hash-table*) (list
MWAIT-void))

(setf (gethash "MWAITX" *x64-instruction-variants-hash-table*) (list
MWAITX-void
MWAITX-reg_eax.reg_ecx))

(setf (gethash "MWAITX-reg_eax.reg_ecx" *x64-instruction-variants-hash-table*) (list
MWAITX-reg_eax.reg_ecx))

(setf (gethash "MWAITX-void" *x64-instruction-variants-hash-table*) (list
MWAITX-void))

(setf (gethash "NEG" *x64-instruction-variants-hash-table*) (list
NEG-rm8
NEG-rm16
NEG-rm32
NEG-rm64))

(setf (gethash "NEG-rm16" *x64-instruction-variants-hash-table*) (list
NEG-rm16))

(setf (gethash "NEG-rm32" *x64-instruction-variants-hash-table*) (list
NEG-rm32))

(setf (gethash "NEG-rm64" *x64-instruction-variants-hash-table*) (list
NEG-rm64))

(setf (gethash "NEG-rm8" *x64-instruction-variants-hash-table*) (list
NEG-rm8))

(setf (gethash "NOP" *x64-instruction-variants-hash-table*) (list
NOP-void
NOP-rm16
NOP-rm32
NOP-rm64))

(setf (gethash "NOP-rm16" *x64-instruction-variants-hash-table*) (list
NOP-rm16))

(setf (gethash "NOP-rm32" *x64-instruction-variants-hash-table*) (list
NOP-rm32))

(setf (gethash "NOP-rm64" *x64-instruction-variants-hash-table*) (list
NOP-rm64))

(setf (gethash "NOP-void" *x64-instruction-variants-hash-table*) (list
NOP-void))

(setf (gethash "NOT" *x64-instruction-variants-hash-table*) (list
NOT-rm8
NOT-rm16
NOT-rm32
NOT-rm64))

(setf (gethash "NOT-rm16" *x64-instruction-variants-hash-table*) (list
NOT-rm16))

(setf (gethash "NOT-rm32" *x64-instruction-variants-hash-table*) (list
NOT-rm32))

(setf (gethash "NOT-rm64" *x64-instruction-variants-hash-table*) (list
NOT-rm64))

(setf (gethash "NOT-rm8" *x64-instruction-variants-hash-table*) (list
NOT-rm8))

(setf (gethash "OR" *x64-instruction-variants-hash-table*) (list
OR-mem.reg8
OR-reg8.reg8-mr
OR-mem.reg16
OR-reg16.reg16-mr
OR-mem.reg32
OR-reg32.reg32-mr
OR-mem.reg64
OR-reg64.reg64-mr
OR-reg8.mem
OR-reg8.reg8-rm
OR-reg16.mem
OR-reg16.reg16-rm
OR-reg32.mem
OR-reg32.reg32-rm
OR-reg64.mem
OR-reg64.reg64-rm
OR-rm16.imm8
OR-rm32.imm8
OR-rm64.imm8
OR-reg_al.imm
OR-reg_ax.sbyteword
OR-reg_ax.imm
OR-reg_eax.sbytedword
OR-reg_eax.imm
OR-reg_rax.sbytedword
OR-reg_rax.imm
OR-rm8.imm
OR-rm16.sbyteword
OR-rm16.imm
OR-rm32.sbytedword
OR-rm32.imm
OR-rm64.sbytedword
OR-rm64.imm
OR-mem.imm8
OR-mem.sbyteword16
OR-mem.imm16
OR-mem.sbytedword32
OR-mem.imm32))

(setf (gethash "OR-mem.imm16" *x64-instruction-variants-hash-table*) (list
OR-mem.imm16))

(setf (gethash "OR-mem.imm32" *x64-instruction-variants-hash-table*) (list
OR-mem.imm32))

(setf (gethash "OR-mem.imm8" *x64-instruction-variants-hash-table*) (list
OR-mem.imm8))

(setf (gethash "OR-mem.reg16" *x64-instruction-variants-hash-table*) (list
OR-mem.reg16))

(setf (gethash "OR-mem.reg32" *x64-instruction-variants-hash-table*) (list
OR-mem.reg32))

(setf (gethash "OR-mem.reg64" *x64-instruction-variants-hash-table*) (list
OR-mem.reg64))

(setf (gethash "OR-mem.reg8" *x64-instruction-variants-hash-table*) (list
OR-mem.reg8))

(setf (gethash "OR-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
OR-mem.sbytedword32))

(setf (gethash "OR-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
OR-mem.sbyteword16))

(setf (gethash "OR-reg16.mem" *x64-instruction-variants-hash-table*) (list
OR-reg16.mem))

(setf (gethash "OR-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
OR-reg16.reg16-mr))

(setf (gethash "OR-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
OR-reg16.reg16-rm))

(setf (gethash "OR-reg32.mem" *x64-instruction-variants-hash-table*) (list
OR-reg32.mem))

(setf (gethash "OR-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
OR-reg32.reg32-mr))

(setf (gethash "OR-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
OR-reg32.reg32-rm))

(setf (gethash "OR-reg64.mem" *x64-instruction-variants-hash-table*) (list
OR-reg64.mem))

(setf (gethash "OR-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
OR-reg64.reg64-mr))

(setf (gethash "OR-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
OR-reg64.reg64-rm))

(setf (gethash "OR-reg8.mem" *x64-instruction-variants-hash-table*) (list
OR-reg8.mem))

(setf (gethash "OR-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
OR-reg8.reg8-mr))

(setf (gethash "OR-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
OR-reg8.reg8-rm))

(setf (gethash "OR-reg_al.imm" *x64-instruction-variants-hash-table*) (list
OR-reg_al.imm))

(setf (gethash "OR-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
OR-reg_ax.imm))

(setf (gethash "OR-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
OR-reg_ax.sbyteword))

(setf (gethash "OR-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
OR-reg_eax.imm))

(setf (gethash "OR-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
OR-reg_eax.sbytedword))

(setf (gethash "OR-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
OR-reg_rax.imm))

(setf (gethash "OR-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
OR-reg_rax.sbytedword))

(setf (gethash "OR-rm16.imm" *x64-instruction-variants-hash-table*) (list
OR-rm16.imm))

(setf (gethash "OR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
OR-rm16.imm8))

(setf (gethash "OR-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
OR-rm16.sbyteword))

(setf (gethash "OR-rm32.imm" *x64-instruction-variants-hash-table*) (list
OR-rm32.imm))

(setf (gethash "OR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
OR-rm32.imm8))

(setf (gethash "OR-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
OR-rm32.sbytedword))

(setf (gethash "OR-rm64.imm" *x64-instruction-variants-hash-table*) (list
OR-rm64.imm))

(setf (gethash "OR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
OR-rm64.imm8))

(setf (gethash "OR-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
OR-rm64.sbytedword))

(setf (gethash "OR-rm8.imm" *x64-instruction-variants-hash-table*) (list
OR-rm8.imm))

(setf (gethash "ORPD" *x64-instruction-variants-hash-table*) (list
ORPD-xmmreg.xmmrm))

(setf (gethash "ORPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
ORPD-xmmreg.xmmrm))

(setf (gethash "ORPS" *x64-instruction-variants-hash-table*) (list
ORPS-xmmreg.xmmrm128))

(setf (gethash "ORPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
ORPS-xmmreg.xmmrm128))

(setf (gethash "OUT" *x64-instruction-variants-hash-table*) (list
OUT-imm.reg_al
OUT-imm.reg_ax
OUT-imm.reg_eax
OUT-reg_dx.reg_al
OUT-reg_dx.reg_ax
OUT-reg_dx.reg_eax))

(setf (gethash "OUT-imm.reg_al" *x64-instruction-variants-hash-table*) (list
OUT-imm.reg_al))

(setf (gethash "OUT-imm.reg_ax" *x64-instruction-variants-hash-table*) (list
OUT-imm.reg_ax))

(setf (gethash "OUT-imm.reg_eax" *x64-instruction-variants-hash-table*) (list
OUT-imm.reg_eax))

(setf (gethash "OUT-reg_dx.reg_al" *x64-instruction-variants-hash-table*) (list
OUT-reg_dx.reg_al))

(setf (gethash "OUT-reg_dx.reg_ax" *x64-instruction-variants-hash-table*) (list
OUT-reg_dx.reg_ax))

(setf (gethash "OUT-reg_dx.reg_eax" *x64-instruction-variants-hash-table*) (list
OUT-reg_dx.reg_eax))

(setf (gethash "OUTSB" *x64-instruction-variants-hash-table*) (list
OUTSB-void))

(setf (gethash "OUTSB-void" *x64-instruction-variants-hash-table*) (list
OUTSB-void))

(setf (gethash "OUTSD" *x64-instruction-variants-hash-table*) (list
OUTSD-void))

(setf (gethash "OUTSD-void" *x64-instruction-variants-hash-table*) (list
OUTSD-void))

(setf (gethash "OUTSW" *x64-instruction-variants-hash-table*) (list
OUTSW-void))

(setf (gethash "OUTSW-void" *x64-instruction-variants-hash-table*) (list
OUTSW-void))

(setf (gethash "PABSB" *x64-instruction-variants-hash-table*) (list
PABSB-mmxreg.mmxrm
PABSB-xmmreg.xmmrm))

(setf (gethash "PABSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PABSB-mmxreg.mmxrm))

(setf (gethash "PABSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PABSB-xmmreg.xmmrm))

(setf (gethash "PABSD" *x64-instruction-variants-hash-table*) (list
PABSD-mmxreg.mmxrm
PABSD-xmmreg.xmmrm))

(setf (gethash "PABSD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PABSD-mmxreg.mmxrm))

(setf (gethash "PABSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PABSD-xmmreg.xmmrm))

(setf (gethash "PABSW" *x64-instruction-variants-hash-table*) (list
PABSW-mmxreg.mmxrm
PABSW-xmmreg.xmmrm))

(setf (gethash "PABSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PABSW-mmxreg.mmxrm))

(setf (gethash "PABSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PABSW-xmmreg.xmmrm))

(setf (gethash "PACKSSDW" *x64-instruction-variants-hash-table*) (list
PACKSSDW-mmxreg.mmxrm
PACKSSDW-xmmreg.xmmrm))

(setf (gethash "PACKSSDW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PACKSSDW-mmxreg.mmxrm))

(setf (gethash "PACKSSDW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PACKSSDW-xmmreg.xmmrm))

(setf (gethash "PACKSSWB" *x64-instruction-variants-hash-table*) (list
PACKSSWB-mmxreg.mmxrm
PACKSSWB-xmmreg.xmmrm))

(setf (gethash "PACKSSWB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PACKSSWB-mmxreg.mmxrm))

(setf (gethash "PACKSSWB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PACKSSWB-xmmreg.xmmrm))

(setf (gethash "PACKUSDW" *x64-instruction-variants-hash-table*) (list
PACKUSDW-xmmreg.xmmrm))

(setf (gethash "PACKUSDW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PACKUSDW-xmmreg.xmmrm))

(setf (gethash "PACKUSWB" *x64-instruction-variants-hash-table*) (list
PACKUSWB-mmxreg.mmxrm
PACKUSWB-xmmreg.xmmrm))

(setf (gethash "PACKUSWB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PACKUSWB-mmxreg.mmxrm))

(setf (gethash "PACKUSWB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PACKUSWB-xmmreg.xmmrm))

(setf (gethash "PADDB" *x64-instruction-variants-hash-table*) (list
PADDB-mmxreg.mmxrm
PADDB-xmmreg.xmmrm))

(setf (gethash "PADDB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDB-mmxreg.mmxrm))

(setf (gethash "PADDB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDB-xmmreg.xmmrm))

(setf (gethash "PADDD" *x64-instruction-variants-hash-table*) (list
PADDD-mmxreg.mmxrm
PADDD-xmmreg.xmmrm))

(setf (gethash "PADDD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDD-mmxreg.mmxrm))

(setf (gethash "PADDD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDD-xmmreg.xmmrm))

(setf (gethash "PADDQ" *x64-instruction-variants-hash-table*) (list
PADDQ-mmxreg.mmxrm
PADDQ-xmmreg.xmmrm))

(setf (gethash "PADDQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDQ-mmxreg.mmxrm))

(setf (gethash "PADDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDQ-xmmreg.xmmrm))

(setf (gethash "PADDSB" *x64-instruction-variants-hash-table*) (list
PADDSB-mmxreg.mmxrm
PADDSB-xmmreg.xmmrm))

(setf (gethash "PADDSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDSB-mmxreg.mmxrm))

(setf (gethash "PADDSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDSB-xmmreg.xmmrm))

(setf (gethash "PADDSIW" *x64-instruction-variants-hash-table*) (list
PADDSIW-mmxreg.mmxrm))

(setf (gethash "PADDSIW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDSIW-mmxreg.mmxrm))

(setf (gethash "PADDSW" *x64-instruction-variants-hash-table*) (list
PADDSW-mmxreg.mmxrm
PADDSW-xmmreg.xmmrm))

(setf (gethash "PADDSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDSW-mmxreg.mmxrm))

(setf (gethash "PADDSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDSW-xmmreg.xmmrm))

(setf (gethash "PADDUSB" *x64-instruction-variants-hash-table*) (list
PADDUSB-mmxreg.mmxrm
PADDUSB-xmmreg.xmmrm))

(setf (gethash "PADDUSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDUSB-mmxreg.mmxrm))

(setf (gethash "PADDUSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDUSB-xmmreg.xmmrm))

(setf (gethash "PADDUSW" *x64-instruction-variants-hash-table*) (list
PADDUSW-mmxreg.mmxrm
PADDUSW-xmmreg.xmmrm))

(setf (gethash "PADDUSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDUSW-mmxreg.mmxrm))

(setf (gethash "PADDUSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDUSW-xmmreg.xmmrm))

(setf (gethash "PADDW" *x64-instruction-variants-hash-table*) (list
PADDW-mmxreg.mmxrm
PADDW-xmmreg.xmmrm))

(setf (gethash "PADDW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PADDW-mmxreg.mmxrm))

(setf (gethash "PADDW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PADDW-xmmreg.xmmrm))

(setf (gethash "PALIGNR" *x64-instruction-variants-hash-table*) (list
PALIGNR-mmxreg.mmxrm.imm
PALIGNR-xmmreg.xmmrm.imm))

(setf (gethash "PALIGNR-mmxreg.mmxrm.imm" *x64-instruction-variants-hash-table*) (list
PALIGNR-mmxreg.mmxrm.imm))

(setf (gethash "PALIGNR-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PALIGNR-xmmreg.xmmrm.imm))

(setf (gethash "PAND" *x64-instruction-variants-hash-table*) (list
PAND-mmxreg.mmxrm
PAND-xmmreg.xmmrm))

(setf (gethash "PAND-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PAND-mmxreg.mmxrm))

(setf (gethash "PAND-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PAND-xmmreg.xmmrm))

(setf (gethash "PANDN" *x64-instruction-variants-hash-table*) (list
PANDN-mmxreg.mmxrm
PANDN-xmmreg.xmmrm))

(setf (gethash "PANDN-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PANDN-mmxreg.mmxrm))

(setf (gethash "PANDN-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PANDN-xmmreg.xmmrm))

(setf (gethash "PAUSE" *x64-instruction-variants-hash-table*) (list
PAUSE-void))

(setf (gethash "PAUSE-void" *x64-instruction-variants-hash-table*) (list
PAUSE-void))

(setf (gethash "PAVEB" *x64-instruction-variants-hash-table*) (list
PAVEB-mmxreg.mmxrm))

(setf (gethash "PAVEB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PAVEB-mmxreg.mmxrm))

(setf (gethash "PAVGB" *x64-instruction-variants-hash-table*) (list
PAVGB-mmxreg.mmxrm
PAVGB-xmmreg.xmmrm))

(setf (gethash "PAVGB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PAVGB-mmxreg.mmxrm))

(setf (gethash "PAVGB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PAVGB-xmmreg.xmmrm))

(setf (gethash "PAVGUSB" *x64-instruction-variants-hash-table*) (list
PAVGUSB-mmxreg.mmxrm))

(setf (gethash "PAVGUSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PAVGUSB-mmxreg.mmxrm))

(setf (gethash "PAVGW" *x64-instruction-variants-hash-table*) (list
PAVGW-mmxreg.mmxrm
PAVGW-xmmreg.xmmrm))

(setf (gethash "PAVGW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PAVGW-mmxreg.mmxrm))

(setf (gethash "PAVGW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PAVGW-xmmreg.xmmrm))

(setf (gethash "PBLENDVB" *x64-instruction-variants-hash-table*) (list
PBLENDVB-xmmreg.xmmrm.xmm0
PBLENDVB-xmmreg.xmmrm))

(setf (gethash "PBLENDVB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PBLENDVB-xmmreg.xmmrm))

(setf (gethash "PBLENDVB-xmmreg.xmmrm.xmm0" *x64-instruction-variants-hash-table*) (list
PBLENDVB-xmmreg.xmmrm.xmm0))

(setf (gethash "PBLENDW" *x64-instruction-variants-hash-table*) (list
PBLENDW-xmmreg.xmmrm.imm))

(setf (gethash "PBLENDW-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PBLENDW-xmmreg.xmmrm.imm))

(setf (gethash "PCLMULHQHQDQ" *x64-instruction-variants-hash-table*) (list
PCLMULHQHQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULHQHQDQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
PCLMULHQHQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULHQLQDQ" *x64-instruction-variants-hash-table*) (list
PCLMULHQLQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULHQLQDQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
PCLMULHQLQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULLQHQDQ" *x64-instruction-variants-hash-table*) (list
PCLMULLQHQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULLQHQDQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
PCLMULLQHQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULLQLQDQ" *x64-instruction-variants-hash-table*) (list
PCLMULLQLQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULLQLQDQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
PCLMULLQLQDQ-xmmreg.xmmrm128))

(setf (gethash "PCLMULQDQ" *x64-instruction-variants-hash-table*) (list
PCLMULQDQ-xmmreg.xmmrm128.imm8))

(setf (gethash "PCLMULQDQ-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
PCLMULQDQ-xmmreg.xmmrm128.imm8))

(setf (gethash "PCMPEQB" *x64-instruction-variants-hash-table*) (list
PCMPEQB-mmxreg.mmxrm
PCMPEQB-xmmreg.xmmrm))

(setf (gethash "PCMPEQB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPEQB-mmxreg.mmxrm))

(setf (gethash "PCMPEQB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPEQB-xmmreg.xmmrm))

(setf (gethash "PCMPEQD" *x64-instruction-variants-hash-table*) (list
PCMPEQD-mmxreg.mmxrm
PCMPEQD-xmmreg.xmmrm))

(setf (gethash "PCMPEQD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPEQD-mmxreg.mmxrm))

(setf (gethash "PCMPEQD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPEQD-xmmreg.xmmrm))

(setf (gethash "PCMPEQQ" *x64-instruction-variants-hash-table*) (list
PCMPEQQ-xmmreg.xmmrm))

(setf (gethash "PCMPEQQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPEQQ-xmmreg.xmmrm))

(setf (gethash "PCMPEQW" *x64-instruction-variants-hash-table*) (list
PCMPEQW-mmxreg.mmxrm
PCMPEQW-xmmreg.xmmrm))

(setf (gethash "PCMPEQW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPEQW-mmxreg.mmxrm))

(setf (gethash "PCMPEQW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPEQW-xmmreg.xmmrm))

(setf (gethash "PCMPESTRI" *x64-instruction-variants-hash-table*) (list
PCMPESTRI-xmmreg.xmmrm.imm))

(setf (gethash "PCMPESTRI-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PCMPESTRI-xmmreg.xmmrm.imm))

(setf (gethash "PCMPESTRM" *x64-instruction-variants-hash-table*) (list
PCMPESTRM-xmmreg.xmmrm.imm))

(setf (gethash "PCMPESTRM-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PCMPESTRM-xmmreg.xmmrm.imm))

(setf (gethash "PCMPGTB" *x64-instruction-variants-hash-table*) (list
PCMPGTB-mmxreg.mmxrm
PCMPGTB-xmmreg.xmmrm))

(setf (gethash "PCMPGTB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPGTB-mmxreg.mmxrm))

(setf (gethash "PCMPGTB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPGTB-xmmreg.xmmrm))

(setf (gethash "PCMPGTD" *x64-instruction-variants-hash-table*) (list
PCMPGTD-mmxreg.mmxrm
PCMPGTD-xmmreg.xmmrm))

(setf (gethash "PCMPGTD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPGTD-mmxreg.mmxrm))

(setf (gethash "PCMPGTD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPGTD-xmmreg.xmmrm))

(setf (gethash "PCMPGTQ" *x64-instruction-variants-hash-table*) (list
PCMPGTQ-xmmreg.xmmrm))

(setf (gethash "PCMPGTQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPGTQ-xmmreg.xmmrm))

(setf (gethash "PCMPGTW" *x64-instruction-variants-hash-table*) (list
PCMPGTW-mmxreg.mmxrm
PCMPGTW-xmmreg.xmmrm))

(setf (gethash "PCMPGTW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PCMPGTW-mmxreg.mmxrm))

(setf (gethash "PCMPGTW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PCMPGTW-xmmreg.xmmrm))

(setf (gethash "PCMPISTRI" *x64-instruction-variants-hash-table*) (list
PCMPISTRI-xmmreg.xmmrm.imm))

(setf (gethash "PCMPISTRI-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PCMPISTRI-xmmreg.xmmrm.imm))

(setf (gethash "PCMPISTRM" *x64-instruction-variants-hash-table*) (list
PCMPISTRM-xmmreg.xmmrm.imm))

(setf (gethash "PCMPISTRM-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
PCMPISTRM-xmmreg.xmmrm.imm))

(setf (gethash "PDEP" *x64-instruction-variants-hash-table*) (list
PDEP-reg32.reg32.rm32-rv
PDEP-reg64.reg64.rm64-rv))

(setf (gethash "PDEP-reg32.reg32.rm32-rv" *x64-instruction-variants-hash-table*) (list
PDEP-reg32.reg32.rm32-rv))

(setf (gethash "PDEP-reg64.reg64.rm64-rv" *x64-instruction-variants-hash-table*) (list
PDEP-reg64.reg64.rm64-rv))

(setf (gethash "PDISTIB" *x64-instruction-variants-hash-table*) (list
PDISTIB-mmxreg.mem))

(setf (gethash "PDISTIB-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PDISTIB-mmxreg.mem))

(setf (gethash "PEXT" *x64-instruction-variants-hash-table*) (list
PEXT-reg32.reg32.rm32-rv
PEXT-reg64.reg64.rm64-rv))

(setf (gethash "PEXT-reg32.reg32.rm32-rv" *x64-instruction-variants-hash-table*) (list
PEXT-reg32.reg32.rm32-rv))

(setf (gethash "PEXT-reg64.reg64.rm64-rv" *x64-instruction-variants-hash-table*) (list
PEXT-reg64.reg64.rm64-rv))

(setf (gethash "PEXTRB" *x64-instruction-variants-hash-table*) (list
PEXTRB-reg32.xmmreg.imm
PEXTRB-mem8.xmmreg.imm
PEXTRB-reg64.xmmreg.imm))

(setf (gethash "PEXTRB-mem8.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRB-mem8.xmmreg.imm))

(setf (gethash "PEXTRB-reg32.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRB-reg32.xmmreg.imm))

(setf (gethash "PEXTRB-reg64.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRB-reg64.xmmreg.imm))

(setf (gethash "PEXTRD" *x64-instruction-variants-hash-table*) (list
PEXTRD-rm32.xmmreg.imm))

(setf (gethash "PEXTRD-rm32.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRD-rm32.xmmreg.imm))

(setf (gethash "PEXTRQ" *x64-instruction-variants-hash-table*) (list
PEXTRQ-rm64.xmmreg.imm))

(setf (gethash "PEXTRQ-rm64.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRQ-rm64.xmmreg.imm))

(setf (gethash "PEXTRW" *x64-instruction-variants-hash-table*) (list
PEXTRW-reg32.mmxreg.imm
PEXTRW-reg32.xmmreg.imm
PEXTRW-reg32.xmmreg.imm
PEXTRW-mem16.xmmreg.imm
PEXTRW-reg64.xmmreg.imm))

(setf (gethash "PEXTRW-mem16.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRW-mem16.xmmreg.imm))

(setf (gethash "PEXTRW-reg32.mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRW-reg32.mmxreg.imm))

(setf (gethash "PEXTRW-reg32.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRW-reg32.xmmreg.imm
PEXTRW-reg32.xmmreg.imm))

(setf (gethash "PEXTRW-reg64.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PEXTRW-reg64.xmmreg.imm))

(setf (gethash "PF2ID" *x64-instruction-variants-hash-table*) (list
PF2ID-mmxreg.mmxrm))

(setf (gethash "PF2ID-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PF2ID-mmxreg.mmxrm))

(setf (gethash "PF2IW" *x64-instruction-variants-hash-table*) (list
PF2IW-mmxreg.mmxrm))

(setf (gethash "PF2IW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PF2IW-mmxreg.mmxrm))

(setf (gethash "PFACC" *x64-instruction-variants-hash-table*) (list
PFACC-mmxreg.mmxrm))

(setf (gethash "PFACC-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFACC-mmxreg.mmxrm))

(setf (gethash "PFADD" *x64-instruction-variants-hash-table*) (list
PFADD-mmxreg.mmxrm))

(setf (gethash "PFADD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFADD-mmxreg.mmxrm))

(setf (gethash "PFCMPEQ" *x64-instruction-variants-hash-table*) (list
PFCMPEQ-mmxreg.mmxrm))

(setf (gethash "PFCMPEQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFCMPEQ-mmxreg.mmxrm))

(setf (gethash "PFCMPGE" *x64-instruction-variants-hash-table*) (list
PFCMPGE-mmxreg.mmxrm))

(setf (gethash "PFCMPGE-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFCMPGE-mmxreg.mmxrm))

(setf (gethash "PFCMPGT" *x64-instruction-variants-hash-table*) (list
PFCMPGT-mmxreg.mmxrm))

(setf (gethash "PFCMPGT-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFCMPGT-mmxreg.mmxrm))

(setf (gethash "PFMAX" *x64-instruction-variants-hash-table*) (list
PFMAX-mmxreg.mmxrm))

(setf (gethash "PFMAX-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFMAX-mmxreg.mmxrm))

(setf (gethash "PFMIN" *x64-instruction-variants-hash-table*) (list
PFMIN-mmxreg.mmxrm))

(setf (gethash "PFMIN-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFMIN-mmxreg.mmxrm))

(setf (gethash "PFMUL" *x64-instruction-variants-hash-table*) (list
PFMUL-mmxreg.mmxrm))

(setf (gethash "PFMUL-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFMUL-mmxreg.mmxrm))

(setf (gethash "PFNACC" *x64-instruction-variants-hash-table*) (list
PFNACC-mmxreg.mmxrm))

(setf (gethash "PFNACC-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFNACC-mmxreg.mmxrm))

(setf (gethash "PFPNACC" *x64-instruction-variants-hash-table*) (list
PFPNACC-mmxreg.mmxrm))

(setf (gethash "PFPNACC-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFPNACC-mmxreg.mmxrm))

(setf (gethash "PFRCP" *x64-instruction-variants-hash-table*) (list
PFRCP-mmxreg.mmxrm))

(setf (gethash "PFRCP-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRCP-mmxreg.mmxrm))

(setf (gethash "PFRCPIT1" *x64-instruction-variants-hash-table*) (list
PFRCPIT1-mmxreg.mmxrm))

(setf (gethash "PFRCPIT1-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRCPIT1-mmxreg.mmxrm))

(setf (gethash "PFRCPIT2" *x64-instruction-variants-hash-table*) (list
PFRCPIT2-mmxreg.mmxrm))

(setf (gethash "PFRCPIT2-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRCPIT2-mmxreg.mmxrm))

(setf (gethash "PFRCPV" *x64-instruction-variants-hash-table*) (list
PFRCPV-mmxreg.mmxrm))

(setf (gethash "PFRCPV-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRCPV-mmxreg.mmxrm))

(setf (gethash "PFRSQIT1" *x64-instruction-variants-hash-table*) (list
PFRSQIT1-mmxreg.mmxrm))

(setf (gethash "PFRSQIT1-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRSQIT1-mmxreg.mmxrm))

(setf (gethash "PFRSQRT" *x64-instruction-variants-hash-table*) (list
PFRSQRT-mmxreg.mmxrm))

(setf (gethash "PFRSQRT-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRSQRT-mmxreg.mmxrm))

(setf (gethash "PFRSQRTV" *x64-instruction-variants-hash-table*) (list
PFRSQRTV-mmxreg.mmxrm))

(setf (gethash "PFRSQRTV-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFRSQRTV-mmxreg.mmxrm))

(setf (gethash "PFSUB" *x64-instruction-variants-hash-table*) (list
PFSUB-mmxreg.mmxrm))

(setf (gethash "PFSUB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFSUB-mmxreg.mmxrm))

(setf (gethash "PFSUBR" *x64-instruction-variants-hash-table*) (list
PFSUBR-mmxreg.mmxrm))

(setf (gethash "PFSUBR-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PFSUBR-mmxreg.mmxrm))

(setf (gethash "PHADDD" *x64-instruction-variants-hash-table*) (list
PHADDD-mmxreg.mmxrm
PHADDD-xmmreg.xmmrm))

(setf (gethash "PHADDD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHADDD-mmxreg.mmxrm))

(setf (gethash "PHADDD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHADDD-xmmreg.xmmrm))

(setf (gethash "PHADDSW" *x64-instruction-variants-hash-table*) (list
PHADDSW-mmxreg.mmxrm
PHADDSW-xmmreg.xmmrm))

(setf (gethash "PHADDSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHADDSW-mmxreg.mmxrm))

(setf (gethash "PHADDSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHADDSW-xmmreg.xmmrm))

(setf (gethash "PHADDW" *x64-instruction-variants-hash-table*) (list
PHADDW-mmxreg.mmxrm
PHADDW-xmmreg.xmmrm))

(setf (gethash "PHADDW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHADDW-mmxreg.mmxrm))

(setf (gethash "PHADDW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHADDW-xmmreg.xmmrm))

(setf (gethash "PHMINPOSUW" *x64-instruction-variants-hash-table*) (list
PHMINPOSUW-xmmreg.xmmrm))

(setf (gethash "PHMINPOSUW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHMINPOSUW-xmmreg.xmmrm))

(setf (gethash "PHSUBD" *x64-instruction-variants-hash-table*) (list
PHSUBD-mmxreg.mmxrm
PHSUBD-xmmreg.xmmrm))

(setf (gethash "PHSUBD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHSUBD-mmxreg.mmxrm))

(setf (gethash "PHSUBD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHSUBD-xmmreg.xmmrm))

(setf (gethash "PHSUBSW" *x64-instruction-variants-hash-table*) (list
PHSUBSW-mmxreg.mmxrm
PHSUBSW-xmmreg.xmmrm))

(setf (gethash "PHSUBSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHSUBSW-mmxreg.mmxrm))

(setf (gethash "PHSUBSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHSUBSW-xmmreg.xmmrm))

(setf (gethash "PHSUBW" *x64-instruction-variants-hash-table*) (list
PHSUBW-mmxreg.mmxrm
PHSUBW-xmmreg.xmmrm))

(setf (gethash "PHSUBW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PHSUBW-mmxreg.mmxrm))

(setf (gethash "PHSUBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PHSUBW-xmmreg.xmmrm))

(setf (gethash "PI2FD" *x64-instruction-variants-hash-table*) (list
PI2FD-mmxreg.mmxrm))

(setf (gethash "PI2FD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PI2FD-mmxreg.mmxrm))

(setf (gethash "PI2FW" *x64-instruction-variants-hash-table*) (list
PI2FW-mmxreg.mmxrm))

(setf (gethash "PI2FW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PI2FW-mmxreg.mmxrm))

(setf (gethash "PINSRB" *x64-instruction-variants-hash-table*) (list
PINSRB-xmmreg.mem.imm
PINSRB-xmmreg.rm8.imm
PINSRB-xmmreg.reg32.imm))

(setf (gethash "PINSRB-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PINSRB-xmmreg.mem.imm))

(setf (gethash "PINSRB-xmmreg.reg32.imm" *x64-instruction-variants-hash-table*) (list
PINSRB-xmmreg.reg32.imm))

(setf (gethash "PINSRB-xmmreg.rm8.imm" *x64-instruction-variants-hash-table*) (list
PINSRB-xmmreg.rm8.imm))

(setf (gethash "PINSRD" *x64-instruction-variants-hash-table*) (list
PINSRD-xmmreg.mem.imm
PINSRD-xmmreg.rm32.imm))

(setf (gethash "PINSRD-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PINSRD-xmmreg.mem.imm))

(setf (gethash "PINSRD-xmmreg.rm32.imm" *x64-instruction-variants-hash-table*) (list
PINSRD-xmmreg.rm32.imm))

(setf (gethash "PINSRQ" *x64-instruction-variants-hash-table*) (list
PINSRQ-xmmreg.mem.imm
PINSRQ-xmmreg.rm64.imm))

(setf (gethash "PINSRQ-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PINSRQ-xmmreg.mem.imm))

(setf (gethash "PINSRQ-xmmreg.rm64.imm" *x64-instruction-variants-hash-table*) (list
PINSRQ-xmmreg.rm64.imm))

(setf (gethash "PINSRW" *x64-instruction-variants-hash-table*) (list
PINSRW-mmxreg.mem.imm
PINSRW-mmxreg.rm16.imm
PINSRW-mmxreg.reg32.imm
PINSRW-xmmreg.reg16.imm
PINSRW-xmmreg.reg32.imm
PINSRW-xmmreg.mem.imm
PINSRW-xmmreg.mem16.imm))

(setf (gethash "PINSRW-mmxreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-mmxreg.mem.imm))

(setf (gethash "PINSRW-mmxreg.reg32.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-mmxreg.reg32.imm))

(setf (gethash "PINSRW-mmxreg.rm16.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-mmxreg.rm16.imm))

(setf (gethash "PINSRW-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-xmmreg.mem.imm))

(setf (gethash "PINSRW-xmmreg.mem16.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-xmmreg.mem16.imm))

(setf (gethash "PINSRW-xmmreg.reg16.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-xmmreg.reg16.imm))

(setf (gethash "PINSRW-xmmreg.reg32.imm" *x64-instruction-variants-hash-table*) (list
PINSRW-xmmreg.reg32.imm))

(setf (gethash "PMACHRIW" *x64-instruction-variants-hash-table*) (list
PMACHRIW-mmxreg.mem))

(setf (gethash "PMACHRIW-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PMACHRIW-mmxreg.mem))

(setf (gethash "PMADDUBSW" *x64-instruction-variants-hash-table*) (list
PMADDUBSW-mmxreg.mmxrm
PMADDUBSW-xmmreg.xmmrm))

(setf (gethash "PMADDUBSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMADDUBSW-mmxreg.mmxrm))

(setf (gethash "PMADDUBSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMADDUBSW-xmmreg.xmmrm))

(setf (gethash "PMADDWD" *x64-instruction-variants-hash-table*) (list
PMADDWD-mmxreg.mmxrm
PMADDWD-xmmreg.xmmrm))

(setf (gethash "PMADDWD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMADDWD-mmxreg.mmxrm))

(setf (gethash "PMADDWD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMADDWD-xmmreg.xmmrm))

(setf (gethash "PMAGW" *x64-instruction-variants-hash-table*) (list
PMAGW-mmxreg.mmxrm))

(setf (gethash "PMAGW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMAGW-mmxreg.mmxrm))

(setf (gethash "PMAXSB" *x64-instruction-variants-hash-table*) (list
PMAXSB-xmmreg.xmmrm))

(setf (gethash "PMAXSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXSB-xmmreg.xmmrm))

(setf (gethash "PMAXSD" *x64-instruction-variants-hash-table*) (list
PMAXSD-xmmreg.xmmrm))

(setf (gethash "PMAXSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXSD-xmmreg.xmmrm))

(setf (gethash "PMAXSW" *x64-instruction-variants-hash-table*) (list
PMAXSW-mmxreg.mmxrm
PMAXSW-xmmreg.xmmrm))

(setf (gethash "PMAXSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMAXSW-mmxreg.mmxrm))

(setf (gethash "PMAXSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXSW-xmmreg.xmmrm))

(setf (gethash "PMAXUB" *x64-instruction-variants-hash-table*) (list
PMAXUB-mmxreg.mmxrm
PMAXUB-xmmreg.xmmrm))

(setf (gethash "PMAXUB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMAXUB-mmxreg.mmxrm))

(setf (gethash "PMAXUB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXUB-xmmreg.xmmrm))

(setf (gethash "PMAXUD" *x64-instruction-variants-hash-table*) (list
PMAXUD-xmmreg.xmmrm))

(setf (gethash "PMAXUD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXUD-xmmreg.xmmrm))

(setf (gethash "PMAXUW" *x64-instruction-variants-hash-table*) (list
PMAXUW-xmmreg.xmmrm))

(setf (gethash "PMAXUW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMAXUW-xmmreg.xmmrm))

(setf (gethash "PMINSB" *x64-instruction-variants-hash-table*) (list
PMINSB-xmmreg.xmmrm))

(setf (gethash "PMINSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINSB-xmmreg.xmmrm))

(setf (gethash "PMINSD" *x64-instruction-variants-hash-table*) (list
PMINSD-xmmreg.xmmrm))

(setf (gethash "PMINSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINSD-xmmreg.xmmrm))

(setf (gethash "PMINSW" *x64-instruction-variants-hash-table*) (list
PMINSW-mmxreg.mmxrm
PMINSW-xmmreg.xmmrm))

(setf (gethash "PMINSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMINSW-mmxreg.mmxrm))

(setf (gethash "PMINSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINSW-xmmreg.xmmrm))

(setf (gethash "PMINUB" *x64-instruction-variants-hash-table*) (list
PMINUB-mmxreg.mmxrm
PMINUB-xmmreg.xmmrm))

(setf (gethash "PMINUB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMINUB-mmxreg.mmxrm))

(setf (gethash "PMINUB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINUB-xmmreg.xmmrm))

(setf (gethash "PMINUD" *x64-instruction-variants-hash-table*) (list
PMINUD-xmmreg.xmmrm))

(setf (gethash "PMINUD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINUD-xmmreg.xmmrm))

(setf (gethash "PMINUW" *x64-instruction-variants-hash-table*) (list
PMINUW-xmmreg.xmmrm))

(setf (gethash "PMINUW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMINUW-xmmreg.xmmrm))

(setf (gethash "PMOVMSKB" *x64-instruction-variants-hash-table*) (list
PMOVMSKB-reg32.mmxreg
PMOVMSKB-reg32.xmmreg))

(setf (gethash "PMOVMSKB-reg32.mmxreg" *x64-instruction-variants-hash-table*) (list
PMOVMSKB-reg32.mmxreg))

(setf (gethash "PMOVMSKB-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
PMOVMSKB-reg32.xmmreg))

(setf (gethash "PMOVSXBD" *x64-instruction-variants-hash-table*) (list
PMOVSXBD-xmmreg.xmmrm))

(setf (gethash "PMOVSXBD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXBD-xmmreg.xmmrm))

(setf (gethash "PMOVSXBQ" *x64-instruction-variants-hash-table*) (list
PMOVSXBQ-xmmreg.xmmrm))

(setf (gethash "PMOVSXBQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXBQ-xmmreg.xmmrm))

(setf (gethash "PMOVSXBW" *x64-instruction-variants-hash-table*) (list
PMOVSXBW-xmmreg.xmmrm))

(setf (gethash "PMOVSXBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXBW-xmmreg.xmmrm))

(setf (gethash "PMOVSXDQ" *x64-instruction-variants-hash-table*) (list
PMOVSXDQ-xmmreg.xmmrm))

(setf (gethash "PMOVSXDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXDQ-xmmreg.xmmrm))

(setf (gethash "PMOVSXWD" *x64-instruction-variants-hash-table*) (list
PMOVSXWD-xmmreg.xmmrm))

(setf (gethash "PMOVSXWD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXWD-xmmreg.xmmrm))

(setf (gethash "PMOVSXWQ" *x64-instruction-variants-hash-table*) (list
PMOVSXWQ-xmmreg.xmmrm))

(setf (gethash "PMOVSXWQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVSXWQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXBD" *x64-instruction-variants-hash-table*) (list
PMOVZXBD-xmmreg.xmmrm))

(setf (gethash "PMOVZXBD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXBD-xmmreg.xmmrm))

(setf (gethash "PMOVZXBQ" *x64-instruction-variants-hash-table*) (list
PMOVZXBQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXBQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXBQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXBW" *x64-instruction-variants-hash-table*) (list
PMOVZXBW-xmmreg.xmmrm))

(setf (gethash "PMOVZXBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXBW-xmmreg.xmmrm))

(setf (gethash "PMOVZXDQ" *x64-instruction-variants-hash-table*) (list
PMOVZXDQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXDQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXWD" *x64-instruction-variants-hash-table*) (list
PMOVZXWD-xmmreg.xmmrm))

(setf (gethash "PMOVZXWD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXWD-xmmreg.xmmrm))

(setf (gethash "PMOVZXWQ" *x64-instruction-variants-hash-table*) (list
PMOVZXWQ-xmmreg.xmmrm))

(setf (gethash "PMOVZXWQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMOVZXWQ-xmmreg.xmmrm))

(setf (gethash "PMULDQ" *x64-instruction-variants-hash-table*) (list
PMULDQ-xmmreg.xmmrm))

(setf (gethash "PMULDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULDQ-xmmreg.xmmrm))

(setf (gethash "PMULHRIW" *x64-instruction-variants-hash-table*) (list
PMULHRIW-mmxreg.mmxrm))

(setf (gethash "PMULHRIW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHRIW-mmxreg.mmxrm))

(setf (gethash "PMULHRSW" *x64-instruction-variants-hash-table*) (list
PMULHRSW-mmxreg.mmxrm
PMULHRSW-xmmreg.xmmrm))

(setf (gethash "PMULHRSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHRSW-mmxreg.mmxrm))

(setf (gethash "PMULHRSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULHRSW-xmmreg.xmmrm))

(setf (gethash "PMULHRWA" *x64-instruction-variants-hash-table*) (list
PMULHRWA-mmxreg.mmxrm))

(setf (gethash "PMULHRWA-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHRWA-mmxreg.mmxrm))

(setf (gethash "PMULHRWC" *x64-instruction-variants-hash-table*) (list
PMULHRWC-mmxreg.mmxrm))

(setf (gethash "PMULHRWC-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHRWC-mmxreg.mmxrm))

(setf (gethash "PMULHUW" *x64-instruction-variants-hash-table*) (list
PMULHUW-mmxreg.mmxrm
PMULHUW-xmmreg.xmmrm))

(setf (gethash "PMULHUW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHUW-mmxreg.mmxrm))

(setf (gethash "PMULHUW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULHUW-xmmreg.xmmrm))

(setf (gethash "PMULHW" *x64-instruction-variants-hash-table*) (list
PMULHW-mmxreg.mmxrm
PMULHW-xmmreg.xmmrm))

(setf (gethash "PMULHW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULHW-mmxreg.mmxrm))

(setf (gethash "PMULHW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULHW-xmmreg.xmmrm))

(setf (gethash "PMULLD" *x64-instruction-variants-hash-table*) (list
PMULLD-xmmreg.xmmrm))

(setf (gethash "PMULLD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULLD-xmmreg.xmmrm))

(setf (gethash "PMULLW" *x64-instruction-variants-hash-table*) (list
PMULLW-mmxreg.mmxrm
PMULLW-xmmreg.xmmrm))

(setf (gethash "PMULLW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULLW-mmxreg.mmxrm))

(setf (gethash "PMULLW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULLW-xmmreg.xmmrm))

(setf (gethash "PMULUDQ" *x64-instruction-variants-hash-table*) (list
PMULUDQ-mmxreg.mmxrm
PMULUDQ-xmmreg.xmmrm))

(setf (gethash "PMULUDQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PMULUDQ-mmxreg.mmxrm))

(setf (gethash "PMULUDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PMULUDQ-xmmreg.xmmrm))

(setf (gethash "PMVGEZB" *x64-instruction-variants-hash-table*) (list
PMVGEZB-mmxreg.mem))

(setf (gethash "PMVGEZB-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PMVGEZB-mmxreg.mem))

(setf (gethash "PMVLZB" *x64-instruction-variants-hash-table*) (list
PMVLZB-mmxreg.mem))

(setf (gethash "PMVLZB-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PMVLZB-mmxreg.mem))

(setf (gethash "PMVNZB" *x64-instruction-variants-hash-table*) (list
PMVNZB-mmxreg.mem))

(setf (gethash "PMVNZB-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PMVNZB-mmxreg.mem))

(setf (gethash "PMVZB" *x64-instruction-variants-hash-table*) (list
PMVZB-mmxreg.mem))

(setf (gethash "PMVZB-mmxreg.mem" *x64-instruction-variants-hash-table*) (list
PMVZB-mmxreg.mem))

(setf (gethash "POP" *x64-instruction-variants-hash-table*) (list
POP-reg16
POP-reg64
POP-rm16
POP-rm64
POP-reg_cs
POP-reg_fs
POP-reg_gs))

(setf (gethash "POP-reg16" *x64-instruction-variants-hash-table*) (list
POP-reg16))

(setf (gethash "POP-reg64" *x64-instruction-variants-hash-table*) (list
POP-reg64))

(setf (gethash "POP-reg_cs" *x64-instruction-variants-hash-table*) (list
POP-reg_cs))

(setf (gethash "POP-reg_fs" *x64-instruction-variants-hash-table*) (list
POP-reg_fs))

(setf (gethash "POP-reg_gs" *x64-instruction-variants-hash-table*) (list
POP-reg_gs))

(setf (gethash "POP-rm16" *x64-instruction-variants-hash-table*) (list
POP-rm16))

(setf (gethash "POP-rm64" *x64-instruction-variants-hash-table*) (list
POP-rm64))

(setf (gethash "POPCNT" *x64-instruction-variants-hash-table*) (list
POPCNT-reg16.rm16
POPCNT-reg32.rm32
POPCNT-reg64.rm64))

(setf (gethash "POPCNT-reg16.rm16" *x64-instruction-variants-hash-table*) (list
POPCNT-reg16.rm16))

(setf (gethash "POPCNT-reg32.rm32" *x64-instruction-variants-hash-table*) (list
POPCNT-reg32.rm32))

(setf (gethash "POPCNT-reg64.rm64" *x64-instruction-variants-hash-table*) (list
POPCNT-reg64.rm64))

(setf (gethash "POPF" *x64-instruction-variants-hash-table*) (list
POPF-void))

(setf (gethash "POPF-void" *x64-instruction-variants-hash-table*) (list
POPF-void))

(setf (gethash "POPFQ" *x64-instruction-variants-hash-table*) (list
POPFQ-void))

(setf (gethash "POPFQ-void" *x64-instruction-variants-hash-table*) (list
POPFQ-void))

(setf (gethash "POPFW" *x64-instruction-variants-hash-table*) (list
POPFW-void))

(setf (gethash "POPFW-void" *x64-instruction-variants-hash-table*) (list
POPFW-void))

(setf (gethash "POR" *x64-instruction-variants-hash-table*) (list
POR-mmxreg.mmxrm
POR-xmmreg.xmmrm))

(setf (gethash "POR-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
POR-mmxreg.mmxrm))

(setf (gethash "POR-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
POR-xmmreg.xmmrm))

(setf (gethash "PREFETCH" *x64-instruction-variants-hash-table*) (list
PREFETCH-mem))

(setf (gethash "PREFETCH-mem" *x64-instruction-variants-hash-table*) (list
PREFETCH-mem))

(setf (gethash "PREFETCHNTA" *x64-instruction-variants-hash-table*) (list
PREFETCHNTA-mem8))

(setf (gethash "PREFETCHNTA-mem8" *x64-instruction-variants-hash-table*) (list
PREFETCHNTA-mem8))

(setf (gethash "PREFETCHT0" *x64-instruction-variants-hash-table*) (list
PREFETCHT0-mem8))

(setf (gethash "PREFETCHT0-mem8" *x64-instruction-variants-hash-table*) (list
PREFETCHT0-mem8))

(setf (gethash "PREFETCHT1" *x64-instruction-variants-hash-table*) (list
PREFETCHT1-mem8))

(setf (gethash "PREFETCHT1-mem8" *x64-instruction-variants-hash-table*) (list
PREFETCHT1-mem8))

(setf (gethash "PREFETCHT2" *x64-instruction-variants-hash-table*) (list
PREFETCHT2-mem8))

(setf (gethash "PREFETCHT2-mem8" *x64-instruction-variants-hash-table*) (list
PREFETCHT2-mem8))

(setf (gethash "PREFETCHW" *x64-instruction-variants-hash-table*) (list
PREFETCHW-mem))

(setf (gethash "PREFETCHW-mem" *x64-instruction-variants-hash-table*) (list
PREFETCHW-mem))

(setf (gethash "PREFETCHWT1" *x64-instruction-variants-hash-table*) (list
PREFETCHWT1-mem8))

(setf (gethash "PREFETCHWT1-mem8" *x64-instruction-variants-hash-table*) (list
PREFETCHWT1-mem8))

(setf (gethash "PSADBW" *x64-instruction-variants-hash-table*) (list
PSADBW-mmxreg.mmxrm
PSADBW-xmmreg.xmmrm))

(setf (gethash "PSADBW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSADBW-mmxreg.mmxrm))

(setf (gethash "PSADBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSADBW-xmmreg.xmmrm))

(setf (gethash "PSHUFB" *x64-instruction-variants-hash-table*) (list
PSHUFB-mmxreg.mmxrm
PSHUFB-xmmreg.xmmrm))

(setf (gethash "PSHUFB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSHUFB-mmxreg.mmxrm))

(setf (gethash "PSHUFB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSHUFB-xmmreg.xmmrm))

(setf (gethash "PSHUFD" *x64-instruction-variants-hash-table*) (list
PSHUFD-xmmreg.xmmreg.imm
PSHUFD-xmmreg.mem.imm))

(setf (gethash "PSHUFD-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PSHUFD-xmmreg.mem.imm))

(setf (gethash "PSHUFD-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSHUFD-xmmreg.xmmreg.imm))

(setf (gethash "PSHUFHW" *x64-instruction-variants-hash-table*) (list
PSHUFHW-xmmreg.xmmreg.imm
PSHUFHW-xmmreg.mem.imm))

(setf (gethash "PSHUFHW-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PSHUFHW-xmmreg.mem.imm))

(setf (gethash "PSHUFHW-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSHUFHW-xmmreg.xmmreg.imm))

(setf (gethash "PSHUFLW" *x64-instruction-variants-hash-table*) (list
PSHUFLW-xmmreg.xmmreg.imm
PSHUFLW-xmmreg.mem.imm))

(setf (gethash "PSHUFLW-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
PSHUFLW-xmmreg.mem.imm))

(setf (gethash "PSHUFLW-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSHUFLW-xmmreg.xmmreg.imm))

(setf (gethash "PSHUFW" *x64-instruction-variants-hash-table*) (list
PSHUFW-mmxreg.mmxrm.imm))

(setf (gethash "PSHUFW-mmxreg.mmxrm.imm" *x64-instruction-variants-hash-table*) (list
PSHUFW-mmxreg.mmxrm.imm))

(setf (gethash "PSIGNB" *x64-instruction-variants-hash-table*) (list
PSIGNB-mmxreg.mmxrm
PSIGNB-xmmreg.xmmrm))

(setf (gethash "PSIGNB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSIGNB-mmxreg.mmxrm))

(setf (gethash "PSIGNB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSIGNB-xmmreg.xmmrm))

(setf (gethash "PSIGND" *x64-instruction-variants-hash-table*) (list
PSIGND-mmxreg.mmxrm
PSIGND-xmmreg.xmmrm))

(setf (gethash "PSIGND-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSIGND-mmxreg.mmxrm))

(setf (gethash "PSIGND-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSIGND-xmmreg.xmmrm))

(setf (gethash "PSIGNW" *x64-instruction-variants-hash-table*) (list
PSIGNW-mmxreg.mmxrm
PSIGNW-xmmreg.xmmrm))

(setf (gethash "PSIGNW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSIGNW-mmxreg.mmxrm))

(setf (gethash "PSIGNW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSIGNW-xmmreg.xmmrm))

(setf (gethash "PSLLD" *x64-instruction-variants-hash-table*) (list
PSLLD-mmxreg.mmxrm
PSLLD-mmxreg.imm
PSLLD-xmmreg.xmmrm
PSLLD-xmmreg.imm))

(setf (gethash "PSLLD-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLD-mmxreg.imm))

(setf (gethash "PSLLD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSLLD-mmxreg.mmxrm))

(setf (gethash "PSLLD-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLD-xmmreg.imm))

(setf (gethash "PSLLD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSLLD-xmmreg.xmmrm))

(setf (gethash "PSLLDQ" *x64-instruction-variants-hash-table*) (list
PSLLDQ-xmmreg.imm))

(setf (gethash "PSLLDQ-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLDQ-xmmreg.imm))

(setf (gethash "PSLLQ" *x64-instruction-variants-hash-table*) (list
PSLLQ-mmxreg.mmxrm
PSLLQ-mmxreg.imm
PSLLQ-xmmreg.xmmrm
PSLLQ-xmmreg.imm))

(setf (gethash "PSLLQ-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLQ-mmxreg.imm))

(setf (gethash "PSLLQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSLLQ-mmxreg.mmxrm))

(setf (gethash "PSLLQ-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLQ-xmmreg.imm))

(setf (gethash "PSLLQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSLLQ-xmmreg.xmmrm))

(setf (gethash "PSLLW" *x64-instruction-variants-hash-table*) (list
PSLLW-mmxreg.mmxrm
PSLLW-mmxreg.imm
PSLLW-xmmreg.xmmrm
PSLLW-xmmreg.imm))

(setf (gethash "PSLLW-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLW-mmxreg.imm))

(setf (gethash "PSLLW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSLLW-mmxreg.mmxrm))

(setf (gethash "PSLLW-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSLLW-xmmreg.imm))

(setf (gethash "PSLLW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSLLW-xmmreg.xmmrm))

(setf (gethash "PSRAD" *x64-instruction-variants-hash-table*) (list
PSRAD-mmxreg.mmxrm
PSRAD-mmxreg.imm
PSRAD-xmmreg.xmmrm
PSRAD-xmmreg.imm))

(setf (gethash "PSRAD-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSRAD-mmxreg.imm))

(setf (gethash "PSRAD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSRAD-mmxreg.mmxrm))

(setf (gethash "PSRAD-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRAD-xmmreg.imm))

(setf (gethash "PSRAD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSRAD-xmmreg.xmmrm))

(setf (gethash "PSRAW" *x64-instruction-variants-hash-table*) (list
PSRAW-mmxreg.mmxrm
PSRAW-mmxreg.imm
PSRAW-xmmreg.xmmrm
PSRAW-xmmreg.imm))

(setf (gethash "PSRAW-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSRAW-mmxreg.imm))

(setf (gethash "PSRAW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSRAW-mmxreg.mmxrm))

(setf (gethash "PSRAW-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRAW-xmmreg.imm))

(setf (gethash "PSRAW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSRAW-xmmreg.xmmrm))

(setf (gethash "PSRLD" *x64-instruction-variants-hash-table*) (list
PSRLD-mmxreg.mmxrm
PSRLD-mmxreg.imm
PSRLD-xmmreg.xmmrm
PSRLD-xmmreg.imm))

(setf (gethash "PSRLD-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLD-mmxreg.imm))

(setf (gethash "PSRLD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSRLD-mmxreg.mmxrm))

(setf (gethash "PSRLD-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLD-xmmreg.imm))

(setf (gethash "PSRLD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSRLD-xmmreg.xmmrm))

(setf (gethash "PSRLDQ" *x64-instruction-variants-hash-table*) (list
PSRLDQ-xmmreg.imm))

(setf (gethash "PSRLDQ-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLDQ-xmmreg.imm))

(setf (gethash "PSRLQ" *x64-instruction-variants-hash-table*) (list
PSRLQ-mmxreg.mmxrm
PSRLQ-mmxreg.imm
PSRLQ-xmmreg.xmmrm
PSRLQ-xmmreg.imm))

(setf (gethash "PSRLQ-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLQ-mmxreg.imm))

(setf (gethash "PSRLQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSRLQ-mmxreg.mmxrm))

(setf (gethash "PSRLQ-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLQ-xmmreg.imm))

(setf (gethash "PSRLQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSRLQ-xmmreg.xmmrm))

(setf (gethash "PSRLW" *x64-instruction-variants-hash-table*) (list
PSRLW-mmxreg.mmxrm
PSRLW-mmxreg.imm
PSRLW-xmmreg.xmmrm
PSRLW-xmmreg.imm))

(setf (gethash "PSRLW-mmxreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLW-mmxreg.imm))

(setf (gethash "PSRLW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSRLW-mmxreg.mmxrm))

(setf (gethash "PSRLW-xmmreg.imm" *x64-instruction-variants-hash-table*) (list
PSRLW-xmmreg.imm))

(setf (gethash "PSRLW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSRLW-xmmreg.xmmrm))

(setf (gethash "PSUBB" *x64-instruction-variants-hash-table*) (list
PSUBB-mmxreg.mmxrm
PSUBB-xmmreg.xmmrm))

(setf (gethash "PSUBB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBB-mmxreg.mmxrm))

(setf (gethash "PSUBB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBB-xmmreg.xmmrm))

(setf (gethash "PSUBD" *x64-instruction-variants-hash-table*) (list
PSUBD-mmxreg.mmxrm
PSUBD-xmmreg.xmmrm))

(setf (gethash "PSUBD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBD-mmxreg.mmxrm))

(setf (gethash "PSUBD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBD-xmmreg.xmmrm))

(setf (gethash "PSUBQ" *x64-instruction-variants-hash-table*) (list
PSUBQ-mmxreg.mmxrm
PSUBQ-xmmreg.xmmrm))

(setf (gethash "PSUBQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBQ-mmxreg.mmxrm))

(setf (gethash "PSUBQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBQ-xmmreg.xmmrm))

(setf (gethash "PSUBSB" *x64-instruction-variants-hash-table*) (list
PSUBSB-mmxreg.mmxrm
PSUBSB-xmmreg.xmmrm))

(setf (gethash "PSUBSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBSB-mmxreg.mmxrm))

(setf (gethash "PSUBSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBSB-xmmreg.xmmrm))

(setf (gethash "PSUBSIW" *x64-instruction-variants-hash-table*) (list
PSUBSIW-mmxreg.mmxrm))

(setf (gethash "PSUBSIW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBSIW-mmxreg.mmxrm))

(setf (gethash "PSUBSW" *x64-instruction-variants-hash-table*) (list
PSUBSW-mmxreg.mmxrm
PSUBSW-xmmreg.xmmrm))

(setf (gethash "PSUBSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBSW-mmxreg.mmxrm))

(setf (gethash "PSUBSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBSW-xmmreg.xmmrm))

(setf (gethash "PSUBUSB" *x64-instruction-variants-hash-table*) (list
PSUBUSB-mmxreg.mmxrm
PSUBUSB-xmmreg.xmmrm))

(setf (gethash "PSUBUSB-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBUSB-mmxreg.mmxrm))

(setf (gethash "PSUBUSB-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBUSB-xmmreg.xmmrm))

(setf (gethash "PSUBUSW" *x64-instruction-variants-hash-table*) (list
PSUBUSW-mmxreg.mmxrm
PSUBUSW-xmmreg.xmmrm))

(setf (gethash "PSUBUSW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBUSW-mmxreg.mmxrm))

(setf (gethash "PSUBUSW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBUSW-xmmreg.xmmrm))

(setf (gethash "PSUBW" *x64-instruction-variants-hash-table*) (list
PSUBW-mmxreg.mmxrm
PSUBW-xmmreg.xmmrm))

(setf (gethash "PSUBW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSUBW-mmxreg.mmxrm))

(setf (gethash "PSUBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PSUBW-xmmreg.xmmrm))

(setf (gethash "PSWAPD" *x64-instruction-variants-hash-table*) (list
PSWAPD-mmxreg.mmxrm))

(setf (gethash "PSWAPD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PSWAPD-mmxreg.mmxrm))

(setf (gethash "PTEST" *x64-instruction-variants-hash-table*) (list
PTEST-xmmreg.xmmrm))

(setf (gethash "PTEST-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PTEST-xmmreg.xmmrm))

(setf (gethash "PUNPCKHBW" *x64-instruction-variants-hash-table*) (list
PUNPCKHBW-mmxreg.mmxrm
PUNPCKHBW-xmmreg.xmmrm))

(setf (gethash "PUNPCKHBW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHBW-mmxreg.mmxrm))

(setf (gethash "PUNPCKHBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHBW-xmmreg.xmmrm))

(setf (gethash "PUNPCKHDQ" *x64-instruction-variants-hash-table*) (list
PUNPCKHDQ-mmxreg.mmxrm
PUNPCKHDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKHDQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHDQ-mmxreg.mmxrm))

(setf (gethash "PUNPCKHDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKHQDQ" *x64-instruction-variants-hash-table*) (list
PUNPCKHQDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKHQDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHQDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKHWD" *x64-instruction-variants-hash-table*) (list
PUNPCKHWD-mmxreg.mmxrm
PUNPCKHWD-xmmreg.xmmrm))

(setf (gethash "PUNPCKHWD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHWD-mmxreg.mmxrm))

(setf (gethash "PUNPCKHWD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKHWD-xmmreg.xmmrm))

(setf (gethash "PUNPCKLBW" *x64-instruction-variants-hash-table*) (list
PUNPCKLBW-mmxreg.mmxrm
PUNPCKLBW-xmmreg.xmmrm))

(setf (gethash "PUNPCKLBW-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLBW-mmxreg.mmxrm))

(setf (gethash "PUNPCKLBW-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLBW-xmmreg.xmmrm))

(setf (gethash "PUNPCKLDQ" *x64-instruction-variants-hash-table*) (list
PUNPCKLDQ-mmxreg.mmxrm
PUNPCKLDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKLDQ-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLDQ-mmxreg.mmxrm))

(setf (gethash "PUNPCKLDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKLQDQ" *x64-instruction-variants-hash-table*) (list
PUNPCKLQDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKLQDQ-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLQDQ-xmmreg.xmmrm))

(setf (gethash "PUNPCKLWD" *x64-instruction-variants-hash-table*) (list
PUNPCKLWD-mmxreg.mmxrm
PUNPCKLWD-xmmreg.xmmrm))

(setf (gethash "PUNPCKLWD-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLWD-mmxreg.mmxrm))

(setf (gethash "PUNPCKLWD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PUNPCKLWD-xmmreg.xmmrm))

(setf (gethash "PUSH" *x64-instruction-variants-hash-table*) (list
PUSH-reg16
PUSH-reg64
PUSH-rm16
PUSH-rm64
PUSH-reg_fs
PUSH-reg_gs
PUSH-imm8
PUSH-sbyteword16
PUSH-imm16
PUSH-sbytedword64
PUSH-imm64
PUSH-sbytedword32
PUSH-imm32))

(setf (gethash "PUSH-imm16" *x64-instruction-variants-hash-table*) (list
PUSH-imm16))

(setf (gethash "PUSH-imm32" *x64-instruction-variants-hash-table*) (list
PUSH-imm32))

(setf (gethash "PUSH-imm64" *x64-instruction-variants-hash-table*) (list
PUSH-imm64))

(setf (gethash "PUSH-imm8" *x64-instruction-variants-hash-table*) (list
PUSH-imm8))

(setf (gethash "PUSH-reg16" *x64-instruction-variants-hash-table*) (list
PUSH-reg16))

(setf (gethash "PUSH-reg64" *x64-instruction-variants-hash-table*) (list
PUSH-reg64))

(setf (gethash "PUSH-reg_fs" *x64-instruction-variants-hash-table*) (list
PUSH-reg_fs))

(setf (gethash "PUSH-reg_gs" *x64-instruction-variants-hash-table*) (list
PUSH-reg_gs))

(setf (gethash "PUSH-rm16" *x64-instruction-variants-hash-table*) (list
PUSH-rm16))

(setf (gethash "PUSH-rm64" *x64-instruction-variants-hash-table*) (list
PUSH-rm64))

(setf (gethash "PUSH-sbytedword32" *x64-instruction-variants-hash-table*) (list
PUSH-sbytedword32))

(setf (gethash "PUSH-sbytedword64" *x64-instruction-variants-hash-table*) (list
PUSH-sbytedword64))

(setf (gethash "PUSH-sbyteword16" *x64-instruction-variants-hash-table*) (list
PUSH-sbyteword16))

(setf (gethash "PUSHF" *x64-instruction-variants-hash-table*) (list
PUSHF-void))

(setf (gethash "PUSHF-void" *x64-instruction-variants-hash-table*) (list
PUSHF-void))

(setf (gethash "PUSHFQ" *x64-instruction-variants-hash-table*) (list
PUSHFQ-void))

(setf (gethash "PUSHFQ-void" *x64-instruction-variants-hash-table*) (list
PUSHFQ-void))

(setf (gethash "PUSHFW" *x64-instruction-variants-hash-table*) (list
PUSHFW-void))

(setf (gethash "PUSHFW-void" *x64-instruction-variants-hash-table*) (list
PUSHFW-void))

(setf (gethash "PXOR" *x64-instruction-variants-hash-table*) (list
PXOR-mmxreg.mmxrm
PXOR-xmmreg.xmmrm))

(setf (gethash "PXOR-mmxreg.mmxrm" *x64-instruction-variants-hash-table*) (list
PXOR-mmxreg.mmxrm))

(setf (gethash "PXOR-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
PXOR-xmmreg.xmmrm))

(setf (gethash "RCL" *x64-instruction-variants-hash-table*) (list
RCL-rm8.unity
RCL-rm8.reg_cl
RCL-rm8.imm8
RCL-rm16.unity
RCL-rm16.reg_cl
RCL-rm16.imm8
RCL-rm32.unity
RCL-rm32.reg_cl
RCL-rm32.imm8
RCL-rm64.unity
RCL-rm64.reg_cl
RCL-rm64.imm8))

(setf (gethash "RCL-rm16.imm8" *x64-instruction-variants-hash-table*) (list
RCL-rm16.imm8))

(setf (gethash "RCL-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
RCL-rm16.reg_cl))

(setf (gethash "RCL-rm16.unity" *x64-instruction-variants-hash-table*) (list
RCL-rm16.unity))

(setf (gethash "RCL-rm32.imm8" *x64-instruction-variants-hash-table*) (list
RCL-rm32.imm8))

(setf (gethash "RCL-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
RCL-rm32.reg_cl))

(setf (gethash "RCL-rm32.unity" *x64-instruction-variants-hash-table*) (list
RCL-rm32.unity))

(setf (gethash "RCL-rm64.imm8" *x64-instruction-variants-hash-table*) (list
RCL-rm64.imm8))

(setf (gethash "RCL-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
RCL-rm64.reg_cl))

(setf (gethash "RCL-rm64.unity" *x64-instruction-variants-hash-table*) (list
RCL-rm64.unity))

(setf (gethash "RCL-rm8.imm8" *x64-instruction-variants-hash-table*) (list
RCL-rm8.imm8))

(setf (gethash "RCL-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
RCL-rm8.reg_cl))

(setf (gethash "RCL-rm8.unity" *x64-instruction-variants-hash-table*) (list
RCL-rm8.unity))

(setf (gethash "RCPPS" *x64-instruction-variants-hash-table*) (list
RCPPS-xmmreg.xmmrm128))

(setf (gethash "RCPPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
RCPPS-xmmreg.xmmrm128))

(setf (gethash "RCPSS" *x64-instruction-variants-hash-table*) (list
RCPSS-xmmreg.xmmrm32))

(setf (gethash "RCPSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
RCPSS-xmmreg.xmmrm32))

(setf (gethash "RCR" *x64-instruction-variants-hash-table*) (list
RCR-rm8.unity
RCR-rm8.reg_cl
RCR-rm8.imm8
RCR-rm16.unity
RCR-rm16.reg_cl
RCR-rm16.imm8
RCR-rm32.unity
RCR-rm32.reg_cl
RCR-rm32.imm8
RCR-rm64.unity
RCR-rm64.reg_cl
RCR-rm64.imm8))

(setf (gethash "RCR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
RCR-rm16.imm8))

(setf (gethash "RCR-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
RCR-rm16.reg_cl))

(setf (gethash "RCR-rm16.unity" *x64-instruction-variants-hash-table*) (list
RCR-rm16.unity))

(setf (gethash "RCR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
RCR-rm32.imm8))

(setf (gethash "RCR-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
RCR-rm32.reg_cl))

(setf (gethash "RCR-rm32.unity" *x64-instruction-variants-hash-table*) (list
RCR-rm32.unity))

(setf (gethash "RCR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
RCR-rm64.imm8))

(setf (gethash "RCR-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
RCR-rm64.reg_cl))

(setf (gethash "RCR-rm64.unity" *x64-instruction-variants-hash-table*) (list
RCR-rm64.unity))

(setf (gethash "RCR-rm8.imm8" *x64-instruction-variants-hash-table*) (list
RCR-rm8.imm8))

(setf (gethash "RCR-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
RCR-rm8.reg_cl))

(setf (gethash "RCR-rm8.unity" *x64-instruction-variants-hash-table*) (list
RCR-rm8.unity))

(setf (gethash "RDFSBASE" *x64-instruction-variants-hash-table*) (list
RDFSBASE-reg32
RDFSBASE-reg64))

(setf (gethash "RDFSBASE-reg32" *x64-instruction-variants-hash-table*) (list
RDFSBASE-reg32))

(setf (gethash "RDFSBASE-reg64" *x64-instruction-variants-hash-table*) (list
RDFSBASE-reg64))

(setf (gethash "RDGSBASE" *x64-instruction-variants-hash-table*) (list
RDGSBASE-reg32
RDGSBASE-reg64))

(setf (gethash "RDGSBASE-reg32" *x64-instruction-variants-hash-table*) (list
RDGSBASE-reg32))

(setf (gethash "RDGSBASE-reg64" *x64-instruction-variants-hash-table*) (list
RDGSBASE-reg64))

(setf (gethash "RDM" *x64-instruction-variants-hash-table*) (list
RDM-void))

(setf (gethash "RDM-void" *x64-instruction-variants-hash-table*) (list
RDM-void))

(setf (gethash "RDMSR" *x64-instruction-variants-hash-table*) (list
RDMSR-void))

(setf (gethash "RDMSR-void" *x64-instruction-variants-hash-table*) (list
RDMSR-void))

(setf (gethash "RDPKRU" *x64-instruction-variants-hash-table*) (list
RDPKRU-void))

(setf (gethash "RDPKRU-void" *x64-instruction-variants-hash-table*) (list
RDPKRU-void))

(setf (gethash "RDPMC" *x64-instruction-variants-hash-table*) (list
RDPMC-void))

(setf (gethash "RDPMC-void" *x64-instruction-variants-hash-table*) (list
RDPMC-void))

(setf (gethash "RDRAND" *x64-instruction-variants-hash-table*) (list
RDRAND-reg16
RDRAND-reg32
RDRAND-reg64))

(setf (gethash "RDRAND-reg16" *x64-instruction-variants-hash-table*) (list
RDRAND-reg16))

(setf (gethash "RDRAND-reg32" *x64-instruction-variants-hash-table*) (list
RDRAND-reg32))

(setf (gethash "RDRAND-reg64" *x64-instruction-variants-hash-table*) (list
RDRAND-reg64))

(setf (gethash "RDSEED" *x64-instruction-variants-hash-table*) (list
RDSEED-reg16
RDSEED-reg32
RDSEED-reg64))

(setf (gethash "RDSEED-reg16" *x64-instruction-variants-hash-table*) (list
RDSEED-reg16))

(setf (gethash "RDSEED-reg32" *x64-instruction-variants-hash-table*) (list
RDSEED-reg32))

(setf (gethash "RDSEED-reg64" *x64-instruction-variants-hash-table*) (list
RDSEED-reg64))

(setf (gethash "RDSHR" *x64-instruction-variants-hash-table*) (list
RDSHR-rm32))

(setf (gethash "RDSHR-rm32" *x64-instruction-variants-hash-table*) (list
RDSHR-rm32))

(setf (gethash "RDTSC" *x64-instruction-variants-hash-table*) (list
RDTSC-void))

(setf (gethash "RDTSC-void" *x64-instruction-variants-hash-table*) (list
RDTSC-void))

(setf (gethash "RDTSCP" *x64-instruction-variants-hash-table*) (list
RDTSCP-void))

(setf (gethash "RDTSCP-void" *x64-instruction-variants-hash-table*) (list
RDTSCP-void))

(setf (gethash "RESB" *x64-instruction-variants-hash-table*) (list
RESB-imm))

(setf (gethash "RESB-imm" *x64-instruction-variants-hash-table*) (list
RESB-imm))

(setf (gethash "RESD" *x64-instruction-variants-hash-table*) (list
RESD-ignore))

(setf (gethash "RESD-ignore" *x64-instruction-variants-hash-table*) (list
RESD-ignore))

(setf (gethash "RESO" *x64-instruction-variants-hash-table*) (list
RESO-ignore))

(setf (gethash "RESO-ignore" *x64-instruction-variants-hash-table*) (list
RESO-ignore))

(setf (gethash "RESQ" *x64-instruction-variants-hash-table*) (list
RESQ-ignore))

(setf (gethash "RESQ-ignore" *x64-instruction-variants-hash-table*) (list
RESQ-ignore))

(setf (gethash "REST" *x64-instruction-variants-hash-table*) (list
REST-ignore))

(setf (gethash "REST-ignore" *x64-instruction-variants-hash-table*) (list
REST-ignore))

(setf (gethash "RESW" *x64-instruction-variants-hash-table*) (list
RESW-ignore))

(setf (gethash "RESW-ignore" *x64-instruction-variants-hash-table*) (list
RESW-ignore))

(setf (gethash "RESY" *x64-instruction-variants-hash-table*) (list
RESY-ignore))

(setf (gethash "RESY-ignore" *x64-instruction-variants-hash-table*) (list
RESY-ignore))

(setf (gethash "RESZ" *x64-instruction-variants-hash-table*) (list
RESZ-ignore))

(setf (gethash "RESZ-ignore" *x64-instruction-variants-hash-table*) (list
RESZ-ignore))

(setf (gethash "RET" *x64-instruction-variants-hash-table*) (list
RET-void
RET-imm))

(setf (gethash "RET-imm" *x64-instruction-variants-hash-table*) (list
RET-imm))

(setf (gethash "RET-void" *x64-instruction-variants-hash-table*) (list
RET-void))

(setf (gethash "RETF" *x64-instruction-variants-hash-table*) (list
RETF-void
RETF-imm))

(setf (gethash "RETF-imm" *x64-instruction-variants-hash-table*) (list
RETF-imm))

(setf (gethash "RETF-void" *x64-instruction-variants-hash-table*) (list
RETF-void))

(setf (gethash "RETN" *x64-instruction-variants-hash-table*) (list
RETN-void
RETN-imm))

(setf (gethash "RETN-imm" *x64-instruction-variants-hash-table*) (list
RETN-imm))

(setf (gethash "RETN-void" *x64-instruction-variants-hash-table*) (list
RETN-void))

(setf (gethash "ROL" *x64-instruction-variants-hash-table*) (list
ROL-rm8.unity
ROL-rm8.reg_cl
ROL-rm8.imm8
ROL-rm16.unity
ROL-rm16.reg_cl
ROL-rm16.imm8
ROL-rm32.unity
ROL-rm32.reg_cl
ROL-rm32.imm8
ROL-rm64.unity
ROL-rm64.reg_cl
ROL-rm64.imm8))

(setf (gethash "ROL-rm16.imm8" *x64-instruction-variants-hash-table*) (list
ROL-rm16.imm8))

(setf (gethash "ROL-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
ROL-rm16.reg_cl))

(setf (gethash "ROL-rm16.unity" *x64-instruction-variants-hash-table*) (list
ROL-rm16.unity))

(setf (gethash "ROL-rm32.imm8" *x64-instruction-variants-hash-table*) (list
ROL-rm32.imm8))

(setf (gethash "ROL-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
ROL-rm32.reg_cl))

(setf (gethash "ROL-rm32.unity" *x64-instruction-variants-hash-table*) (list
ROL-rm32.unity))

(setf (gethash "ROL-rm64.imm8" *x64-instruction-variants-hash-table*) (list
ROL-rm64.imm8))

(setf (gethash "ROL-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
ROL-rm64.reg_cl))

(setf (gethash "ROL-rm64.unity" *x64-instruction-variants-hash-table*) (list
ROL-rm64.unity))

(setf (gethash "ROL-rm8.imm8" *x64-instruction-variants-hash-table*) (list
ROL-rm8.imm8))

(setf (gethash "ROL-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
ROL-rm8.reg_cl))

(setf (gethash "ROL-rm8.unity" *x64-instruction-variants-hash-table*) (list
ROL-rm8.unity))

(setf (gethash "ROR" *x64-instruction-variants-hash-table*) (list
ROR-rm8.unity
ROR-rm8.reg_cl
ROR-rm8.imm8
ROR-rm16.unity
ROR-rm16.reg_cl
ROR-rm16.imm8
ROR-rm32.unity
ROR-rm32.reg_cl
ROR-rm32.imm8
ROR-rm64.unity
ROR-rm64.reg_cl
ROR-rm64.imm8))

(setf (gethash "ROR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
ROR-rm16.imm8))

(setf (gethash "ROR-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
ROR-rm16.reg_cl))

(setf (gethash "ROR-rm16.unity" *x64-instruction-variants-hash-table*) (list
ROR-rm16.unity))

(setf (gethash "ROR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
ROR-rm32.imm8))

(setf (gethash "ROR-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
ROR-rm32.reg_cl))

(setf (gethash "ROR-rm32.unity" *x64-instruction-variants-hash-table*) (list
ROR-rm32.unity))

(setf (gethash "ROR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
ROR-rm64.imm8))

(setf (gethash "ROR-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
ROR-rm64.reg_cl))

(setf (gethash "ROR-rm64.unity" *x64-instruction-variants-hash-table*) (list
ROR-rm64.unity))

(setf (gethash "ROR-rm8.imm8" *x64-instruction-variants-hash-table*) (list
ROR-rm8.imm8))

(setf (gethash "ROR-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
ROR-rm8.reg_cl))

(setf (gethash "ROR-rm8.unity" *x64-instruction-variants-hash-table*) (list
ROR-rm8.unity))

(setf (gethash "RORX" *x64-instruction-variants-hash-table*) (list
RORX-reg32.rm32.imm8
RORX-reg64.rm64.imm8))

(setf (gethash "RORX-reg32.rm32.imm8" *x64-instruction-variants-hash-table*) (list
RORX-reg32.rm32.imm8))

(setf (gethash "RORX-reg64.rm64.imm8" *x64-instruction-variants-hash-table*) (list
RORX-reg64.rm64.imm8))

(setf (gethash "ROUNDPD" *x64-instruction-variants-hash-table*) (list
ROUNDPD-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDPD-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
ROUNDPD-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDPS" *x64-instruction-variants-hash-table*) (list
ROUNDPS-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDPS-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
ROUNDPS-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDSD" *x64-instruction-variants-hash-table*) (list
ROUNDSD-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDSD-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
ROUNDSD-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDSS" *x64-instruction-variants-hash-table*) (list
ROUNDSS-xmmreg.xmmrm.imm))

(setf (gethash "ROUNDSS-xmmreg.xmmrm.imm" *x64-instruction-variants-hash-table*) (list
ROUNDSS-xmmreg.xmmrm.imm))

(setf (gethash "RSDC" *x64-instruction-variants-hash-table*) (list
RSDC-reg_sreg.mem80))

(setf (gethash "RSDC-reg_sreg.mem80" *x64-instruction-variants-hash-table*) (list
RSDC-reg_sreg.mem80))

(setf (gethash "RSLDT" *x64-instruction-variants-hash-table*) (list
RSLDT-mem80))

(setf (gethash "RSLDT-mem80" *x64-instruction-variants-hash-table*) (list
RSLDT-mem80))

(setf (gethash "RSM" *x64-instruction-variants-hash-table*) (list
RSM-void))

(setf (gethash "RSM-void" *x64-instruction-variants-hash-table*) (list
RSM-void))

(setf (gethash "RSQRTPS" *x64-instruction-variants-hash-table*) (list
RSQRTPS-xmmreg.xmmrm128))

(setf (gethash "RSQRTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
RSQRTPS-xmmreg.xmmrm128))

(setf (gethash "RSQRTSS" *x64-instruction-variants-hash-table*) (list
RSQRTSS-xmmreg.xmmrm32))

(setf (gethash "RSQRTSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
RSQRTSS-xmmreg.xmmrm32))

(setf (gethash "RSTS" *x64-instruction-variants-hash-table*) (list
RSTS-mem80))

(setf (gethash "RSTS-mem80" *x64-instruction-variants-hash-table*) (list
RSTS-mem80))

(setf (gethash "SAHF" *x64-instruction-variants-hash-table*) (list
SAHF-void))

(setf (gethash "SAHF-void" *x64-instruction-variants-hash-table*) (list
SAHF-void))

(setf (gethash "SAL" *x64-instruction-variants-hash-table*) (list
SAL-rm8.unity
SAL-rm8.reg_cl
SAL-rm8.imm8
SAL-rm16.unity
SAL-rm16.reg_cl
SAL-rm16.imm8
SAL-rm32.unity
SAL-rm32.reg_cl
SAL-rm32.imm8
SAL-rm64.unity
SAL-rm64.reg_cl
SAL-rm64.imm8))

(setf (gethash "SAL-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SAL-rm16.imm8))

(setf (gethash "SAL-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
SAL-rm16.reg_cl))

(setf (gethash "SAL-rm16.unity" *x64-instruction-variants-hash-table*) (list
SAL-rm16.unity))

(setf (gethash "SAL-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SAL-rm32.imm8))

(setf (gethash "SAL-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
SAL-rm32.reg_cl))

(setf (gethash "SAL-rm32.unity" *x64-instruction-variants-hash-table*) (list
SAL-rm32.unity))

(setf (gethash "SAL-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SAL-rm64.imm8))

(setf (gethash "SAL-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
SAL-rm64.reg_cl))

(setf (gethash "SAL-rm64.unity" *x64-instruction-variants-hash-table*) (list
SAL-rm64.unity))

(setf (gethash "SAL-rm8.imm8" *x64-instruction-variants-hash-table*) (list
SAL-rm8.imm8))

(setf (gethash "SAL-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
SAL-rm8.reg_cl))

(setf (gethash "SAL-rm8.unity" *x64-instruction-variants-hash-table*) (list
SAL-rm8.unity))

(setf (gethash "SALC" *x64-instruction-variants-hash-table*) (list
SALC-void))

(setf (gethash "SALC-void" *x64-instruction-variants-hash-table*) (list
SALC-void))

(setf (gethash "SAR" *x64-instruction-variants-hash-table*) (list
SAR-rm8.unity
SAR-rm8.reg_cl
SAR-rm8.imm8
SAR-rm16.unity
SAR-rm16.reg_cl
SAR-rm16.imm8
SAR-rm32.unity
SAR-rm32.reg_cl
SAR-rm32.imm8
SAR-rm64.unity
SAR-rm64.reg_cl
SAR-rm64.imm8))

(setf (gethash "SAR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SAR-rm16.imm8))

(setf (gethash "SAR-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
SAR-rm16.reg_cl))

(setf (gethash "SAR-rm16.unity" *x64-instruction-variants-hash-table*) (list
SAR-rm16.unity))

(setf (gethash "SAR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SAR-rm32.imm8))

(setf (gethash "SAR-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
SAR-rm32.reg_cl))

(setf (gethash "SAR-rm32.unity" *x64-instruction-variants-hash-table*) (list
SAR-rm32.unity))

(setf (gethash "SAR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SAR-rm64.imm8))

(setf (gethash "SAR-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
SAR-rm64.reg_cl))

(setf (gethash "SAR-rm64.unity" *x64-instruction-variants-hash-table*) (list
SAR-rm64.unity))

(setf (gethash "SAR-rm8.imm8" *x64-instruction-variants-hash-table*) (list
SAR-rm8.imm8))

(setf (gethash "SAR-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
SAR-rm8.reg_cl))

(setf (gethash "SAR-rm8.unity" *x64-instruction-variants-hash-table*) (list
SAR-rm8.unity))

(setf (gethash "SARX" *x64-instruction-variants-hash-table*) (list
SARX-reg32.rm32.reg32
SARX-reg64.rm64.reg64))

(setf (gethash "SARX-reg32.rm32.reg32" *x64-instruction-variants-hash-table*) (list
SARX-reg32.rm32.reg32))

(setf (gethash "SARX-reg64.rm64.reg64" *x64-instruction-variants-hash-table*) (list
SARX-reg64.rm64.reg64))

(setf (gethash "SBB" *x64-instruction-variants-hash-table*) (list
SBB-mem.reg8
SBB-reg8.reg8-mr
SBB-mem.reg16
SBB-reg16.reg16-mr
SBB-mem.reg32
SBB-reg32.reg32-mr
SBB-mem.reg64
SBB-reg64.reg64-mr
SBB-reg8.mem
SBB-reg8.reg8-rm
SBB-reg16.mem
SBB-reg16.reg16-rm
SBB-reg32.mem
SBB-reg32.reg32-rm
SBB-reg64.mem
SBB-reg64.reg64-rm
SBB-rm16.imm8
SBB-rm32.imm8
SBB-rm64.imm8
SBB-reg_al.imm
SBB-reg_ax.sbyteword
SBB-reg_ax.imm
SBB-reg_eax.sbytedword
SBB-reg_eax.imm
SBB-reg_rax.sbytedword
SBB-reg_rax.imm
SBB-rm8.imm
SBB-rm16.sbyteword
SBB-rm16.imm
SBB-rm32.sbytedword
SBB-rm32.imm
SBB-rm64.sbytedword
SBB-rm64.imm
SBB-mem.imm8
SBB-mem.sbyteword16
SBB-mem.imm16
SBB-mem.sbytedword32
SBB-mem.imm32))

(setf (gethash "SBB-mem.imm16" *x64-instruction-variants-hash-table*) (list
SBB-mem.imm16))

(setf (gethash "SBB-mem.imm32" *x64-instruction-variants-hash-table*) (list
SBB-mem.imm32))

(setf (gethash "SBB-mem.imm8" *x64-instruction-variants-hash-table*) (list
SBB-mem.imm8))

(setf (gethash "SBB-mem.reg16" *x64-instruction-variants-hash-table*) (list
SBB-mem.reg16))

(setf (gethash "SBB-mem.reg32" *x64-instruction-variants-hash-table*) (list
SBB-mem.reg32))

(setf (gethash "SBB-mem.reg64" *x64-instruction-variants-hash-table*) (list
SBB-mem.reg64))

(setf (gethash "SBB-mem.reg8" *x64-instruction-variants-hash-table*) (list
SBB-mem.reg8))

(setf (gethash "SBB-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
SBB-mem.sbytedword32))

(setf (gethash "SBB-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
SBB-mem.sbyteword16))

(setf (gethash "SBB-reg16.mem" *x64-instruction-variants-hash-table*) (list
SBB-reg16.mem))

(setf (gethash "SBB-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
SBB-reg16.reg16-mr))

(setf (gethash "SBB-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
SBB-reg16.reg16-rm))

(setf (gethash "SBB-reg32.mem" *x64-instruction-variants-hash-table*) (list
SBB-reg32.mem))

(setf (gethash "SBB-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
SBB-reg32.reg32-mr))

(setf (gethash "SBB-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
SBB-reg32.reg32-rm))

(setf (gethash "SBB-reg64.mem" *x64-instruction-variants-hash-table*) (list
SBB-reg64.mem))

(setf (gethash "SBB-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
SBB-reg64.reg64-mr))

(setf (gethash "SBB-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
SBB-reg64.reg64-rm))

(setf (gethash "SBB-reg8.mem" *x64-instruction-variants-hash-table*) (list
SBB-reg8.mem))

(setf (gethash "SBB-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
SBB-reg8.reg8-mr))

(setf (gethash "SBB-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
SBB-reg8.reg8-rm))

(setf (gethash "SBB-reg_al.imm" *x64-instruction-variants-hash-table*) (list
SBB-reg_al.imm))

(setf (gethash "SBB-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
SBB-reg_ax.imm))

(setf (gethash "SBB-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
SBB-reg_ax.sbyteword))

(setf (gethash "SBB-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
SBB-reg_eax.imm))

(setf (gethash "SBB-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
SBB-reg_eax.sbytedword))

(setf (gethash "SBB-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
SBB-reg_rax.imm))

(setf (gethash "SBB-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
SBB-reg_rax.sbytedword))

(setf (gethash "SBB-rm16.imm" *x64-instruction-variants-hash-table*) (list
SBB-rm16.imm))

(setf (gethash "SBB-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SBB-rm16.imm8))

(setf (gethash "SBB-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
SBB-rm16.sbyteword))

(setf (gethash "SBB-rm32.imm" *x64-instruction-variants-hash-table*) (list
SBB-rm32.imm))

(setf (gethash "SBB-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SBB-rm32.imm8))

(setf (gethash "SBB-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
SBB-rm32.sbytedword))

(setf (gethash "SBB-rm64.imm" *x64-instruction-variants-hash-table*) (list
SBB-rm64.imm))

(setf (gethash "SBB-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SBB-rm64.imm8))

(setf (gethash "SBB-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
SBB-rm64.sbytedword))

(setf (gethash "SBB-rm8.imm" *x64-instruction-variants-hash-table*) (list
SBB-rm8.imm))

(setf (gethash "SCASB" *x64-instruction-variants-hash-table*) (list
SCASB-void))

(setf (gethash "SCASB-void" *x64-instruction-variants-hash-table*) (list
SCASB-void))

(setf (gethash "SCASD" *x64-instruction-variants-hash-table*) (list
SCASD-void))

(setf (gethash "SCASD-void" *x64-instruction-variants-hash-table*) (list
SCASD-void))

(setf (gethash "SCASQ" *x64-instruction-variants-hash-table*) (list
SCASQ-void))

(setf (gethash "SCASQ-void" *x64-instruction-variants-hash-table*) (list
SCASQ-void))

(setf (gethash "SCASW" *x64-instruction-variants-hash-table*) (list
SCASW-void))

(setf (gethash "SCASW-void" *x64-instruction-variants-hash-table*) (list
SCASW-void))

(setf (gethash "SETcc" *x64-instruction-variants-hash-table*) (list
SETcc-mem
SETcc-reg8))

(setf (gethash "SETcc-mem" *x64-instruction-variants-hash-table*) (list
SETcc-mem))

(setf (gethash "SETcc-reg8" *x64-instruction-variants-hash-table*) (list
SETcc-reg8))

(setf (gethash "SFENCE" *x64-instruction-variants-hash-table*) (list
SFENCE-void
SFENCE-void))

(setf (gethash "SFENCE-void" *x64-instruction-variants-hash-table*) (list
SFENCE-void
SFENCE-void))

(setf (gethash "SGDT" *x64-instruction-variants-hash-table*) (list
SGDT-mem))

(setf (gethash "SGDT-mem" *x64-instruction-variants-hash-table*) (list
SGDT-mem))

(setf (gethash "SHA1MSG1" *x64-instruction-variants-hash-table*) (list
SHA1MSG1-xmmreg.xmmrm128))

(setf (gethash "SHA1MSG1-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SHA1MSG1-xmmreg.xmmrm128))

(setf (gethash "SHA1MSG2" *x64-instruction-variants-hash-table*) (list
SHA1MSG2-xmmreg.xmmrm128))

(setf (gethash "SHA1MSG2-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SHA1MSG2-xmmreg.xmmrm128))

(setf (gethash "SHA1NEXTE" *x64-instruction-variants-hash-table*) (list
SHA1NEXTE-xmmreg.xmmrm128))

(setf (gethash "SHA1NEXTE-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SHA1NEXTE-xmmreg.xmmrm128))

(setf (gethash "SHA1RNDS4" *x64-instruction-variants-hash-table*) (list
SHA1RNDS4-xmmreg.xmmrm128.imm8))

(setf (gethash "SHA1RNDS4-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
SHA1RNDS4-xmmreg.xmmrm128.imm8))

(setf (gethash "SHA256MSG1" *x64-instruction-variants-hash-table*) (list
SHA256MSG1-xmmreg.xmmrm128))

(setf (gethash "SHA256MSG1-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SHA256MSG1-xmmreg.xmmrm128))

(setf (gethash "SHA256MSG2" *x64-instruction-variants-hash-table*) (list
SHA256MSG2-xmmreg.xmmrm128))

(setf (gethash "SHA256MSG2-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SHA256MSG2-xmmreg.xmmrm128))

(setf (gethash "SHA256RNDS2" *x64-instruction-variants-hash-table*) (list
SHA256RNDS2-xmmreg.xmmrm128.xmm0))

(setf (gethash "SHA256RNDS2-xmmreg.xmmrm128.xmm0" *x64-instruction-variants-hash-table*) (list
SHA256RNDS2-xmmreg.xmmrm128.xmm0))

(setf (gethash "SHL" *x64-instruction-variants-hash-table*) (list
SHL-rm8.unity
SHL-rm8.reg_cl
SHL-rm8.imm8
SHL-rm16.unity
SHL-rm16.reg_cl
SHL-rm16.imm8
SHL-rm32.unity
SHL-rm32.reg_cl
SHL-rm32.imm8
SHL-rm64.unity
SHL-rm64.reg_cl
SHL-rm64.imm8))

(setf (gethash "SHL-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SHL-rm16.imm8))

(setf (gethash "SHL-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
SHL-rm16.reg_cl))

(setf (gethash "SHL-rm16.unity" *x64-instruction-variants-hash-table*) (list
SHL-rm16.unity))

(setf (gethash "SHL-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SHL-rm32.imm8))

(setf (gethash "SHL-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
SHL-rm32.reg_cl))

(setf (gethash "SHL-rm32.unity" *x64-instruction-variants-hash-table*) (list
SHL-rm32.unity))

(setf (gethash "SHL-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SHL-rm64.imm8))

(setf (gethash "SHL-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
SHL-rm64.reg_cl))

(setf (gethash "SHL-rm64.unity" *x64-instruction-variants-hash-table*) (list
SHL-rm64.unity))

(setf (gethash "SHL-rm8.imm8" *x64-instruction-variants-hash-table*) (list
SHL-rm8.imm8))

(setf (gethash "SHL-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
SHL-rm8.reg_cl))

(setf (gethash "SHL-rm8.unity" *x64-instruction-variants-hash-table*) (list
SHL-rm8.unity))

(setf (gethash "SHLD" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg16.imm
SHLD-reg16.reg16.imm-mr
SHLD-mem.reg32.imm
SHLD-reg32.reg32.imm-mr
SHLD-mem.reg64.imm
SHLD-reg64.reg64.imm-mr
SHLD-mem.reg16.reg_cl
SHLD-reg16.reg16.reg_cl-mr
SHLD-mem.reg32.reg_cl
SHLD-reg32.reg32.reg_cl-mr
SHLD-mem.reg64.reg_cl
SHLD-reg64.reg64.reg_cl-mr))

(setf (gethash "SHLD-mem.reg16.imm" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg16.imm))

(setf (gethash "SHLD-mem.reg16.reg_cl" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg16.reg_cl))

(setf (gethash "SHLD-mem.reg32.imm" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg32.imm))

(setf (gethash "SHLD-mem.reg32.reg_cl" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg32.reg_cl))

(setf (gethash "SHLD-mem.reg64.imm" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg64.imm))

(setf (gethash "SHLD-mem.reg64.reg_cl" *x64-instruction-variants-hash-table*) (list
SHLD-mem.reg64.reg_cl))

(setf (gethash "SHLD-reg16.reg16.imm-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg16.reg16.imm-mr))

(setf (gethash "SHLD-reg16.reg16.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg16.reg16.reg_cl-mr))

(setf (gethash "SHLD-reg32.reg32.imm-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg32.reg32.imm-mr))

(setf (gethash "SHLD-reg32.reg32.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg32.reg32.reg_cl-mr))

(setf (gethash "SHLD-reg64.reg64.imm-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg64.reg64.imm-mr))

(setf (gethash "SHLD-reg64.reg64.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHLD-reg64.reg64.reg_cl-mr))

(setf (gethash "SHLX" *x64-instruction-variants-hash-table*) (list
SHLX-reg32.rm32.reg32
SHLX-reg64.rm64.reg64))

(setf (gethash "SHLX-reg32.rm32.reg32" *x64-instruction-variants-hash-table*) (list
SHLX-reg32.rm32.reg32))

(setf (gethash "SHLX-reg64.rm64.reg64" *x64-instruction-variants-hash-table*) (list
SHLX-reg64.rm64.reg64))

(setf (gethash "SHR" *x64-instruction-variants-hash-table*) (list
SHR-rm8.unity
SHR-rm8.reg_cl
SHR-rm8.imm8
SHR-rm16.unity
SHR-rm16.reg_cl
SHR-rm16.imm8
SHR-rm32.unity
SHR-rm32.reg_cl
SHR-rm32.imm8
SHR-rm64.unity
SHR-rm64.reg_cl
SHR-rm64.imm8))

(setf (gethash "SHR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SHR-rm16.imm8))

(setf (gethash "SHR-rm16.reg_cl" *x64-instruction-variants-hash-table*) (list
SHR-rm16.reg_cl))

(setf (gethash "SHR-rm16.unity" *x64-instruction-variants-hash-table*) (list
SHR-rm16.unity))

(setf (gethash "SHR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SHR-rm32.imm8))

(setf (gethash "SHR-rm32.reg_cl" *x64-instruction-variants-hash-table*) (list
SHR-rm32.reg_cl))

(setf (gethash "SHR-rm32.unity" *x64-instruction-variants-hash-table*) (list
SHR-rm32.unity))

(setf (gethash "SHR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SHR-rm64.imm8))

(setf (gethash "SHR-rm64.reg_cl" *x64-instruction-variants-hash-table*) (list
SHR-rm64.reg_cl))

(setf (gethash "SHR-rm64.unity" *x64-instruction-variants-hash-table*) (list
SHR-rm64.unity))

(setf (gethash "SHR-rm8.imm8" *x64-instruction-variants-hash-table*) (list
SHR-rm8.imm8))

(setf (gethash "SHR-rm8.reg_cl" *x64-instruction-variants-hash-table*) (list
SHR-rm8.reg_cl))

(setf (gethash "SHR-rm8.unity" *x64-instruction-variants-hash-table*) (list
SHR-rm8.unity))

(setf (gethash "SHRD" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg16.imm
SHRD-reg16.reg16.imm-mr
SHRD-mem.reg32.imm
SHRD-reg32.reg32.imm-mr
SHRD-mem.reg64.imm
SHRD-reg64.reg64.imm-mr
SHRD-mem.reg16.reg_cl
SHRD-reg16.reg16.reg_cl-mr
SHRD-mem.reg32.reg_cl
SHRD-reg32.reg32.reg_cl-mr
SHRD-mem.reg64.reg_cl
SHRD-reg64.reg64.reg_cl-mr))

(setf (gethash "SHRD-mem.reg16.imm" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg16.imm))

(setf (gethash "SHRD-mem.reg16.reg_cl" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg16.reg_cl))

(setf (gethash "SHRD-mem.reg32.imm" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg32.imm))

(setf (gethash "SHRD-mem.reg32.reg_cl" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg32.reg_cl))

(setf (gethash "SHRD-mem.reg64.imm" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg64.imm))

(setf (gethash "SHRD-mem.reg64.reg_cl" *x64-instruction-variants-hash-table*) (list
SHRD-mem.reg64.reg_cl))

(setf (gethash "SHRD-reg16.reg16.imm-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg16.reg16.imm-mr))

(setf (gethash "SHRD-reg16.reg16.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg16.reg16.reg_cl-mr))

(setf (gethash "SHRD-reg32.reg32.imm-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg32.reg32.imm-mr))

(setf (gethash "SHRD-reg32.reg32.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg32.reg32.reg_cl-mr))

(setf (gethash "SHRD-reg64.reg64.imm-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg64.reg64.imm-mr))

(setf (gethash "SHRD-reg64.reg64.reg_cl-mr" *x64-instruction-variants-hash-table*) (list
SHRD-reg64.reg64.reg_cl-mr))

(setf (gethash "SHRX" *x64-instruction-variants-hash-table*) (list
SHRX-reg32.rm32.reg32
SHRX-reg64.rm64.reg64))

(setf (gethash "SHRX-reg32.rm32.reg32" *x64-instruction-variants-hash-table*) (list
SHRX-reg32.rm32.reg32))

(setf (gethash "SHRX-reg64.rm64.reg64" *x64-instruction-variants-hash-table*) (list
SHRX-reg64.rm64.reg64))

(setf (gethash "SHUFPD" *x64-instruction-variants-hash-table*) (list
SHUFPD-xmmreg.xmmreg.imm
SHUFPD-xmmreg.mem.imm))

(setf (gethash "SHUFPD-xmmreg.mem.imm" *x64-instruction-variants-hash-table*) (list
SHUFPD-xmmreg.mem.imm))

(setf (gethash "SHUFPD-xmmreg.xmmreg.imm" *x64-instruction-variants-hash-table*) (list
SHUFPD-xmmreg.xmmreg.imm))

(setf (gethash "SHUFPS" *x64-instruction-variants-hash-table*) (list
SHUFPS-xmmreg.xmmrm128.imm8))

(setf (gethash "SHUFPS-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
SHUFPS-xmmreg.xmmrm128.imm8))

(setf (gethash "SIDT" *x64-instruction-variants-hash-table*) (list
SIDT-mem))

(setf (gethash "SIDT-mem" *x64-instruction-variants-hash-table*) (list
SIDT-mem))

(setf (gethash "SKINIT" *x64-instruction-variants-hash-table*) (list
SKINIT-void))

(setf (gethash "SKINIT-void" *x64-instruction-variants-hash-table*) (list
SKINIT-void))

(setf (gethash "SLDT" *x64-instruction-variants-hash-table*) (list
SLDT-mem
SLDT-mem16
SLDT-reg16
SLDT-reg32
SLDT-reg64
SLDT-reg64))

(setf (gethash "SLDT-mem" *x64-instruction-variants-hash-table*) (list
SLDT-mem))

(setf (gethash "SLDT-mem16" *x64-instruction-variants-hash-table*) (list
SLDT-mem16))

(setf (gethash "SLDT-reg16" *x64-instruction-variants-hash-table*) (list
SLDT-reg16))

(setf (gethash "SLDT-reg32" *x64-instruction-variants-hash-table*) (list
SLDT-reg32))

(setf (gethash "SLDT-reg64" *x64-instruction-variants-hash-table*) (list
SLDT-reg64
SLDT-reg64))

(setf (gethash "SLWPCB" *x64-instruction-variants-hash-table*) (list
SLWPCB-reg32
SLWPCB-reg64))

(setf (gethash "SLWPCB-reg32" *x64-instruction-variants-hash-table*) (list
SLWPCB-reg32))

(setf (gethash "SLWPCB-reg64" *x64-instruction-variants-hash-table*) (list
SLWPCB-reg64))

(setf (gethash "SMI" *x64-instruction-variants-hash-table*) (list
SMI-void))

(setf (gethash "SMI-void" *x64-instruction-variants-hash-table*) (list
SMI-void))

(setf (gethash "SMINT" *x64-instruction-variants-hash-table*) (list
SMINT-void))

(setf (gethash "SMINT-void" *x64-instruction-variants-hash-table*) (list
SMINT-void))

(setf (gethash "SMINTOLD" *x64-instruction-variants-hash-table*) (list
SMINTOLD-void))

(setf (gethash "SMINTOLD-void" *x64-instruction-variants-hash-table*) (list
SMINTOLD-void))

(setf (gethash "SMSW" *x64-instruction-variants-hash-table*) (list
SMSW-mem
SMSW-mem16
SMSW-reg16
SMSW-reg32
SMSW-reg64))

(setf (gethash "SMSW-mem" *x64-instruction-variants-hash-table*) (list
SMSW-mem))

(setf (gethash "SMSW-mem16" *x64-instruction-variants-hash-table*) (list
SMSW-mem16))

(setf (gethash "SMSW-reg16" *x64-instruction-variants-hash-table*) (list
SMSW-reg16))

(setf (gethash "SMSW-reg32" *x64-instruction-variants-hash-table*) (list
SMSW-reg32))

(setf (gethash "SMSW-reg64" *x64-instruction-variants-hash-table*) (list
SMSW-reg64))

(setf (gethash "SQRTPD" *x64-instruction-variants-hash-table*) (list
SQRTPD-xmmreg.xmmrm))

(setf (gethash "SQRTPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
SQRTPD-xmmreg.xmmrm))

(setf (gethash "SQRTPS" *x64-instruction-variants-hash-table*) (list
SQRTPS-xmmreg.xmmrm128))

(setf (gethash "SQRTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SQRTPS-xmmreg.xmmrm128))

(setf (gethash "SQRTSD" *x64-instruction-variants-hash-table*) (list
SQRTSD-xmmreg.xmmrm))

(setf (gethash "SQRTSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
SQRTSD-xmmreg.xmmrm))

(setf (gethash "SQRTSS" *x64-instruction-variants-hash-table*) (list
SQRTSS-xmmreg.xmmrm32))

(setf (gethash "SQRTSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
SQRTSS-xmmreg.xmmrm32))

(setf (gethash "STAC" *x64-instruction-variants-hash-table*) (list
STAC-void))

(setf (gethash "STAC-void" *x64-instruction-variants-hash-table*) (list
STAC-void))

(setf (gethash "STC" *x64-instruction-variants-hash-table*) (list
STC-void))

(setf (gethash "STC-void" *x64-instruction-variants-hash-table*) (list
STC-void))

(setf (gethash "STD" *x64-instruction-variants-hash-table*) (list
STD-void))

(setf (gethash "STD-void" *x64-instruction-variants-hash-table*) (list
STD-void))

(setf (gethash "STGI" *x64-instruction-variants-hash-table*) (list
STGI-void))

(setf (gethash "STGI-void" *x64-instruction-variants-hash-table*) (list
STGI-void))

(setf (gethash "STI" *x64-instruction-variants-hash-table*) (list
STI-void))

(setf (gethash "STI-void" *x64-instruction-variants-hash-table*) (list
STI-void))

(setf (gethash "STMXCSR" *x64-instruction-variants-hash-table*) (list
STMXCSR-mem32))

(setf (gethash "STMXCSR-mem32" *x64-instruction-variants-hash-table*) (list
STMXCSR-mem32))

(setf (gethash "STOSB" *x64-instruction-variants-hash-table*) (list
STOSB-void))

(setf (gethash "STOSB-void" *x64-instruction-variants-hash-table*) (list
STOSB-void))

(setf (gethash "STOSD" *x64-instruction-variants-hash-table*) (list
STOSD-void))

(setf (gethash "STOSD-void" *x64-instruction-variants-hash-table*) (list
STOSD-void))

(setf (gethash "STOSQ" *x64-instruction-variants-hash-table*) (list
STOSQ-void))

(setf (gethash "STOSQ-void" *x64-instruction-variants-hash-table*) (list
STOSQ-void))

(setf (gethash "STOSW" *x64-instruction-variants-hash-table*) (list
STOSW-void))

(setf (gethash "STOSW-void" *x64-instruction-variants-hash-table*) (list
STOSW-void))

(setf (gethash "STR" *x64-instruction-variants-hash-table*) (list
STR-mem
STR-mem16
STR-reg16
STR-reg32
STR-reg64))

(setf (gethash "STR-mem" *x64-instruction-variants-hash-table*) (list
STR-mem))

(setf (gethash "STR-mem16" *x64-instruction-variants-hash-table*) (list
STR-mem16))

(setf (gethash "STR-reg16" *x64-instruction-variants-hash-table*) (list
STR-reg16))

(setf (gethash "STR-reg32" *x64-instruction-variants-hash-table*) (list
STR-reg32))

(setf (gethash "STR-reg64" *x64-instruction-variants-hash-table*) (list
STR-reg64))

(setf (gethash "SUB" *x64-instruction-variants-hash-table*) (list
SUB-mem.reg8
SUB-reg8.reg8-mr
SUB-mem.reg16
SUB-reg16.reg16-mr
SUB-mem.reg32
SUB-reg32.reg32-mr
SUB-mem.reg64
SUB-reg64.reg64-mr
SUB-reg8.mem
SUB-reg8.reg8-rm
SUB-reg16.mem
SUB-reg16.reg16-rm
SUB-reg32.mem
SUB-reg32.reg32-rm
SUB-reg64.mem
SUB-reg64.reg64-rm
SUB-rm16.imm8
SUB-rm32.imm8
SUB-rm64.imm8
SUB-reg_al.imm
SUB-reg_ax.sbyteword
SUB-reg_ax.imm
SUB-reg_eax.sbytedword
SUB-reg_eax.imm
SUB-reg_rax.sbytedword
SUB-reg_rax.imm
SUB-rm8.imm
SUB-rm16.sbyteword
SUB-rm16.imm
SUB-rm32.sbytedword
SUB-rm32.imm
SUB-rm64.sbytedword
SUB-rm64.imm
SUB-mem.imm8
SUB-mem.sbyteword16
SUB-mem.imm16
SUB-mem.sbytedword32
SUB-mem.imm32))

(setf (gethash "SUB-mem.imm16" *x64-instruction-variants-hash-table*) (list
SUB-mem.imm16))

(setf (gethash "SUB-mem.imm32" *x64-instruction-variants-hash-table*) (list
SUB-mem.imm32))

(setf (gethash "SUB-mem.imm8" *x64-instruction-variants-hash-table*) (list
SUB-mem.imm8))

(setf (gethash "SUB-mem.reg16" *x64-instruction-variants-hash-table*) (list
SUB-mem.reg16))

(setf (gethash "SUB-mem.reg32" *x64-instruction-variants-hash-table*) (list
SUB-mem.reg32))

(setf (gethash "SUB-mem.reg64" *x64-instruction-variants-hash-table*) (list
SUB-mem.reg64))

(setf (gethash "SUB-mem.reg8" *x64-instruction-variants-hash-table*) (list
SUB-mem.reg8))

(setf (gethash "SUB-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
SUB-mem.sbytedword32))

(setf (gethash "SUB-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
SUB-mem.sbyteword16))

(setf (gethash "SUB-reg16.mem" *x64-instruction-variants-hash-table*) (list
SUB-reg16.mem))

(setf (gethash "SUB-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
SUB-reg16.reg16-mr))

(setf (gethash "SUB-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
SUB-reg16.reg16-rm))

(setf (gethash "SUB-reg32.mem" *x64-instruction-variants-hash-table*) (list
SUB-reg32.mem))

(setf (gethash "SUB-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
SUB-reg32.reg32-mr))

(setf (gethash "SUB-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
SUB-reg32.reg32-rm))

(setf (gethash "SUB-reg64.mem" *x64-instruction-variants-hash-table*) (list
SUB-reg64.mem))

(setf (gethash "SUB-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
SUB-reg64.reg64-mr))

(setf (gethash "SUB-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
SUB-reg64.reg64-rm))

(setf (gethash "SUB-reg8.mem" *x64-instruction-variants-hash-table*) (list
SUB-reg8.mem))

(setf (gethash "SUB-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
SUB-reg8.reg8-mr))

(setf (gethash "SUB-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
SUB-reg8.reg8-rm))

(setf (gethash "SUB-reg_al.imm" *x64-instruction-variants-hash-table*) (list
SUB-reg_al.imm))

(setf (gethash "SUB-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
SUB-reg_ax.imm))

(setf (gethash "SUB-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
SUB-reg_ax.sbyteword))

(setf (gethash "SUB-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
SUB-reg_eax.imm))

(setf (gethash "SUB-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
SUB-reg_eax.sbytedword))

(setf (gethash "SUB-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
SUB-reg_rax.imm))

(setf (gethash "SUB-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
SUB-reg_rax.sbytedword))

(setf (gethash "SUB-rm16.imm" *x64-instruction-variants-hash-table*) (list
SUB-rm16.imm))

(setf (gethash "SUB-rm16.imm8" *x64-instruction-variants-hash-table*) (list
SUB-rm16.imm8))

(setf (gethash "SUB-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
SUB-rm16.sbyteword))

(setf (gethash "SUB-rm32.imm" *x64-instruction-variants-hash-table*) (list
SUB-rm32.imm))

(setf (gethash "SUB-rm32.imm8" *x64-instruction-variants-hash-table*) (list
SUB-rm32.imm8))

(setf (gethash "SUB-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
SUB-rm32.sbytedword))

(setf (gethash "SUB-rm64.imm" *x64-instruction-variants-hash-table*) (list
SUB-rm64.imm))

(setf (gethash "SUB-rm64.imm8" *x64-instruction-variants-hash-table*) (list
SUB-rm64.imm8))

(setf (gethash "SUB-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
SUB-rm64.sbytedword))

(setf (gethash "SUB-rm8.imm" *x64-instruction-variants-hash-table*) (list
SUB-rm8.imm))

(setf (gethash "SUBPD" *x64-instruction-variants-hash-table*) (list
SUBPD-xmmreg.xmmrm))

(setf (gethash "SUBPD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
SUBPD-xmmreg.xmmrm))

(setf (gethash "SUBPS" *x64-instruction-variants-hash-table*) (list
SUBPS-xmmreg.xmmrm128))

(setf (gethash "SUBPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
SUBPS-xmmreg.xmmrm128))

(setf (gethash "SUBSD" *x64-instruction-variants-hash-table*) (list
SUBSD-xmmreg.xmmrm))

(setf (gethash "SUBSD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
SUBSD-xmmreg.xmmrm))

(setf (gethash "SUBSS" *x64-instruction-variants-hash-table*) (list
SUBSS-xmmreg.xmmrm32))

(setf (gethash "SUBSS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
SUBSS-xmmreg.xmmrm32))

(setf (gethash "SVDC" *x64-instruction-variants-hash-table*) (list
SVDC-mem80.reg_sreg))

(setf (gethash "SVDC-mem80.reg_sreg" *x64-instruction-variants-hash-table*) (list
SVDC-mem80.reg_sreg))

(setf (gethash "SVLDT" *x64-instruction-variants-hash-table*) (list
SVLDT-mem80))

(setf (gethash "SVLDT-mem80" *x64-instruction-variants-hash-table*) (list
SVLDT-mem80))

(setf (gethash "SVTS" *x64-instruction-variants-hash-table*) (list
SVTS-mem80))

(setf (gethash "SVTS-mem80" *x64-instruction-variants-hash-table*) (list
SVTS-mem80))

(setf (gethash "SWAPGS" *x64-instruction-variants-hash-table*) (list
SWAPGS-void))

(setf (gethash "SWAPGS-void" *x64-instruction-variants-hash-table*) (list
SWAPGS-void))

(setf (gethash "SYSCALL" *x64-instruction-variants-hash-table*) (list
SYSCALL-void))

(setf (gethash "SYSCALL-void" *x64-instruction-variants-hash-table*) (list
SYSCALL-void))

(setf (gethash "SYSENTER" *x64-instruction-variants-hash-table*) (list
SYSENTER-void))

(setf (gethash "SYSENTER-void" *x64-instruction-variants-hash-table*) (list
SYSENTER-void))

(setf (gethash "SYSEXIT" *x64-instruction-variants-hash-table*) (list
SYSEXIT-void))

(setf (gethash "SYSEXIT-void" *x64-instruction-variants-hash-table*) (list
SYSEXIT-void))

(setf (gethash "SYSRET" *x64-instruction-variants-hash-table*) (list
SYSRET-void))

(setf (gethash "SYSRET-void" *x64-instruction-variants-hash-table*) (list
SYSRET-void))

(setf (gethash "T1MSKC" *x64-instruction-variants-hash-table*) (list
T1MSKC-reg32.rm32
T1MSKC-reg64.rm64))

(setf (gethash "T1MSKC-reg32.rm32" *x64-instruction-variants-hash-table*) (list
T1MSKC-reg32.rm32))

(setf (gethash "T1MSKC-reg64.rm64" *x64-instruction-variants-hash-table*) (list
T1MSKC-reg64.rm64))

(setf (gethash "TEST" *x64-instruction-variants-hash-table*) (list
TEST-mem.reg8
TEST-reg8.reg8-mr
TEST-mem.reg16
TEST-reg16.reg16-mr
TEST-mem.reg32
TEST-reg32.reg32-mr
TEST-mem.reg64
TEST-reg64.reg64-mr
TEST-reg8.mem
TEST-reg16.mem
TEST-reg32.mem
TEST-reg64.mem
TEST-reg_al.imm
TEST-reg_ax.imm
TEST-reg_eax.imm
TEST-reg_rax.imm
TEST-rm8.imm
TEST-rm16.imm
TEST-rm32.imm
TEST-rm64.imm
TEST-mem.imm8
TEST-mem.imm16
TEST-mem.imm32))

(setf (gethash "TEST-mem.imm16" *x64-instruction-variants-hash-table*) (list
TEST-mem.imm16))

(setf (gethash "TEST-mem.imm32" *x64-instruction-variants-hash-table*) (list
TEST-mem.imm32))

(setf (gethash "TEST-mem.imm8" *x64-instruction-variants-hash-table*) (list
TEST-mem.imm8))

(setf (gethash "TEST-mem.reg16" *x64-instruction-variants-hash-table*) (list
TEST-mem.reg16))

(setf (gethash "TEST-mem.reg32" *x64-instruction-variants-hash-table*) (list
TEST-mem.reg32))

(setf (gethash "TEST-mem.reg64" *x64-instruction-variants-hash-table*) (list
TEST-mem.reg64))

(setf (gethash "TEST-mem.reg8" *x64-instruction-variants-hash-table*) (list
TEST-mem.reg8))

(setf (gethash "TEST-reg16.mem" *x64-instruction-variants-hash-table*) (list
TEST-reg16.mem))

(setf (gethash "TEST-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
TEST-reg16.reg16-mr))

(setf (gethash "TEST-reg32.mem" *x64-instruction-variants-hash-table*) (list
TEST-reg32.mem))

(setf (gethash "TEST-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
TEST-reg32.reg32-mr))

(setf (gethash "TEST-reg64.mem" *x64-instruction-variants-hash-table*) (list
TEST-reg64.mem))

(setf (gethash "TEST-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
TEST-reg64.reg64-mr))

(setf (gethash "TEST-reg8.mem" *x64-instruction-variants-hash-table*) (list
TEST-reg8.mem))

(setf (gethash "TEST-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
TEST-reg8.reg8-mr))

(setf (gethash "TEST-reg_al.imm" *x64-instruction-variants-hash-table*) (list
TEST-reg_al.imm))

(setf (gethash "TEST-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
TEST-reg_ax.imm))

(setf (gethash "TEST-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
TEST-reg_eax.imm))

(setf (gethash "TEST-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
TEST-reg_rax.imm))

(setf (gethash "TEST-rm16.imm" *x64-instruction-variants-hash-table*) (list
TEST-rm16.imm))

(setf (gethash "TEST-rm32.imm" *x64-instruction-variants-hash-table*) (list
TEST-rm32.imm))

(setf (gethash "TEST-rm64.imm" *x64-instruction-variants-hash-table*) (list
TEST-rm64.imm))

(setf (gethash "TEST-rm8.imm" *x64-instruction-variants-hash-table*) (list
TEST-rm8.imm))

(setf (gethash "TZCNT" *x64-instruction-variants-hash-table*) (list
TZCNT-reg16.rm16
TZCNT-reg32.rm32
TZCNT-reg64.rm64))

(setf (gethash "TZCNT-reg16.rm16" *x64-instruction-variants-hash-table*) (list
TZCNT-reg16.rm16))

(setf (gethash "TZCNT-reg32.rm32" *x64-instruction-variants-hash-table*) (list
TZCNT-reg32.rm32))

(setf (gethash "TZCNT-reg64.rm64" *x64-instruction-variants-hash-table*) (list
TZCNT-reg64.rm64))

(setf (gethash "TZMSK" *x64-instruction-variants-hash-table*) (list
TZMSK-reg32.rm32
TZMSK-reg64.rm64))

(setf (gethash "TZMSK-reg32.rm32" *x64-instruction-variants-hash-table*) (list
TZMSK-reg32.rm32))

(setf (gethash "TZMSK-reg64.rm64" *x64-instruction-variants-hash-table*) (list
TZMSK-reg64.rm64))

(setf (gethash "UCOMISD" *x64-instruction-variants-hash-table*) (list
UCOMISD-xmmreg.xmmrm))

(setf (gethash "UCOMISD-xmmreg.xmmrm" *x64-instruction-variants-hash-table*) (list
UCOMISD-xmmreg.xmmrm))

(setf (gethash "UCOMISS" *x64-instruction-variants-hash-table*) (list
UCOMISS-xmmreg.xmmrm32))

(setf (gethash "UCOMISS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
UCOMISS-xmmreg.xmmrm32))

(setf (gethash "UD0" *x64-instruction-variants-hash-table*) (list
UD0-void))

(setf (gethash "UD0-void" *x64-instruction-variants-hash-table*) (list
UD0-void))

(setf (gethash "UD1" *x64-instruction-variants-hash-table*) (list
UD1-void))

(setf (gethash "UD1-void" *x64-instruction-variants-hash-table*) (list
UD1-void))

(setf (gethash "UD2" *x64-instruction-variants-hash-table*) (list
UD2-void))

(setf (gethash "UD2-void" *x64-instruction-variants-hash-table*) (list
UD2-void))

(setf (gethash "UD2A" *x64-instruction-variants-hash-table*) (list
UD2A-void))

(setf (gethash "UD2A-void" *x64-instruction-variants-hash-table*) (list
UD2A-void))

(setf (gethash "UD2B" *x64-instruction-variants-hash-table*) (list
UD2B-void))

(setf (gethash "UD2B-void" *x64-instruction-variants-hash-table*) (list
UD2B-void))

(setf (gethash "UMOV" *x64-instruction-variants-hash-table*) (list
UMOV-mem.reg8
UMOV-reg8.reg8-mr
UMOV-mem.reg16
UMOV-reg16.reg16-mr
UMOV-mem.reg32
UMOV-reg32.reg32-mr
UMOV-reg8.mem
UMOV-reg8.reg8-rm
UMOV-reg16.mem
UMOV-reg16.reg16-rm
UMOV-reg32.mem
UMOV-reg32.reg32-rm))

(setf (gethash "UMOV-mem.reg16" *x64-instruction-variants-hash-table*) (list
UMOV-mem.reg16))

(setf (gethash "UMOV-mem.reg32" *x64-instruction-variants-hash-table*) (list
UMOV-mem.reg32))

(setf (gethash "UMOV-mem.reg8" *x64-instruction-variants-hash-table*) (list
UMOV-mem.reg8))

(setf (gethash "UMOV-reg16.mem" *x64-instruction-variants-hash-table*) (list
UMOV-reg16.mem))

(setf (gethash "UMOV-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
UMOV-reg16.reg16-mr))

(setf (gethash "UMOV-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
UMOV-reg16.reg16-rm))

(setf (gethash "UMOV-reg32.mem" *x64-instruction-variants-hash-table*) (list
UMOV-reg32.mem))

(setf (gethash "UMOV-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
UMOV-reg32.reg32-mr))

(setf (gethash "UMOV-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
UMOV-reg32.reg32-rm))

(setf (gethash "UMOV-reg8.mem" *x64-instruction-variants-hash-table*) (list
UMOV-reg8.mem))

(setf (gethash "UMOV-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
UMOV-reg8.reg8-mr))

(setf (gethash "UMOV-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
UMOV-reg8.reg8-rm))

(setf (gethash "UNPCKHPD" *x64-instruction-variants-hash-table*) (list
UNPCKHPD-xmmreg.xmmrm128))

(setf (gethash "UNPCKHPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
UNPCKHPD-xmmreg.xmmrm128))

(setf (gethash "UNPCKHPS" *x64-instruction-variants-hash-table*) (list
UNPCKHPS-xmmreg.xmmrm128))

(setf (gethash "UNPCKHPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
UNPCKHPS-xmmreg.xmmrm128))

(setf (gethash "UNPCKLPD" *x64-instruction-variants-hash-table*) (list
UNPCKLPD-xmmreg.xmmrm128))

(setf (gethash "UNPCKLPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
UNPCKLPD-xmmreg.xmmrm128))

(setf (gethash "UNPCKLPS" *x64-instruction-variants-hash-table*) (list
UNPCKLPS-xmmreg.xmmrm128))

(setf (gethash "UNPCKLPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
UNPCKLPS-xmmreg.xmmrm128))

(setf (gethash "VADDPD" *x64-instruction-variants-hash-table*) (list
VADDPD-xmmreg.xmmreg*.xmmrm128
VADDPD-ymmreg.ymmreg*.ymmrm256
VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VADDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VADDPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VADDPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VADDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VADDPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VADDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VADDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VADDPS" *x64-instruction-variants-hash-table*) (list
VADDPS-xmmreg.xmmreg*.xmmrm128
VADDPS-ymmreg.ymmreg*.ymmrm256
VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VADDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VADDPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VADDPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VADDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VADDPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VADDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VADDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VADDSD" *x64-instruction-variants-hash-table*) (list
VADDSD-xmmreg.xmmreg*.xmmrm64
VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VADDSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VADDSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VADDSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VADDSS" *x64-instruction-variants-hash-table*) (list
VADDSS-xmmreg.xmmreg*.xmmrm32
VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VADDSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VADDSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VADDSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VADDSUBPD" *x64-instruction-variants-hash-table*) (list
VADDSUBPD-xmmreg.xmmreg*.xmmrm128
VADDSUBPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VADDSUBPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VADDSUBPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VADDSUBPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VADDSUBPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VADDSUBPS" *x64-instruction-variants-hash-table*) (list
VADDSUBPS-xmmreg.xmmreg*.xmmrm128
VADDSUBPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VADDSUBPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VADDSUBPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VADDSUBPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VADDSUBPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VAESDEC" *x64-instruction-variants-hash-table*) (list
VAESDEC-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESDEC-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VAESDEC-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESDECLAST" *x64-instruction-variants-hash-table*) (list
VAESDECLAST-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESDECLAST-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VAESDECLAST-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESENC" *x64-instruction-variants-hash-table*) (list
VAESENC-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESENC-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VAESENC-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESENCLAST" *x64-instruction-variants-hash-table*) (list
VAESENCLAST-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESENCLAST-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VAESENCLAST-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VAESIMC" *x64-instruction-variants-hash-table*) (list
VAESIMC-xmmreg.xmmrm128))

(setf (gethash "VAESIMC-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VAESIMC-xmmreg.xmmrm128))

(setf (gethash "VAESKEYGENASSIST" *x64-instruction-variants-hash-table*) (list
VAESKEYGENASSIST-xmmreg.xmmrm128.imm8))

(setf (gethash "VAESKEYGENASSIST-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VAESKEYGENASSIST-xmmreg.xmmrm128.imm8))

(setf (gethash "VALIGND" *x64-instruction-variants-hash-table*) (list
VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8
VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VALIGND-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VALIGND-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VALIGND-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VALIGNQ" *x64-instruction-variants-hash-table*) (list
VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8
VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VALIGNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VALIGNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VALIGNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VANDNPD" *x64-instruction-variants-hash-table*) (list
VANDNPD-xmmreg.xmmreg*.xmmrm128
VANDNPD-ymmreg.ymmreg*.ymmrm256
VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VANDNPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VANDNPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VANDNPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VANDNPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VANDNPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VANDNPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VANDNPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VANDNPS" *x64-instruction-variants-hash-table*) (list
VANDNPS-xmmreg.xmmreg*.xmmrm128
VANDNPS-ymmreg.ymmreg*.ymmrm256
VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VANDNPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VANDNPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VANDNPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VANDNPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VANDNPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VANDNPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VANDNPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VANDPD" *x64-instruction-variants-hash-table*) (list
VANDPD-xmmreg.xmmreg*.xmmrm128
VANDPD-ymmreg.ymmreg*.ymmrm256
VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VANDPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VANDPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VANDPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VANDPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VANDPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VANDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VANDPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VANDPS" *x64-instruction-variants-hash-table*) (list
VANDPS-xmmreg.xmmreg*.xmmrm128
VANDPS-ymmreg.ymmreg*.ymmrm256
VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VANDPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VANDPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VANDPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VANDPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VANDPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VANDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VANDPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VBLENDMPD" *x64-instruction-variants-hash-table*) (list
VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VBLENDMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VBLENDMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VBLENDMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VBLENDMPS" *x64-instruction-variants-hash-table*) (list
VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VBLENDMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VBLENDMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VBLENDMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VBLENDPD" *x64-instruction-variants-hash-table*) (list
VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8
VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VBLENDPD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VBLENDPD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VBLENDPS" *x64-instruction-variants-hash-table*) (list
VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8
VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VBLENDPS-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VBLENDPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VBLENDVPD" *x64-instruction-variants-hash-table*) (list
VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VBLENDVPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VBLENDVPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VBLENDVPS" *x64-instruction-variants-hash-table*) (list
VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VBLENDVPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VBLENDVPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VBROADCASTF128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF128-ymmreg.mem128))

(setf (gethash "VBROADCASTF128-ymmreg.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF128-ymmreg.mem128))

(setf (gethash "VBROADCASTF32X2" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X2-ymmreg-mask-z.xmmrm64
VBROADCASTF32X2-zmmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTF32X2-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X2-ymmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTF32X2-zmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X2-zmmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTF32X4" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X4-ymmreg-mask-z.mem128
VBROADCASTF32X4-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF32X4-ymmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X4-ymmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF32X4-zmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X4-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF32X8" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X8-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTF32X8-zmmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VBROADCASTF32X8-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTF64X2" *x64-instruction-variants-hash-table*) (list
VBROADCASTF64X2-ymmreg-mask-z.mem128
VBROADCASTF64X2-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF64X2-ymmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF64X2-ymmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF64X2-zmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTF64X2-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTF64X4" *x64-instruction-variants-hash-table*) (list
VBROADCASTF64X4-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTF64X4-zmmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VBROADCASTF64X4-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTI128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI128-ymmreg.mem128))

(setf (gethash "VBROADCASTI128-ymmreg.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI128-ymmreg.mem128))

(setf (gethash "VBROADCASTI32X2" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X2-xmmreg-mask-z.xmmrm64
VBROADCASTI32X2-ymmreg-mask-z.xmmrm64
VBROADCASTI32X2-zmmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTI32X2-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X2-xmmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTI32X2-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X2-ymmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTI32X2-zmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X2-zmmreg-mask-z.xmmrm64))

(setf (gethash "VBROADCASTI32X4" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X4-ymmreg-mask-z.mem128
VBROADCASTI32X4-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI32X4-ymmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X4-ymmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI32X4-zmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X4-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI32X8" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X8-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTI32X8-zmmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VBROADCASTI32X8-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTI64X2" *x64-instruction-variants-hash-table*) (list
VBROADCASTI64X2-ymmreg-mask-z.mem128
VBROADCASTI64X2-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI64X2-ymmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI64X2-ymmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI64X2-zmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VBROADCASTI64X2-zmmreg-mask-z.mem128))

(setf (gethash "VBROADCASTI64X4" *x64-instruction-variants-hash-table*) (list
VBROADCASTI64X4-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTI64X4-zmmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VBROADCASTI64X4-zmmreg-mask-z.mem256))

(setf (gethash "VBROADCASTSD" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-ymmreg.mem64
VBROADCASTSD-ymmreg.xmmreg
VBROADCASTSD-ymmreg-mask-z.mem64
VBROADCASTSD-zmmreg-mask-z.mem64
VBROADCASTSD-ymmreg-mask-z.xmmreg
VBROADCASTSD-zmmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSD-ymmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-ymmreg-mask-z.mem64))

(setf (gethash "VBROADCASTSD-ymmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-ymmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSD-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-ymmreg.mem64))

(setf (gethash "VBROADCASTSD-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-ymmreg.xmmreg))

(setf (gethash "VBROADCASTSD-zmmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-zmmreg-mask-z.mem64))

(setf (gethash "VBROADCASTSD-zmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSD-zmmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSS" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-xmmreg.mem32
VBROADCASTSS-ymmreg.mem32
VBROADCASTSS-xmmreg.xmmreg
VBROADCASTSS-ymmreg.xmmreg
VBROADCASTSS-xmmreg-mask-z.mem32
VBROADCASTSS-ymmreg-mask-z.mem32
VBROADCASTSS-zmmreg-mask-z.mem32
VBROADCASTSS-xmmreg-mask-z.xmmreg
VBROADCASTSS-ymmreg-mask-z.xmmreg
VBROADCASTSS-zmmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSS-xmmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-xmmreg-mask-z.mem32))

(setf (gethash "VBROADCASTSS-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-xmmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSS-xmmreg.mem32" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-xmmreg.mem32))

(setf (gethash "VBROADCASTSS-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-xmmreg.xmmreg))

(setf (gethash "VBROADCASTSS-ymmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-ymmreg-mask-z.mem32))

(setf (gethash "VBROADCASTSS-ymmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-ymmreg-mask-z.xmmreg))

(setf (gethash "VBROADCASTSS-ymmreg.mem32" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-ymmreg.mem32))

(setf (gethash "VBROADCASTSS-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-ymmreg.xmmreg))

(setf (gethash "VBROADCASTSS-zmmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-zmmreg-mask-z.mem32))

(setf (gethash "VBROADCASTSS-zmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VBROADCASTSS-zmmreg-mask-z.xmmreg))

(setf (gethash "VCMPEQPD" *x64-instruction-variants-hash-table*) (list
VCMPEQPD-xmmreg.xmmreg*.xmmrm128
VCMPEQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQPS" *x64-instruction-variants-hash-table*) (list
VCMPEQPS-xmmreg.xmmreg*.xmmrm128
VCMPEQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQSD" *x64-instruction-variants-hash-table*) (list
VCMPEQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQSS" *x64-instruction-variants-hash-table*) (list
VCMPEQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256
VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256
VCMPEQ_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256
VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPEQ_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256
VCMPEQ_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64
VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64
VCMPEQ_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64
VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64
VCMPEQ_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_USPD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128
VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_USPS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128
VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPEQ_USSD" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_USSS" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPEQ_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSEPD" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128
VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSEPS" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128
VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSESD" *x64-instruction-variants-hash-table*) (list
VCMPFALSESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSESS" *x64-instruction-variants-hash-table*) (list
VCMPFALSESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPFALSE_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPFALSE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGEPD" *x64-instruction-variants-hash-table*) (list
VCMPGEPD-xmmreg.xmmreg*.xmmrm128
VCMPGEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGEPS" *x64-instruction-variants-hash-table*) (list
VCMPGEPS-xmmreg.xmmreg*.xmmrm128
VCMPGEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGESD" *x64-instruction-variants-hash-table*) (list
VCMPGESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGESS" *x64-instruction-variants-hash-table*) (list
VCMPGESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGE_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGTPD" *x64-instruction-variants-hash-table*) (list
VCMPGTPD-xmmreg.xmmreg*.xmmrm128
VCMPGTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGTPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGTPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGTPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGTPS" *x64-instruction-variants-hash-table*) (list
VCMPGTPS-xmmreg.xmmreg*.xmmrm128
VCMPGTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGTPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGTPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGTPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGTSD" *x64-instruction-variants-hash-table*) (list
VCMPGTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGTSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGTSS" *x64-instruction-variants-hash-table*) (list
VCMPGTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGTSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGT_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPGT_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPGT_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLEPD" *x64-instruction-variants-hash-table*) (list
VCMPLEPD-xmmreg.xmmreg*.xmmrm128
VCMPLEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLEPS" *x64-instruction-variants-hash-table*) (list
VCMPLEPS-xmmreg.xmmreg*.xmmrm128
VCMPLEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLESD" *x64-instruction-variants-hash-table*) (list
VCMPLESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLESS" *x64-instruction-variants-hash-table*) (list
VCMPLESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLE_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLE_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLE_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLTPD" *x64-instruction-variants-hash-table*) (list
VCMPLTPD-xmmreg.xmmreg*.xmmrm128
VCMPLTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLTPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLTPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLTPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLTPS" *x64-instruction-variants-hash-table*) (list
VCMPLTPS-xmmreg.xmmreg*.xmmrm128
VCMPLTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLTPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLTPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLTPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLTSD" *x64-instruction-variants-hash-table*) (list
VCMPLTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLTSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLTSS" *x64-instruction-variants-hash-table*) (list
VCMPLTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLTSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLT_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPLT_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPLT_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQPD" *x64-instruction-variants-hash-table*) (list
VCMPNEQPD-xmmreg.xmmreg*.xmmrm128
VCMPNEQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQPS" *x64-instruction-variants-hash-table*) (list
VCMPNEQPS-xmmreg.xmmreg*.xmmrm128
VCMPNEQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQSD" *x64-instruction-variants-hash-table*) (list
VCMPNEQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQSS" *x64-instruction-variants-hash-table*) (list
VCMPNEQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OQPD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OQPS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OQSD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OQSS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OSPD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OSPS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_OSSD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OSSS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_OSSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_USPD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_USPS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128
VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNEQ_USSD" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_USSS" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNEQ_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGEPD" *x64-instruction-variants-hash-table*) (list
VCMPNGEPD-xmmreg.xmmreg*.xmmrm128
VCMPNGEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGEPS" *x64-instruction-variants-hash-table*) (list
VCMPNGEPS-xmmreg.xmmreg*.xmmrm128
VCMPNGEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGESD" *x64-instruction-variants-hash-table*) (list
VCMPNGESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGESS" *x64-instruction-variants-hash-table*) (list
VCMPNGESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_USPD" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128
VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_USPS" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128
VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGE_USSD" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_USSS" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGTPD" *x64-instruction-variants-hash-table*) (list
VCMPNGTPD-xmmreg.xmmreg*.xmmrm128
VCMPNGTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGTPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGTPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGTPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGTPS" *x64-instruction-variants-hash-table*) (list
VCMPNGTPS-xmmreg.xmmreg*.xmmrm128
VCMPNGTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGTPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGTPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGTPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGTSD" *x64-instruction-variants-hash-table*) (list
VCMPNGTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGTSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGTSS" *x64-instruction-variants-hash-table*) (list
VCMPNGTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGTSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGT_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_USPD" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128
VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_USPS" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128
VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNGT_USSD" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_USSS" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNGT_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLEPD" *x64-instruction-variants-hash-table*) (list
VCMPNLEPD-xmmreg.xmmreg*.xmmrm128
VCMPNLEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLEPS" *x64-instruction-variants-hash-table*) (list
VCMPNLEPS-xmmreg.xmmreg*.xmmrm128
VCMPNLEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLESD" *x64-instruction-variants-hash-table*) (list
VCMPNLESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLESS" *x64-instruction-variants-hash-table*) (list
VCMPNLESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_USPD" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128
VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_USPS" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128
VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLE_USSD" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_USSS" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLTPD" *x64-instruction-variants-hash-table*) (list
VCMPNLTPD-xmmreg.xmmreg*.xmmrm128
VCMPNLTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLTPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLTPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLTPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLTPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLTPS" *x64-instruction-variants-hash-table*) (list
VCMPNLTPS-xmmreg.xmmreg*.xmmrm128
VCMPNLTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLTPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLTPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLTPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLTPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLTSD" *x64-instruction-variants-hash-table*) (list
VCMPNLTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLTSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLTSS" *x64-instruction-variants-hash-table*) (list
VCMPNLTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLTSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLTSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLT_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_USPD" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128
VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_USPS" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128
VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPNLT_USSD" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_USSS" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPNLT_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORDPD" *x64-instruction-variants-hash-table*) (list
VCMPORDPD-xmmreg.xmmreg*.xmmrm128
VCMPORDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORDPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORDPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORDPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORDPS" *x64-instruction-variants-hash-table*) (list
VCMPORDPS-xmmreg.xmmreg*.xmmrm128
VCMPORDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORDPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORDPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORDPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORDSD" *x64-instruction-variants-hash-table*) (list
VCMPORDSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORDSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORDSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORDSS" *x64-instruction-variants-hash-table*) (list
VCMPORDSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORDSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORDSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_QPD" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128
VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_QPS" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128
VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORD_QPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_QSD" *x64-instruction-variants-hash-table*) (list
VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORD_QSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_QSS" *x64-instruction-variants-hash-table*) (list
VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORD_QSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_SPD" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128
VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_SPS" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128
VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPORD_SPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPORD_SSD" *x64-instruction-variants-hash-table*) (list
VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORD_SSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_SSS" *x64-instruction-variants-hash-table*) (list
VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPORD_SSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPPD" *x64-instruction-variants-hash-table*) (list
VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8
VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8
VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8
VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8
VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPD-kreg-mask.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPD-kreg-mask.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPD-kreg-mask.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VCMPPS" *x64-instruction-variants-hash-table*) (list
VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8
VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8
VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8
VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8
VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPS-kreg-mask.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPS-kreg-mask.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPS-kreg-mask.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPS-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VCMPPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VCMPSD" *x64-instruction-variants-hash-table*) (list
VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8
VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCMPSD-kreg-mask.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8" *x64-instruction-variants-hash-table*) (list
VCMPSD-xmmreg.xmmreg*.xmmrm64.imm8))

(setf (gethash "VCMPSS" *x64-instruction-variants-hash-table*) (list
VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8
VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCMPSS-kreg-mask.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8" *x64-instruction-variants-hash-table*) (list
VCMPSS-xmmreg.xmmreg*.xmmrm64.imm8))

(setf (gethash "VCMPTRUEPD" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128
VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUEPS" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128
VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUEPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUESD" *x64-instruction-variants-hash-table*) (list
VCMPTRUESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUESD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUESD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUESS" *x64-instruction-variants-hash-table*) (list
VCMPTRUESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUESS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUESS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_UQPD" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128
VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_UQPS" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128
VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_UQSD" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_UQSS" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_UQSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_USPD" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128
VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_USPS" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128
VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPTRUE_USSD" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_USSS" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPTRUE_USSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORDPD" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128
VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORDPS" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128
VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORDSD" *x64-instruction-variants-hash-table*) (list
VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORDSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORDSS" *x64-instruction-variants-hash-table*) (list
VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORDSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_QPD" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128
VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_QPS" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128
VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_QSD" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_QSS" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_QSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_SPD" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128
VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_SPS" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128
VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VCMPUNORD_SSD" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_SSS" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCMPUNORD_SSS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCOMISD" *x64-instruction-variants-hash-table*) (list
VCOMISD-xmmreg.xmmrm64
VCOMISD-xmmreg.xmmrm64-sae))

(setf (gethash "VCOMISD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCOMISD-xmmreg.xmmrm64))

(setf (gethash "VCOMISD-xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VCOMISD-xmmreg.xmmrm64-sae))

(setf (gethash "VCOMISS" *x64-instruction-variants-hash-table*) (list
VCOMISS-xmmreg.xmmrm32
VCOMISS-xmmreg.xmmrm32-sae))

(setf (gethash "VCOMISS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCOMISS-xmmreg.xmmrm32))

(setf (gethash "VCOMISS-xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCOMISS-xmmreg.xmmrm32-sae))

(setf (gethash "VCOMPRESSPD" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-mem128-mask.xmmreg
VCOMPRESSPD-mem256-mask.ymmreg
VCOMPRESSPD-mem512-mask.zmmreg
VCOMPRESSPD-xmmreg-mask-z.xmmreg
VCOMPRESSPD-ymmreg-mask-z.ymmreg
VCOMPRESSPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VCOMPRESSPD-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-mem128-mask.xmmreg))

(setf (gethash "VCOMPRESSPD-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-mem256-mask.ymmreg))

(setf (gethash "VCOMPRESSPD-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-mem512-mask.zmmreg))

(setf (gethash "VCOMPRESSPD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-xmmreg-mask-z.xmmreg))

(setf (gethash "VCOMPRESSPD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-ymmreg-mask-z.ymmreg))

(setf (gethash "VCOMPRESSPD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VCOMPRESSPS" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-mem128-mask.xmmreg
VCOMPRESSPS-mem256-mask.ymmreg
VCOMPRESSPS-mem512-mask.zmmreg
VCOMPRESSPS-xmmreg-mask-z.xmmreg
VCOMPRESSPS-ymmreg-mask-z.ymmreg
VCOMPRESSPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VCOMPRESSPS-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-mem128-mask.xmmreg))

(setf (gethash "VCOMPRESSPS-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-mem256-mask.ymmreg))

(setf (gethash "VCOMPRESSPS-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-mem512-mask.zmmreg))

(setf (gethash "VCOMPRESSPS-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-xmmreg-mask-z.xmmreg))

(setf (gethash "VCOMPRESSPS-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-ymmreg-mask-z.ymmreg))

(setf (gethash "VCOMPRESSPS-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VCOMPRESSPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VCVTDQ2PD" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-xmmreg.xmmrm64
VCVTDQ2PD-ymmreg.xmmrm128
VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32
VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32
VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTDQ2PD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-xmmreg.xmmrm64))

(setf (gethash "VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTDQ2PD-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-ymmreg.xmmrm128))

(setf (gethash "VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PD-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTDQ2PS" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-xmmreg.xmmrm128
VCVTDQ2PS-ymmreg.ymmrm256
VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32
VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32
VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTDQ2PS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-xmmreg.xmmrm128))

(setf (gethash "VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTDQ2PS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-ymmreg.ymmrm256))

(setf (gethash "VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTDQ2PS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTPD2DQ" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg.xmmreg
VCVTPD2DQ-xmmreg.mem128
VCVTPD2DQ-xmmreg.ymmreg
VCVTPD2DQ-xmmreg.mem256
VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64
VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64
VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTPD2DQ-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg.mem128))

(setf (gethash "VCVTPD2DQ-xmmreg.mem256" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg.mem256))

(setf (gethash "VCVTPD2DQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg.xmmreg))

(setf (gethash "VCVTPD2DQ-xmmreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-xmmreg.ymmreg))

(setf (gethash "VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTPD2DQ-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2PS" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg.xmmreg
VCVTPD2PS-xmmreg.mem128
VCVTPD2PS-xmmreg.ymmreg
VCVTPD2PS-xmmreg.mem256
VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64
VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64
VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTPD2PS-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg.mem128))

(setf (gethash "VCVTPD2PS-xmmreg.mem256" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg.mem256))

(setf (gethash "VCVTPD2PS-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg.xmmreg))

(setf (gethash "VCVTPD2PS-xmmreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-xmmreg.ymmreg))

(setf (gethash "VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTPD2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2QQ" *x64-instruction-variants-hash-table*) (list
VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64
VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64
VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2QQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2QQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTPD2QQ-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2UDQ" *x64-instruction-variants-hash-table*) (list
VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64
VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64
VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2UDQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2UDQ-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2UQQ" *x64-instruction-variants-hash-table*) (list
VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64
VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64
VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2UQQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTPD2UQQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTPH2PS" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-ymmreg.xmmrm128
VCVTPH2PS-xmmreg.xmmrm64
VCVTPH2PS-xmmreg-mask-z.xmmrm64
VCVTPH2PS-ymmreg-mask-z.xmmrm128
VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae))

(setf (gethash "VCVTPH2PS-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-xmmreg-mask-z.xmmrm64))

(setf (gethash "VCVTPH2PS-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-xmmreg.xmmrm64))

(setf (gethash "VCVTPH2PS-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-ymmreg-mask-z.xmmrm128))

(setf (gethash "VCVTPH2PS-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-ymmreg.xmmrm128))

(setf (gethash "VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae" *x64-instruction-variants-hash-table*) (list
VCVTPH2PS-zmmreg-mask-z.ymmrm256-sae))

(setf (gethash "VCVTPS2DQ" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-xmmreg.xmmrm128
VCVTPS2DQ-ymmreg.ymmrm256
VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32
VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32
VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTPS2DQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-xmmreg.xmmrm128))

(setf (gethash "VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTPS2DQ-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-ymmreg.ymmrm256))

(setf (gethash "VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTPS2DQ-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTPS2PD" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-xmmreg.xmmrm64
VCVTPS2PD-ymmreg.xmmrm128
VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32
VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32
VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTPS2PD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-xmmreg.xmmrm64))

(setf (gethash "VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTPS2PD-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-ymmreg.xmmrm128))

(setf (gethash "VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae" *x64-instruction-variants-hash-table*) (list
VCVTPS2PD-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTPS2PH" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-xmmrm128.ymmreg.imm8
VCVTPS2PH-xmmrm64.xmmreg.imm8
VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8
VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8
VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8
VCVTPS2PH-mem64-mask.xmmreg.imm8
VCVTPS2PH-mem128-mask.ymmreg.imm8
VCVTPS2PH-mem256-mask.zmmreg-sae.imm8))

(setf (gethash "VCVTPS2PH-mem128-mask.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-mem128-mask.ymmreg.imm8))

(setf (gethash "VCVTPS2PH-mem256-mask.zmmreg-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-mem256-mask.zmmreg-sae.imm8))

(setf (gethash "VCVTPS2PH-mem64-mask.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-mem64-mask.xmmreg.imm8))

(setf (gethash "VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-xmmreg-mask-z.xmmreg.imm8))

(setf (gethash "VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-xmmreg-mask-z.ymmreg.imm8))

(setf (gethash "VCVTPS2PH-xmmrm128.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-xmmrm128.ymmreg.imm8))

(setf (gethash "VCVTPS2PH-xmmrm64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-xmmrm64.xmmreg.imm8))

(setf (gethash "VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8" *x64-instruction-variants-hash-table*) (list
VCVTPS2PH-ymmreg-mask-z.zmmreg-sae.imm8))

(setf (gethash "VCVTPS2QQ" *x64-instruction-variants-hash-table*) (list
VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32
VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32
VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2QQ-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2QQ-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTPS2QQ-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTPS2UDQ" *x64-instruction-variants-hash-table*) (list
VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32
VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32
VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2UDQ-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2UDQ-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTPS2UQQ" *x64-instruction-variants-hash-table*) (list
VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32
VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32
VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2UQQ-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTPS2UQQ-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTQQ2PD" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64
VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64
VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTQQ2PS" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64
VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64
VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PS-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PS-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTQQ2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTSD2SI" *x64-instruction-variants-hash-table*) (list
VCVTSD2SI-reg32.xmmrm64
VCVTSD2SI-reg64.xmmrm64
VCVTSD2SI-reg32.xmmrm64-er
VCVTSD2SI-reg64.xmmrm64-er))

(setf (gethash "VCVTSD2SI-reg32.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTSD2SI-reg32.xmmrm64))

(setf (gethash "VCVTSD2SI-reg32.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VCVTSD2SI-reg32.xmmrm64-er))

(setf (gethash "VCVTSD2SI-reg64.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTSD2SI-reg64.xmmrm64))

(setf (gethash "VCVTSD2SI-reg64.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VCVTSD2SI-reg64.xmmrm64-er))

(setf (gethash "VCVTSD2SS" *x64-instruction-variants-hash-table*) (list
VCVTSD2SS-xmmreg.xmmreg*.xmmrm64
VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VCVTSD2SS-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VCVTSD2SS-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTSD2SS-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VCVTSD2USI" *x64-instruction-variants-hash-table*) (list
VCVTSD2USI-reg32.xmmrm64-er
VCVTSD2USI-reg64.xmmrm64-er))

(setf (gethash "VCVTSD2USI-reg32.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VCVTSD2USI-reg32.xmmrm64-er))

(setf (gethash "VCVTSD2USI-reg64.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VCVTSD2USI-reg64.xmmrm64-er))

(setf (gethash "VCVTSI2SD" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg*.rm32
VCVTSI2SD-xmmreg.xmmreg*.mem32
VCVTSI2SD-xmmreg.xmmreg*.rm64
VCVTSI2SD-xmmreg.xmmreg-er.rm32
VCVTSI2SD-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTSI2SD-xmmreg.xmmreg*.mem32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg*.mem32))

(setf (gethash "VCVTSI2SD-xmmreg.xmmreg*.rm32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg*.rm32))

(setf (gethash "VCVTSI2SD-xmmreg.xmmreg*.rm64" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg*.rm64))

(setf (gethash "VCVTSI2SD-xmmreg.xmmreg-er.rm32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg-er.rm32))

(setf (gethash "VCVTSI2SD-xmmreg.xmmreg-er.rm64" *x64-instruction-variants-hash-table*) (list
VCVTSI2SD-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTSI2SS" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg*.rm32
VCVTSI2SS-xmmreg.xmmreg*.mem32
VCVTSI2SS-xmmreg.xmmreg*.rm64
VCVTSI2SS-xmmreg.xmmreg-er.rm32
VCVTSI2SS-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTSI2SS-xmmreg.xmmreg*.mem32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg*.mem32))

(setf (gethash "VCVTSI2SS-xmmreg.xmmreg*.rm32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg*.rm32))

(setf (gethash "VCVTSI2SS-xmmreg.xmmreg*.rm64" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg*.rm64))

(setf (gethash "VCVTSI2SS-xmmreg.xmmreg-er.rm32" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg-er.rm32))

(setf (gethash "VCVTSI2SS-xmmreg.xmmreg-er.rm64" *x64-instruction-variants-hash-table*) (list
VCVTSI2SS-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTSS2SD" *x64-instruction-variants-hash-table*) (list
VCVTSS2SD-xmmreg.xmmreg*.xmmrm32
VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCVTSS2SD-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VCVTSS2SD-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCVTSS2SD-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VCVTSS2SI" *x64-instruction-variants-hash-table*) (list
VCVTSS2SI-reg32.xmmrm32
VCVTSS2SI-reg64.xmmrm32
VCVTSS2SI-reg32.xmmrm32-er
VCVTSS2SI-reg64.xmmrm32-er))

(setf (gethash "VCVTSS2SI-reg32.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCVTSS2SI-reg32.xmmrm32))

(setf (gethash "VCVTSS2SI-reg32.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VCVTSS2SI-reg32.xmmrm32-er))

(setf (gethash "VCVTSS2SI-reg64.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCVTSS2SI-reg64.xmmrm32))

(setf (gethash "VCVTSS2SI-reg64.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VCVTSS2SI-reg64.xmmrm32-er))

(setf (gethash "VCVTSS2USI" *x64-instruction-variants-hash-table*) (list
VCVTSS2USI-reg32.xmmrm32-er
VCVTSS2USI-reg64.xmmrm32-er))

(setf (gethash "VCVTSS2USI-reg32.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VCVTSS2USI-reg32.xmmrm32-er))

(setf (gethash "VCVTSS2USI-reg64.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VCVTSS2USI-reg64.xmmrm32-er))

(setf (gethash "VCVTTPD2DQ" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg.xmmreg
VCVTTPD2DQ-xmmreg.mem128
VCVTTPD2DQ-xmmreg.ymmreg
VCVTTPD2DQ-xmmreg.mem256
VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64
VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64
VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTTPD2DQ-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg.mem128))

(setf (gethash "VCVTTPD2DQ-xmmreg.mem256" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg.mem256))

(setf (gethash "VCVTTPD2DQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg.xmmreg))

(setf (gethash "VCVTTPD2DQ-xmmreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-xmmreg.ymmreg))

(setf (gethash "VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPD2DQ-ymmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2QQ" *x64-instruction-variants-hash-table*) (list
VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64
VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64
VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2QQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2QQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPD2QQ-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2UDQ" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64
VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64
VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UDQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UDQ-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UDQ-ymmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2UQQ" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64
VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64
VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UQQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UQQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPD2UQQ-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VCVTTPS2DQ" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-xmmreg.xmmrm128
VCVTTPS2DQ-ymmreg.ymmrm256
VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32
VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32
VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTTPS2DQ-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-xmmreg.xmmrm128))

(setf (gethash "VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTTPS2DQ-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-ymmreg.ymmrm256))

(setf (gethash "VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPS2DQ-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VCVTTPS2QQ" *x64-instruction-variants-hash-table*) (list
VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32
VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32
VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2QQ-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2QQ-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPS2QQ-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTTPS2UDQ" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32
VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32
VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UDQ-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UDQ-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UDQ-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VCVTTPS2UQQ" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32
VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32
VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UQQ-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UQQ-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTPS2UQQ-zmmreg-mask-z.ymmrm256-b32-sae))

(setf (gethash "VCVTTSD2SI" *x64-instruction-variants-hash-table*) (list
VCVTTSD2SI-reg32.xmmrm64
VCVTTSD2SI-reg64.xmmrm64
VCVTTSD2SI-reg32.xmmrm64-sae
VCVTTSD2SI-reg64.xmmrm64-sae))

(setf (gethash "VCVTTSD2SI-reg32.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTTSD2SI-reg32.xmmrm64))

(setf (gethash "VCVTTSD2SI-reg32.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSD2SI-reg32.xmmrm64-sae))

(setf (gethash "VCVTTSD2SI-reg64.xmmrm64" *x64-instruction-variants-hash-table*) (list
VCVTTSD2SI-reg64.xmmrm64))

(setf (gethash "VCVTTSD2SI-reg64.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSD2SI-reg64.xmmrm64-sae))

(setf (gethash "VCVTTSD2USI" *x64-instruction-variants-hash-table*) (list
VCVTTSD2USI-reg32.xmmrm64-sae
VCVTTSD2USI-reg64.xmmrm64-sae))

(setf (gethash "VCVTTSD2USI-reg32.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSD2USI-reg32.xmmrm64-sae))

(setf (gethash "VCVTTSD2USI-reg64.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSD2USI-reg64.xmmrm64-sae))

(setf (gethash "VCVTTSS2SI" *x64-instruction-variants-hash-table*) (list
VCVTTSS2SI-reg32.xmmrm32
VCVTTSS2SI-reg64.xmmrm32
VCVTTSS2SI-reg32.xmmrm32-sae
VCVTTSS2SI-reg64.xmmrm32-sae))

(setf (gethash "VCVTTSS2SI-reg32.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCVTTSS2SI-reg32.xmmrm32))

(setf (gethash "VCVTTSS2SI-reg32.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSS2SI-reg32.xmmrm32-sae))

(setf (gethash "VCVTTSS2SI-reg64.xmmrm32" *x64-instruction-variants-hash-table*) (list
VCVTTSS2SI-reg64.xmmrm32))

(setf (gethash "VCVTTSS2SI-reg64.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSS2SI-reg64.xmmrm32-sae))

(setf (gethash "VCVTTSS2USI" *x64-instruction-variants-hash-table*) (list
VCVTTSS2USI-reg32.xmmrm32-sae
VCVTTSS2USI-reg64.xmmrm32-sae))

(setf (gethash "VCVTTSS2USI-reg32.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSS2USI-reg32.xmmrm32-sae))

(setf (gethash "VCVTTSS2USI-reg64.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VCVTTSS2USI-reg64.xmmrm32-sae))

(setf (gethash "VCVTUDQ2PD" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32
VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32
VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PD-xmmreg-mask-z.xmmrm64-b32))

(setf (gethash "VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PD-ymmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PD-zmmreg-mask-z.ymmrm256-b32-er))

(setf (gethash "VCVTUDQ2PS" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32
VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32
VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VCVTUDQ2PS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VCVTUQQ2PD" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64
VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64
VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTUQQ2PS" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64
VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64
VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PS-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PS-xmmreg-mask-z.ymmrm256-b64))

(setf (gethash "VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VCVTUQQ2PS-ymmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VCVTUSI2SD" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SD-xmmreg.xmmreg-er.rm32
VCVTUSI2SD-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTUSI2SD-xmmreg.xmmreg-er.rm32" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SD-xmmreg.xmmreg-er.rm32))

(setf (gethash "VCVTUSI2SD-xmmreg.xmmreg-er.rm64" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SD-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTUSI2SS" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SS-xmmreg.xmmreg-er.rm32
VCVTUSI2SS-xmmreg.xmmreg-er.rm64))

(setf (gethash "VCVTUSI2SS-xmmreg.xmmreg-er.rm32" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SS-xmmreg.xmmreg-er.rm32))

(setf (gethash "VCVTUSI2SS-xmmreg.xmmreg-er.rm64" *x64-instruction-variants-hash-table*) (list
VCVTUSI2SS-xmmreg.xmmreg-er.rm64))

(setf (gethash "VDBPSADBW" *x64-instruction-variants-hash-table*) (list
VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8
VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8
VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8))

(setf (gethash "VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VDBPSADBW-xmmreg-mask-z.xmmreg.xmmrm128.imm8))

(setf (gethash "VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VDBPSADBW-ymmreg-mask-z.ymmreg.ymmrm256.imm8))

(setf (gethash "VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VDBPSADBW-zmmreg-mask-z.zmmreg.zmmrm512.imm8))

(setf (gethash "VDIVPD" *x64-instruction-variants-hash-table*) (list
VDIVPD-xmmreg.xmmreg*.xmmrm128
VDIVPD-ymmreg.ymmreg*.ymmrm256
VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VDIVPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VDIVPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VDIVPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VDIVPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VDIVPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VDIVPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VDIVPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VDIVPS" *x64-instruction-variants-hash-table*) (list
VDIVPS-xmmreg.xmmreg*.xmmrm128
VDIVPS-ymmreg.ymmreg*.ymmrm256
VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VDIVPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VDIVPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VDIVPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VDIVPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VDIVPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VDIVPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VDIVPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VDIVSD" *x64-instruction-variants-hash-table*) (list
VDIVSD-xmmreg.xmmreg*.xmmrm64
VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VDIVSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VDIVSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VDIVSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VDIVSS" *x64-instruction-variants-hash-table*) (list
VDIVSS-xmmreg.xmmreg*.xmmrm32
VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VDIVSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VDIVSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VDIVSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VDPPD" *x64-instruction-variants-hash-table*) (list
VDPPD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VDPPD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VDPPD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VDPPS" *x64-instruction-variants-hash-table*) (list
VDPPS-xmmreg.xmmreg*.xmmrm128.imm8
VDPPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VDPPS-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VDPPS-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VDPPS-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VDPPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VERR" *x64-instruction-variants-hash-table*) (list
VERR-mem
VERR-mem16
VERR-reg16))

(setf (gethash "VERR-mem" *x64-instruction-variants-hash-table*) (list
VERR-mem))

(setf (gethash "VERR-mem16" *x64-instruction-variants-hash-table*) (list
VERR-mem16))

(setf (gethash "VERR-reg16" *x64-instruction-variants-hash-table*) (list
VERR-reg16))

(setf (gethash "VERW" *x64-instruction-variants-hash-table*) (list
VERW-mem
VERW-mem16
VERW-reg16))

(setf (gethash "VERW-mem" *x64-instruction-variants-hash-table*) (list
VERW-mem))

(setf (gethash "VERW-mem16" *x64-instruction-variants-hash-table*) (list
VERW-mem16))

(setf (gethash "VERW-reg16" *x64-instruction-variants-hash-table*) (list
VERW-reg16))

(setf (gethash "VEXP2PD" *x64-instruction-variants-hash-table*) (list
VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VEXP2PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VEXP2PS" *x64-instruction-variants-hash-table*) (list
VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VEXP2PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VEXPANDPD" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-xmmreg-mask-z.mem128
VEXPANDPD-ymmreg-mask-z.mem256
VEXPANDPD-zmmreg-mask-z.mem512
VEXPANDPD-xmmreg-mask-z.xmmreg
VEXPANDPD-ymmreg-mask-z.ymmreg
VEXPANDPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VEXPANDPD-xmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-xmmreg-mask-z.mem128))

(setf (gethash "VEXPANDPD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-xmmreg-mask-z.xmmreg))

(setf (gethash "VEXPANDPD-ymmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-ymmreg-mask-z.mem256))

(setf (gethash "VEXPANDPD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-ymmreg-mask-z.ymmreg))

(setf (gethash "VEXPANDPD-zmmreg-mask-z.mem512" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-zmmreg-mask-z.mem512))

(setf (gethash "VEXPANDPD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VEXPANDPS" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-xmmreg-mask-z.mem128
VEXPANDPS-ymmreg-mask-z.mem256
VEXPANDPS-zmmreg-mask-z.mem512
VEXPANDPS-xmmreg-mask-z.xmmreg
VEXPANDPS-ymmreg-mask-z.ymmreg
VEXPANDPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VEXPANDPS-xmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-xmmreg-mask-z.mem128))

(setf (gethash "VEXPANDPS-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-xmmreg-mask-z.xmmreg))

(setf (gethash "VEXPANDPS-ymmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-ymmreg-mask-z.mem256))

(setf (gethash "VEXPANDPS-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-ymmreg-mask-z.ymmreg))

(setf (gethash "VEXPANDPS-zmmreg-mask-z.mem512" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-zmmreg-mask-z.mem512))

(setf (gethash "VEXPANDPS-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VEXPANDPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VEXTRACTF128" *x64-instruction-variants-hash-table*) (list
VEXTRACTF128-xmmrm128.ymmreg.imm8))

(setf (gethash "VEXTRACTF128-xmmrm128.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF128-xmmrm128.ymmreg.imm8))

(setf (gethash "VEXTRACTF32X4" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8
VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8
VEXTRACTF32X4-mem128-mask.ymmreg.imm8
VEXTRACTF32X4-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF32X4-mem128-mask.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X4-mem128-mask.ymmreg.imm8))

(setf (gethash "VEXTRACTF32X4-mem128-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X4-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X4-xmmreg-mask-z.ymmreg.imm8))

(setf (gethash "VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X4-xmmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTF32X8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8
VEXTRACTF32X8-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF32X8-mem256-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X8-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF32X8-ymmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X2" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8
VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8
VEXTRACTF64X2-mem128-mask.ymmreg.imm8
VEXTRACTF64X2-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X2-mem128-mask.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X2-mem128-mask.ymmreg.imm8))

(setf (gethash "VEXTRACTF64X2-mem128-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X2-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X2-xmmreg-mask-z.ymmreg.imm8))

(setf (gethash "VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X2-xmmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X4" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8
VEXTRACTF64X4-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X4-mem256-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X4-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTF64X4-ymmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTI128" *x64-instruction-variants-hash-table*) (list
VEXTRACTI128-xmmrm128.ymmreg.imm8))

(setf (gethash "VEXTRACTI128-xmmrm128.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI128-xmmrm128.ymmreg.imm8))

(setf (gethash "VEXTRACTI32X4" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8
VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8
VEXTRACTI32X4-mem128-mask.ymmreg.imm8
VEXTRACTI32X4-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI32X4-mem128-mask.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X4-mem128-mask.ymmreg.imm8))

(setf (gethash "VEXTRACTI32X4-mem128-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X4-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X4-xmmreg-mask-z.ymmreg.imm8))

(setf (gethash "VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X4-xmmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTI32X8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8
VEXTRACTI32X8-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI32X8-mem256-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X8-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI32X8-ymmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X2" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8
VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8
VEXTRACTI64X2-mem128-mask.ymmreg.imm8
VEXTRACTI64X2-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X2-mem128-mask.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X2-mem128-mask.ymmreg.imm8))

(setf (gethash "VEXTRACTI64X2-mem128-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X2-mem128-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X2-xmmreg-mask-z.ymmreg.imm8))

(setf (gethash "VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X2-xmmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X4" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8
VEXTRACTI64X4-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X4-mem256-mask.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X4-mem256-mask.zmmreg.imm8))

(setf (gethash "VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTI64X4-ymmreg-mask-z.zmmreg.imm8))

(setf (gethash "VEXTRACTPS" *x64-instruction-variants-hash-table*) (list
VEXTRACTPS-rm32.xmmreg.imm8
VEXTRACTPS-reg32.xmmreg.imm8
VEXTRACTPS-reg64.xmmreg.imm8
VEXTRACTPS-mem32.xmmreg.imm8))

(setf (gethash "VEXTRACTPS-mem32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTPS-mem32.xmmreg.imm8))

(setf (gethash "VEXTRACTPS-reg32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTPS-reg32.xmmreg.imm8))

(setf (gethash "VEXTRACTPS-reg64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTPS-reg64.xmmreg.imm8))

(setf (gethash "VEXTRACTPS-rm32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VEXTRACTPS-rm32.xmmreg.imm8))

(setf (gethash "VFIXUPIMMPD" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8
VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VFIXUPIMMPS" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8
VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VFIXUPIMMSD" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VFIXUPIMMSS" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VFIXUPIMMSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VFMADD123PD" *x64-instruction-variants-hash-table*) (list
VFMADD123PD-xmmreg.xmmreg.xmmrm128
VFMADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD123PS" *x64-instruction-variants-hash-table*) (list
VFMADD123PS-xmmreg.xmmreg.xmmrm128
VFMADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD123SD" *x64-instruction-variants-hash-table*) (list
VFMADD123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD123SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD123SS" *x64-instruction-variants-hash-table*) (list
VFMADD123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD123SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD132PD" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-xmmreg.xmmreg.xmmrm128
VFMADD132PD-ymmreg.ymmreg.ymmrm256
VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADD132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADD132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD132PS" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-xmmreg.xmmreg.xmmrm128
VFMADD132PS-ymmreg.ymmreg.ymmrm256
VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADD132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADD132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD132SD" *x64-instruction-variants-hash-table*) (list
VFMADD132SD-xmmreg.xmmreg.xmmrm64
VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD132SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD132SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD132SS" *x64-instruction-variants-hash-table*) (list
VFMADD132SS-xmmreg.xmmreg.xmmrm32
VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD132SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD132SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD213PD" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-xmmreg.xmmreg.xmmrm128
VFMADD213PD-ymmreg.ymmreg.ymmrm256
VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADD213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADD213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD213PS" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-xmmreg.xmmreg.xmmrm128
VFMADD213PS-ymmreg.ymmreg.ymmrm256
VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADD213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADD213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD213SD" *x64-instruction-variants-hash-table*) (list
VFMADD213SD-xmmreg.xmmreg.xmmrm64
VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD213SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD213SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD213SS" *x64-instruction-variants-hash-table*) (list
VFMADD213SS-xmmreg.xmmreg.xmmrm32
VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD213SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD213SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD231PD" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-xmmreg.xmmreg.xmmrm128
VFMADD231PD-ymmreg.ymmreg.ymmrm256
VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADD231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADD231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADD231PS" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-xmmreg.xmmreg.xmmrm128
VFMADD231PS-ymmreg.ymmreg.ymmrm256
VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADD231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADD231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADD231SD" *x64-instruction-variants-hash-table*) (list
VFMADD231SD-xmmreg.xmmreg.xmmrm64
VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMADD231SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD231SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD231SS" *x64-instruction-variants-hash-table*) (list
VFMADD231SS-xmmreg.xmmreg.xmmrm32
VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMADD231SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD231SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD312PD" *x64-instruction-variants-hash-table*) (list
VFMADD312PD-xmmreg.xmmreg.xmmrm128
VFMADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD312PS" *x64-instruction-variants-hash-table*) (list
VFMADD312PS-xmmreg.xmmreg.xmmrm128
VFMADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD312SD" *x64-instruction-variants-hash-table*) (list
VFMADD312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD312SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD312SS" *x64-instruction-variants-hash-table*) (list
VFMADD312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD312SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD321PD" *x64-instruction-variants-hash-table*) (list
VFMADD321PD-xmmreg.xmmreg.xmmrm128
VFMADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD321PS" *x64-instruction-variants-hash-table*) (list
VFMADD321PS-xmmreg.xmmreg.xmmrm128
VFMADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADD321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADD321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADD321SD" *x64-instruction-variants-hash-table*) (list
VFMADD321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD321SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADD321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMADD321SS" *x64-instruction-variants-hash-table*) (list
VFMADD321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADD321SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADD321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMADDPD" *x64-instruction-variants-hash-table*) (list
VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMADDPS" *x64-instruction-variants-hash-table*) (list
VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMADDSD" *x64-instruction-variants-hash-table*) (list
VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg
VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg))

(setf (gethash "VFMADDSS" *x64-instruction-variants-hash-table*) (list
VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg
VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg))

(setf (gethash "VFMADDSUB123PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB123PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB132PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256
VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB132PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256
VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB213PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256
VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB213PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256
VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB231PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256
VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMADDSUB231PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256
VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMADDSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMADDSUB312PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB312PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB321PD" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128
VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB321PS" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128
VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUBPD" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMADDSUBPS" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMADDSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMSUB123PD" *x64-instruction-variants-hash-table*) (list
VFMSUB123PD-xmmreg.xmmreg.xmmrm128
VFMSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB123PS" *x64-instruction-variants-hash-table*) (list
VFMSUB123PS-xmmreg.xmmreg.xmmrm128
VFMSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB123SD" *x64-instruction-variants-hash-table*) (list
VFMSUB123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB123SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB123SS" *x64-instruction-variants-hash-table*) (list
VFMSUB123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB123SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB132PD" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-xmmreg.xmmreg.xmmrm128
VFMSUB132PD-ymmreg.ymmreg.ymmrm256
VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUB132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUB132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB132PS" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-xmmreg.xmmreg.xmmrm128
VFMSUB132PS-ymmreg.ymmreg.ymmrm256
VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUB132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUB132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB132SD" *x64-instruction-variants-hash-table*) (list
VFMSUB132SD-xmmreg.xmmreg.xmmrm64
VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB132SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB132SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB132SS" *x64-instruction-variants-hash-table*) (list
VFMSUB132SS-xmmreg.xmmreg.xmmrm32
VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB132SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB132SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB213PD" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-xmmreg.xmmreg.xmmrm128
VFMSUB213PD-ymmreg.ymmreg.ymmrm256
VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUB213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUB213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB213PS" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-xmmreg.xmmreg.xmmrm128
VFMSUB213PS-ymmreg.ymmreg.ymmrm256
VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUB213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUB213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB213SD" *x64-instruction-variants-hash-table*) (list
VFMSUB213SD-xmmreg.xmmreg.xmmrm64
VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB213SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB213SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB213SS" *x64-instruction-variants-hash-table*) (list
VFMSUB213SS-xmmreg.xmmreg.xmmrm32
VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB213SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB213SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB231PD" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-xmmreg.xmmreg.xmmrm128
VFMSUB231PD-ymmreg.ymmreg.ymmrm256
VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUB231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUB231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUB231PS" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-xmmreg.xmmreg.xmmrm128
VFMSUB231PS-ymmreg.ymmreg.ymmrm256
VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUB231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUB231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUB231SD" *x64-instruction-variants-hash-table*) (list
VFMSUB231SD-xmmreg.xmmreg.xmmrm64
VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFMSUB231SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB231SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB231SS" *x64-instruction-variants-hash-table*) (list
VFMSUB231SS-xmmreg.xmmreg.xmmrm32
VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFMSUB231SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB231SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB312PD" *x64-instruction-variants-hash-table*) (list
VFMSUB312PD-xmmreg.xmmreg.xmmrm128
VFMSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB312PS" *x64-instruction-variants-hash-table*) (list
VFMSUB312PS-xmmreg.xmmreg.xmmrm128
VFMSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB312SD" *x64-instruction-variants-hash-table*) (list
VFMSUB312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB312SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB312SS" *x64-instruction-variants-hash-table*) (list
VFMSUB312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB312SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB321PD" *x64-instruction-variants-hash-table*) (list
VFMSUB321PD-xmmreg.xmmreg.xmmrm128
VFMSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB321PS" *x64-instruction-variants-hash-table*) (list
VFMSUB321PS-xmmreg.xmmreg.xmmrm128
VFMSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUB321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUB321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUB321SD" *x64-instruction-variants-hash-table*) (list
VFMSUB321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB321SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUB321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFMSUB321SS" *x64-instruction-variants-hash-table*) (list
VFMSUB321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUB321SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUB321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFMSUBADD123PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD123PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD132PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256
VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD132PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256
VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD213PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256
VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD213PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256
VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD231PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256
VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFMSUBADD231PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256
VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFMSUBADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFMSUBADD312PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD312PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD321PD" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128
VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD321PS" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128
VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADDPD" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMSUBADDPS" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMSUBPD" *x64-instruction-variants-hash-table*) (list
VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMSUBPS" *x64-instruction-variants-hash-table*) (list
VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFMSUBSD" *x64-instruction-variants-hash-table*) (list
VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg
VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg))

(setf (gethash "VFMSUBSS" *x64-instruction-variants-hash-table*) (list
VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg
VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg" *x64-instruction-variants-hash-table*) (list
VFMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg))

(setf (gethash "VFNMADD123PD" *x64-instruction-variants-hash-table*) (list
VFNMADD123PD-xmmreg.xmmreg.xmmrm128
VFNMADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD123PS" *x64-instruction-variants-hash-table*) (list
VFNMADD123PS-xmmreg.xmmreg.xmmrm128
VFNMADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD123SD" *x64-instruction-variants-hash-table*) (list
VFNMADD123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD123SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD123SS" *x64-instruction-variants-hash-table*) (list
VFNMADD123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD123SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD132PD" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-xmmreg.xmmreg.xmmrm128
VFNMADD132PD-ymmreg.ymmreg.ymmrm256
VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMADD132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMADD132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD132PS" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-xmmreg.xmmreg.xmmrm128
VFNMADD132PS-ymmreg.ymmreg.ymmrm256
VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMADD132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMADD132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD132SD" *x64-instruction-variants-hash-table*) (list
VFNMADD132SD-xmmreg.xmmreg.xmmrm64
VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD132SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD132SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD132SS" *x64-instruction-variants-hash-table*) (list
VFNMADD132SS-xmmreg.xmmreg.xmmrm32
VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD132SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD132SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD213PD" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-xmmreg.xmmreg.xmmrm128
VFNMADD213PD-ymmreg.ymmreg.ymmrm256
VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMADD213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMADD213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD213PS" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-xmmreg.xmmreg.xmmrm128
VFNMADD213PS-ymmreg.ymmreg.ymmrm256
VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMADD213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMADD213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD213SD" *x64-instruction-variants-hash-table*) (list
VFNMADD213SD-xmmreg.xmmreg.xmmrm64
VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD213SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD213SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD213SS" *x64-instruction-variants-hash-table*) (list
VFNMADD213SS-xmmreg.xmmreg.xmmrm32
VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD213SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD213SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD231PD" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-xmmreg.xmmreg.xmmrm128
VFNMADD231PD-ymmreg.ymmreg.ymmrm256
VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMADD231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMADD231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMADD231PS" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-xmmreg.xmmreg.xmmrm128
VFNMADD231PS-ymmreg.ymmreg.ymmrm256
VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMADD231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMADD231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMADD231SD" *x64-instruction-variants-hash-table*) (list
VFNMADD231SD-xmmreg.xmmreg.xmmrm64
VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMADD231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMADD231SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD231SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD231SS" *x64-instruction-variants-hash-table*) (list
VFNMADD231SS-xmmreg.xmmreg.xmmrm32
VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMADD231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMADD231SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD231SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD312PD" *x64-instruction-variants-hash-table*) (list
VFNMADD312PD-xmmreg.xmmreg.xmmrm128
VFNMADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD312PS" *x64-instruction-variants-hash-table*) (list
VFNMADD312PS-xmmreg.xmmreg.xmmrm128
VFNMADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD312SD" *x64-instruction-variants-hash-table*) (list
VFNMADD312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD312SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD312SS" *x64-instruction-variants-hash-table*) (list
VFNMADD312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD312SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD321PD" *x64-instruction-variants-hash-table*) (list
VFNMADD321PD-xmmreg.xmmreg.xmmrm128
VFNMADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD321PS" *x64-instruction-variants-hash-table*) (list
VFNMADD321PS-xmmreg.xmmreg.xmmrm128
VFNMADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADD321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMADD321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADD321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMADD321SD" *x64-instruction-variants-hash-table*) (list
VFNMADD321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD321SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADD321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMADD321SS" *x64-instruction-variants-hash-table*) (list
VFNMADD321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADD321SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADD321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMADDPD" *x64-instruction-variants-hash-table*) (list
VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADDPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADDPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFNMADDPS" *x64-instruction-variants-hash-table*) (list
VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMADDPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMADDPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFNMADDSD" *x64-instruction-variants-hash-table*) (list
VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg
VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMADDSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDSD-xmmreg.xmmreg*.xmmrm64.xmmreg))

(setf (gethash "VFNMADDSS" *x64-instruction-variants-hash-table*) (list
VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg
VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMADDSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMADDSS-xmmreg.xmmreg*.xmmrm32.xmmreg))

(setf (gethash "VFNMSUB123PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PD-xmmreg.xmmreg.xmmrm128
VFNMSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB123PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB123PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB123PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PS-xmmreg.xmmreg.xmmrm128
VFNMSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB123PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB123PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB123PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB123SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB123SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB123SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB123SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB123SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB123SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB132PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-xmmreg.xmmreg.xmmrm128
VFNMSUB132PD-ymmreg.ymmreg.ymmrm256
VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMSUB132PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMSUB132PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB132PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-xmmreg.xmmreg.xmmrm128
VFNMSUB132PS-ymmreg.ymmreg.ymmrm256
VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMSUB132PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMSUB132PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB132PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB132SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SD-xmmreg.xmmreg.xmmrm64
VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB132SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB132SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SS-xmmreg.xmmreg.xmmrm32
VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB132SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB132SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB213PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-xmmreg.xmmreg.xmmrm128
VFNMSUB213PD-ymmreg.ymmreg.ymmrm256
VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMSUB213PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMSUB213PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB213PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-xmmreg.xmmreg.xmmrm128
VFNMSUB213PS-ymmreg.ymmreg.ymmrm256
VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMSUB213PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMSUB213PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB213PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB213SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SD-xmmreg.xmmreg.xmmrm64
VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB213SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB213SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SS-xmmreg.xmmreg.xmmrm32
VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB213SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB213SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB231PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-xmmreg.xmmreg.xmmrm128
VFNMSUB231PD-ymmreg.ymmreg.ymmrm256
VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VFNMSUB231PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VFNMSUB231PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VFNMSUB231PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-xmmreg.xmmreg.xmmrm128
VFNMSUB231PS-ymmreg.ymmreg.ymmrm256
VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VFNMSUB231PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VFNMSUB231PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB231PS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VFNMSUB231SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SD-xmmreg.xmmreg.xmmrm64
VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VFNMSUB231SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB231SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SS-xmmreg.xmmreg.xmmrm32
VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VFNMSUB231SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB231SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB312PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PD-xmmreg.xmmreg.xmmrm128
VFNMSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB312PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB312PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB312PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PS-xmmreg.xmmreg.xmmrm128
VFNMSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB312PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB312PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB312PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB312SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB312SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB312SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB312SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB312SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB312SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB321PD" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PD-xmmreg.xmmreg.xmmrm128
VFNMSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB321PD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB321PD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB321PS" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PS-xmmreg.xmmreg.xmmrm128
VFNMSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB321PS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VFNMSUB321PS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUB321PS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VFNMSUB321SD" *x64-instruction-variants-hash-table*) (list
VFNMSUB321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB321SD-xmmreg.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUB321SD-xmmreg.xmmreg.xmmrm64))

(setf (gethash "VFNMSUB321SS" *x64-instruction-variants-hash-table*) (list
VFNMSUB321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUB321SS-xmmreg.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUB321SS-xmmreg.xmmreg.xmmrm32))

(setf (gethash "VFNMSUBPD" *x64-instruction-variants-hash-table*) (list
VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg
VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg
VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128
VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUBPD-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBPD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUBPD-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBPD-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFNMSUBPS" *x64-instruction-variants-hash-table*) (list
VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg
VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg
VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128
VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VFNMSUBPS-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBPS-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VFNMSUBPS-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBPS-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VFNMSUBSD" *x64-instruction-variants-hash-table*) (list
VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg
VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VFNMSUBSD-xmmreg.xmmreg*.xmmreg.xmmrm64))

(setf (gethash "VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBSD-xmmreg.xmmreg*.xmmrm64.xmmreg))

(setf (gethash "VFNMSUBSS" *x64-instruction-variants-hash-table*) (list
VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg
VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VFNMSUBSS-xmmreg.xmmreg*.xmmreg.xmmrm32))

(setf (gethash "VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg" *x64-instruction-variants-hash-table*) (list
VFNMSUBSS-xmmreg.xmmreg*.xmmrm32.xmmreg))

(setf (gethash "VFPCLASSPD" *x64-instruction-variants-hash-table*) (list
VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8
VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8
VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8))

(setf (gethash "VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPD-kreg-mask.xmmrm128-b64.imm8))

(setf (gethash "VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPD-kreg-mask.ymmrm256-b64.imm8))

(setf (gethash "VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPD-kreg-mask.zmmrm512-b64.imm8))

(setf (gethash "VFPCLASSPS" *x64-instruction-variants-hash-table*) (list
VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8
VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8
VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8))

(setf (gethash "VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPS-kreg-mask.xmmrm128-b32.imm8))

(setf (gethash "VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPS-kreg-mask.ymmrm256-b32.imm8))

(setf (gethash "VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSPS-kreg-mask.zmmrm512-b32.imm8))

(setf (gethash "VFPCLASSSD" *x64-instruction-variants-hash-table*) (list
VFPCLASSSD-kreg-mask.xmmrm64.imm8))

(setf (gethash "VFPCLASSSD-kreg-mask.xmmrm64.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSSD-kreg-mask.xmmrm64.imm8))

(setf (gethash "VFPCLASSSS" *x64-instruction-variants-hash-table*) (list
VFPCLASSSS-kreg-mask.xmmrm32.imm8))

(setf (gethash "VFPCLASSSS-kreg-mask.xmmrm32.imm8" *x64-instruction-variants-hash-table*) (list
VFPCLASSSS-kreg-mask.xmmrm32.imm8))

(setf (gethash "VFRCZPD" *x64-instruction-variants-hash-table*) (list
VFRCZPD-xmmreg.xmmrm128*
VFRCZPD-ymmreg.ymmrm256*))

(setf (gethash "VFRCZPD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VFRCZPD-xmmreg.xmmrm128*))

(setf (gethash "VFRCZPD-ymmreg.ymmrm256*" *x64-instruction-variants-hash-table*) (list
VFRCZPD-ymmreg.ymmrm256*))

(setf (gethash "VFRCZPS" *x64-instruction-variants-hash-table*) (list
VFRCZPS-xmmreg.xmmrm128*
VFRCZPS-ymmreg.ymmrm256*))

(setf (gethash "VFRCZPS-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VFRCZPS-xmmreg.xmmrm128*))

(setf (gethash "VFRCZPS-ymmreg.ymmrm256*" *x64-instruction-variants-hash-table*) (list
VFRCZPS-ymmreg.ymmrm256*))

(setf (gethash "VFRCZSD" *x64-instruction-variants-hash-table*) (list
VFRCZSD-xmmreg.xmmrm64*))

(setf (gethash "VFRCZSD-xmmreg.xmmrm64*" *x64-instruction-variants-hash-table*) (list
VFRCZSD-xmmreg.xmmrm64*))

(setf (gethash "VFRCZSS" *x64-instruction-variants-hash-table*) (list
VFRCZSS-xmmreg.xmmrm32*))

(setf (gethash "VFRCZSS-xmmreg.xmmrm32*" *x64-instruction-variants-hash-table*) (list
VFRCZSS-xmmreg.xmmrm32*))

(setf (gethash "VGATHERDPD" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-xmmreg.xmem64.xmmreg
VGATHERDPD-ymmreg.xmem64.ymmreg
VGATHERDPD-xmmreg-mask.xmem64
VGATHERDPD-ymmreg-mask.xmem64
VGATHERDPD-zmmreg-mask.ymem64))

(setf (gethash "VGATHERDPD-xmmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-xmmreg-mask.xmem64))

(setf (gethash "VGATHERDPD-xmmreg.xmem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-xmmreg.xmem64.xmmreg))

(setf (gethash "VGATHERDPD-ymmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-ymmreg-mask.xmem64))

(setf (gethash "VGATHERDPD-ymmreg.xmem64.ymmreg" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-ymmreg.xmem64.ymmreg))

(setf (gethash "VGATHERDPD-zmmreg-mask.ymem64" *x64-instruction-variants-hash-table*) (list
VGATHERDPD-zmmreg-mask.ymem64))

(setf (gethash "VGATHERDPS" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-xmmreg.xmem32.xmmreg
VGATHERDPS-ymmreg.ymem32.ymmreg
VGATHERDPS-xmmreg-mask.xmem32
VGATHERDPS-ymmreg-mask.ymem32
VGATHERDPS-zmmreg-mask.zmem32))

(setf (gethash "VGATHERDPS-xmmreg-mask.xmem32" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-xmmreg-mask.xmem32))

(setf (gethash "VGATHERDPS-xmmreg.xmem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-xmmreg.xmem32.xmmreg))

(setf (gethash "VGATHERDPS-ymmreg-mask.ymem32" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-ymmreg-mask.ymem32))

(setf (gethash "VGATHERDPS-ymmreg.ymem32.ymmreg" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-ymmreg.ymem32.ymmreg))

(setf (gethash "VGATHERDPS-zmmreg-mask.zmem32" *x64-instruction-variants-hash-table*) (list
VGATHERDPS-zmmreg-mask.zmem32))

(setf (gethash "VGATHERPF0DPD" *x64-instruction-variants-hash-table*) (list
VGATHERPF0DPD-ymem64-mask))

(setf (gethash "VGATHERPF0DPD-ymem64-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF0DPD-ymem64-mask))

(setf (gethash "VGATHERPF0DPS" *x64-instruction-variants-hash-table*) (list
VGATHERPF0DPS-zmem32-mask))

(setf (gethash "VGATHERPF0DPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF0DPS-zmem32-mask))

(setf (gethash "VGATHERPF0QPD" *x64-instruction-variants-hash-table*) (list
VGATHERPF0QPD-zmem64-mask))

(setf (gethash "VGATHERPF0QPD-zmem64-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF0QPD-zmem64-mask))

(setf (gethash "VGATHERPF0QPS" *x64-instruction-variants-hash-table*) (list
VGATHERPF0QPS-zmem32-mask))

(setf (gethash "VGATHERPF0QPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF0QPS-zmem32-mask))

(setf (gethash "VGATHERPF1DPD" *x64-instruction-variants-hash-table*) (list
VGATHERPF1DPD-ymem64-mask))

(setf (gethash "VGATHERPF1DPD-ymem64-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF1DPD-ymem64-mask))

(setf (gethash "VGATHERPF1DPS" *x64-instruction-variants-hash-table*) (list
VGATHERPF1DPS-zmem32-mask))

(setf (gethash "VGATHERPF1DPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF1DPS-zmem32-mask))

(setf (gethash "VGATHERPF1QPD" *x64-instruction-variants-hash-table*) (list
VGATHERPF1QPD-zmem64-mask))

(setf (gethash "VGATHERPF1QPD-zmem64-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF1QPD-zmem64-mask))

(setf (gethash "VGATHERPF1QPS" *x64-instruction-variants-hash-table*) (list
VGATHERPF1QPS-zmem32-mask))

(setf (gethash "VGATHERPF1QPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VGATHERPF1QPS-zmem32-mask))

(setf (gethash "VGATHERQPD" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-xmmreg.xmem64.xmmreg
VGATHERQPD-ymmreg.ymem64.ymmreg
VGATHERQPD-xmmreg-mask.xmem64
VGATHERQPD-ymmreg-mask.ymem64
VGATHERQPD-zmmreg-mask.zmem64))

(setf (gethash "VGATHERQPD-xmmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-xmmreg-mask.xmem64))

(setf (gethash "VGATHERQPD-xmmreg.xmem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-xmmreg.xmem64.xmmreg))

(setf (gethash "VGATHERQPD-ymmreg-mask.ymem64" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-ymmreg-mask.ymem64))

(setf (gethash "VGATHERQPD-ymmreg.ymem64.ymmreg" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-ymmreg.ymem64.ymmreg))

(setf (gethash "VGATHERQPD-zmmreg-mask.zmem64" *x64-instruction-variants-hash-table*) (list
VGATHERQPD-zmmreg-mask.zmem64))

(setf (gethash "VGATHERQPS" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-xmmreg.xmem32.xmmreg
VGATHERQPS-xmmreg.ymem32.xmmreg
VGATHERQPS-xmmreg-mask.xmem32
VGATHERQPS-xmmreg-mask.ymem32
VGATHERQPS-ymmreg-mask.zmem32))

(setf (gethash "VGATHERQPS-xmmreg-mask.xmem32" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-xmmreg-mask.xmem32))

(setf (gethash "VGATHERQPS-xmmreg-mask.ymem32" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-xmmreg-mask.ymem32))

(setf (gethash "VGATHERQPS-xmmreg.xmem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-xmmreg.xmem32.xmmreg))

(setf (gethash "VGATHERQPS-xmmreg.ymem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-xmmreg.ymem32.xmmreg))

(setf (gethash "VGATHERQPS-ymmreg-mask.zmem32" *x64-instruction-variants-hash-table*) (list
VGATHERQPS-ymmreg-mask.zmem32))

(setf (gethash "VGETEXPPD" *x64-instruction-variants-hash-table*) (list
VGETEXPPD-xmmreg-mask-z.xmmrm128-b64
VGETEXPPD-ymmreg-mask-z.ymmrm256-b64
VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VGETEXPPD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VGETEXPPD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VGETEXPPD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VGETEXPPD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VGETEXPPD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VGETEXPPS" *x64-instruction-variants-hash-table*) (list
VGETEXPPS-xmmreg-mask-z.xmmrm128-b32
VGETEXPPS-ymmreg-mask-z.ymmrm256-b32
VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VGETEXPPS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VGETEXPPS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VGETEXPPS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VGETEXPPS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VGETEXPPS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VGETEXPSD" *x64-instruction-variants-hash-table*) (list
VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VGETEXPSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VGETEXPSS" *x64-instruction-variants-hash-table*) (list
VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VGETEXPSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VGETMANTPD" *x64-instruction-variants-hash-table*) (list
VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8
VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8
VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPD-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPD-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VGETMANTPS" *x64-instruction-variants-hash-table*) (list
VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8
VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8
VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPS-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPS-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VGETMANTSD" *x64-instruction-variants-hash-table*) (list
VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTSD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VGETMANTSS" *x64-instruction-variants-hash-table*) (list
VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VGETMANTSS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VHADDPD" *x64-instruction-variants-hash-table*) (list
VHADDPD-xmmreg.xmmreg*.xmmrm128
VHADDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHADDPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VHADDPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VHADDPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VHADDPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHADDPS" *x64-instruction-variants-hash-table*) (list
VHADDPS-xmmreg.xmmreg*.xmmrm128
VHADDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHADDPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VHADDPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VHADDPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VHADDPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHSUBPD" *x64-instruction-variants-hash-table*) (list
VHSUBPD-xmmreg.xmmreg*.xmmrm128
VHSUBPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHSUBPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VHSUBPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VHSUBPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VHSUBPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHSUBPS" *x64-instruction-variants-hash-table*) (list
VHSUBPS-xmmreg.xmmreg*.xmmrm128
VHSUBPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VHSUBPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VHSUBPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VHSUBPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VHSUBPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VINSERTF128" *x64-instruction-variants-hash-table*) (list
VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF128-ymmreg.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF32X4" *x64-instruction-variants-hash-table*) (list
VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8
VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF32X8" *x64-instruction-variants-hash-table*) (list
VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTF64X2" *x64-instruction-variants-hash-table*) (list
VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8
VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTF64X4" *x64-instruction-variants-hash-table*) (list
VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTF64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTI128" *x64-instruction-variants-hash-table*) (list
VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8))

(setf (gethash "VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI128-ymmreg.ymmreg*.xmmrm128.imm8))

(setf (gethash "VINSERTI32X4" *x64-instruction-variants-hash-table*) (list
VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8
VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI32X4-ymmreg-mask-z.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI32X4-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI32X8" *x64-instruction-variants-hash-table*) (list
VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI32X8-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTI64X2" *x64-instruction-variants-hash-table*) (list
VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8
VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI64X2-ymmreg-mask-z.ymmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI64X2-zmmreg-mask-z.zmmreg.xmmrm128.imm8))

(setf (gethash "VINSERTI64X4" *x64-instruction-variants-hash-table*) (list
VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTI64X4-zmmreg-mask-z.zmmreg.ymmrm256.imm8))

(setf (gethash "VINSERTPS" *x64-instruction-variants-hash-table*) (list
VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8
VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8))

(setf (gethash "VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTPS-xmmreg.xmmreg*.xmmrm32.imm8))

(setf (gethash "VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8" *x64-instruction-variants-hash-table*) (list
VINSERTPS-xmmreg.xmmreg.xmmrm32.imm8))

(setf (gethash "VLDDQU" *x64-instruction-variants-hash-table*) (list
VLDDQU-xmmreg.mem128
VLDDQU-ymmreg.mem256))

(setf (gethash "VLDDQU-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VLDDQU-xmmreg.mem128))

(setf (gethash "VLDDQU-ymmreg.mem256" *x64-instruction-variants-hash-table*) (list
VLDDQU-ymmreg.mem256))

(setf (gethash "VLDMXCSR" *x64-instruction-variants-hash-table*) (list
VLDMXCSR-mem32))

(setf (gethash "VLDMXCSR-mem32" *x64-instruction-variants-hash-table*) (list
VLDMXCSR-mem32))

(setf (gethash "VLDQQU" *x64-instruction-variants-hash-table*) (list
VLDQQU-ymmreg.mem256))

(setf (gethash "VLDQQU-ymmreg.mem256" *x64-instruction-variants-hash-table*) (list
VLDQQU-ymmreg.mem256))

(setf (gethash "VMASKMOVDQU" *x64-instruction-variants-hash-table*) (list
VMASKMOVDQU-xmmreg.xmmreg))

(setf (gethash "VMASKMOVDQU-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMASKMOVDQU-xmmreg.xmmreg))

(setf (gethash "VMASKMOVPD" *x64-instruction-variants-hash-table*) (list
VMASKMOVPD-xmmreg.xmmreg.mem128
VMASKMOVPD-ymmreg.ymmreg.mem256
VMASKMOVPD-mem128.xmmreg.xmmreg
VMASKMOVPD-mem256.ymmreg.ymmreg))

(setf (gethash "VMASKMOVPD-mem128.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMASKMOVPD-mem128.xmmreg.xmmreg))

(setf (gethash "VMASKMOVPD-mem256.ymmreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VMASKMOVPD-mem256.ymmreg.ymmreg))

(setf (gethash "VMASKMOVPD-xmmreg.xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VMASKMOVPD-xmmreg.xmmreg.mem128))

(setf (gethash "VMASKMOVPD-ymmreg.ymmreg.mem256" *x64-instruction-variants-hash-table*) (list
VMASKMOVPD-ymmreg.ymmreg.mem256))

(setf (gethash "VMASKMOVPS" *x64-instruction-variants-hash-table*) (list
VMASKMOVPS-xmmreg.xmmreg.mem128
VMASKMOVPS-ymmreg.ymmreg.mem256
VMASKMOVPS-mem128.xmmreg.xmmreg
VMASKMOVPS-mem256.ymmreg.ymmreg))

(setf (gethash "VMASKMOVPS-mem128.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMASKMOVPS-mem128.xmmreg.xmmreg))

(setf (gethash "VMASKMOVPS-mem256.ymmreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VMASKMOVPS-mem256.ymmreg.ymmreg))

(setf (gethash "VMASKMOVPS-xmmreg.xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VMASKMOVPS-xmmreg.xmmreg.mem128))

(setf (gethash "VMASKMOVPS-ymmreg.ymmreg.mem256" *x64-instruction-variants-hash-table*) (list
VMASKMOVPS-ymmreg.ymmreg.mem256))

(setf (gethash "VMAXPD" *x64-instruction-variants-hash-table*) (list
VMAXPD-xmmreg.xmmreg*.xmmrm128
VMAXPD-ymmreg.ymmreg*.ymmrm256
VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae))

(setf (gethash "VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VMAXPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VMAXPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMAXPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VMAXPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VMAXPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMAXPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VMAXPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae))

(setf (gethash "VMAXPS" *x64-instruction-variants-hash-table*) (list
VMAXPS-xmmreg.xmmreg*.xmmrm128
VMAXPS-ymmreg.ymmreg*.ymmrm256
VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae))

(setf (gethash "VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VMAXPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VMAXPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMAXPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VMAXPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VMAXPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMAXPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VMAXPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae))

(setf (gethash "VMAXSD" *x64-instruction-variants-hash-table*) (list
VMAXSD-xmmreg.xmmreg*.xmmrm64
VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VMAXSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VMAXSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMAXSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VMAXSS" *x64-instruction-variants-hash-table*) (list
VMAXSS-xmmreg.xmmreg*.xmmrm32
VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VMAXSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VMAXSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VMAXSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VMCALL" *x64-instruction-variants-hash-table*) (list
VMCALL-void))

(setf (gethash "VMCALL-void" *x64-instruction-variants-hash-table*) (list
VMCALL-void))

(setf (gethash "VMCLEAR" *x64-instruction-variants-hash-table*) (list
VMCLEAR-mem))

(setf (gethash "VMCLEAR-mem" *x64-instruction-variants-hash-table*) (list
VMCLEAR-mem))

(setf (gethash "VMFUNC" *x64-instruction-variants-hash-table*) (list
VMFUNC-void))

(setf (gethash "VMFUNC-void" *x64-instruction-variants-hash-table*) (list
VMFUNC-void))

(setf (gethash "VMINPD" *x64-instruction-variants-hash-table*) (list
VMINPD-xmmreg.xmmreg*.xmmrm128
VMINPD-ymmreg.ymmreg*.ymmrm256
VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae))

(setf (gethash "VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VMINPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VMINPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMINPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VMINPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VMINPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMINPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VMINPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae))

(setf (gethash "VMINPS" *x64-instruction-variants-hash-table*) (list
VMINPS-xmmreg.xmmreg*.xmmrm128
VMINPS-ymmreg.ymmreg*.ymmrm256
VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae))

(setf (gethash "VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VMINPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VMINPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMINPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VMINPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VMINPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMINPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VMINPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae))

(setf (gethash "VMINSD" *x64-instruction-variants-hash-table*) (list
VMINSD-xmmreg.xmmreg*.xmmrm64
VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VMINSD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VMINSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMINSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VMINSS" *x64-instruction-variants-hash-table*) (list
VMINSS-xmmreg.xmmreg*.xmmrm32
VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VMINSS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VMINSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VMINSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VMLAUNCH" *x64-instruction-variants-hash-table*) (list
VMLAUNCH-void))

(setf (gethash "VMLAUNCH-void" *x64-instruction-variants-hash-table*) (list
VMLAUNCH-void))

(setf (gethash "VMLOAD" *x64-instruction-variants-hash-table*) (list
VMLOAD-void))

(setf (gethash "VMLOAD-void" *x64-instruction-variants-hash-table*) (list
VMLOAD-void))

(setf (gethash "VMMCALL" *x64-instruction-variants-hash-table*) (list
VMMCALL-void))

(setf (gethash "VMMCALL-void" *x64-instruction-variants-hash-table*) (list
VMMCALL-void))

(setf (gethash "VMOVAPD" *x64-instruction-variants-hash-table*) (list
VMOVAPD-xmmreg.xmmrm128
VMOVAPD-xmmrm128.xmmreg
VMOVAPD-ymmreg.ymmrm256
VMOVAPD-ymmrm256.ymmreg
VMOVAPD-xmmreg-mask-z.xmmrm128
VMOVAPD-ymmreg-mask-z.ymmrm256
VMOVAPD-zmmreg-mask-z.zmmrm512
VMOVAPD-xmmreg-mask-z.xmmreg
VMOVAPD-ymmreg-mask-z.ymmreg
VMOVAPD-zmmreg-mask-z.zmmreg
VMOVAPD-mem128-mask.xmmreg
VMOVAPD-mem256-mask.ymmreg
VMOVAPD-mem512-mask.zmmreg))

(setf (gethash "VMOVAPD-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-mem128-mask.xmmreg))

(setf (gethash "VMOVAPD-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-mem256-mask.ymmreg))

(setf (gethash "VMOVAPD-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-mem512-mask.zmmreg))

(setf (gethash "VMOVAPD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVAPD-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVAPD-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVAPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVAPD-xmmreg.xmmrm128))

(setf (gethash "VMOVAPD-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-xmmrm128.xmmreg))

(setf (gethash "VMOVAPD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVAPD-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVAPD-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVAPD-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVAPD-ymmreg.ymmrm256))

(setf (gethash "VMOVAPD-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-ymmrm256.ymmreg))

(setf (gethash "VMOVAPD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVAPD-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVAPD-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVAPS" *x64-instruction-variants-hash-table*) (list
VMOVAPS-xmmreg.xmmrm128
VMOVAPS-xmmrm128.xmmreg
VMOVAPS-ymmreg.ymmrm256
VMOVAPS-ymmrm256.ymmreg
VMOVAPS-xmmreg-mask-z.xmmrm128
VMOVAPS-ymmreg-mask-z.ymmrm256
VMOVAPS-zmmreg-mask-z.zmmrm512
VMOVAPS-xmmreg-mask-z.xmmreg
VMOVAPS-ymmreg-mask-z.ymmreg
VMOVAPS-zmmreg-mask-z.zmmreg
VMOVAPS-mem128-mask.xmmreg
VMOVAPS-mem256-mask.ymmreg
VMOVAPS-mem512-mask.zmmreg))

(setf (gethash "VMOVAPS-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-mem128-mask.xmmreg))

(setf (gethash "VMOVAPS-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-mem256-mask.ymmreg))

(setf (gethash "VMOVAPS-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-mem512-mask.zmmreg))

(setf (gethash "VMOVAPS-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVAPS-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVAPS-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVAPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVAPS-xmmreg.xmmrm128))

(setf (gethash "VMOVAPS-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-xmmrm128.xmmreg))

(setf (gethash "VMOVAPS-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVAPS-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVAPS-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVAPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVAPS-ymmreg.ymmrm256))

(setf (gethash "VMOVAPS-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-ymmrm256.ymmreg))

(setf (gethash "VMOVAPS-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVAPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVAPS-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVAPS-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVD" *x64-instruction-variants-hash-table*) (list
VMOVD-xmmreg.rm32
VMOVD-rm32.xmmreg
VMOVD-xmmreg.rm32
VMOVD-rm32.xmmreg))

(setf (gethash "VMOVD-rm32.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVD-rm32.xmmreg
VMOVD-rm32.xmmreg))

(setf (gethash "VMOVD-xmmreg.rm32" *x64-instruction-variants-hash-table*) (list
VMOVD-xmmreg.rm32
VMOVD-xmmreg.rm32))

(setf (gethash "VMOVDDUP" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-xmmreg.xmmrm64
VMOVDDUP-ymmreg.ymmrm256
VMOVDDUP-xmmreg-mask-z.xmmrm64
VMOVDDUP-ymmreg-mask-z.ymmrm256
VMOVDDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDDUP-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-xmmreg-mask-z.xmmrm64))

(setf (gethash "VMOVDDUP-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-xmmreg.xmmrm64))

(setf (gethash "VMOVDDUP-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDDUP-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-ymmreg.ymmrm256))

(setf (gethash "VMOVDDUP-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQA" *x64-instruction-variants-hash-table*) (list
VMOVDQA-xmmreg.xmmrm128
VMOVDQA-xmmrm128.xmmreg
VMOVDQA-ymmreg.ymmrm
VMOVDQA-ymmrm256.ymmreg))

(setf (gethash "VMOVDQA-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQA-xmmreg.xmmrm128))

(setf (gethash "VMOVDQA-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA-xmmrm128.xmmreg))

(setf (gethash "VMOVDQA-ymmreg.ymmrm" *x64-instruction-variants-hash-table*) (list
VMOVDQA-ymmreg.ymmrm))

(setf (gethash "VMOVDQA-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA-ymmrm256.ymmreg))

(setf (gethash "VMOVDQA32" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-xmmreg-mask-z.xmmrm128
VMOVDQA32-ymmreg-mask-z.ymmrm256
VMOVDQA32-zmmreg-mask-z.zmmrm512
VMOVDQA32-xmmreg-mask-z.xmmreg
VMOVDQA32-ymmreg-mask-z.ymmreg
VMOVDQA32-zmmreg-mask-z.zmmreg
VMOVDQA32-mem128-mask.xmmreg
VMOVDQA32-mem256-mask.ymmreg
VMOVDQA32-mem512-mask.zmmreg))

(setf (gethash "VMOVDQA32-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-mem128-mask.xmmreg))

(setf (gethash "VMOVDQA32-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-mem256-mask.ymmreg))

(setf (gethash "VMOVDQA32-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-mem512-mask.zmmreg))

(setf (gethash "VMOVDQA32-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQA32-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQA32-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQA32-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQA32-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQA32-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQA32-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQA64" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-xmmreg-mask-z.xmmrm128
VMOVDQA64-ymmreg-mask-z.ymmrm256
VMOVDQA64-zmmreg-mask-z.zmmrm512
VMOVDQA64-xmmreg-mask-z.xmmreg
VMOVDQA64-ymmreg-mask-z.ymmreg
VMOVDQA64-zmmreg-mask-z.zmmreg
VMOVDQA64-mem128-mask.xmmreg
VMOVDQA64-mem256-mask.ymmreg
VMOVDQA64-mem512-mask.zmmreg))

(setf (gethash "VMOVDQA64-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-mem128-mask.xmmreg))

(setf (gethash "VMOVDQA64-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-mem256-mask.ymmreg))

(setf (gethash "VMOVDQA64-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-mem512-mask.zmmreg))

(setf (gethash "VMOVDQA64-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQA64-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQA64-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQA64-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQA64-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQA64-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQA64-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQU" *x64-instruction-variants-hash-table*) (list
VMOVDQU-xmmreg.xmmrm128
VMOVDQU-xmmrm128.xmmreg
VMOVDQU-ymmreg.ymmrm256
VMOVDQU-ymmrm256.ymmreg))

(setf (gethash "VMOVDQU-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQU-xmmreg.xmmrm128))

(setf (gethash "VMOVDQU-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU-xmmrm128.xmmreg))

(setf (gethash "VMOVDQU-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQU-ymmreg.ymmrm256))

(setf (gethash "VMOVDQU-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU-ymmrm256.ymmreg))

(setf (gethash "VMOVDQU16" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-xmmreg-mask-z.xmmrm128
VMOVDQU16-ymmreg-mask-z.ymmrm256
VMOVDQU16-zmmreg-mask-z.zmmrm512
VMOVDQU16-xmmreg-mask-z.xmmreg
VMOVDQU16-ymmreg-mask-z.ymmreg
VMOVDQU16-zmmreg-mask-z.zmmreg
VMOVDQU16-mem128-mask.xmmreg
VMOVDQU16-mem256-mask.ymmreg
VMOVDQU16-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU16-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-mem128-mask.xmmreg))

(setf (gethash "VMOVDQU16-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-mem256-mask.ymmreg))

(setf (gethash "VMOVDQU16-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU16-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQU16-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQU16-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQU16-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQU16-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQU16-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQU16-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQU32" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-xmmreg-mask-z.xmmrm128
VMOVDQU32-ymmreg-mask-z.ymmrm256
VMOVDQU32-zmmreg-mask-z.zmmrm512
VMOVDQU32-xmmreg-mask-z.xmmreg
VMOVDQU32-ymmreg-mask-z.ymmreg
VMOVDQU32-zmmreg-mask-z.zmmreg
VMOVDQU32-mem128-mask.xmmreg
VMOVDQU32-mem256-mask.ymmreg
VMOVDQU32-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU32-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-mem128-mask.xmmreg))

(setf (gethash "VMOVDQU32-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-mem256-mask.ymmreg))

(setf (gethash "VMOVDQU32-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU32-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQU32-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQU32-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQU32-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQU32-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQU32-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQU32-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQU64" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-xmmreg-mask-z.xmmrm128
VMOVDQU64-ymmreg-mask-z.ymmrm256
VMOVDQU64-zmmreg-mask-z.zmmrm512
VMOVDQU64-xmmreg-mask-z.xmmreg
VMOVDQU64-ymmreg-mask-z.ymmreg
VMOVDQU64-zmmreg-mask-z.zmmreg
VMOVDQU64-mem128-mask.xmmreg
VMOVDQU64-mem256-mask.ymmreg
VMOVDQU64-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU64-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-mem128-mask.xmmreg))

(setf (gethash "VMOVDQU64-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-mem256-mask.ymmreg))

(setf (gethash "VMOVDQU64-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU64-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQU64-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQU64-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQU64-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQU64-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQU64-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQU64-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVDQU8" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-xmmreg-mask-z.xmmrm128
VMOVDQU8-ymmreg-mask-z.ymmrm256
VMOVDQU8-zmmreg-mask-z.zmmrm512
VMOVDQU8-xmmreg-mask-z.xmmreg
VMOVDQU8-ymmreg-mask-z.ymmreg
VMOVDQU8-zmmreg-mask-z.zmmreg
VMOVDQU8-mem128-mask.xmmreg
VMOVDQU8-mem256-mask.ymmreg
VMOVDQU8-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU8-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-mem128-mask.xmmreg))

(setf (gethash "VMOVDQU8-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-mem256-mask.ymmreg))

(setf (gethash "VMOVDQU8-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-mem512-mask.zmmreg))

(setf (gethash "VMOVDQU8-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVDQU8-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVDQU8-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVDQU8-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVDQU8-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVDQU8-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVDQU8-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVHLPS" *x64-instruction-variants-hash-table*) (list
VMOVHLPS-xmmreg.xmmreg*.xmmreg
VMOVHLPS-xmmreg.xmmreg.xmmreg))

(setf (gethash "VMOVHLPS-xmmreg.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVHLPS-xmmreg.xmmreg*.xmmreg))

(setf (gethash "VMOVHLPS-xmmreg.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVHLPS-xmmreg.xmmreg.xmmreg))

(setf (gethash "VMOVHPD" *x64-instruction-variants-hash-table*) (list
VMOVHPD-xmmreg.xmmreg*.mem64
VMOVHPD-mem64.xmmreg
VMOVHPD-xmmreg.xmmreg.mem64
VMOVHPD-mem64.xmmreg))

(setf (gethash "VMOVHPD-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVHPD-mem64.xmmreg
VMOVHPD-mem64.xmmreg))

(setf (gethash "VMOVHPD-xmmreg.xmmreg*.mem64" *x64-instruction-variants-hash-table*) (list
VMOVHPD-xmmreg.xmmreg*.mem64))

(setf (gethash "VMOVHPD-xmmreg.xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VMOVHPD-xmmreg.xmmreg.mem64))

(setf (gethash "VMOVHPS" *x64-instruction-variants-hash-table*) (list
VMOVHPS-xmmreg.xmmreg*.mem64
VMOVHPS-mem64.xmmreg
VMOVHPS-xmmreg.xmmreg.mem64
VMOVHPS-mem64.xmmreg))

(setf (gethash "VMOVHPS-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVHPS-mem64.xmmreg
VMOVHPS-mem64.xmmreg))

(setf (gethash "VMOVHPS-xmmreg.xmmreg*.mem64" *x64-instruction-variants-hash-table*) (list
VMOVHPS-xmmreg.xmmreg*.mem64))

(setf (gethash "VMOVHPS-xmmreg.xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VMOVHPS-xmmreg.xmmreg.mem64))

(setf (gethash "VMOVLHPS" *x64-instruction-variants-hash-table*) (list
VMOVLHPS-xmmreg.xmmreg*.xmmreg
VMOVLHPS-xmmreg.xmmreg.xmmreg))

(setf (gethash "VMOVLHPS-xmmreg.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVLHPS-xmmreg.xmmreg*.xmmreg))

(setf (gethash "VMOVLHPS-xmmreg.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVLHPS-xmmreg.xmmreg.xmmreg))

(setf (gethash "VMOVLPD" *x64-instruction-variants-hash-table*) (list
VMOVLPD-xmmreg.xmmreg*.mem64
VMOVLPD-mem64.xmmreg
VMOVLPD-xmmreg.xmmreg.mem64
VMOVLPD-mem64.xmmreg))

(setf (gethash "VMOVLPD-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVLPD-mem64.xmmreg
VMOVLPD-mem64.xmmreg))

(setf (gethash "VMOVLPD-xmmreg.xmmreg*.mem64" *x64-instruction-variants-hash-table*) (list
VMOVLPD-xmmreg.xmmreg*.mem64))

(setf (gethash "VMOVLPD-xmmreg.xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VMOVLPD-xmmreg.xmmreg.mem64))

(setf (gethash "VMOVLPS" *x64-instruction-variants-hash-table*) (list
VMOVLPS-xmmreg.xmmreg*.mem64
VMOVLPS-mem64.xmmreg
VMOVLPS-xmmreg.xmmreg.mem64
VMOVLPS-mem64.xmmreg))

(setf (gethash "VMOVLPS-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVLPS-mem64.xmmreg
VMOVLPS-mem64.xmmreg))

(setf (gethash "VMOVLPS-xmmreg.xmmreg*.mem64" *x64-instruction-variants-hash-table*) (list
VMOVLPS-xmmreg.xmmreg*.mem64))

(setf (gethash "VMOVLPS-xmmreg.xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VMOVLPS-xmmreg.xmmreg.mem64))

(setf (gethash "VMOVMSKPD" *x64-instruction-variants-hash-table*) (list
VMOVMSKPD-reg64.xmmreg
VMOVMSKPD-reg32.xmmreg
VMOVMSKPD-reg64.ymmreg
VMOVMSKPD-reg32.ymmreg))

(setf (gethash "VMOVMSKPD-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPD-reg32.xmmreg))

(setf (gethash "VMOVMSKPD-reg32.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPD-reg32.ymmreg))

(setf (gethash "VMOVMSKPD-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPD-reg64.xmmreg))

(setf (gethash "VMOVMSKPD-reg64.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPD-reg64.ymmreg))

(setf (gethash "VMOVMSKPS" *x64-instruction-variants-hash-table*) (list
VMOVMSKPS-reg64.xmmreg
VMOVMSKPS-reg32.xmmreg
VMOVMSKPS-reg64.ymmreg
VMOVMSKPS-reg32.ymmreg))

(setf (gethash "VMOVMSKPS-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPS-reg32.xmmreg))

(setf (gethash "VMOVMSKPS-reg32.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPS-reg32.ymmreg))

(setf (gethash "VMOVMSKPS-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPS-reg64.xmmreg))

(setf (gethash "VMOVMSKPS-reg64.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVMSKPS-reg64.ymmreg))

(setf (gethash "VMOVNTDQ" *x64-instruction-variants-hash-table*) (list
VMOVNTDQ-mem128.xmmreg
VMOVNTDQ-mem256.ymmreg
VMOVNTDQ-mem128.xmmreg
VMOVNTDQ-mem256.ymmreg
VMOVNTDQ-mem512.zmmreg))

(setf (gethash "VMOVNTDQ-mem128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTDQ-mem128.xmmreg
VMOVNTDQ-mem128.xmmreg))

(setf (gethash "VMOVNTDQ-mem256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTDQ-mem256.ymmreg
VMOVNTDQ-mem256.ymmreg))

(setf (gethash "VMOVNTDQ-mem512.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTDQ-mem512.zmmreg))

(setf (gethash "VMOVNTDQA" *x64-instruction-variants-hash-table*) (list
VMOVNTDQA-xmmreg.mem128
VMOVNTDQA-ymmreg.mem256
VMOVNTDQA-xmmreg.mem128
VMOVNTDQA-ymmreg.mem256
VMOVNTDQA-zmmreg.mem512))

(setf (gethash "VMOVNTDQA-xmmreg.mem128" *x64-instruction-variants-hash-table*) (list
VMOVNTDQA-xmmreg.mem128
VMOVNTDQA-xmmreg.mem128))

(setf (gethash "VMOVNTDQA-ymmreg.mem256" *x64-instruction-variants-hash-table*) (list
VMOVNTDQA-ymmreg.mem256
VMOVNTDQA-ymmreg.mem256))

(setf (gethash "VMOVNTDQA-zmmreg.mem512" *x64-instruction-variants-hash-table*) (list
VMOVNTDQA-zmmreg.mem512))

(setf (gethash "VMOVNTPD" *x64-instruction-variants-hash-table*) (list
VMOVNTPD-mem128.xmmreg
VMOVNTPD-mem256.ymmreg
VMOVNTPD-mem128.xmmreg
VMOVNTPD-mem256.ymmreg
VMOVNTPD-mem512.zmmreg))

(setf (gethash "VMOVNTPD-mem128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPD-mem128.xmmreg
VMOVNTPD-mem128.xmmreg))

(setf (gethash "VMOVNTPD-mem256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPD-mem256.ymmreg
VMOVNTPD-mem256.ymmreg))

(setf (gethash "VMOVNTPD-mem512.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPD-mem512.zmmreg))

(setf (gethash "VMOVNTPS" *x64-instruction-variants-hash-table*) (list
VMOVNTPS-mem128.xmmreg
VMOVNTPS-mem256.ymmreg
VMOVNTPS-mem128.xmmreg
VMOVNTPS-mem256.ymmreg
VMOVNTPS-mem512.zmmreg))

(setf (gethash "VMOVNTPS-mem128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPS-mem128.xmmreg
VMOVNTPS-mem128.xmmreg))

(setf (gethash "VMOVNTPS-mem256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPS-mem256.ymmreg
VMOVNTPS-mem256.ymmreg))

(setf (gethash "VMOVNTPS-mem512.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTPS-mem512.zmmreg))

(setf (gethash "VMOVNTQQ" *x64-instruction-variants-hash-table*) (list
VMOVNTQQ-mem256.ymmreg))

(setf (gethash "VMOVNTQQ-mem256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVNTQQ-mem256.ymmreg))

(setf (gethash "VMOVQ" *x64-instruction-variants-hash-table*) (list
VMOVQ-xmmreg.xmmrm64
VMOVQ-xmmrm64.xmmreg
VMOVQ-xmmreg.rm64
VMOVQ-rm64.xmmreg
VMOVQ-xmmreg.rm64
VMOVQ-rm64.xmmreg
VMOVQ-xmmreg.xmmrm64
VMOVQ-xmmrm64.xmmreg))

(setf (gethash "VMOVQ-rm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVQ-rm64.xmmreg
VMOVQ-rm64.xmmreg))

(setf (gethash "VMOVQ-xmmreg.rm64" *x64-instruction-variants-hash-table*) (list
VMOVQ-xmmreg.rm64
VMOVQ-xmmreg.rm64))

(setf (gethash "VMOVQ-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMOVQ-xmmreg.xmmrm64
VMOVQ-xmmreg.xmmrm64))

(setf (gethash "VMOVQ-xmmrm64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVQ-xmmrm64.xmmreg
VMOVQ-xmmrm64.xmmreg))

(setf (gethash "VMOVQQA" *x64-instruction-variants-hash-table*) (list
VMOVQQA-ymmreg.ymmrm256
VMOVQQA-ymmrm256.ymmreg))

(setf (gethash "VMOVQQA-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVQQA-ymmreg.ymmrm256))

(setf (gethash "VMOVQQA-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVQQA-ymmrm256.ymmreg))

(setf (gethash "VMOVQQU" *x64-instruction-variants-hash-table*) (list
VMOVQQU-ymmreg.ymmrm256
VMOVQQU-ymmrm256.ymmreg))

(setf (gethash "VMOVQQU-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVQQU-ymmreg.ymmrm256))

(setf (gethash "VMOVQQU-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVQQU-ymmrm256.ymmreg))

(setf (gethash "VMOVSD" *x64-instruction-variants-hash-table*) (list
VMOVSD-xmmreg.xmmreg*.xmmreg
VMOVSD-xmmreg.mem64
VMOVSD-xmmreg.xmmreg*.xmmreg
VMOVSD-mem64.xmmreg
VMOVSD-xmmreg-mask-z.mem64
VMOVSD-mem64-mask.xmmreg
VMOVSD-xmmreg-mask-z.xmmreg.xmmreg
VMOVSD-xmmreg-mask-z.xmmreg.xmmreg))

(setf (gethash "VMOVSD-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSD-mem64-mask.xmmreg))

(setf (gethash "VMOVSD-mem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSD-mem64.xmmreg))

(setf (gethash "VMOVSD-xmmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VMOVSD-xmmreg-mask-z.mem64))

(setf (gethash "VMOVSD-xmmreg-mask-z.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSD-xmmreg-mask-z.xmmreg.xmmreg
VMOVSD-xmmreg-mask-z.xmmreg.xmmreg))

(setf (gethash "VMOVSD-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VMOVSD-xmmreg.mem64))

(setf (gethash "VMOVSD-xmmreg.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSD-xmmreg.xmmreg*.xmmreg
VMOVSD-xmmreg.xmmreg*.xmmreg))

(setf (gethash "VMOVSHDUP" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-xmmreg.xmmrm128
VMOVSHDUP-ymmreg.ymmrm256
VMOVSHDUP-xmmreg-mask-z.xmmrm128
VMOVSHDUP-ymmreg-mask-z.ymmrm256
VMOVSHDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVSHDUP-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVSHDUP-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-xmmreg.xmmrm128))

(setf (gethash "VMOVSHDUP-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVSHDUP-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-ymmreg.ymmrm256))

(setf (gethash "VMOVSHDUP-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVSHDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVSLDUP" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-xmmreg.xmmrm128
VMOVSLDUP-ymmreg.ymmrm256
VMOVSLDUP-xmmreg-mask-z.xmmrm128
VMOVSLDUP-ymmreg-mask-z.ymmrm256
VMOVSLDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVSLDUP-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVSLDUP-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-xmmreg.xmmrm128))

(setf (gethash "VMOVSLDUP-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVSLDUP-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-ymmreg.ymmrm256))

(setf (gethash "VMOVSLDUP-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVSLDUP-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVSS" *x64-instruction-variants-hash-table*) (list
VMOVSS-xmmreg.xmmreg*.xmmreg
VMOVSS-xmmreg.mem32
VMOVSS-xmmreg.xmmreg*.xmmreg
VMOVSS-mem32.xmmreg
VMOVSS-xmmreg-mask-z.mem32
VMOVSS-mem32-mask.xmmreg
VMOVSS-xmmreg-mask-z.xmmreg.xmmreg
VMOVSS-xmmreg-mask-z.xmmreg.xmmreg))

(setf (gethash "VMOVSS-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSS-mem32-mask.xmmreg))

(setf (gethash "VMOVSS-mem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSS-mem32.xmmreg))

(setf (gethash "VMOVSS-xmmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VMOVSS-xmmreg-mask-z.mem32))

(setf (gethash "VMOVSS-xmmreg-mask-z.xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSS-xmmreg-mask-z.xmmreg.xmmreg
VMOVSS-xmmreg-mask-z.xmmreg.xmmreg))

(setf (gethash "VMOVSS-xmmreg.mem32" *x64-instruction-variants-hash-table*) (list
VMOVSS-xmmreg.mem32))

(setf (gethash "VMOVSS-xmmreg.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVSS-xmmreg.xmmreg*.xmmreg
VMOVSS-xmmreg.xmmreg*.xmmreg))

(setf (gethash "VMOVUPD" *x64-instruction-variants-hash-table*) (list
VMOVUPD-xmmreg.xmmrm128
VMOVUPD-xmmrm128.xmmreg
VMOVUPD-ymmreg.ymmrm256
VMOVUPD-ymmrm256.ymmreg
VMOVUPD-xmmreg-mask-z.xmmrm128
VMOVUPD-ymmreg-mask-z.ymmrm256
VMOVUPD-zmmreg-mask-z.zmmrm512
VMOVUPD-xmmreg-mask-z.xmmreg
VMOVUPD-ymmreg-mask-z.ymmreg
VMOVUPD-zmmreg-mask-z.zmmreg
VMOVUPD-mem128-mask.xmmreg
VMOVUPD-mem256-mask.ymmreg
VMOVUPD-mem512-mask.zmmreg))

(setf (gethash "VMOVUPD-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-mem128-mask.xmmreg))

(setf (gethash "VMOVUPD-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-mem256-mask.ymmreg))

(setf (gethash "VMOVUPD-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-mem512-mask.zmmreg))

(setf (gethash "VMOVUPD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVUPD-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVUPD-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVUPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVUPD-xmmreg.xmmrm128))

(setf (gethash "VMOVUPD-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-xmmrm128.xmmreg))

(setf (gethash "VMOVUPD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVUPD-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVUPD-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVUPD-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVUPD-ymmreg.ymmrm256))

(setf (gethash "VMOVUPD-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-ymmrm256.ymmreg))

(setf (gethash "VMOVUPD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPD-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVUPD-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVUPD-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMOVUPS" *x64-instruction-variants-hash-table*) (list
VMOVUPS-xmmreg.xmmrm128
VMOVUPS-xmmrm128.xmmreg
VMOVUPS-ymmreg.ymmrm256
VMOVUPS-ymmrm256.ymmreg
VMOVUPS-xmmreg-mask-z.xmmrm128
VMOVUPS-ymmreg-mask-z.ymmrm256
VMOVUPS-zmmreg-mask-z.zmmrm512
VMOVUPS-xmmreg-mask-z.xmmreg
VMOVUPS-ymmreg-mask-z.ymmreg
VMOVUPS-zmmreg-mask-z.zmmreg
VMOVUPS-mem128-mask.xmmreg
VMOVUPS-mem256-mask.ymmreg
VMOVUPS-mem512-mask.zmmreg))

(setf (gethash "VMOVUPS-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-mem128-mask.xmmreg))

(setf (gethash "VMOVUPS-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-mem256-mask.ymmreg))

(setf (gethash "VMOVUPS-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-mem512-mask.zmmreg))

(setf (gethash "VMOVUPS-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-xmmreg-mask-z.xmmreg))

(setf (gethash "VMOVUPS-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVUPS-xmmreg-mask-z.xmmrm128))

(setf (gethash "VMOVUPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMOVUPS-xmmreg.xmmrm128))

(setf (gethash "VMOVUPS-xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-xmmrm128.xmmreg))

(setf (gethash "VMOVUPS-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-ymmreg-mask-z.ymmreg))

(setf (gethash "VMOVUPS-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVUPS-ymmreg-mask-z.ymmrm256))

(setf (gethash "VMOVUPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMOVUPS-ymmreg.ymmrm256))

(setf (gethash "VMOVUPS-ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-ymmrm256.ymmreg))

(setf (gethash "VMOVUPS-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VMOVUPS-zmmreg-mask-z.zmmreg))

(setf (gethash "VMOVUPS-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VMOVUPS-zmmreg-mask-z.zmmrm512))

(setf (gethash "VMPSADBW" *x64-instruction-variants-hash-table*) (list
VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8
VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VMPSADBW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VMPSADBW-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VMPTRLD" *x64-instruction-variants-hash-table*) (list
VMPTRLD-mem))

(setf (gethash "VMPTRLD-mem" *x64-instruction-variants-hash-table*) (list
VMPTRLD-mem))

(setf (gethash "VMPTRST" *x64-instruction-variants-hash-table*) (list
VMPTRST-mem))

(setf (gethash "VMPTRST-mem" *x64-instruction-variants-hash-table*) (list
VMPTRST-mem))

(setf (gethash "VMREAD" *x64-instruction-variants-hash-table*) (list
VMREAD-rm64.reg64))

(setf (gethash "VMREAD-rm64.reg64" *x64-instruction-variants-hash-table*) (list
VMREAD-rm64.reg64))

(setf (gethash "VMRESUME" *x64-instruction-variants-hash-table*) (list
VMRESUME-void))

(setf (gethash "VMRESUME-void" *x64-instruction-variants-hash-table*) (list
VMRESUME-void))

(setf (gethash "VMRUN" *x64-instruction-variants-hash-table*) (list
VMRUN-void))

(setf (gethash "VMRUN-void" *x64-instruction-variants-hash-table*) (list
VMRUN-void))

(setf (gethash "VMSAVE" *x64-instruction-variants-hash-table*) (list
VMSAVE-void))

(setf (gethash "VMSAVE-void" *x64-instruction-variants-hash-table*) (list
VMSAVE-void))

(setf (gethash "VMULPD" *x64-instruction-variants-hash-table*) (list
VMULPD-xmmreg.xmmreg*.xmmrm128
VMULPD-ymmreg.ymmreg*.ymmrm256
VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VMULPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VMULPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMULPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VMULPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VMULPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMULPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VMULPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VMULPS" *x64-instruction-variants-hash-table*) (list
VMULPS-xmmreg.xmmreg*.xmmrm128
VMULPS-ymmreg.ymmreg*.ymmrm256
VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VMULPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VMULPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VMULPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VMULPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VMULPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VMULPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VMULPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VMULSD" *x64-instruction-variants-hash-table*) (list
VMULSD-xmmreg.xmmreg*.xmmrm64
VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VMULSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VMULSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VMULSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VMULSS" *x64-instruction-variants-hash-table*) (list
VMULSS-xmmreg.xmmreg*.xmmrm32
VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VMULSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VMULSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VMULSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VMWRITE" *x64-instruction-variants-hash-table*) (list
VMWRITE-reg64.rm64))

(setf (gethash "VMWRITE-reg64.rm64" *x64-instruction-variants-hash-table*) (list
VMWRITE-reg64.rm64))

(setf (gethash "VMXOFF" *x64-instruction-variants-hash-table*) (list
VMXOFF-void))

(setf (gethash "VMXOFF-void" *x64-instruction-variants-hash-table*) (list
VMXOFF-void))

(setf (gethash "VMXON" *x64-instruction-variants-hash-table*) (list
VMXON-mem))

(setf (gethash "VMXON-mem" *x64-instruction-variants-hash-table*) (list
VMXON-mem))

(setf (gethash "VORPD" *x64-instruction-variants-hash-table*) (list
VORPD-xmmreg.xmmreg*.xmmrm128
VORPD-ymmreg.ymmreg*.ymmrm256
VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VORPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VORPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VORPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VORPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VORPS" *x64-instruction-variants-hash-table*) (list
VORPS-xmmreg.xmmreg*.xmmrm128
VORPS-ymmreg.ymmreg*.ymmrm256
VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VORPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VORPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VORPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VORPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPABSB" *x64-instruction-variants-hash-table*) (list
VPABSB-xmmreg.xmmrm128
VPABSB-ymmreg.ymmrm256
VPABSB-xmmreg-mask-z.xmmrm128
VPABSB-ymmreg-mask-z.ymmrm256
VPABSB-zmmreg-mask-z.zmmrm512))

(setf (gethash "VPABSB-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPABSB-xmmreg-mask-z.xmmrm128))

(setf (gethash "VPABSB-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPABSB-xmmreg.xmmrm128))

(setf (gethash "VPABSB-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPABSB-ymmreg-mask-z.ymmrm256))

(setf (gethash "VPABSB-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPABSB-ymmreg.ymmrm256))

(setf (gethash "VPABSB-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPABSB-zmmreg-mask-z.zmmrm512))

(setf (gethash "VPABSD" *x64-instruction-variants-hash-table*) (list
VPABSD-xmmreg.xmmrm128
VPABSD-ymmreg.ymmrm256
VPABSD-xmmreg-mask-z.xmmrm128-b32
VPABSD-ymmreg-mask-z.ymmrm256-b32
VPABSD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPABSD-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPABSD-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VPABSD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPABSD-xmmreg.xmmrm128))

(setf (gethash "VPABSD-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPABSD-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VPABSD-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPABSD-ymmreg.ymmrm256))

(setf (gethash "VPABSD-zmmreg-mask-z.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPABSD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPABSQ" *x64-instruction-variants-hash-table*) (list
VPABSQ-xmmreg-mask-z.xmmrm128-b64
VPABSQ-ymmreg-mask-z.ymmrm256-b64
VPABSQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPABSQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPABSQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VPABSQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPABSQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VPABSQ-zmmreg-mask-z.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPABSQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPABSW" *x64-instruction-variants-hash-table*) (list
VPABSW-xmmreg.xmmrm128
VPABSW-ymmreg.ymmrm256
VPABSW-xmmreg-mask-z.xmmrm128
VPABSW-ymmreg-mask-z.ymmrm256
VPABSW-zmmreg-mask-z.zmmrm512))

(setf (gethash "VPABSW-xmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPABSW-xmmreg-mask-z.xmmrm128))

(setf (gethash "VPABSW-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPABSW-xmmreg.xmmrm128))

(setf (gethash "VPABSW-ymmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPABSW-ymmreg-mask-z.ymmrm256))

(setf (gethash "VPABSW-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPABSW-ymmreg.ymmrm256))

(setf (gethash "VPABSW-zmmreg-mask-z.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPABSW-zmmreg-mask-z.zmmrm512))

(setf (gethash "VPACKSSDW" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-xmmreg.xmmreg*.xmmrm128
VPACKSSDW-ymmreg.ymmreg*.ymmrm256
VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPACKSSDW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPACKSSDW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPACKSSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPACKSSWB" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-xmmreg.xmmreg*.xmmrm128
VPACKSSWB-ymmreg.ymmreg*.ymmrm256
VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128
VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256
VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPACKSSWB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPACKSSWB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPACKSSWB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPACKUSDW" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-xmmreg.xmmreg*.xmmrm128
VPACKUSDW-ymmreg.ymmreg*.ymmrm256
VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPACKUSDW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPACKUSDW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPACKUSDW-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPACKUSWB" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-xmmreg.xmmreg*.xmmrm128
VPACKUSWB-ymmreg.ymmreg*.ymmrm256
VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128
VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256
VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPACKUSWB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPACKUSWB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPACKUSWB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDB" *x64-instruction-variants-hash-table*) (list
VPADDB-xmmreg.xmmreg*.xmmrm128
VPADDB-ymmreg.ymmreg*.ymmrm256
VPADDB-xmmreg-mask-z.xmmreg.xmmrm128
VPADDB-ymmreg-mask-z.ymmreg.ymmrm256
VPADDB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDD" *x64-instruction-variants-hash-table*) (list
VPADDD-xmmreg.xmmreg*.xmmrm128
VPADDD-ymmreg.ymmreg*.ymmrm256
VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPADDD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPADDD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPADDD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPADDD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPADDD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPADDQ" *x64-instruction-variants-hash-table*) (list
VPADDQ-xmmreg.xmmreg*.xmmrm128
VPADDQ-ymmreg.ymmreg*.ymmrm256
VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPADDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPADDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPADDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPADDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPADDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPADDSB" *x64-instruction-variants-hash-table*) (list
VPADDSB-xmmreg.xmmreg*.xmmrm128
VPADDSB-ymmreg.ymmreg*.ymmrm256
VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128
VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256
VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDSW" *x64-instruction-variants-hash-table*) (list
VPADDSW-xmmreg.xmmreg*.xmmrm128
VPADDSW-ymmreg.ymmreg*.ymmrm256
VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128
VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256
VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDUSB" *x64-instruction-variants-hash-table*) (list
VPADDUSB-xmmreg.xmmreg*.xmmrm128
VPADDUSB-ymmreg.ymmreg*.ymmrm256
VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128
VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256
VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDUSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDUSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDUSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDUSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDUSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDUSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDUSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDUSW" *x64-instruction-variants-hash-table*) (list
VPADDUSW-xmmreg.xmmreg*.xmmrm128
VPADDUSW-ymmreg.ymmreg*.ymmrm256
VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128
VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256
VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDUSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDUSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDUSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDUSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDUSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDUSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDUSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDW" *x64-instruction-variants-hash-table*) (list
VPADDW-xmmreg.xmmreg*.xmmrm128
VPADDW-ymmreg.ymmreg*.ymmrm256
VPADDW-xmmreg-mask-z.xmmreg.xmmrm128
VPADDW-ymmreg-mask-z.ymmreg.ymmrm256
VPADDW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPADDW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPADDW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPADDW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPADDW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPADDW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPADDW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPADDW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPADDW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPALIGNR" *x64-instruction-variants-hash-table*) (list
VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8
VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8
VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8
VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8
VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8))

(setf (gethash "VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPALIGNR-xmmreg-mask-z.xmmreg.xmmrm128.imm8))

(setf (gethash "VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPALIGNR-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPALIGNR-ymmreg-mask-z.ymmreg.ymmrm256.imm8))

(setf (gethash "VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPALIGNR-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPALIGNR-zmmreg-mask-z.zmmreg.zmmrm512.imm8))

(setf (gethash "VPAND" *x64-instruction-variants-hash-table*) (list
VPAND-xmmreg.xmmreg*.xmmrm128
VPAND-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPAND-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPAND-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPAND-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPAND-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPANDD" *x64-instruction-variants-hash-table*) (list
VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPANDD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPANDD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPANDD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPANDN" *x64-instruction-variants-hash-table*) (list
VPANDN-xmmreg.xmmreg*.xmmrm128
VPANDN-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPANDN-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPANDN-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPANDN-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPANDN-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPANDND" *x64-instruction-variants-hash-table*) (list
VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPANDND-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPANDND-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPANDND-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPANDNQ" *x64-instruction-variants-hash-table*) (list
VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPANDNQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPANDNQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPANDNQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPANDQ" *x64-instruction-variants-hash-table*) (list
VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPANDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPANDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPANDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPAVGB" *x64-instruction-variants-hash-table*) (list
VPAVGB-xmmreg.xmmreg*.xmmrm128
VPAVGB-ymmreg.ymmreg*.ymmrm256
VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128
VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256
VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPAVGB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPAVGB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPAVGB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPAVGB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPAVGB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPAVGB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPAVGB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPAVGW" *x64-instruction-variants-hash-table*) (list
VPAVGW-xmmreg.xmmreg*.xmmrm128
VPAVGW-ymmreg.ymmreg*.ymmrm256
VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128
VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256
VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPAVGW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPAVGW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPAVGW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPAVGW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPAVGW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPAVGW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPAVGW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPBLENDD" *x64-instruction-variants-hash-table*) (list
VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8
VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPBLENDD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPBLENDD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VPBLENDMB" *x64-instruction-variants-hash-table*) (list
VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128
VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256
VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPBLENDMB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPBLENDMB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPBLENDMB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPBLENDMD" *x64-instruction-variants-hash-table*) (list
VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPBLENDMD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPBLENDMD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPBLENDMD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPBLENDMQ" *x64-instruction-variants-hash-table*) (list
VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPBLENDMQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPBLENDMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPBLENDMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPBLENDMW" *x64-instruction-variants-hash-table*) (list
VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128
VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256
VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPBLENDMW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPBLENDMW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPBLENDMW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPBLENDVB" *x64-instruction-variants-hash-table*) (list
VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg
VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBLENDVB-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VPBLENDVB-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VPBLENDW" *x64-instruction-variants-hash-table*) (list
VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8
VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPBLENDW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPBLENDW-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VPBROADCASTB" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg.mem8
VPBROADCASTB-xmmreg.xmmreg
VPBROADCASTB-ymmreg.mem8
VPBROADCASTB-ymmreg.xmmreg
VPBROADCASTB-xmmreg-mask-z.xmmrm8
VPBROADCASTB-ymmreg-mask-z.xmmrm8
VPBROADCASTB-zmmreg-mask-z.xmmrm8
VPBROADCASTB-xmmreg-mask-z.reg8
VPBROADCASTB-xmmreg-mask-z.reg16
VPBROADCASTB-xmmreg-mask-z.reg32
VPBROADCASTB-xmmreg-mask-z.reg64
VPBROADCASTB-ymmreg-mask-z.reg8
VPBROADCASTB-ymmreg-mask-z.reg16
VPBROADCASTB-ymmreg-mask-z.reg32
VPBROADCASTB-ymmreg-mask-z.reg64
VPBROADCASTB-zmmreg-mask-z.reg8
VPBROADCASTB-zmmreg-mask-z.reg16
VPBROADCASTB-zmmreg-mask-z.reg32
VPBROADCASTB-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTB-xmmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTB-xmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTB-xmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTB-xmmreg-mask-z.reg8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg-mask-z.reg8))

(setf (gethash "VPBROADCASTB-xmmreg-mask-z.xmmrm8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg-mask-z.xmmrm8))

(setf (gethash "VPBROADCASTB-xmmreg.mem8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg.mem8))

(setf (gethash "VPBROADCASTB-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-xmmreg.xmmreg))

(setf (gethash "VPBROADCASTB-ymmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTB-ymmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTB-ymmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTB-ymmreg-mask-z.reg8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg-mask-z.reg8))

(setf (gethash "VPBROADCASTB-ymmreg-mask-z.xmmrm8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg-mask-z.xmmrm8))

(setf (gethash "VPBROADCASTB-ymmreg.mem8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg.mem8))

(setf (gethash "VPBROADCASTB-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-ymmreg.xmmreg))

(setf (gethash "VPBROADCASTB-zmmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-zmmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTB-zmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-zmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTB-zmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTB-zmmreg-mask-z.reg8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-zmmreg-mask-z.reg8))

(setf (gethash "VPBROADCASTB-zmmreg-mask-z.xmmrm8" *x64-instruction-variants-hash-table*) (list
VPBROADCASTB-zmmreg-mask-z.xmmrm8))

(setf (gethash "VPBROADCASTD" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg.mem32
VPBROADCASTD-xmmreg.xmmreg
VPBROADCASTD-ymmreg.mem32
VPBROADCASTD-ymmreg.xmmreg
VPBROADCASTD-xmmreg-mask-z.mem32
VPBROADCASTD-ymmreg-mask-z.mem32
VPBROADCASTD-zmmreg-mask-z.mem32
VPBROADCASTD-xmmreg-mask-z.xmmreg
VPBROADCASTD-ymmreg-mask-z.xmmreg
VPBROADCASTD-zmmreg-mask-z.xmmreg
VPBROADCASTD-xmmreg-mask-z.reg32
VPBROADCASTD-ymmreg-mask-z.reg32
VPBROADCASTD-zmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTD-xmmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg-mask-z.mem32))

(setf (gethash "VPBROADCASTD-xmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTD-xmmreg.mem32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg.mem32))

(setf (gethash "VPBROADCASTD-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-xmmreg.xmmreg))

(setf (gethash "VPBROADCASTD-ymmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-ymmreg-mask-z.mem32))

(setf (gethash "VPBROADCASTD-ymmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-ymmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTD-ymmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-ymmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTD-ymmreg.mem32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-ymmreg.mem32))

(setf (gethash "VPBROADCASTD-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-ymmreg.xmmreg))

(setf (gethash "VPBROADCASTD-zmmreg-mask-z.mem32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-zmmreg-mask-z.mem32))

(setf (gethash "VPBROADCASTD-zmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-zmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTD-zmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTD-zmmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTMB2Q" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMB2Q-xmmreg.kreg
VPBROADCASTMB2Q-ymmreg.kreg
VPBROADCASTMB2Q-zmmreg.kreg))

(setf (gethash "VPBROADCASTMB2Q-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMB2Q-xmmreg.kreg))

(setf (gethash "VPBROADCASTMB2Q-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMB2Q-ymmreg.kreg))

(setf (gethash "VPBROADCASTMB2Q-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMB2Q-zmmreg.kreg))

(setf (gethash "VPBROADCASTMW2D" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMW2D-xmmreg.kreg
VPBROADCASTMW2D-ymmreg.kreg
VPBROADCASTMW2D-zmmreg.kreg))

(setf (gethash "VPBROADCASTMW2D-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMW2D-xmmreg.kreg))

(setf (gethash "VPBROADCASTMW2D-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMW2D-ymmreg.kreg))

(setf (gethash "VPBROADCASTMW2D-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTMW2D-zmmreg.kreg))

(setf (gethash "VPBROADCASTQ" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg.mem64
VPBROADCASTQ-xmmreg.xmmreg
VPBROADCASTQ-ymmreg.mem64
VPBROADCASTQ-ymmreg.xmmreg
VPBROADCASTQ-xmmreg-mask-z.mem64
VPBROADCASTQ-ymmreg-mask-z.mem64
VPBROADCASTQ-zmmreg-mask-z.mem64
VPBROADCASTQ-xmmreg-mask-z.xmmreg
VPBROADCASTQ-ymmreg-mask-z.xmmreg
VPBROADCASTQ-zmmreg-mask-z.xmmreg
VPBROADCASTQ-xmmreg-mask-z.reg64
VPBROADCASTQ-ymmreg-mask-z.reg64
VPBROADCASTQ-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTQ-xmmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg-mask-z.mem64))

(setf (gethash "VPBROADCASTQ-xmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTQ-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTQ-xmmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg.mem64))

(setf (gethash "VPBROADCASTQ-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-xmmreg.xmmreg))

(setf (gethash "VPBROADCASTQ-ymmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-ymmreg-mask-z.mem64))

(setf (gethash "VPBROADCASTQ-ymmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-ymmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTQ-ymmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-ymmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTQ-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-ymmreg.mem64))

(setf (gethash "VPBROADCASTQ-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-ymmreg.xmmreg))

(setf (gethash "VPBROADCASTQ-zmmreg-mask-z.mem64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-zmmreg-mask-z.mem64))

(setf (gethash "VPBROADCASTQ-zmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTQ-zmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTQ-zmmreg-mask-z.xmmreg))

(setf (gethash "VPBROADCASTW" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg.mem16
VPBROADCASTW-xmmreg.xmmreg
VPBROADCASTW-ymmreg.mem16
VPBROADCASTW-ymmreg.xmmreg
VPBROADCASTW-xmmreg-mask-z.xmmrm16
VPBROADCASTW-ymmreg-mask-z.xmmrm16
VPBROADCASTW-zmmreg-mask-z.xmmrm16
VPBROADCASTW-xmmreg-mask-z.reg16
VPBROADCASTW-xmmreg-mask-z.reg32
VPBROADCASTW-xmmreg-mask-z.reg64
VPBROADCASTW-ymmreg-mask-z.reg16
VPBROADCASTW-ymmreg-mask-z.reg32
VPBROADCASTW-ymmreg-mask-z.reg64
VPBROADCASTW-zmmreg-mask-z.reg16
VPBROADCASTW-zmmreg-mask-z.reg32
VPBROADCASTW-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTW-xmmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTW-xmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTW-xmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTW-xmmreg-mask-z.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg-mask-z.xmmrm16))

(setf (gethash "VPBROADCASTW-xmmreg.mem16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg.mem16))

(setf (gethash "VPBROADCASTW-xmmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-xmmreg.xmmreg))

(setf (gethash "VPBROADCASTW-ymmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTW-ymmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTW-ymmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTW-ymmreg-mask-z.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg-mask-z.xmmrm16))

(setf (gethash "VPBROADCASTW-ymmreg.mem16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg.mem16))

(setf (gethash "VPBROADCASTW-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-ymmreg.xmmreg))

(setf (gethash "VPBROADCASTW-zmmreg-mask-z.reg16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-zmmreg-mask-z.reg16))

(setf (gethash "VPBROADCASTW-zmmreg-mask-z.reg32" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-zmmreg-mask-z.reg32))

(setf (gethash "VPBROADCASTW-zmmreg-mask-z.reg64" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-zmmreg-mask-z.reg64))

(setf (gethash "VPBROADCASTW-zmmreg-mask-z.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPBROADCASTW-zmmreg-mask-z.xmmrm16))

(setf (gethash "VPCLMULHQHQDQ" *x64-instruction-variants-hash-table*) (list
VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCLMULHQHQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULHQLQDQ" *x64-instruction-variants-hash-table*) (list
VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCLMULHQLQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULLQHQDQ" *x64-instruction-variants-hash-table*) (list
VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCLMULLQHQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULLQLQDQ" *x64-instruction-variants-hash-table*) (list
VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCLMULLQLQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCLMULQDQ" *x64-instruction-variants-hash-table*) (list
VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCLMULQDQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCMOV" *x64-instruction-variants-hash-table*) (list
VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg
VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg
VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128
VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMOV-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPCMOV-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMOV-ymmreg.ymmreg*.ymmreg.ymmrm256))

(setf (gethash "VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg" *x64-instruction-variants-hash-table*) (list
VPCMOV-ymmreg.ymmreg*.ymmrm256.ymmreg))

(setf (gethash "VPCMPB" *x64-instruction-variants-hash-table*) (list
VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8
VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8
VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPB-kreg-mask.xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPB-kreg-mask.ymmreg.ymmrm256.imm8))

(setf (gethash "VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPB-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPD" *x64-instruction-variants-hash-table*) (list
VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8
VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8
VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPD-kreg-mask.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPD-kreg-mask.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPD-kreg-mask.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPCMPEQB" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-xmmreg.xmmreg*.xmmrm128
VPCMPEQB-ymmreg.ymmreg*.ymmrm256
VPCMPEQB-kreg-mask.xmmreg.xmmrm128
VPCMPEQB-kreg-mask.ymmreg.ymmrm256
VPCMPEQB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPEQB-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPCMPEQB-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPCMPEQB-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPEQB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPEQB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPEQD" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-xmmreg.xmmreg*.xmmrm128
VPCMPEQD-ymmreg.ymmreg*.ymmrm256
VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32
VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32
VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-kreg-mask.xmmreg.xmmrm128-b32))

(setf (gethash "VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-kreg-mask.ymmreg.ymmrm256-b32))

(setf (gethash "VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPCMPEQD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPEQD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPEQQ" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-xmmreg.xmmreg*.xmmrm128
VPCMPEQQ-ymmreg.ymmreg*.ymmrm256
VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64
VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64
VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-kreg-mask.xmmreg.xmmrm128-b64))

(setf (gethash "VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-kreg-mask.ymmreg.ymmrm256-b64))

(setf (gethash "VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPCMPEQQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPEQQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPEQW" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-xmmreg.xmmreg*.xmmrm128
VPCMPEQW-ymmreg.ymmreg*.ymmrm256
VPCMPEQW-kreg-mask.xmmreg.xmmrm128
VPCMPEQW-kreg-mask.ymmreg.ymmrm256
VPCMPEQW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPEQW-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPCMPEQW-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPCMPEQW-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPEQW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPEQW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPEQW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPESTRI" *x64-instruction-variants-hash-table*) (list
VPCMPESTRI-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPESTRI-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPESTRI-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPESTRM" *x64-instruction-variants-hash-table*) (list
VPCMPESTRM-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPESTRM-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPESTRM-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPGTB" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-xmmreg.xmmreg*.xmmrm128
VPCMPGTB-ymmreg.ymmreg*.ymmrm256
VPCMPGTB-kreg-mask.xmmreg.xmmrm128
VPCMPGTB-kreg-mask.ymmreg.ymmrm256
VPCMPGTB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPGTB-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPCMPGTB-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPCMPGTB-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPGTB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPGTB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPGTD" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-xmmreg.xmmreg*.xmmrm128
VPCMPGTD-ymmreg.ymmreg*.ymmrm256
VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32
VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32
VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-kreg-mask.xmmreg.xmmrm128-b32))

(setf (gethash "VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-kreg-mask.ymmreg.ymmrm256-b32))

(setf (gethash "VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPCMPGTD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPGTD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPGTQ" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-xmmreg.xmmreg*.xmmrm128
VPCMPGTQ-ymmreg.ymmreg*.ymmrm256
VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64
VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64
VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-kreg-mask.xmmreg.xmmrm128-b64))

(setf (gethash "VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-kreg-mask.ymmreg.ymmrm256-b64))

(setf (gethash "VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPCMPGTQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPGTQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPGTW" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-xmmreg.xmmreg*.xmmrm128
VPCMPGTW-ymmreg.ymmreg*.ymmrm256
VPCMPGTW-kreg-mask.xmmreg.xmmrm128
VPCMPGTW-kreg-mask.ymmreg.ymmrm256
VPCMPGTW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPGTW-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPCMPGTW-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPCMPGTW-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPCMPGTW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPCMPGTW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPCMPGTW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPCMPISTRI" *x64-instruction-variants-hash-table*) (list
VPCMPISTRI-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPISTRI-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPISTRI-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPISTRM" *x64-instruction-variants-hash-table*) (list
VPCMPISTRM-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPISTRM-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPISTRM-xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPQ" *x64-instruction-variants-hash-table*) (list
VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8
VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8
VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPQ-kreg-mask.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPQ-kreg-mask.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPQ-kreg-mask.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPCMPUB" *x64-instruction-variants-hash-table*) (list
VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8
VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8
VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUB-kreg-mask.xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUB-kreg-mask.ymmreg.ymmrm256.imm8))

(setf (gethash "VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUB-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPUD" *x64-instruction-variants-hash-table*) (list
VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8
VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8
VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUD-kreg-mask.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUD-kreg-mask.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUD-kreg-mask.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPCMPUQ" *x64-instruction-variants-hash-table*) (list
VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8
VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8
VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUQ-kreg-mask.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUQ-kreg-mask.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUQ-kreg-mask.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPCMPUW" *x64-instruction-variants-hash-table*) (list
VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8
VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8
VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUW-kreg-mask.xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUW-kreg-mask.ymmreg.ymmrm256.imm8))

(setf (gethash "VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPUW-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPW" *x64-instruction-variants-hash-table*) (list
VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8
VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8
VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPW-kreg-mask.xmmreg.xmmrm128.imm8))

(setf (gethash "VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPW-kreg-mask.ymmreg.ymmrm256.imm8))

(setf (gethash "VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPCMPW-kreg-mask.zmmreg.zmmrm512.imm8))

(setf (gethash "VPCOMB" *x64-instruction-variants-hash-table*) (list
VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMB-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMD" *x64-instruction-variants-hash-table*) (list
VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMPRESSD" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-mem128-mask.xmmreg
VPCOMPRESSD-mem256-mask.ymmreg
VPCOMPRESSD-mem512-mask.zmmreg
VPCOMPRESSD-xmmreg-mask-z.xmmreg
VPCOMPRESSD-ymmreg-mask-z.ymmreg
VPCOMPRESSD-zmmreg-mask-z.zmmreg))

(setf (gethash "VPCOMPRESSD-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-mem128-mask.xmmreg))

(setf (gethash "VPCOMPRESSD-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-mem256-mask.ymmreg))

(setf (gethash "VPCOMPRESSD-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-mem512-mask.zmmreg))

(setf (gethash "VPCOMPRESSD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPCOMPRESSD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-ymmreg-mask-z.ymmreg))

(setf (gethash "VPCOMPRESSD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSD-zmmreg-mask-z.zmmreg))

(setf (gethash "VPCOMPRESSQ" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-mem128-mask.xmmreg
VPCOMPRESSQ-mem256-mask.ymmreg
VPCOMPRESSQ-mem512-mask.zmmreg
VPCOMPRESSQ-xmmreg-mask-z.xmmreg
VPCOMPRESSQ-ymmreg-mask-z.ymmreg
VPCOMPRESSQ-zmmreg-mask-z.zmmreg))

(setf (gethash "VPCOMPRESSQ-mem128-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-mem128-mask.xmmreg))

(setf (gethash "VPCOMPRESSQ-mem256-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-mem256-mask.ymmreg))

(setf (gethash "VPCOMPRESSQ-mem512-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-mem512-mask.zmmreg))

(setf (gethash "VPCOMPRESSQ-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-xmmreg-mask-z.xmmreg))

(setf (gethash "VPCOMPRESSQ-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-ymmreg-mask-z.ymmreg))

(setf (gethash "VPCOMPRESSQ-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPCOMPRESSQ-zmmreg-mask-z.zmmreg))

(setf (gethash "VPCOMQ" *x64-instruction-variants-hash-table*) (list
VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUB" *x64-instruction-variants-hash-table*) (list
VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMUB-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUD" *x64-instruction-variants-hash-table*) (list
VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMUD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUQ" *x64-instruction-variants-hash-table*) (list
VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMUQ-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUW" *x64-instruction-variants-hash-table*) (list
VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMUW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMW" *x64-instruction-variants-hash-table*) (list
VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPCOMW-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VPCONFLICTD" *x64-instruction-variants-hash-table*) (list
VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32
VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32
VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPCONFLICTD-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPCONFLICTD-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPCONFLICTD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPCONFLICTQ" *x64-instruction-variants-hash-table*) (list
VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64
VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64
VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPCONFLICTQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPCONFLICTQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPCONFLICTQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPERM2F128" *x64-instruction-variants-hash-table*) (list
VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8))

(setf (gethash "VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERM2F128-ymmreg.ymmreg.ymmrm256.imm8))

(setf (gethash "VPERM2I128" *x64-instruction-variants-hash-table*) (list
VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8))

(setf (gethash "VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERM2I128-ymmreg.ymmreg.ymmrm256.imm8))

(setf (gethash "VPERMB" *x64-instruction-variants-hash-table*) (list
VPERMB-xmmreg-mask-z.xmmreg.xmmrm128
VPERMB-ymmreg-mask-z.ymmreg.ymmrm256
VPERMB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMD" *x64-instruction-variants-hash-table*) (list
VPERMD-ymmreg.ymmreg*.ymmrm256
VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMI2B" *x64-instruction-variants-hash-table*) (list
VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128
VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256
VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMI2B-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMI2B-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMI2B-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMI2D" *x64-instruction-variants-hash-table*) (list
VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2D-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2D-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2D-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMI2PD" *x64-instruction-variants-hash-table*) (list
VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMI2PS" *x64-instruction-variants-hash-table*) (list
VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMI2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMI2Q" *x64-instruction-variants-hash-table*) (list
VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMI2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMI2W" *x64-instruction-variants-hash-table*) (list
VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128
VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256
VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMI2W-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMI2W-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMI2W-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMILPD" *x64-instruction-variants-hash-table*) (list
VPERMILPD-xmmreg.xmmreg.xmmrm128
VPERMILPD-ymmreg.ymmreg.ymmrm256
VPERMILPD-xmmreg.xmmrm128.imm8
VPERMILPD-ymmreg.ymmrm256.imm8
VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8
VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8
VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8
VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPERMILPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPD-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPERMILPD-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMILPD-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VPERMILPD-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPD-xmmreg.xmmrm128.imm8))

(setf (gethash "VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMILPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPD-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPERMILPD-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMILPD-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VPERMILPD-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPD-ymmreg.ymmrm256.imm8))

(setf (gethash "VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMILPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPD-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPERMILPS" *x64-instruction-variants-hash-table*) (list
VPERMILPS-xmmreg.xmmreg.xmmrm128
VPERMILPS-ymmreg.ymmreg.ymmrm256
VPERMILPS-xmmreg.xmmrm128.imm8
VPERMILPS-ymmreg.ymmrm256.imm8
VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8
VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8
VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8
VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPERMILPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPS-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPERMILPS-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMILPS-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VPERMILPS-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPS-xmmreg.xmmrm128.imm8))

(setf (gethash "VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMILPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPS-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPERMILPS-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMILPS-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VPERMILPS-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPS-ymmreg.ymmrm256.imm8))

(setf (gethash "VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMILPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPERMILPS-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPERMPD" *x64-instruction-variants-hash-table*) (list
VPERMPD-ymmreg.ymmrm256.imm8
VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8
VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8
VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMPD-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPERMPD-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERMPD-ymmreg.ymmrm256.imm8))

(setf (gethash "VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMPD-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPERMPS" *x64-instruction-variants-hash-table*) (list
VPERMPS-ymmreg.ymmreg*.ymmrm256
VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMQ" *x64-instruction-variants-hash-table*) (list
VPERMQ-ymmreg.ymmrm256.imm8
VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8
VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPERMQ-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPERMQ-ymmreg.ymmrm256.imm8))

(setf (gethash "VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPERMQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPERMT2B" *x64-instruction-variants-hash-table*) (list
VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128
VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256
VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMT2B-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMT2B-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMT2B-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMT2D" *x64-instruction-variants-hash-table*) (list
VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2D-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2D-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2D-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMT2PD" *x64-instruction-variants-hash-table*) (list
VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2PD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2PD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2PD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMT2PS" *x64-instruction-variants-hash-table*) (list
VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2PS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2PS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPERMT2PS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPERMT2Q" *x64-instruction-variants-hash-table*) (list
VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2Q-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2Q-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPERMT2Q-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPERMT2W" *x64-instruction-variants-hash-table*) (list
VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128
VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256
VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMT2W-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMT2W-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMT2W-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMW" *x64-instruction-variants-hash-table*) (list
VPERMW-xmmreg-mask-z.xmmreg.xmmrm128
VPERMW-ymmreg-mask-z.ymmreg.ymmrm256
VPERMW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPERMW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPERMW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPERMW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPERMW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPERMW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPERMW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPEXPANDD" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-xmmreg-mask-z.mem128
VPEXPANDD-ymmreg-mask-z.mem256
VPEXPANDD-zmmreg-mask-z.mem512
VPEXPANDD-xmmreg-mask-z.xmmreg
VPEXPANDD-ymmreg-mask-z.ymmreg
VPEXPANDD-zmmreg-mask-z.zmmreg))

(setf (gethash "VPEXPANDD-xmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-xmmreg-mask-z.mem128))

(setf (gethash "VPEXPANDD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPEXPANDD-ymmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-ymmreg-mask-z.mem256))

(setf (gethash "VPEXPANDD-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-ymmreg-mask-z.ymmreg))

(setf (gethash "VPEXPANDD-zmmreg-mask-z.mem512" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-zmmreg-mask-z.mem512))

(setf (gethash "VPEXPANDD-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDD-zmmreg-mask-z.zmmreg))

(setf (gethash "VPEXPANDQ" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-xmmreg-mask-z.mem128
VPEXPANDQ-ymmreg-mask-z.mem256
VPEXPANDQ-zmmreg-mask-z.mem512
VPEXPANDQ-xmmreg-mask-z.xmmreg
VPEXPANDQ-ymmreg-mask-z.ymmreg
VPEXPANDQ-zmmreg-mask-z.zmmreg))

(setf (gethash "VPEXPANDQ-xmmreg-mask-z.mem128" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-xmmreg-mask-z.mem128))

(setf (gethash "VPEXPANDQ-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-xmmreg-mask-z.xmmreg))

(setf (gethash "VPEXPANDQ-ymmreg-mask-z.mem256" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-ymmreg-mask-z.mem256))

(setf (gethash "VPEXPANDQ-ymmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-ymmreg-mask-z.ymmreg))

(setf (gethash "VPEXPANDQ-zmmreg-mask-z.mem512" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-zmmreg-mask-z.mem512))

(setf (gethash "VPEXPANDQ-zmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPEXPANDQ-zmmreg-mask-z.zmmreg))

(setf (gethash "VPEXTRB" *x64-instruction-variants-hash-table*) (list
VPEXTRB-reg64.xmmreg.imm8
VPEXTRB-reg32.xmmreg.imm8
VPEXTRB-mem8.xmmreg.imm8
VPEXTRB-reg8.xmmreg.imm8
VPEXTRB-reg16.xmmreg.imm8
VPEXTRB-reg32.xmmreg.imm8
VPEXTRB-reg64.xmmreg.imm8
VPEXTRB-mem8.xmmreg.imm8))

(setf (gethash "VPEXTRB-mem8.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRB-mem8.xmmreg.imm8
VPEXTRB-mem8.xmmreg.imm8))

(setf (gethash "VPEXTRB-reg16.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRB-reg16.xmmreg.imm8))

(setf (gethash "VPEXTRB-reg32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRB-reg32.xmmreg.imm8
VPEXTRB-reg32.xmmreg.imm8))

(setf (gethash "VPEXTRB-reg64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRB-reg64.xmmreg.imm8
VPEXTRB-reg64.xmmreg.imm8))

(setf (gethash "VPEXTRB-reg8.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRB-reg8.xmmreg.imm8))

(setf (gethash "VPEXTRD" *x64-instruction-variants-hash-table*) (list
VPEXTRD-reg64.xmmreg.imm8
VPEXTRD-rm32.xmmreg.imm8
VPEXTRD-rm32.xmmreg.imm8))

(setf (gethash "VPEXTRD-reg64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRD-reg64.xmmreg.imm8))

(setf (gethash "VPEXTRD-rm32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRD-rm32.xmmreg.imm8
VPEXTRD-rm32.xmmreg.imm8))

(setf (gethash "VPEXTRQ" *x64-instruction-variants-hash-table*) (list
VPEXTRQ-rm64.xmmreg.imm8
VPEXTRQ-rm64.xmmreg.imm8))

(setf (gethash "VPEXTRQ-rm64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRQ-rm64.xmmreg.imm8
VPEXTRQ-rm64.xmmreg.imm8))

(setf (gethash "VPEXTRW" *x64-instruction-variants-hash-table*) (list
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-mem16.xmmreg.imm8
VPEXTRW-reg16.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-mem16.xmmreg.imm8
VPEXTRW-reg16.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8))

(setf (gethash "VPEXTRW-mem16.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRW-mem16.xmmreg.imm8
VPEXTRW-mem16.xmmreg.imm8))

(setf (gethash "VPEXTRW-reg16.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRW-reg16.xmmreg.imm8
VPEXTRW-reg16.xmmreg.imm8))

(setf (gethash "VPEXTRW-reg32.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8
VPEXTRW-reg32.xmmreg.imm8))

(setf (gethash "VPEXTRW-reg64.xmmreg.imm8" *x64-instruction-variants-hash-table*) (list
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8
VPEXTRW-reg64.xmmreg.imm8))

(setf (gethash "VPGATHERDD" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-xmmreg.xmem32.xmmreg
VPGATHERDD-ymmreg.ymem32.ymmreg
VPGATHERDD-xmmreg-mask.xmem32
VPGATHERDD-ymmreg-mask.ymem32
VPGATHERDD-zmmreg-mask.zmem32))

(setf (gethash "VPGATHERDD-xmmreg-mask.xmem32" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-xmmreg-mask.xmem32))

(setf (gethash "VPGATHERDD-xmmreg.xmem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-xmmreg.xmem32.xmmreg))

(setf (gethash "VPGATHERDD-ymmreg-mask.ymem32" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-ymmreg-mask.ymem32))

(setf (gethash "VPGATHERDD-ymmreg.ymem32.ymmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-ymmreg.ymem32.ymmreg))

(setf (gethash "VPGATHERDD-zmmreg-mask.zmem32" *x64-instruction-variants-hash-table*) (list
VPGATHERDD-zmmreg-mask.zmem32))

(setf (gethash "VPGATHERDQ" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-xmmreg.xmem64.xmmreg
VPGATHERDQ-ymmreg.xmem64.ymmreg
VPGATHERDQ-xmmreg-mask.xmem64
VPGATHERDQ-ymmreg-mask.xmem64
VPGATHERDQ-zmmreg-mask.ymem64))

(setf (gethash "VPGATHERDQ-xmmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-xmmreg-mask.xmem64))

(setf (gethash "VPGATHERDQ-xmmreg.xmem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-xmmreg.xmem64.xmmreg))

(setf (gethash "VPGATHERDQ-ymmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-ymmreg-mask.xmem64))

(setf (gethash "VPGATHERDQ-ymmreg.xmem64.ymmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-ymmreg.xmem64.ymmreg))

(setf (gethash "VPGATHERDQ-zmmreg-mask.ymem64" *x64-instruction-variants-hash-table*) (list
VPGATHERDQ-zmmreg-mask.ymem64))

(setf (gethash "VPGATHERQD" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-xmmreg.xmem32.xmmreg
VPGATHERQD-xmmreg.ymem32.xmmreg
VPGATHERQD-xmmreg-mask.xmem32
VPGATHERQD-xmmreg-mask.ymem32
VPGATHERQD-ymmreg-mask.zmem32))

(setf (gethash "VPGATHERQD-xmmreg-mask.xmem32" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-xmmreg-mask.xmem32))

(setf (gethash "VPGATHERQD-xmmreg-mask.ymem32" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-xmmreg-mask.ymem32))

(setf (gethash "VPGATHERQD-xmmreg.xmem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-xmmreg.xmem32.xmmreg))

(setf (gethash "VPGATHERQD-xmmreg.ymem32.xmmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-xmmreg.ymem32.xmmreg))

(setf (gethash "VPGATHERQD-ymmreg-mask.zmem32" *x64-instruction-variants-hash-table*) (list
VPGATHERQD-ymmreg-mask.zmem32))

(setf (gethash "VPGATHERQQ" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-xmmreg.xmem64.xmmreg
VPGATHERQQ-ymmreg.ymem64.ymmreg
VPGATHERQQ-xmmreg-mask.xmem64
VPGATHERQQ-ymmreg-mask.ymem64
VPGATHERQQ-zmmreg-mask.zmem64))

(setf (gethash "VPGATHERQQ-xmmreg-mask.xmem64" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-xmmreg-mask.xmem64))

(setf (gethash "VPGATHERQQ-xmmreg.xmem64.xmmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-xmmreg.xmem64.xmmreg))

(setf (gethash "VPGATHERQQ-ymmreg-mask.ymem64" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-ymmreg-mask.ymem64))

(setf (gethash "VPGATHERQQ-ymmreg.ymem64.ymmreg" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-ymmreg.ymem64.ymmreg))

(setf (gethash "VPGATHERQQ-zmmreg-mask.zmem64" *x64-instruction-variants-hash-table*) (list
VPGATHERQQ-zmmreg-mask.zmem64))

(setf (gethash "VPHADDBD" *x64-instruction-variants-hash-table*) (list
VPHADDBD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDBD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDBD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDBQ" *x64-instruction-variants-hash-table*) (list
VPHADDBQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDBQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDBQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDBW" *x64-instruction-variants-hash-table*) (list
VPHADDBW-xmmreg.xmmrm128*))

(setf (gethash "VPHADDBW-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDBW-xmmreg.xmmrm128*))

(setf (gethash "VPHADDD" *x64-instruction-variants-hash-table*) (list
VPHADDD-xmmreg.xmmreg*.xmmrm128
VPHADDD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHADDD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHADDD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHADDD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDDQ" *x64-instruction-variants-hash-table*) (list
VPHADDDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDDQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDSW" *x64-instruction-variants-hash-table*) (list
VPHADDSW-xmmreg.xmmreg*.xmmrm128
VPHADDSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHADDSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHADDSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHADDSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDUBD" *x64-instruction-variants-hash-table*) (list
VPHADDUBD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUBD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUBD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUBQ" *x64-instruction-variants-hash-table*) (list
VPHADDUBQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUBQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUBQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUBW" *x64-instruction-variants-hash-table*) (list
VPHADDUBW-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUBW-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUBW-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUDQ" *x64-instruction-variants-hash-table*) (list
VPHADDUDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUDQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUWD" *x64-instruction-variants-hash-table*) (list
VPHADDUWD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUWD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUWD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUWQ" *x64-instruction-variants-hash-table*) (list
VPHADDUWQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDUWQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDUWQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDW" *x64-instruction-variants-hash-table*) (list
VPHADDW-xmmreg.xmmreg*.xmmrm128
VPHADDW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHADDW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHADDW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHADDW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHADDWD" *x64-instruction-variants-hash-table*) (list
VPHADDWD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDWD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDWD-xmmreg.xmmrm128*))

(setf (gethash "VPHADDWQ" *x64-instruction-variants-hash-table*) (list
VPHADDWQ-xmmreg.xmmrm128*))

(setf (gethash "VPHADDWQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHADDWQ-xmmreg.xmmrm128*))

(setf (gethash "VPHMINPOSUW" *x64-instruction-variants-hash-table*) (list
VPHMINPOSUW-xmmreg.xmmrm128))

(setf (gethash "VPHMINPOSUW-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHMINPOSUW-xmmreg.xmmrm128))

(setf (gethash "VPHSUBBW" *x64-instruction-variants-hash-table*) (list
VPHSUBBW-xmmreg.xmmrm128*))

(setf (gethash "VPHSUBBW-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHSUBBW-xmmreg.xmmrm128*))

(setf (gethash "VPHSUBD" *x64-instruction-variants-hash-table*) (list
VPHSUBD-xmmreg.xmmreg*.xmmrm128
VPHSUBD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHSUBD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHSUBD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHSUBD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBDQ" *x64-instruction-variants-hash-table*) (list
VPHSUBDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHSUBDQ-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHSUBDQ-xmmreg.xmmrm128*))

(setf (gethash "VPHSUBSW" *x64-instruction-variants-hash-table*) (list
VPHSUBSW-xmmreg.xmmreg*.xmmrm128
VPHSUBSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHSUBSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHSUBSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHSUBSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBW" *x64-instruction-variants-hash-table*) (list
VPHSUBW-xmmreg.xmmreg*.xmmrm128
VPHSUBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPHSUBW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPHSUBW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPHSUBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPHSUBWD" *x64-instruction-variants-hash-table*) (list
VPHSUBWD-xmmreg.xmmrm128*))

(setf (gethash "VPHSUBWD-xmmreg.xmmrm128*" *x64-instruction-variants-hash-table*) (list
VPHSUBWD-xmmreg.xmmrm128*))

(setf (gethash "VPINSRB" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg*.mem8.imm8
VPINSRB-xmmreg.xmmreg*.rm8.imm8
VPINSRB-xmmreg.xmmreg*.reg32.imm8
VPINSRB-xmmreg.xmmreg.reg32.imm8
VPINSRB-xmmreg.xmmreg.mem8.imm8))

(setf (gethash "VPINSRB-xmmreg.xmmreg*.mem8.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg*.mem8.imm8))

(setf (gethash "VPINSRB-xmmreg.xmmreg*.reg32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg*.reg32.imm8))

(setf (gethash "VPINSRB-xmmreg.xmmreg*.rm8.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg*.rm8.imm8))

(setf (gethash "VPINSRB-xmmreg.xmmreg.mem8.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg.mem8.imm8))

(setf (gethash "VPINSRB-xmmreg.xmmreg.reg32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRB-xmmreg.xmmreg.reg32.imm8))

(setf (gethash "VPINSRD" *x64-instruction-variants-hash-table*) (list
VPINSRD-xmmreg.xmmreg*.mem32.imm8
VPINSRD-xmmreg.xmmreg*.rm32.imm8
VPINSRD-xmmreg.xmmreg.rm32.imm8))

(setf (gethash "VPINSRD-xmmreg.xmmreg*.mem32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRD-xmmreg.xmmreg*.mem32.imm8))

(setf (gethash "VPINSRD-xmmreg.xmmreg*.rm32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRD-xmmreg.xmmreg*.rm32.imm8))

(setf (gethash "VPINSRD-xmmreg.xmmreg.rm32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRD-xmmreg.xmmreg.rm32.imm8))

(setf (gethash "VPINSRQ" *x64-instruction-variants-hash-table*) (list
VPINSRQ-xmmreg.xmmreg*.mem64.imm8
VPINSRQ-xmmreg.xmmreg*.rm64.imm8
VPINSRQ-xmmreg.xmmreg.rm64.imm8))

(setf (gethash "VPINSRQ-xmmreg.xmmreg*.mem64.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRQ-xmmreg.xmmreg*.mem64.imm8))

(setf (gethash "VPINSRQ-xmmreg.xmmreg*.rm64.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRQ-xmmreg.xmmreg*.rm64.imm8))

(setf (gethash "VPINSRQ-xmmreg.xmmreg.rm64.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRQ-xmmreg.xmmreg.rm64.imm8))

(setf (gethash "VPINSRW" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg*.mem16.imm8
VPINSRW-xmmreg.xmmreg*.rm16.imm8
VPINSRW-xmmreg.xmmreg*.reg32.imm8
VPINSRW-xmmreg.xmmreg.reg32.imm8
VPINSRW-xmmreg.xmmreg.mem16.imm8))

(setf (gethash "VPINSRW-xmmreg.xmmreg*.mem16.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg*.mem16.imm8))

(setf (gethash "VPINSRW-xmmreg.xmmreg*.reg32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg*.reg32.imm8))

(setf (gethash "VPINSRW-xmmreg.xmmreg*.rm16.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg*.rm16.imm8))

(setf (gethash "VPINSRW-xmmreg.xmmreg.mem16.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg.mem16.imm8))

(setf (gethash "VPINSRW-xmmreg.xmmreg.reg32.imm8" *x64-instruction-variants-hash-table*) (list
VPINSRW-xmmreg.xmmreg.reg32.imm8))

(setf (gethash "VPLZCNTD" *x64-instruction-variants-hash-table*) (list
VPLZCNTD-xmmreg-mask-z.xmmrm128-b32
VPLZCNTD-ymmreg-mask-z.ymmrm256-b32
VPLZCNTD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPLZCNTD-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPLZCNTD-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VPLZCNTD-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPLZCNTD-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VPLZCNTD-zmmreg-mask-z.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPLZCNTD-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VPLZCNTQ" *x64-instruction-variants-hash-table*) (list
VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64
VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64
VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPLZCNTQ-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPLZCNTQ-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPLZCNTQ-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VPMACSDD" *x64-instruction-variants-hash-table*) (list
VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSDD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSDQH" *x64-instruction-variants-hash-table*) (list
VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSDQL" *x64-instruction-variants-hash-table*) (list
VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDD" *x64-instruction-variants-hash-table*) (list
VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSSDD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDQH" *x64-instruction-variants-hash-table*) (list
VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSSDQH-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDQL" *x64-instruction-variants-hash-table*) (list
VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSSDQL-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSWD" *x64-instruction-variants-hash-table*) (list
VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSWW" *x64-instruction-variants-hash-table*) (list
VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSSWW-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSWD" *x64-instruction-variants-hash-table*) (list
VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSWW" *x64-instruction-variants-hash-table*) (list
VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMACSWW-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMADCSSWD" *x64-instruction-variants-hash-table*) (list
VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMADCSSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMADCSWD" *x64-instruction-variants-hash-table*) (list
VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMADCSWD-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPMADD52HUQ" *x64-instruction-variants-hash-table*) (list
VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52HUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52HUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52HUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMADD52LUQ" *x64-instruction-variants-hash-table*) (list
VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52LUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52LUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMADD52LUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMADDUBSW" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-xmmreg.xmmreg*.xmmrm128
VPMADDUBSW-ymmreg.ymmreg*.ymmrm256
VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128
VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256
VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMADDUBSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMADDUBSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMADDUBSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMADDWD" *x64-instruction-variants-hash-table*) (list
VPMADDWD-xmmreg.xmmreg*.xmmrm128
VPMADDWD-ymmreg.ymmreg*.ymmrm256
VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128
VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256
VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMADDWD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMADDWD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMADDWD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMADDWD-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMADDWD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMADDWD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMADDWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMASKMOVD" *x64-instruction-variants-hash-table*) (list
VPMASKMOVD-xmmreg.xmmreg*.mem128
VPMASKMOVD-ymmreg.ymmreg*.mem256
VPMASKMOVD-mem128.xmmreg*.xmmreg
VPMASKMOVD-mem256.ymmreg*.ymmreg))

(setf (gethash "VPMASKMOVD-mem128.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMASKMOVD-mem128.xmmreg*.xmmreg))

(setf (gethash "VPMASKMOVD-mem256.ymmreg*.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMASKMOVD-mem256.ymmreg*.ymmreg))

(setf (gethash "VPMASKMOVD-xmmreg.xmmreg*.mem128" *x64-instruction-variants-hash-table*) (list
VPMASKMOVD-xmmreg.xmmreg*.mem128))

(setf (gethash "VPMASKMOVD-ymmreg.ymmreg*.mem256" *x64-instruction-variants-hash-table*) (list
VPMASKMOVD-ymmreg.ymmreg*.mem256))

(setf (gethash "VPMASKMOVQ" *x64-instruction-variants-hash-table*) (list
VPMASKMOVQ-xmmreg.xmmreg*.mem128
VPMASKMOVQ-ymmreg.ymmreg*.mem256
VPMASKMOVQ-mem128.xmmreg*.xmmreg
VPMASKMOVQ-mem256.ymmreg*.ymmreg))

(setf (gethash "VPMASKMOVQ-mem128.xmmreg*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMASKMOVQ-mem128.xmmreg*.xmmreg))

(setf (gethash "VPMASKMOVQ-mem256.ymmreg*.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMASKMOVQ-mem256.ymmreg*.ymmreg))

(setf (gethash "VPMASKMOVQ-xmmreg.xmmreg*.mem128" *x64-instruction-variants-hash-table*) (list
VPMASKMOVQ-xmmreg.xmmreg*.mem128))

(setf (gethash "VPMASKMOVQ-ymmreg.ymmreg*.mem256" *x64-instruction-variants-hash-table*) (list
VPMASKMOVQ-ymmreg.ymmreg*.mem256))

(setf (gethash "VPMAXSB" *x64-instruction-variants-hash-table*) (list
VPMAXSB-xmmreg.xmmreg*.xmmrm128
VPMAXSB-ymmreg.ymmreg*.ymmrm256
VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128
VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256
VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMAXSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMAXSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMAXSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXSD" *x64-instruction-variants-hash-table*) (list
VPMAXSD-xmmreg.xmmreg*.xmmrm128
VPMAXSD-ymmreg.ymmreg*.ymmrm256
VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPMAXSD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPMAXSD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXSD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPMAXSD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPMAXSD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXSD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPMAXSD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMAXSQ" *x64-instruction-variants-hash-table*) (list
VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMAXSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMAXSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMAXSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMAXSW" *x64-instruction-variants-hash-table*) (list
VPMAXSW-xmmreg.xmmreg*.xmmrm128
VPMAXSW-ymmreg.ymmreg*.ymmrm256
VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128
VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256
VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMAXSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMAXSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMAXSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXUB" *x64-instruction-variants-hash-table*) (list
VPMAXUB-xmmreg.xmmreg*.xmmrm128
VPMAXUB-ymmreg.ymmreg*.ymmrm256
VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128
VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256
VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXUB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMAXUB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXUB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXUB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMAXUB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXUB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMAXUB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXUD" *x64-instruction-variants-hash-table*) (list
VPMAXUD-xmmreg.xmmreg*.xmmrm128
VPMAXUD-ymmreg.ymmreg*.ymmrm256
VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPMAXUD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPMAXUD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXUD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPMAXUD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPMAXUD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXUD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPMAXUD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMAXUQ" *x64-instruction-variants-hash-table*) (list
VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMAXUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMAXUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMAXUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMAXUW" *x64-instruction-variants-hash-table*) (list
VPMAXUW-xmmreg.xmmreg*.xmmrm128
VPMAXUW-ymmreg.ymmreg*.ymmrm256
VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128
VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256
VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXUW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMAXUW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMAXUW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXUW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMAXUW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMAXUW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMAXUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINSB" *x64-instruction-variants-hash-table*) (list
VPMINSB-xmmreg.xmmreg*.xmmrm128
VPMINSB-ymmreg.ymmreg*.ymmrm256
VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128
VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256
VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMINSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMINSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMINSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINSD" *x64-instruction-variants-hash-table*) (list
VPMINSD-xmmreg.xmmreg*.xmmrm128
VPMINSD-ymmreg.ymmreg*.ymmrm256
VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPMINSD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPMINSD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINSD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPMINSD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPMINSD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINSD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPMINSD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMINSQ" *x64-instruction-variants-hash-table*) (list
VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMINSQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMINSQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMINSQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMINSW" *x64-instruction-variants-hash-table*) (list
VPMINSW-xmmreg.xmmreg*.xmmrm128
VPMINSW-ymmreg.ymmreg*.ymmrm256
VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128
VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256
VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMINSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMINSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMINSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINUB" *x64-instruction-variants-hash-table*) (list
VPMINUB-xmmreg.xmmreg*.xmmrm128
VPMINUB-ymmreg.ymmreg*.ymmrm256
VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128
VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256
VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINUB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMINUB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINUB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINUB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMINUB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINUB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMINUB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINUD" *x64-instruction-variants-hash-table*) (list
VPMINUD-xmmreg.xmmreg*.xmmrm128
VPMINUD-ymmreg.ymmreg*.ymmrm256
VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPMINUD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPMINUD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINUD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPMINUD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPMINUD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINUD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPMINUD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMINUQ" *x64-instruction-variants-hash-table*) (list
VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMINUQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMINUQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMINUQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMINUW" *x64-instruction-variants-hash-table*) (list
VPMINUW-xmmreg.xmmreg*.xmmrm128
VPMINUW-ymmreg.ymmreg*.ymmrm256
VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128
VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256
VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINUW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMINUW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMINUW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINUW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMINUW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMINUW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMINUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMOVB2M" *x64-instruction-variants-hash-table*) (list
VPMOVB2M-kreg.xmmreg
VPMOVB2M-kreg.ymmreg
VPMOVB2M-kreg.zmmreg))

(setf (gethash "VPMOVB2M-kreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVB2M-kreg.xmmreg))

(setf (gethash "VPMOVB2M-kreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVB2M-kreg.ymmreg))

(setf (gethash "VPMOVB2M-kreg.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVB2M-kreg.zmmreg))

(setf (gethash "VPMOVD2M" *x64-instruction-variants-hash-table*) (list
VPMOVD2M-kreg.xmmreg
VPMOVD2M-kreg.ymmreg
VPMOVD2M-kreg.zmmreg))

(setf (gethash "VPMOVD2M-kreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVD2M-kreg.xmmreg))

(setf (gethash "VPMOVD2M-kreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVD2M-kreg.ymmreg))

(setf (gethash "VPMOVD2M-kreg.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVD2M-kreg.zmmreg))

(setf (gethash "VPMOVDB" *x64-instruction-variants-hash-table*) (list
VPMOVDB-xmmreg-mask-z.xmmreg
VPMOVDB-xmmreg-mask-z.ymmreg
VPMOVDB-xmmreg-mask-z.zmmreg
VPMOVDB-mem32-mask.xmmreg
VPMOVDB-mem64-mask.ymmreg
VPMOVDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVDB-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVDB-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-mem32-mask.xmmreg))

(setf (gethash "VPMOVDB-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-mem64-mask.ymmreg))

(setf (gethash "VPMOVDB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVDB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVDB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVDW" *x64-instruction-variants-hash-table*) (list
VPMOVDW-xmmreg-mask-z.xmmreg
VPMOVDW-xmmreg-mask-z.ymmreg
VPMOVDW-ymmreg-mask-z.zmmreg
VPMOVDW-mem64-mask.xmmreg
VPMOVDW-mem128-mask.ymmreg
VPMOVDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVDW-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-mem128-mask.ymmreg))

(setf (gethash "VPMOVDW-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVDW-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-mem64-mask.xmmreg))

(setf (gethash "VPMOVDW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVDW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVDW-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVDW-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVM2B" *x64-instruction-variants-hash-table*) (list
VPMOVM2B-xmmreg.kreg
VPMOVM2B-ymmreg.kreg
VPMOVM2B-zmmreg.kreg))

(setf (gethash "VPMOVM2B-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2B-xmmreg.kreg))

(setf (gethash "VPMOVM2B-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2B-ymmreg.kreg))

(setf (gethash "VPMOVM2B-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2B-zmmreg.kreg))

(setf (gethash "VPMOVM2D" *x64-instruction-variants-hash-table*) (list
VPMOVM2D-xmmreg.kreg
VPMOVM2D-ymmreg.kreg
VPMOVM2D-zmmreg.kreg))

(setf (gethash "VPMOVM2D-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2D-xmmreg.kreg))

(setf (gethash "VPMOVM2D-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2D-ymmreg.kreg))

(setf (gethash "VPMOVM2D-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2D-zmmreg.kreg))

(setf (gethash "VPMOVM2Q" *x64-instruction-variants-hash-table*) (list
VPMOVM2Q-xmmreg.kreg
VPMOVM2Q-ymmreg.kreg
VPMOVM2Q-zmmreg.kreg))

(setf (gethash "VPMOVM2Q-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2Q-xmmreg.kreg))

(setf (gethash "VPMOVM2Q-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2Q-ymmreg.kreg))

(setf (gethash "VPMOVM2Q-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2Q-zmmreg.kreg))

(setf (gethash "VPMOVM2W" *x64-instruction-variants-hash-table*) (list
VPMOVM2W-xmmreg.kreg
VPMOVM2W-ymmreg.kreg
VPMOVM2W-zmmreg.kreg))

(setf (gethash "VPMOVM2W-xmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2W-xmmreg.kreg))

(setf (gethash "VPMOVM2W-ymmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2W-ymmreg.kreg))

(setf (gethash "VPMOVM2W-zmmreg.kreg" *x64-instruction-variants-hash-table*) (list
VPMOVM2W-zmmreg.kreg))

(setf (gethash "VPMOVMSKB" *x64-instruction-variants-hash-table*) (list
VPMOVMSKB-reg64.xmmreg
VPMOVMSKB-reg32.xmmreg
VPMOVMSKB-reg32.ymmreg
VPMOVMSKB-reg64.ymmreg))

(setf (gethash "VPMOVMSKB-reg32.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVMSKB-reg32.xmmreg))

(setf (gethash "VPMOVMSKB-reg32.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVMSKB-reg32.ymmreg))

(setf (gethash "VPMOVMSKB-reg64.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVMSKB-reg64.xmmreg))

(setf (gethash "VPMOVMSKB-reg64.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVMSKB-reg64.ymmreg))

(setf (gethash "VPMOVQ2M" *x64-instruction-variants-hash-table*) (list
VPMOVQ2M-kreg.xmmreg
VPMOVQ2M-kreg.ymmreg
VPMOVQ2M-kreg.zmmreg))

(setf (gethash "VPMOVQ2M-kreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQ2M-kreg.xmmreg))

(setf (gethash "VPMOVQ2M-kreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQ2M-kreg.ymmreg))

(setf (gethash "VPMOVQ2M-kreg.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQ2M-kreg.zmmreg))

(setf (gethash "VPMOVQB" *x64-instruction-variants-hash-table*) (list
VPMOVQB-xmmreg-mask-z.xmmreg
VPMOVQB-xmmreg-mask-z.ymmreg
VPMOVQB-xmmreg-mask-z.zmmreg
VPMOVQB-mem16-mask.xmmreg
VPMOVQB-mem32-mask.ymmreg
VPMOVQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVQB-mem16-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-mem16-mask.xmmreg))

(setf (gethash "VPMOVQB-mem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-mem32-mask.ymmreg))

(setf (gethash "VPMOVQB-mem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVQB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVQB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVQB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVQD" *x64-instruction-variants-hash-table*) (list
VPMOVQD-xmmreg-mask-z.xmmreg
VPMOVQD-xmmreg-mask-z.ymmreg
VPMOVQD-ymmreg-mask-z.zmmreg
VPMOVQD-mem64-mask.xmmreg
VPMOVQD-mem128-mask.ymmreg
VPMOVQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVQD-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-mem128-mask.ymmreg))

(setf (gethash "VPMOVQD-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVQD-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-mem64-mask.xmmreg))

(setf (gethash "VPMOVQD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVQD-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVQD-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQD-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVQW" *x64-instruction-variants-hash-table*) (list
VPMOVQW-xmmreg-mask-z.xmmreg
VPMOVQW-xmmreg-mask-z.ymmreg
VPMOVQW-xmmreg-mask-z.zmmreg
VPMOVQW-mem32-mask.xmmreg
VPMOVQW-mem64-mask.ymmreg
VPMOVQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVQW-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVQW-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-mem32-mask.xmmreg))

(setf (gethash "VPMOVQW-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-mem64-mask.ymmreg))

(setf (gethash "VPMOVQW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVQW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVQW-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVQW-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSDB" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-xmmreg-mask-z.xmmreg
VPMOVSDB-xmmreg-mask-z.ymmreg
VPMOVSDB-xmmreg-mask-z.zmmreg
VPMOVSDB-mem32-mask.xmmreg
VPMOVSDB-mem64-mask.ymmreg
VPMOVSDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVSDB-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVSDB-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-mem32-mask.xmmreg))

(setf (gethash "VPMOVSDB-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-mem64-mask.ymmreg))

(setf (gethash "VPMOVSDB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSDB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSDB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSDW" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-xmmreg-mask-z.xmmreg
VPMOVSDW-xmmreg-mask-z.ymmreg
VPMOVSDW-ymmreg-mask-z.zmmreg
VPMOVSDW-mem64-mask.xmmreg
VPMOVSDW-mem128-mask.ymmreg
VPMOVSDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVSDW-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-mem128-mask.ymmreg))

(setf (gethash "VPMOVSDW-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVSDW-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-mem64-mask.xmmreg))

(setf (gethash "VPMOVSDW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSDW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSDW-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSDW-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSQB" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-xmmreg-mask-z.xmmreg
VPMOVSQB-xmmreg-mask-z.ymmreg
VPMOVSQB-xmmreg-mask-z.zmmreg
VPMOVSQB-mem16-mask.xmmreg
VPMOVSQB-mem32-mask.ymmreg
VPMOVSQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVSQB-mem16-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-mem16-mask.xmmreg))

(setf (gethash "VPMOVSQB-mem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-mem32-mask.ymmreg))

(setf (gethash "VPMOVSQB-mem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVSQB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSQB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSQB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSQD" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-xmmreg-mask-z.xmmreg
VPMOVSQD-xmmreg-mask-z.ymmreg
VPMOVSQD-ymmreg-mask-z.zmmreg
VPMOVSQD-mem64-mask.xmmreg
VPMOVSQD-mem128-mask.ymmreg
VPMOVSQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVSQD-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-mem128-mask.ymmreg))

(setf (gethash "VPMOVSQD-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVSQD-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-mem64-mask.xmmreg))

(setf (gethash "VPMOVSQD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSQD-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSQD-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQD-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSQW" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-xmmreg-mask-z.xmmreg
VPMOVSQW-xmmreg-mask-z.ymmreg
VPMOVSQW-xmmreg-mask-z.zmmreg
VPMOVSQW-mem32-mask.xmmreg
VPMOVSQW-mem64-mask.ymmreg
VPMOVSQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVSQW-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVSQW-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-mem32-mask.xmmreg))

(setf (gethash "VPMOVSQW-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-mem64-mask.ymmreg))

(setf (gethash "VPMOVSQW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSQW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSQW-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSQW-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSWB" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-xmmreg-mask-z.xmmreg
VPMOVSWB-xmmreg-mask-z.ymmreg
VPMOVSWB-ymmreg-mask-z.zmmreg
VPMOVSWB-mem64-mask.xmmreg
VPMOVSWB-mem128-mask.ymmreg
VPMOVSWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVSWB-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-mem128-mask.ymmreg))

(setf (gethash "VPMOVSWB-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVSWB-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-mem64-mask.xmmreg))

(setf (gethash "VPMOVSWB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVSWB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVSWB-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSWB-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVSXBD" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-xmmreg.xmmrm32
VPMOVSXBD-ymmreg.mem64
VPMOVSXBD-ymmreg.xmmreg
VPMOVSXBD-xmmreg-mask-z.xmmrm32
VPMOVSXBD-ymmreg-mask-z.xmmrm64
VPMOVSXBD-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXBD-xmmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-xmmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVSXBD-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-xmmreg.xmmrm32))

(setf (gethash "VPMOVSXBD-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-ymmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXBD-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-ymmreg.mem64))

(setf (gethash "VPMOVSXBD-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-ymmreg.xmmreg))

(setf (gethash "VPMOVSXBD-zmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXBD-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXBQ" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-xmmreg.xmmrm16
VPMOVSXBQ-ymmreg.mem32
VPMOVSXBQ-ymmreg.xmmreg
VPMOVSXBQ-xmmreg-mask-z.xmmrm16
VPMOVSXBQ-ymmreg-mask-z.xmmrm32
VPMOVSXBQ-zmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXBQ-xmmreg-mask-z.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-xmmreg-mask-z.xmmrm16))

(setf (gethash "VPMOVSXBQ-xmmreg.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-xmmreg.xmmrm16))

(setf (gethash "VPMOVSXBQ-ymmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-ymmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVSXBQ-ymmreg.mem32" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-ymmreg.mem32))

(setf (gethash "VPMOVSXBQ-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-ymmreg.xmmreg))

(setf (gethash "VPMOVSXBQ-zmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXBQ-zmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXBW" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-xmmreg.xmmrm64
VPMOVSXBW-ymmreg.xmmrm128
VPMOVSXBW-xmmreg-mask-z.xmmrm64
VPMOVSXBW-ymmreg-mask-z.xmmrm128
VPMOVSXBW-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXBW-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXBW-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-xmmreg.xmmrm64))

(setf (gethash "VPMOVSXBW-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXBW-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-ymmreg.xmmrm128))

(setf (gethash "VPMOVSXBW-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVSXBW-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXDQ" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-xmmreg.xmmrm64
VPMOVSXDQ-ymmreg.xmmrm128
VPMOVSXDQ-xmmreg-mask-z.xmmrm64
VPMOVSXDQ-ymmreg-mask-z.xmmrm128
VPMOVSXDQ-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXDQ-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXDQ-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-xmmreg.xmmrm64))

(setf (gethash "VPMOVSXDQ-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXDQ-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-ymmreg.xmmrm128))

(setf (gethash "VPMOVSXDQ-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVSXDQ-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXWD" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-xmmreg.xmmrm64
VPMOVSXWD-ymmreg.xmmrm128
VPMOVSXWD-xmmreg-mask-z.xmmrm64
VPMOVSXWD-ymmreg-mask-z.xmmrm128
VPMOVSXWD-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXWD-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXWD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-xmmreg.xmmrm64))

(setf (gethash "VPMOVSXWD-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXWD-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-ymmreg.xmmrm128))

(setf (gethash "VPMOVSXWD-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVSXWD-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVSXWQ" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-xmmreg.xmmrm32
VPMOVSXWQ-ymmreg.mem64
VPMOVSXWQ-ymmreg.xmmreg
VPMOVSXWQ-xmmreg-mask-z.xmmrm32
VPMOVSXWQ-ymmreg-mask-z.xmmrm64
VPMOVSXWQ-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVSXWQ-xmmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-xmmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVSXWQ-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-xmmreg.xmmrm32))

(setf (gethash "VPMOVSXWQ-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-ymmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVSXWQ-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-ymmreg.mem64))

(setf (gethash "VPMOVSXWQ-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-ymmreg.xmmreg))

(setf (gethash "VPMOVSXWQ-zmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVSXWQ-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVUSDB" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-xmmreg-mask-z.xmmreg
VPMOVUSDB-xmmreg-mask-z.ymmreg
VPMOVUSDB-xmmreg-mask-z.zmmreg
VPMOVUSDB-mem32-mask.xmmreg
VPMOVUSDB-mem64-mask.ymmreg
VPMOVUSDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVUSDB-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-mem128-mask.zmmreg))

(setf (gethash "VPMOVUSDB-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-mem32-mask.xmmreg))

(setf (gethash "VPMOVUSDB-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-mem64-mask.ymmreg))

(setf (gethash "VPMOVUSDB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSDB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSDB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVUSDW" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-xmmreg-mask-z.xmmreg
VPMOVUSDW-xmmreg-mask-z.ymmreg
VPMOVUSDW-ymmreg-mask-z.zmmreg
VPMOVUSDW-mem64-mask.xmmreg
VPMOVUSDW-mem128-mask.ymmreg
VPMOVUSDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSDW-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-mem128-mask.ymmreg))

(setf (gethash "VPMOVUSDW-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSDW-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-mem64-mask.xmmreg))

(setf (gethash "VPMOVUSDW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSDW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSDW-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSDW-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVUSQB" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-xmmreg-mask-z.xmmreg
VPMOVUSQB-xmmreg-mask-z.ymmreg
VPMOVUSQB-xmmreg-mask-z.zmmreg
VPMOVUSQB-mem16-mask.xmmreg
VPMOVUSQB-mem32-mask.ymmreg
VPMOVUSQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVUSQB-mem16-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-mem16-mask.xmmreg))

(setf (gethash "VPMOVUSQB-mem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-mem32-mask.ymmreg))

(setf (gethash "VPMOVUSQB-mem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-mem64-mask.zmmreg))

(setf (gethash "VPMOVUSQB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSQB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSQB-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQB-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVUSQD" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-xmmreg-mask-z.xmmreg
VPMOVUSQD-xmmreg-mask-z.ymmreg
VPMOVUSQD-ymmreg-mask-z.zmmreg
VPMOVUSQD-mem64-mask.xmmreg
VPMOVUSQD-mem128-mask.ymmreg
VPMOVUSQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSQD-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-mem128-mask.ymmreg))

(setf (gethash "VPMOVUSQD-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSQD-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-mem64-mask.xmmreg))

(setf (gethash "VPMOVUSQD-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSQD-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSQD-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQD-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVUSQW" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-xmmreg-mask-z.xmmreg
VPMOVUSQW-xmmreg-mask-z.ymmreg
VPMOVUSQW-xmmreg-mask-z.zmmreg
VPMOVUSQW-mem32-mask.xmmreg
VPMOVUSQW-mem64-mask.ymmreg
VPMOVUSQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVUSQW-mem128-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-mem128-mask.zmmreg))

(setf (gethash "VPMOVUSQW-mem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-mem32-mask.xmmreg))

(setf (gethash "VPMOVUSQW-mem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-mem64-mask.ymmreg))

(setf (gethash "VPMOVUSQW-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSQW-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSQW-xmmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSQW-xmmreg-mask-z.zmmreg))

(setf (gethash "VPMOVUSWB" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-xmmreg-mask-z.xmmreg
VPMOVUSWB-xmmreg-mask-z.ymmreg
VPMOVUSWB-ymmreg-mask-z.zmmreg
VPMOVUSWB-mem64-mask.xmmreg
VPMOVUSWB-mem128-mask.ymmreg
VPMOVUSWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSWB-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-mem128-mask.ymmreg))

(setf (gethash "VPMOVUSWB-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVUSWB-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-mem64-mask.xmmreg))

(setf (gethash "VPMOVUSWB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVUSWB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVUSWB-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVUSWB-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVW2M" *x64-instruction-variants-hash-table*) (list
VPMOVW2M-kreg.xmmreg
VPMOVW2M-kreg.ymmreg
VPMOVW2M-kreg.zmmreg))

(setf (gethash "VPMOVW2M-kreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVW2M-kreg.xmmreg))

(setf (gethash "VPMOVW2M-kreg.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVW2M-kreg.ymmreg))

(setf (gethash "VPMOVW2M-kreg.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVW2M-kreg.zmmreg))

(setf (gethash "VPMOVWB" *x64-instruction-variants-hash-table*) (list
VPMOVWB-xmmreg-mask-z.xmmreg
VPMOVWB-xmmreg-mask-z.ymmreg
VPMOVWB-ymmreg-mask-z.zmmreg
VPMOVWB-mem64-mask.xmmreg
VPMOVWB-mem128-mask.ymmreg
VPMOVWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVWB-mem128-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-mem128-mask.ymmreg))

(setf (gethash "VPMOVWB-mem256-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-mem256-mask.zmmreg))

(setf (gethash "VPMOVWB-mem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-mem64-mask.xmmreg))

(setf (gethash "VPMOVWB-xmmreg-mask-z.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-xmmreg-mask-z.xmmreg))

(setf (gethash "VPMOVWB-xmmreg-mask-z.ymmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-xmmreg-mask-z.ymmreg))

(setf (gethash "VPMOVWB-ymmreg-mask-z.zmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVWB-ymmreg-mask-z.zmmreg))

(setf (gethash "VPMOVZXBD" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-xmmreg.xmmrm32
VPMOVZXBD-ymmreg.mem64
VPMOVZXBD-ymmreg.xmmreg
VPMOVZXBD-xmmreg-mask-z.xmmrm32
VPMOVZXBD-ymmreg-mask-z.xmmrm64
VPMOVZXBD-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXBD-xmmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-xmmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVZXBD-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-xmmreg.xmmrm32))

(setf (gethash "VPMOVZXBD-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-ymmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXBD-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-ymmreg.mem64))

(setf (gethash "VPMOVZXBD-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-ymmreg.xmmreg))

(setf (gethash "VPMOVZXBD-zmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXBD-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXBQ" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-xmmreg.xmmrm16
VPMOVZXBQ-ymmreg.mem32
VPMOVZXBQ-ymmreg.xmmreg
VPMOVZXBQ-xmmreg-mask-z.xmmrm16
VPMOVZXBQ-ymmreg-mask-z.xmmrm32
VPMOVZXBQ-zmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXBQ-xmmreg-mask-z.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-xmmreg-mask-z.xmmrm16))

(setf (gethash "VPMOVZXBQ-xmmreg.xmmrm16" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-xmmreg.xmmrm16))

(setf (gethash "VPMOVZXBQ-ymmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-ymmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVZXBQ-ymmreg.mem32" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-ymmreg.mem32))

(setf (gethash "VPMOVZXBQ-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-ymmreg.xmmreg))

(setf (gethash "VPMOVZXBQ-zmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXBQ-zmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXBW" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-xmmreg.xmmrm64
VPMOVZXBW-ymmreg.xmmrm128
VPMOVZXBW-xmmreg-mask-z.xmmrm64
VPMOVZXBW-ymmreg-mask-z.xmmrm128
VPMOVZXBW-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXBW-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXBW-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-xmmreg.xmmrm64))

(setf (gethash "VPMOVZXBW-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXBW-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-ymmreg.xmmrm128))

(setf (gethash "VPMOVZXBW-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVZXBW-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXDQ" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-xmmreg.xmmrm64
VPMOVZXDQ-ymmreg.xmmrm128
VPMOVZXDQ-xmmreg-mask-z.xmmrm64
VPMOVZXDQ-ymmreg-mask-z.xmmrm128
VPMOVZXDQ-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXDQ-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXDQ-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-xmmreg.xmmrm64))

(setf (gethash "VPMOVZXDQ-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXDQ-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-ymmreg.xmmrm128))

(setf (gethash "VPMOVZXDQ-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVZXDQ-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXWD" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-xmmreg.xmmrm64
VPMOVZXWD-ymmreg.xmmrm128
VPMOVZXWD-xmmreg-mask-z.xmmrm64
VPMOVZXWD-ymmreg-mask-z.xmmrm128
VPMOVZXWD-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXWD-xmmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-xmmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXWD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-xmmreg.xmmrm64))

(setf (gethash "VPMOVZXWD-ymmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-ymmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXWD-ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-ymmreg.xmmrm128))

(setf (gethash "VPMOVZXWD-zmmreg-mask-z.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMOVZXWD-zmmreg-mask-z.ymmrm256))

(setf (gethash "VPMOVZXWQ" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-xmmreg.xmmrm32
VPMOVZXWQ-ymmreg.mem64
VPMOVZXWQ-ymmreg.xmmreg
VPMOVZXWQ-xmmreg-mask-z.xmmrm32
VPMOVZXWQ-ymmreg-mask-z.xmmrm64
VPMOVZXWQ-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMOVZXWQ-xmmreg-mask-z.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-xmmreg-mask-z.xmmrm32))

(setf (gethash "VPMOVZXWQ-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-xmmreg.xmmrm32))

(setf (gethash "VPMOVZXWQ-ymmreg-mask-z.xmmrm64" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-ymmreg-mask-z.xmmrm64))

(setf (gethash "VPMOVZXWQ-ymmreg.mem64" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-ymmreg.mem64))

(setf (gethash "VPMOVZXWQ-ymmreg.xmmreg" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-ymmreg.xmmreg))

(setf (gethash "VPMOVZXWQ-zmmreg-mask-z.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMOVZXWQ-zmmreg-mask-z.xmmrm128))

(setf (gethash "VPMULDQ" *x64-instruction-variants-hash-table*) (list
VPMULDQ-xmmreg.xmmreg*.xmmrm128
VPMULDQ-ymmreg.ymmreg*.ymmrm256
VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMULDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMULDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMULDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMULDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMULDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULHRSW" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-xmmreg.xmmreg*.xmmrm128
VPMULHRSW-ymmreg.ymmreg*.ymmrm256
VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128
VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256
VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMULHRSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMULHRSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMULHRSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULHUW" *x64-instruction-variants-hash-table*) (list
VPMULHUW-xmmreg.xmmreg*.xmmrm128
VPMULHUW-ymmreg.ymmreg*.ymmrm256
VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128
VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256
VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHUW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMULHUW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHUW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHUW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMULHUW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHUW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMULHUW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULHW" *x64-instruction-variants-hash-table*) (list
VPMULHW-xmmreg.xmmreg*.xmmrm128
VPMULHW-ymmreg.ymmreg*.ymmrm256
VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128
VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256
VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMULHW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULHW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMULHW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULHW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMULHW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULLD" *x64-instruction-variants-hash-table*) (list
VPMULLD-xmmreg.xmmreg*.xmmrm128
VPMULLD-ymmreg.ymmreg*.ymmrm256
VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPMULLD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPMULLD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULLD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPMULLD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPMULLD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULLD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPMULLD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPMULLQ" *x64-instruction-variants-hash-table*) (list
VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMULLQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMULLQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMULLQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULLW" *x64-instruction-variants-hash-table*) (list
VPMULLW-xmmreg.xmmreg*.xmmrm128
VPMULLW-ymmreg.ymmreg*.ymmrm256
VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128
VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256
VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULLW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPMULLW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULLW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULLW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPMULLW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULLW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPMULLW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPMULTISHIFTQB" *x64-instruction-variants-hash-table*) (list
VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMULTISHIFTQB-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMULTISHIFTQB-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMULTISHIFTQB-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULUDQ" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-xmmreg.xmmreg*.xmmrm128
VPMULUDQ-ymmreg.ymmreg*.ymmrm256
VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPMULUDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPMULUDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPMULUDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPOR" *x64-instruction-variants-hash-table*) (list
VPOR-xmmreg.xmmreg*.xmmrm128
VPOR-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPOR-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPOR-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPOR-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPOR-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPORD" *x64-instruction-variants-hash-table*) (list
VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPORD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPORD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPORD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPORQ" *x64-instruction-variants-hash-table*) (list
VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPPERM" *x64-instruction-variants-hash-table*) (list
VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128
VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPPERM-xmmreg.xmmreg*.xmmreg.xmmrm128))

(setf (gethash "VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg" *x64-instruction-variants-hash-table*) (list
VPPERM-xmmreg.xmmreg*.xmmrm128.xmmreg))

(setf (gethash "VPROLD" *x64-instruction-variants-hash-table*) (list
VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8
VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8
VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPROLD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPROLD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPROLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPROLQ" *x64-instruction-variants-hash-table*) (list
VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8
VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPROLQ-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPROLQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPROLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPROLVD" *x64-instruction-variants-hash-table*) (list
VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPROLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPROLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPROLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPROLVQ" *x64-instruction-variants-hash-table*) (list
VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPROLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPROLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPROLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPRORD" *x64-instruction-variants-hash-table*) (list
VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8
VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8
VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPRORD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPRORD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPRORD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPRORQ" *x64-instruction-variants-hash-table*) (list
VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8
VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPRORQ-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPRORQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPRORQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPRORVD" *x64-instruction-variants-hash-table*) (list
VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPRORVD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPRORVD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPRORVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPRORVQ" *x64-instruction-variants-hash-table*) (list
VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPRORVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPRORVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPRORVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPROTB" *x64-instruction-variants-hash-table*) (list
VPROTB-xmmreg.xmmrm128*.xmmreg
VPROTB-xmmreg.xmmreg*.xmmrm128
VPROTB-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPROTB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPROTB-xmmreg.xmmrm128*.imm8" *x64-instruction-variants-hash-table*) (list
VPROTB-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTB-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPROTB-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPROTD" *x64-instruction-variants-hash-table*) (list
VPROTD-xmmreg.xmmrm128*.xmmreg
VPROTD-xmmreg.xmmreg*.xmmrm128
VPROTD-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPROTD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPROTD-xmmreg.xmmrm128*.imm8" *x64-instruction-variants-hash-table*) (list
VPROTD-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTD-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPROTD-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPROTQ" *x64-instruction-variants-hash-table*) (list
VPROTQ-xmmreg.xmmrm128*.xmmreg
VPROTQ-xmmreg.xmmreg*.xmmrm128
VPROTQ-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPROTQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPROTQ-xmmreg.xmmrm128*.imm8" *x64-instruction-variants-hash-table*) (list
VPROTQ-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTQ-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPROTQ-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPROTW" *x64-instruction-variants-hash-table*) (list
VPROTW-xmmreg.xmmrm128*.xmmreg
VPROTW-xmmreg.xmmreg*.xmmrm128
VPROTW-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPROTW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPROTW-xmmreg.xmmrm128*.imm8" *x64-instruction-variants-hash-table*) (list
VPROTW-xmmreg.xmmrm128*.imm8))

(setf (gethash "VPROTW-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPROTW-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSADBW" *x64-instruction-variants-hash-table*) (list
VPSADBW-xmmreg.xmmreg*.xmmrm128
VPSADBW-ymmreg.ymmreg*.ymmrm256
VPSADBW-xmmreg.xmmreg.xmmrm128
VPSADBW-ymmreg.ymmreg.ymmrm256
VPSADBW-zmmreg.zmmreg.zmmrm512))

(setf (gethash "VPSADBW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSADBW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSADBW-xmmreg.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSADBW-xmmreg.xmmreg.xmmrm128))

(setf (gethash "VPSADBW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSADBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSADBW-ymmreg.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSADBW-ymmreg.ymmreg.ymmrm256))

(setf (gethash "VPSADBW-zmmreg.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSADBW-zmmreg.zmmreg.zmmrm512))

(setf (gethash "VPSCATTERDD" *x64-instruction-variants-hash-table*) (list
VPSCATTERDD-xmem32-mask.xmmreg
VPSCATTERDD-ymem32-mask.ymmreg
VPSCATTERDD-zmem32-mask.zmmreg))

(setf (gethash "VPSCATTERDD-xmem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDD-xmem32-mask.xmmreg))

(setf (gethash "VPSCATTERDD-ymem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDD-ymem32-mask.ymmreg))

(setf (gethash "VPSCATTERDD-zmem32-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDD-zmem32-mask.zmmreg))

(setf (gethash "VPSCATTERDQ" *x64-instruction-variants-hash-table*) (list
VPSCATTERDQ-xmem64-mask.xmmreg
VPSCATTERDQ-xmem64-mask.ymmreg
VPSCATTERDQ-ymem64-mask.zmmreg))

(setf (gethash "VPSCATTERDQ-xmem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDQ-xmem64-mask.xmmreg))

(setf (gethash "VPSCATTERDQ-xmem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDQ-xmem64-mask.ymmreg))

(setf (gethash "VPSCATTERDQ-ymem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERDQ-ymem64-mask.zmmreg))

(setf (gethash "VPSCATTERQD" *x64-instruction-variants-hash-table*) (list
VPSCATTERQD-xmem32-mask.xmmreg
VPSCATTERQD-ymem32-mask.xmmreg
VPSCATTERQD-zmem32-mask.ymmreg))

(setf (gethash "VPSCATTERQD-xmem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQD-xmem32-mask.xmmreg))

(setf (gethash "VPSCATTERQD-ymem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQD-ymem32-mask.xmmreg))

(setf (gethash "VPSCATTERQD-zmem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQD-zmem32-mask.ymmreg))

(setf (gethash "VPSCATTERQQ" *x64-instruction-variants-hash-table*) (list
VPSCATTERQQ-xmem64-mask.xmmreg
VPSCATTERQQ-ymem64-mask.ymmreg
VPSCATTERQQ-zmem64-mask.zmmreg))

(setf (gethash "VPSCATTERQQ-xmem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQQ-xmem64-mask.xmmreg))

(setf (gethash "VPSCATTERQQ-ymem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQQ-ymem64-mask.ymmreg))

(setf (gethash "VPSCATTERQQ-zmem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VPSCATTERQQ-zmem64-mask.zmmreg))

(setf (gethash "VPSHAB" *x64-instruction-variants-hash-table*) (list
VPSHAB-xmmreg.xmmrm128*.xmmreg
VPSHAB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHAB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAB-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHAB-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHAD" *x64-instruction-variants-hash-table*) (list
VPSHAD-xmmreg.xmmrm128*.xmmreg
VPSHAD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHAD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAD-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHAD-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHAQ" *x64-instruction-variants-hash-table*) (list
VPSHAQ-xmmreg.xmmrm128*.xmmreg
VPSHAQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHAQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAQ-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHAQ-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHAW" *x64-instruction-variants-hash-table*) (list
VPSHAW-xmmreg.xmmrm128*.xmmreg
VPSHAW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHAW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHAW-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHAW-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHLB" *x64-instruction-variants-hash-table*) (list
VPSHLB-xmmreg.xmmrm128*.xmmreg
VPSHLB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHLB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLB-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHLB-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHLD" *x64-instruction-variants-hash-table*) (list
VPSHLD-xmmreg.xmmrm128*.xmmreg
VPSHLD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHLD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLD-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHLD-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHLQ" *x64-instruction-variants-hash-table*) (list
VPSHLQ-xmmreg.xmmrm128*.xmmreg
VPSHLQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHLQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLQ-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHLQ-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHLW" *x64-instruction-variants-hash-table*) (list
VPSHLW-xmmreg.xmmrm128*.xmmreg
VPSHLW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHLW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHLW-xmmreg.xmmrm128*.xmmreg" *x64-instruction-variants-hash-table*) (list
VPSHLW-xmmreg.xmmrm128*.xmmreg))

(setf (gethash "VPSHUFB" *x64-instruction-variants-hash-table*) (list
VPSHUFB-xmmreg.xmmreg*.xmmrm128
VPSHUFB-ymmreg.ymmreg*.ymmrm256
VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128
VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256
VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHUFB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSHUFB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSHUFB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSHUFB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSHUFB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSHUFB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSHUFB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSHUFD" *x64-instruction-variants-hash-table*) (list
VPSHUFD-xmmreg.xmmrm128.imm8
VPSHUFD-ymmreg.ymmrm256.imm8
VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8
VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8
VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPSHUFD-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFD-xmmreg.xmmrm128.imm8))

(setf (gethash "VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPSHUFD-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFD-ymmreg.ymmrm256.imm8))

(setf (gethash "VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSHUFHW" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-xmmreg.xmmrm128.imm8
VPSHUFHW-ymmreg.ymmrm256.imm8
VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8
VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8
VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-xmmreg-mask-z.xmmrm128.imm8))

(setf (gethash "VPSHUFHW-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-xmmreg.xmmrm128.imm8))

(setf (gethash "VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-ymmreg-mask-z.ymmrm256.imm8))

(setf (gethash "VPSHUFHW-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-ymmreg.ymmrm256.imm8))

(setf (gethash "VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFHW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSHUFLW" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-xmmreg.xmmrm128.imm8
VPSHUFLW-ymmreg.ymmrm256.imm8
VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8
VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8
VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-xmmreg-mask-z.xmmrm128.imm8))

(setf (gethash "VPSHUFLW-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-xmmreg.xmmrm128.imm8))

(setf (gethash "VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-ymmreg-mask-z.ymmrm256.imm8))

(setf (gethash "VPSHUFLW-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-ymmreg.ymmrm256.imm8))

(setf (gethash "VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSHUFLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSIGNB" *x64-instruction-variants-hash-table*) (list
VPSIGNB-xmmreg.xmmreg*.xmmrm128
VPSIGNB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSIGNB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSIGNB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSIGNB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSIGNB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSIGND" *x64-instruction-variants-hash-table*) (list
VPSIGND-xmmreg.xmmreg*.xmmrm128
VPSIGND-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSIGND-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSIGND-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSIGND-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSIGND-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSIGNW" *x64-instruction-variants-hash-table*) (list
VPSIGNW-xmmreg.xmmreg*.xmmrm128
VPSIGNW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSIGNW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSIGNW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSIGNW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSIGNW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSLLD" *x64-instruction-variants-hash-table*) (list
VPSLLD-xmmreg.xmmreg*.xmmrm128
VPSLLD-xmmreg.xmmreg*.imm8
VPSLLD-ymmreg.ymmreg*.xmmrm128
VPSLLD-ymmreg.ymmreg*.imm8
VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128
VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128
VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128
VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8
VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8
VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPSLLD-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLD-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSLLD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLD-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPSLLD-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLD-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSLLD-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLD-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLD-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSLLDQ" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-xmmreg.xmmreg*.imm8
VPSLLDQ-ymmreg.ymmreg*.imm8
VPSLLDQ-xmmreg.xmmrm128.imm8
VPSLLDQ-ymmreg.ymmrm256.imm8
VPSLLDQ-zmmreg.zmmrm512.imm8))

(setf (gethash "VPSLLDQ-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSLLDQ-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-xmmreg.xmmrm128.imm8))

(setf (gethash "VPSLLDQ-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSLLDQ-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-ymmreg.ymmrm256.imm8))

(setf (gethash "VPSLLDQ-zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLDQ-zmmreg.zmmrm512.imm8))

(setf (gethash "VPSLLQ" *x64-instruction-variants-hash-table*) (list
VPSLLQ-xmmreg.xmmreg*.xmmrm128
VPSLLQ-xmmreg.xmmreg*.imm8
VPSLLQ-ymmreg.ymmreg*.xmmrm128
VPSLLQ-ymmreg.ymmreg*.imm8
VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128
VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128
VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128
VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8
VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLQ-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLQ-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPSLLQ-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLQ-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSLLQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLQ-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPSLLQ-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLQ-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSLLQ-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLQ-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLQ-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSLLVD" *x64-instruction-variants-hash-table*) (list
VPSLLVD-xmmreg.xmmreg*.xmmrm128
VPSLLVD-ymmreg.ymmreg*.ymmrm256
VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPSLLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPSLLVD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLVD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPSLLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPSLLVD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSLLVD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPSLLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSLLVQ" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-xmmreg.xmmreg*.xmmrm128
VPSLLVQ-ymmreg.ymmreg*.ymmrm256
VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPSLLVQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPSLLVQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPSLLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSLLVW" *x64-instruction-variants-hash-table*) (list
VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128
VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256
VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLVW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSLLVW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSLLVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSLLW" *x64-instruction-variants-hash-table*) (list
VPSLLW-xmmreg.xmmreg*.xmmrm128
VPSLLW-xmmreg.xmmreg*.imm8
VPSLLW-ymmreg.ymmreg*.xmmrm128
VPSLLW-ymmreg.ymmreg*.imm8
VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128
VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128
VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128
VPSLLW-xmmreg-mask-z.xmmrm128.imm8
VPSLLW-ymmreg-mask-z.ymmrm256.imm8
VPSLLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSLLW-xmmreg-mask-z.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLW-xmmreg-mask-z.xmmrm128.imm8))

(setf (gethash "VPSLLW-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLW-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSLLW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLW-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSLLW-ymmreg-mask-z.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLW-ymmreg-mask-z.ymmrm256.imm8))

(setf (gethash "VPSLLW-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLW-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSLLW-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLW-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSLLW-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSLLW-zmmreg-mask-z.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSLLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSRAD" *x64-instruction-variants-hash-table*) (list
VPSRAD-xmmreg.xmmreg*.xmmrm128
VPSRAD-xmmreg.xmmreg*.imm8
VPSRAD-ymmreg.ymmreg*.xmmrm128
VPSRAD-ymmreg.ymmreg*.imm8
VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128
VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128
VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128
VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8
VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8
VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPSRAD-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAD-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRAD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAD-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPSRAD-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAD-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRAD-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAD-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAD-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSRAQ" *x64-instruction-variants-hash-table*) (list
VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128
VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128
VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128
VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8
VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAQ-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAQ-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAQ-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAQ-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSRAVD" *x64-instruction-variants-hash-table*) (list
VPSRAVD-xmmreg.xmmreg*.xmmrm128
VPSRAVD-ymmreg.ymmreg*.ymmrm256
VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPSRAVD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPSRAVD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAVD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPSRAVD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPSRAVD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSRAVD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPSRAVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSRAVQ" *x64-instruction-variants-hash-table*) (list
VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPSRAVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPSRAVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPSRAVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSRAVW" *x64-instruction-variants-hash-table*) (list
VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128
VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256
VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAVW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSRAVW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSRAVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSRAW" *x64-instruction-variants-hash-table*) (list
VPSRAW-xmmreg.xmmreg*.xmmrm128
VPSRAW-xmmreg.xmmreg*.imm8
VPSRAW-ymmreg.ymmreg*.xmmrm128
VPSRAW-ymmreg.ymmreg*.imm8
VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128
VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128
VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128
VPSRAW-xmmreg-mask-z.xmmrm128.imm8
VPSRAW-ymmreg-mask-z.ymmrm256.imm8
VPSRAW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRAW-xmmreg-mask-z.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAW-xmmreg-mask-z.xmmrm128.imm8))

(setf (gethash "VPSRAW-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAW-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRAW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAW-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRAW-ymmreg-mask-z.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAW-ymmreg-mask-z.ymmrm256.imm8))

(setf (gethash "VPSRAW-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAW-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRAW-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAW-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRAW-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRAW-zmmreg-mask-z.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSRAW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSRLD" *x64-instruction-variants-hash-table*) (list
VPSRLD-xmmreg.xmmreg*.xmmrm128
VPSRLD-xmmreg.xmmreg*.imm8
VPSRLD-ymmreg.ymmreg*.xmmrm128
VPSRLD-ymmreg.ymmreg*.imm8
VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128
VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128
VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128
VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8
VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8
VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLD-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VPSRLD-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLD-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRLD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLD-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLD-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VPSRLD-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLD-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRLD-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLD-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLD-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLD-zmmreg-mask-z.zmmrm512-b32.imm8))

(setf (gethash "VPSRLDQ" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-xmmreg.xmmreg*.imm8
VPSRLDQ-ymmreg.ymmreg*.imm8
VPSRLDQ-xmmreg.xmmrm128.imm8
VPSRLDQ-ymmreg.ymmrm256.imm8
VPSRLDQ-zmmreg.zmmrm512.imm8))

(setf (gethash "VPSRLDQ-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRLDQ-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-xmmreg.xmmrm128.imm8))

(setf (gethash "VPSRLDQ-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRLDQ-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-ymmreg.ymmrm256.imm8))

(setf (gethash "VPSRLDQ-zmmreg.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLDQ-zmmreg.zmmrm512.imm8))

(setf (gethash "VPSRLQ" *x64-instruction-variants-hash-table*) (list
VPSRLQ-xmmreg.xmmreg*.xmmrm128
VPSRLQ-xmmreg.xmmreg*.imm8
VPSRLQ-ymmreg.ymmreg*.xmmrm128
VPSRLQ-ymmreg.ymmreg*.imm8
VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128
VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128
VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128
VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8
VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8
VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLQ-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLQ-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VPSRLQ-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLQ-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRLQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLQ-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLQ-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VPSRLQ-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLQ-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRLQ-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLQ-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLQ-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLQ-zmmreg-mask-z.zmmrm512-b64.imm8))

(setf (gethash "VPSRLVD" *x64-instruction-variants-hash-table*) (list
VPSRLVD-xmmreg.xmmreg*.xmmrm128
VPSRLVD-ymmreg.ymmreg*.ymmrm256
VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPSRLVD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPSRLVD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLVD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPSRLVD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPSRLVD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSRLVD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPSRLVD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSRLVQ" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-xmmreg.xmmreg*.xmmrm128
VPSRLVQ-ymmreg.ymmreg*.ymmrm256
VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPSRLVQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPSRLVQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPSRLVQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSRLVW" *x64-instruction-variants-hash-table*) (list
VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128
VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256
VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLVW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSRLVW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSRLVW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSRLW" *x64-instruction-variants-hash-table*) (list
VPSRLW-xmmreg.xmmreg*.xmmrm128
VPSRLW-xmmreg.xmmreg*.imm8
VPSRLW-ymmreg.ymmreg*.xmmrm128
VPSRLW-ymmreg.ymmreg*.imm8
VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128
VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128
VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128
VPSRLW-xmmreg-mask-z.xmmrm128.imm8
VPSRLW-ymmreg-mask-z.ymmrm256.imm8
VPSRLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSRLW-xmmreg-mask-z.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLW-xmmreg-mask-z.xmmrm128.imm8))

(setf (gethash "VPSRLW-xmmreg.xmmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLW-xmmreg.xmmreg*.imm8))

(setf (gethash "VPSRLW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLW-ymmreg-mask-z.ymmreg.xmmrm128))

(setf (gethash "VPSRLW-ymmreg-mask-z.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLW-ymmreg-mask-z.ymmrm256.imm8))

(setf (gethash "VPSRLW-ymmreg.ymmreg*.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLW-ymmreg.ymmreg*.imm8))

(setf (gethash "VPSRLW-ymmreg.ymmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLW-ymmreg.ymmreg*.xmmrm128))

(setf (gethash "VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSRLW-zmmreg-mask-z.zmmreg.xmmrm128))

(setf (gethash "VPSRLW-zmmreg-mask-z.zmmrm512.imm8" *x64-instruction-variants-hash-table*) (list
VPSRLW-zmmreg-mask-z.zmmrm512.imm8))

(setf (gethash "VPSUBB" *x64-instruction-variants-hash-table*) (list
VPSUBB-xmmreg.xmmreg*.xmmrm128
VPSUBB-ymmreg.ymmreg*.ymmrm256
VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBD" *x64-instruction-variants-hash-table*) (list
VPSUBD-xmmreg.xmmreg*.xmmrm128
VPSUBD-ymmreg.ymmreg*.ymmrm256
VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPSUBD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPSUBD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPSUBD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPSUBD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPSUBD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPSUBQ" *x64-instruction-variants-hash-table*) (list
VPSUBQ-xmmreg.xmmreg*.xmmrm128
VPSUBQ-ymmreg.ymmreg*.ymmrm256
VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPSUBQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPSUBQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPSUBQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPSUBQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPSUBQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPSUBSB" *x64-instruction-variants-hash-table*) (list
VPSUBSB-xmmreg.xmmreg*.xmmrm128
VPSUBSB-ymmreg.ymmreg*.ymmrm256
VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBSW" *x64-instruction-variants-hash-table*) (list
VPSUBSW-xmmreg.xmmreg*.xmmrm128
VPSUBSW-ymmreg.ymmreg*.ymmrm256
VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBUSB" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-xmmreg.xmmreg*.xmmrm128
VPSUBUSB-ymmreg.ymmreg*.ymmrm256
VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBUSB-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBUSB-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBUSB-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBUSW" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-xmmreg.xmmreg*.xmmrm128
VPSUBUSW-ymmreg.ymmreg*.ymmrm256
VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBUSW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBUSW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBUSW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBW" *x64-instruction-variants-hash-table*) (list
VPSUBW-xmmreg.xmmreg*.xmmrm128
VPSUBW-ymmreg.ymmreg*.ymmrm256
VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128
VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256
VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPSUBW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPSUBW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPSUBW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPSUBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPSUBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPTERNLOGD" *x64-instruction-variants-hash-table*) (list
VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8
VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGD-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGD-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGD-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VPTERNLOGQ" *x64-instruction-variants-hash-table*) (list
VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8
VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGQ-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGQ-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VPTERNLOGQ-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VPTEST" *x64-instruction-variants-hash-table*) (list
VPTEST-xmmreg.xmmrm128
VPTEST-ymmreg.ymmrm256))

(setf (gethash "VPTEST-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPTEST-xmmreg.xmmrm128))

(setf (gethash "VPTEST-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPTEST-ymmreg.ymmrm256))

(setf (gethash "VPTESTMB" *x64-instruction-variants-hash-table*) (list
VPTESTMB-kreg-mask.xmmreg.xmmrm128
VPTESTMB-kreg-mask.ymmreg.ymmrm256
VPTESTMB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTMB-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPTESTMB-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPTESTMB-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPTESTMB-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPTESTMB-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPTESTMB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTMD" *x64-instruction-variants-hash-table*) (list
VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32
VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32
VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPTESTMD-kreg-mask.xmmreg.xmmrm128-b32))

(setf (gethash "VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPTESTMD-kreg-mask.ymmreg.ymmrm256-b32))

(setf (gethash "VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPTESTMD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPTESTMQ" *x64-instruction-variants-hash-table*) (list
VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64
VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64
VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPTESTMQ-kreg-mask.xmmreg.xmmrm128-b64))

(setf (gethash "VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPTESTMQ-kreg-mask.ymmreg.ymmrm256-b64))

(setf (gethash "VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPTESTMQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPTESTMW" *x64-instruction-variants-hash-table*) (list
VPTESTMW-kreg-mask.xmmreg.xmmrm128
VPTESTMW-kreg-mask.ymmreg.ymmrm256
VPTESTMW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTMW-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPTESTMW-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPTESTMW-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPTESTMW-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPTESTMW-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPTESTMW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTNMB" *x64-instruction-variants-hash-table*) (list
VPTESTNMB-kreg-mask.xmmreg.xmmrm128
VPTESTNMB-kreg-mask.ymmreg.ymmrm256
VPTESTNMB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTNMB-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPTESTNMB-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPTESTNMB-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPTESTNMB-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPTESTNMB-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPTESTNMB-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTNMD" *x64-instruction-variants-hash-table*) (list
VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32
VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32
VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPTESTNMD-kreg-mask.xmmreg.xmmrm128-b32))

(setf (gethash "VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPTESTNMD-kreg-mask.ymmreg.ymmrm256-b32))

(setf (gethash "VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPTESTNMD-kreg-mask.zmmreg.zmmrm512-b32))

(setf (gethash "VPTESTNMQ" *x64-instruction-variants-hash-table*) (list
VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64
VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64
VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPTESTNMQ-kreg-mask.xmmreg.xmmrm128-b64))

(setf (gethash "VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPTESTNMQ-kreg-mask.ymmreg.ymmrm256-b64))

(setf (gethash "VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPTESTNMQ-kreg-mask.zmmreg.zmmrm512-b64))

(setf (gethash "VPTESTNMW" *x64-instruction-variants-hash-table*) (list
VPTESTNMW-kreg-mask.xmmreg.xmmrm128
VPTESTNMW-kreg-mask.ymmreg.ymmrm256
VPTESTNMW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPTESTNMW-kreg-mask.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPTESTNMW-kreg-mask.xmmreg.xmmrm128))

(setf (gethash "VPTESTNMW-kreg-mask.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPTESTNMW-kreg-mask.ymmreg.ymmrm256))

(setf (gethash "VPTESTNMW-kreg-mask.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPTESTNMW-kreg-mask.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKHBW" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128
VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256
VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128
VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256
VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPUNPCKHBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKHDQ" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128
VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256
VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKHDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPUNPCKHQDQ" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128
VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256
VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKHQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPUNPCKHWD" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128
VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256
VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128
VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256
VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPUNPCKHWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKLBW" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128
VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256
VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128
VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256
VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPUNPCKLBW-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKLDQ" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128
VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256
VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPUNPCKLDQ-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPUNPCKLQDQ" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128
VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256
VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPUNPCKLQDQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPUNPCKLWD" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128
VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256
VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128
VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256
VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-xmmreg-mask-z.xmmreg.xmmrm128))

(setf (gethash "VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-ymmreg-mask-z.ymmreg.ymmrm256))

(setf (gethash "VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512" *x64-instruction-variants-hash-table*) (list
VPUNPCKLWD-zmmreg-mask-z.zmmreg.zmmrm512))

(setf (gethash "VPXOR" *x64-instruction-variants-hash-table*) (list
VPXOR-xmmreg.xmmreg*.xmmrm128
VPXOR-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPXOR-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VPXOR-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VPXOR-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VPXOR-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VPXORD" *x64-instruction-variants-hash-table*) (list
VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32
VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32
VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VPXORD-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VPXORD-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VPXORD-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VPXORQ" *x64-instruction-variants-hash-table*) (list
VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64
VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64
VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VPXORQ-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VPXORQ-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VPXORQ-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VRANGEPD" *x64-instruction-variants-hash-table*) (list
VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8
VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-sae.imm8))

(setf (gethash "VRANGEPS" *x64-instruction-variants-hash-table*) (list
VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8
VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRANGEPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-sae.imm8))

(setf (gethash "VRANGESD" *x64-instruction-variants-hash-table*) (list
VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRANGESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VRANGESS" *x64-instruction-variants-hash-table*) (list
VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRANGESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VRCP14PD" *x64-instruction-variants-hash-table*) (list
VRCP14PD-xmmreg-mask-z.xmmrm128-b64
VRCP14PD-ymmreg-mask-z.ymmrm256-b64
VRCP14PD-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VRCP14PD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VRCP14PD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VRCP14PD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VRCP14PD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VRCP14PD-zmmreg-mask-z.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VRCP14PD-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VRCP14PS" *x64-instruction-variants-hash-table*) (list
VRCP14PS-xmmreg-mask-z.xmmrm128-b32
VRCP14PS-ymmreg-mask-z.ymmrm256-b32
VRCP14PS-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VRCP14PS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VRCP14PS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VRCP14PS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VRCP14PS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VRCP14PS-zmmreg-mask-z.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VRCP14PS-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VRCP14SD" *x64-instruction-variants-hash-table*) (list
VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64))

(setf (gethash "VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VRCP14SD-xmmreg-mask-z.xmmreg.xmmrm64))

(setf (gethash "VRCP14SS" *x64-instruction-variants-hash-table*) (list
VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32))

(setf (gethash "VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VRCP14SS-xmmreg-mask-z.xmmreg.xmmrm32))

(setf (gethash "VRCP28PD" *x64-instruction-variants-hash-table*) (list
VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VRCP28PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VRCP28PS" *x64-instruction-variants-hash-table*) (list
VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VRCP28PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VRCP28SD" *x64-instruction-variants-hash-table*) (list
VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VRCP28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VRCP28SS" *x64-instruction-variants-hash-table*) (list
VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VRCP28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VRCPPS" *x64-instruction-variants-hash-table*) (list
VRCPPS-xmmreg.xmmrm128
VRCPPS-ymmreg.ymmrm256))

(setf (gethash "VRCPPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VRCPPS-xmmreg.xmmrm128))

(setf (gethash "VRCPPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VRCPPS-ymmreg.ymmrm256))

(setf (gethash "VRCPSS" *x64-instruction-variants-hash-table*) (list
VRCPSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VRCPSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VRCPSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VREDUCEPD" *x64-instruction-variants-hash-table*) (list
VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8
VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8
VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPD-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPD-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VREDUCEPS" *x64-instruction-variants-hash-table*) (list
VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8
VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8
VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPS-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPS-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VREDUCESD" *x64-instruction-variants-hash-table*) (list
VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VREDUCESS" *x64-instruction-variants-hash-table*) (list
VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VREDUCESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VRNDSCALEPD" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8
VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8
VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPD-xmmreg-mask-z.xmmrm128-b64.imm8))

(setf (gethash "VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPD-ymmreg-mask-z.ymmrm256-b64.imm8))

(setf (gethash "VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPD-zmmreg-mask-z.zmmrm512-b64-sae.imm8))

(setf (gethash "VRNDSCALEPS" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8
VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8
VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPS-xmmreg-mask-z.xmmrm128-b32.imm8))

(setf (gethash "VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPS-ymmreg-mask-z.ymmrm256-b32.imm8))

(setf (gethash "VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALEPS-zmmreg-mask-z.zmmrm512-b32-sae.imm8))

(setf (gethash "VRNDSCALESD" *x64-instruction-variants-hash-table*) (list
VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALESD-xmmreg-mask-z.xmmreg.xmmrm64-sae.imm8))

(setf (gethash "VRNDSCALESS" *x64-instruction-variants-hash-table*) (list
VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8" *x64-instruction-variants-hash-table*) (list
VRNDSCALESS-xmmreg-mask-z.xmmreg.xmmrm32-sae.imm8))

(setf (gethash "VROUNDPD" *x64-instruction-variants-hash-table*) (list
VROUNDPD-xmmreg.xmmrm128.imm8
VROUNDPD-ymmreg.ymmrm256.imm8))

(setf (gethash "VROUNDPD-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDPD-xmmreg.xmmrm128.imm8))

(setf (gethash "VROUNDPD-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDPD-ymmreg.ymmrm256.imm8))

(setf (gethash "VROUNDPS" *x64-instruction-variants-hash-table*) (list
VROUNDPS-xmmreg.xmmrm128.imm8
VROUNDPS-ymmreg.ymmrm256.imm8))

(setf (gethash "VROUNDPS-xmmreg.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDPS-xmmreg.xmmrm128.imm8))

(setf (gethash "VROUNDPS-ymmreg.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDPS-ymmreg.ymmrm256.imm8))

(setf (gethash "VROUNDSD" *x64-instruction-variants-hash-table*) (list
VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8))

(setf (gethash "VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDSD-xmmreg.xmmreg*.xmmrm64.imm8))

(setf (gethash "VROUNDSS" *x64-instruction-variants-hash-table*) (list
VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8))

(setf (gethash "VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8" *x64-instruction-variants-hash-table*) (list
VROUNDSS-xmmreg.xmmreg*.xmmrm32.imm8))

(setf (gethash "VRSQRT14PD" *x64-instruction-variants-hash-table*) (list
VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64
VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64
VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VRSQRT14PD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VRSQRT14PD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VRSQRT14PD-zmmreg-mask-z.zmmrm512-b64))

(setf (gethash "VRSQRT14PS" *x64-instruction-variants-hash-table*) (list
VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32
VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32
VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VRSQRT14PS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VRSQRT14PS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VRSQRT14PS-zmmreg-mask-z.zmmrm512-b32))

(setf (gethash "VRSQRT14SD" *x64-instruction-variants-hash-table*) (list
VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64))

(setf (gethash "VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VRSQRT14SD-xmmreg-mask-z.xmmreg.xmmrm64))

(setf (gethash "VRSQRT14SS" *x64-instruction-variants-hash-table*) (list
VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32))

(setf (gethash "VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VRSQRT14SS-xmmreg-mask-z.xmmreg.xmmrm32))

(setf (gethash "VRSQRT28PD" *x64-instruction-variants-hash-table*) (list
VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae" *x64-instruction-variants-hash-table*) (list
VRSQRT28PD-zmmreg-mask-z.zmmrm512-b64-sae))

(setf (gethash "VRSQRT28PS" *x64-instruction-variants-hash-table*) (list
VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae" *x64-instruction-variants-hash-table*) (list
VRSQRT28PS-zmmreg-mask-z.zmmrm512-b32-sae))

(setf (gethash "VRSQRT28SD" *x64-instruction-variants-hash-table*) (list
VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VRSQRT28SD-xmmreg-mask-z.xmmreg.xmmrm64-sae))

(setf (gethash "VRSQRT28SS" *x64-instruction-variants-hash-table*) (list
VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VRSQRT28SS-xmmreg-mask-z.xmmreg.xmmrm32-sae))

(setf (gethash "VRSQRTPS" *x64-instruction-variants-hash-table*) (list
VRSQRTPS-xmmreg.xmmrm128
VRSQRTPS-ymmreg.ymmrm256))

(setf (gethash "VRSQRTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VRSQRTPS-xmmreg.xmmrm128))

(setf (gethash "VRSQRTPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VRSQRTPS-ymmreg.ymmrm256))

(setf (gethash "VRSQRTSS" *x64-instruction-variants-hash-table*) (list
VRSQRTSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VRSQRTSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VRSQRTSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VSCALEFPD" *x64-instruction-variants-hash-table*) (list
VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VSCALEFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VSCALEFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VSCALEFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VSCALEFPS" *x64-instruction-variants-hash-table*) (list
VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VSCALEFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VSCALEFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VSCALEFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VSCALEFSD" *x64-instruction-variants-hash-table*) (list
VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VSCALEFSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSCALEFSS" *x64-instruction-variants-hash-table*) (list
VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VSCALEFSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSCATTERDPD" *x64-instruction-variants-hash-table*) (list
VSCATTERDPD-xmem64-mask.xmmreg
VSCATTERDPD-xmem64-mask.ymmreg
VSCATTERDPD-ymem64-mask.zmmreg))

(setf (gethash "VSCATTERDPD-xmem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPD-xmem64-mask.xmmreg))

(setf (gethash "VSCATTERDPD-xmem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPD-xmem64-mask.ymmreg))

(setf (gethash "VSCATTERDPD-ymem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPD-ymem64-mask.zmmreg))

(setf (gethash "VSCATTERDPS" *x64-instruction-variants-hash-table*) (list
VSCATTERDPS-xmem32-mask.xmmreg
VSCATTERDPS-ymem32-mask.ymmreg
VSCATTERDPS-zmem32-mask.zmmreg))

(setf (gethash "VSCATTERDPS-xmem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPS-xmem32-mask.xmmreg))

(setf (gethash "VSCATTERDPS-ymem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPS-ymem32-mask.ymmreg))

(setf (gethash "VSCATTERDPS-zmem32-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERDPS-zmem32-mask.zmmreg))

(setf (gethash "VSCATTERPF0DPD" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0DPD-ymem64-mask))

(setf (gethash "VSCATTERPF0DPD-ymem64-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0DPD-ymem64-mask))

(setf (gethash "VSCATTERPF0DPS" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0DPS-zmem32-mask))

(setf (gethash "VSCATTERPF0DPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0DPS-zmem32-mask))

(setf (gethash "VSCATTERPF0QPD" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0QPD-zmem64-mask))

(setf (gethash "VSCATTERPF0QPD-zmem64-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0QPD-zmem64-mask))

(setf (gethash "VSCATTERPF0QPS" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0QPS-zmem32-mask))

(setf (gethash "VSCATTERPF0QPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF0QPS-zmem32-mask))

(setf (gethash "VSCATTERPF1DPD" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1DPD-ymem64-mask))

(setf (gethash "VSCATTERPF1DPD-ymem64-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1DPD-ymem64-mask))

(setf (gethash "VSCATTERPF1DPS" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1DPS-zmem32-mask))

(setf (gethash "VSCATTERPF1DPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1DPS-zmem32-mask))

(setf (gethash "VSCATTERPF1QPD" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1QPD-zmem64-mask))

(setf (gethash "VSCATTERPF1QPD-zmem64-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1QPD-zmem64-mask))

(setf (gethash "VSCATTERPF1QPS" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1QPS-zmem32-mask))

(setf (gethash "VSCATTERPF1QPS-zmem32-mask" *x64-instruction-variants-hash-table*) (list
VSCATTERPF1QPS-zmem32-mask))

(setf (gethash "VSCATTERQPD" *x64-instruction-variants-hash-table*) (list
VSCATTERQPD-xmem64-mask.xmmreg
VSCATTERQPD-ymem64-mask.ymmreg
VSCATTERQPD-zmem64-mask.zmmreg))

(setf (gethash "VSCATTERQPD-xmem64-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPD-xmem64-mask.xmmreg))

(setf (gethash "VSCATTERQPD-ymem64-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPD-ymem64-mask.ymmreg))

(setf (gethash "VSCATTERQPD-zmem64-mask.zmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPD-zmem64-mask.zmmreg))

(setf (gethash "VSCATTERQPS" *x64-instruction-variants-hash-table*) (list
VSCATTERQPS-xmem32-mask.xmmreg
VSCATTERQPS-ymem32-mask.xmmreg
VSCATTERQPS-zmem32-mask.ymmreg))

(setf (gethash "VSCATTERQPS-xmem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPS-xmem32-mask.xmmreg))

(setf (gethash "VSCATTERQPS-ymem32-mask.xmmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPS-ymem32-mask.xmmreg))

(setf (gethash "VSCATTERQPS-zmem32-mask.ymmreg" *x64-instruction-variants-hash-table*) (list
VSCATTERQPS-zmem32-mask.ymmreg))

(setf (gethash "VSHUFF32X4" *x64-instruction-variants-hash-table*) (list
VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFF32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFF32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSHUFF64X2" *x64-instruction-variants-hash-table*) (list
VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFF64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFF64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFI32X4" *x64-instruction-variants-hash-table*) (list
VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFI32X4-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFI32X4-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSHUFI64X2" *x64-instruction-variants-hash-table*) (list
VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFI64X2-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFI64X2-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFPD" *x64-instruction-variants-hash-table*) (list
VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8
VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8
VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8
VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8
VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPD-xmmreg-mask-z.xmmreg.xmmrm128-b64.imm8))

(setf (gethash "VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPD-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPD-ymmreg-mask-z.ymmreg.ymmrm256-b64.imm8))

(setf (gethash "VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPD-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPD-zmmreg-mask-z.zmmreg.zmmrm512-b64.imm8))

(setf (gethash "VSHUFPS" *x64-instruction-variants-hash-table*) (list
VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8
VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8
VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8
VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8
VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPS-xmmreg-mask-z.xmmreg.xmmrm128-b32.imm8))

(setf (gethash "VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPS-xmmreg.xmmreg*.xmmrm128.imm8))

(setf (gethash "VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPS-ymmreg-mask-z.ymmreg.ymmrm256-b32.imm8))

(setf (gethash "VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPS-ymmreg.ymmreg*.ymmrm256.imm8))

(setf (gethash "VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8" *x64-instruction-variants-hash-table*) (list
VSHUFPS-zmmreg-mask-z.zmmreg.zmmrm512-b32.imm8))

(setf (gethash "VSQRTPD" *x64-instruction-variants-hash-table*) (list
VSQRTPD-xmmreg.xmmrm128
VSQRTPD-ymmreg.ymmrm256
VSQRTPD-xmmreg-mask-z.xmmrm128-b64
VSQRTPD-ymmreg-mask-z.ymmrm256-b64
VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VSQRTPD-xmmreg-mask-z.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VSQRTPD-xmmreg-mask-z.xmmrm128-b64))

(setf (gethash "VSQRTPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VSQRTPD-xmmreg.xmmrm128))

(setf (gethash "VSQRTPD-ymmreg-mask-z.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VSQRTPD-ymmreg-mask-z.ymmrm256-b64))

(setf (gethash "VSQRTPD-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VSQRTPD-ymmreg.ymmrm256))

(setf (gethash "VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VSQRTPD-zmmreg-mask-z.zmmrm512-b64-er))

(setf (gethash "VSQRTPS" *x64-instruction-variants-hash-table*) (list
VSQRTPS-xmmreg.xmmrm128
VSQRTPS-ymmreg.ymmrm256
VSQRTPS-xmmreg-mask-z.xmmrm128-b32
VSQRTPS-ymmreg-mask-z.ymmrm256-b32
VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VSQRTPS-xmmreg-mask-z.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VSQRTPS-xmmreg-mask-z.xmmrm128-b32))

(setf (gethash "VSQRTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VSQRTPS-xmmreg.xmmrm128))

(setf (gethash "VSQRTPS-ymmreg-mask-z.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VSQRTPS-ymmreg-mask-z.ymmrm256-b32))

(setf (gethash "VSQRTPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VSQRTPS-ymmreg.ymmrm256))

(setf (gethash "VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VSQRTPS-zmmreg-mask-z.zmmrm512-b32-er))

(setf (gethash "VSQRTSD" *x64-instruction-variants-hash-table*) (list
VSQRTSD-xmmreg.xmmreg*.xmmrm64
VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VSQRTSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSQRTSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VSQRTSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VSQRTSS" *x64-instruction-variants-hash-table*) (list
VSQRTSS-xmmreg.xmmreg*.xmmrm32
VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VSQRTSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSQRTSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VSQRTSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VSTMXCSR" *x64-instruction-variants-hash-table*) (list
VSTMXCSR-mem32))

(setf (gethash "VSTMXCSR-mem32" *x64-instruction-variants-hash-table*) (list
VSTMXCSR-mem32))

(setf (gethash "VSUBPD" *x64-instruction-variants-hash-table*) (list
VSUBPD-xmmreg.xmmreg*.xmmrm128
VSUBPD-ymmreg.ymmreg*.ymmrm256
VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VSUBPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VSUBPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VSUBPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VSUBPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VSUBPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VSUBPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er" *x64-instruction-variants-hash-table*) (list
VSUBPD-zmmreg-mask-z.zmmreg.zmmrm512-b64-er))

(setf (gethash "VSUBPS" *x64-instruction-variants-hash-table*) (list
VSUBPS-xmmreg.xmmreg*.xmmrm128
VSUBPS-ymmreg.ymmreg*.ymmrm256
VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VSUBPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VSUBPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VSUBPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VSUBPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VSUBPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VSUBPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er" *x64-instruction-variants-hash-table*) (list
VSUBPS-zmmreg-mask-z.zmmreg.zmmrm512-b32-er))

(setf (gethash "VSUBSD" *x64-instruction-variants-hash-table*) (list
VSUBSD-xmmreg.xmmreg*.xmmrm64
VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er" *x64-instruction-variants-hash-table*) (list
VSUBSD-xmmreg-mask-z.xmmreg.xmmrm64-er))

(setf (gethash "VSUBSD-xmmreg.xmmreg*.xmmrm64" *x64-instruction-variants-hash-table*) (list
VSUBSD-xmmreg.xmmreg*.xmmrm64))

(setf (gethash "VSUBSS" *x64-instruction-variants-hash-table*) (list
VSUBSS-xmmreg.xmmreg*.xmmrm32
VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er" *x64-instruction-variants-hash-table*) (list
VSUBSS-xmmreg-mask-z.xmmreg.xmmrm32-er))

(setf (gethash "VSUBSS-xmmreg.xmmreg*.xmmrm32" *x64-instruction-variants-hash-table*) (list
VSUBSS-xmmreg.xmmreg*.xmmrm32))

(setf (gethash "VTESTPD" *x64-instruction-variants-hash-table*) (list
VTESTPD-xmmreg.xmmrm128
VTESTPD-ymmreg.ymmrm256))

(setf (gethash "VTESTPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VTESTPD-xmmreg.xmmrm128))

(setf (gethash "VTESTPD-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VTESTPD-ymmreg.ymmrm256))

(setf (gethash "VTESTPS" *x64-instruction-variants-hash-table*) (list
VTESTPS-xmmreg.xmmrm128
VTESTPS-ymmreg.ymmrm256))

(setf (gethash "VTESTPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
VTESTPS-xmmreg.xmmrm128))

(setf (gethash "VTESTPS-ymmreg.ymmrm256" *x64-instruction-variants-hash-table*) (list
VTESTPS-ymmreg.ymmrm256))

(setf (gethash "VUCOMISD" *x64-instruction-variants-hash-table*) (list
VUCOMISD-xmmreg.xmmrm64
VUCOMISD-xmmreg.xmmrm64-sae))

(setf (gethash "VUCOMISD-xmmreg.xmmrm64" *x64-instruction-variants-hash-table*) (list
VUCOMISD-xmmreg.xmmrm64))

(setf (gethash "VUCOMISD-xmmreg.xmmrm64-sae" *x64-instruction-variants-hash-table*) (list
VUCOMISD-xmmreg.xmmrm64-sae))

(setf (gethash "VUCOMISS" *x64-instruction-variants-hash-table*) (list
VUCOMISS-xmmreg.xmmrm32
VUCOMISS-xmmreg.xmmrm32-sae))

(setf (gethash "VUCOMISS-xmmreg.xmmrm32" *x64-instruction-variants-hash-table*) (list
VUCOMISS-xmmreg.xmmrm32))

(setf (gethash "VUCOMISS-xmmreg.xmmrm32-sae" *x64-instruction-variants-hash-table*) (list
VUCOMISS-xmmreg.xmmrm32-sae))

(setf (gethash "VUNPCKHPD" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-xmmreg.xmmreg*.xmmrm128
VUNPCKHPD-ymmreg.ymmreg*.ymmrm256
VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VUNPCKHPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VUNPCKHPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKHPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VUNPCKHPS" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-xmmreg.xmmreg*.xmmrm128
VUNPCKHPS-ymmreg.ymmreg*.ymmrm256
VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VUNPCKHPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VUNPCKHPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKHPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VUNPCKLPD" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-xmmreg.xmmreg*.xmmrm128
VUNPCKLPD-ymmreg.ymmreg*.ymmrm256
VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VUNPCKLPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VUNPCKLPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VUNPCKLPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VUNPCKLPS" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-xmmreg.xmmreg*.xmmrm128
VUNPCKLPS-ymmreg.ymmreg*.ymmrm256
VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VUNPCKLPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VUNPCKLPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VUNPCKLPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VXORPD" *x64-instruction-variants-hash-table*) (list
VXORPD-xmmreg.xmmreg*.xmmrm128
VXORPD-ymmreg.ymmreg*.ymmrm256
VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64
VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64
VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64" *x64-instruction-variants-hash-table*) (list
VXORPD-xmmreg-mask-z.xmmreg.xmmrm128-b64))

(setf (gethash "VXORPD-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VXORPD-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64" *x64-instruction-variants-hash-table*) (list
VXORPD-ymmreg-mask-z.ymmreg.ymmrm256-b64))

(setf (gethash "VXORPD-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VXORPD-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64" *x64-instruction-variants-hash-table*) (list
VXORPD-zmmreg-mask-z.zmmreg.zmmrm512-b64))

(setf (gethash "VXORPS" *x64-instruction-variants-hash-table*) (list
VXORPS-xmmreg.xmmreg*.xmmrm128
VXORPS-ymmreg.ymmreg*.ymmrm256
VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32
VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32
VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32" *x64-instruction-variants-hash-table*) (list
VXORPS-xmmreg-mask-z.xmmreg.xmmrm128-b32))

(setf (gethash "VXORPS-xmmreg.xmmreg*.xmmrm128" *x64-instruction-variants-hash-table*) (list
VXORPS-xmmreg.xmmreg*.xmmrm128))

(setf (gethash "VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32" *x64-instruction-variants-hash-table*) (list
VXORPS-ymmreg-mask-z.ymmreg.ymmrm256-b32))

(setf (gethash "VXORPS-ymmreg.ymmreg*.ymmrm256" *x64-instruction-variants-hash-table*) (list
VXORPS-ymmreg.ymmreg*.ymmrm256))

(setf (gethash "VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32" *x64-instruction-variants-hash-table*) (list
VXORPS-zmmreg-mask-z.zmmreg.zmmrm512-b32))

(setf (gethash "VZEROALL" *x64-instruction-variants-hash-table*) (list
VZEROALL-void))

(setf (gethash "VZEROALL-void" *x64-instruction-variants-hash-table*) (list
VZEROALL-void))

(setf (gethash "VZEROUPPER" *x64-instruction-variants-hash-table*) (list
VZEROUPPER-void))

(setf (gethash "VZEROUPPER-void" *x64-instruction-variants-hash-table*) (list
VZEROUPPER-void))

(setf (gethash "WBINVD" *x64-instruction-variants-hash-table*) (list
WBINVD-void))

(setf (gethash "WBINVD-void" *x64-instruction-variants-hash-table*) (list
WBINVD-void))

(setf (gethash "WRFSBASE" *x64-instruction-variants-hash-table*) (list
WRFSBASE-reg32
WRFSBASE-reg64))

(setf (gethash "WRFSBASE-reg32" *x64-instruction-variants-hash-table*) (list
WRFSBASE-reg32))

(setf (gethash "WRFSBASE-reg64" *x64-instruction-variants-hash-table*) (list
WRFSBASE-reg64))

(setf (gethash "WRGSBASE" *x64-instruction-variants-hash-table*) (list
WRGSBASE-reg32
WRGSBASE-reg64))

(setf (gethash "WRGSBASE-reg32" *x64-instruction-variants-hash-table*) (list
WRGSBASE-reg32))

(setf (gethash "WRGSBASE-reg64" *x64-instruction-variants-hash-table*) (list
WRGSBASE-reg64))

(setf (gethash "WRMSR" *x64-instruction-variants-hash-table*) (list
WRMSR-void))

(setf (gethash "WRMSR-void" *x64-instruction-variants-hash-table*) (list
WRMSR-void))

(setf (gethash "WRPKRU" *x64-instruction-variants-hash-table*) (list
WRPKRU-void))

(setf (gethash "WRPKRU-void" *x64-instruction-variants-hash-table*) (list
WRPKRU-void))

(setf (gethash "WRSHR" *x64-instruction-variants-hash-table*) (list
WRSHR-rm32))

(setf (gethash "WRSHR-rm32" *x64-instruction-variants-hash-table*) (list
WRSHR-rm32))

(setf (gethash "XABORT" *x64-instruction-variants-hash-table*) (list
XABORT-imm
XABORT-imm8))

(setf (gethash "XABORT-imm" *x64-instruction-variants-hash-table*) (list
XABORT-imm))

(setf (gethash "XABORT-imm8" *x64-instruction-variants-hash-table*) (list
XABORT-imm8))

(setf (gethash "XADD" *x64-instruction-variants-hash-table*) (list
XADD-mem.reg8
XADD-reg8.reg8-mr
XADD-mem.reg16
XADD-reg16.reg16-mr
XADD-mem.reg32
XADD-reg32.reg32-mr
XADD-mem.reg64
XADD-reg64.reg64-mr))

(setf (gethash "XADD-mem.reg16" *x64-instruction-variants-hash-table*) (list
XADD-mem.reg16))

(setf (gethash "XADD-mem.reg32" *x64-instruction-variants-hash-table*) (list
XADD-mem.reg32))

(setf (gethash "XADD-mem.reg64" *x64-instruction-variants-hash-table*) (list
XADD-mem.reg64))

(setf (gethash "XADD-mem.reg8" *x64-instruction-variants-hash-table*) (list
XADD-mem.reg8))

(setf (gethash "XADD-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
XADD-reg16.reg16-mr))

(setf (gethash "XADD-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
XADD-reg32.reg32-mr))

(setf (gethash "XADD-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
XADD-reg64.reg64-mr))

(setf (gethash "XADD-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
XADD-reg8.reg8-mr))

(setf (gethash "XBEGIN" *x64-instruction-variants-hash-table*) (list
XBEGIN-imm
XBEGIN-imm-near
XBEGIN-imm64
XBEGIN-imm64-near))

(setf (gethash "XBEGIN-imm" *x64-instruction-variants-hash-table*) (list
XBEGIN-imm))

(setf (gethash "XBEGIN-imm-near" *x64-instruction-variants-hash-table*) (list
XBEGIN-imm-near))

(setf (gethash "XBEGIN-imm64" *x64-instruction-variants-hash-table*) (list
XBEGIN-imm64))

(setf (gethash "XBEGIN-imm64-near" *x64-instruction-variants-hash-table*) (list
XBEGIN-imm64-near))

(setf (gethash "XBTS" *x64-instruction-variants-hash-table*) (list
XBTS-reg16.mem
XBTS-reg16.reg16-rm
XBTS-reg32.mem
XBTS-reg32.reg32-rm))

(setf (gethash "XBTS-reg16.mem" *x64-instruction-variants-hash-table*) (list
XBTS-reg16.mem))

(setf (gethash "XBTS-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
XBTS-reg16.reg16-rm))

(setf (gethash "XBTS-reg32.mem" *x64-instruction-variants-hash-table*) (list
XBTS-reg32.mem))

(setf (gethash "XBTS-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
XBTS-reg32.reg32-rm))

(setf (gethash "XCHG" *x64-instruction-variants-hash-table*) (list
XCHG-reg_ax.reg16
XCHG-reg_eax.reg32na
XCHG-reg_rax.reg64
XCHG-reg16.reg_ax
XCHG-reg32na.reg_eax
XCHG-reg64.reg_rax
XCHG-reg8.mem
XCHG-reg8.reg8-rm
XCHG-reg16.mem
XCHG-reg16.reg16-rm
XCHG-reg32.mem
XCHG-reg32.reg32-rm
XCHG-reg64.mem
XCHG-reg64.reg64-rm
XCHG-mem.reg8
XCHG-reg8.reg8-mr
XCHG-mem.reg16
XCHG-reg16.reg16-mr
XCHG-mem.reg32
XCHG-reg32.reg32-mr
XCHG-mem.reg64
XCHG-reg64.reg64-mr))

(setf (gethash "XCHG-mem.reg16" *x64-instruction-variants-hash-table*) (list
XCHG-mem.reg16))

(setf (gethash "XCHG-mem.reg32" *x64-instruction-variants-hash-table*) (list
XCHG-mem.reg32))

(setf (gethash "XCHG-mem.reg64" *x64-instruction-variants-hash-table*) (list
XCHG-mem.reg64))

(setf (gethash "XCHG-mem.reg8" *x64-instruction-variants-hash-table*) (list
XCHG-mem.reg8))

(setf (gethash "XCHG-reg16.mem" *x64-instruction-variants-hash-table*) (list
XCHG-reg16.mem))

(setf (gethash "XCHG-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
XCHG-reg16.reg16-mr))

(setf (gethash "XCHG-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
XCHG-reg16.reg16-rm))

(setf (gethash "XCHG-reg16.reg_ax" *x64-instruction-variants-hash-table*) (list
XCHG-reg16.reg_ax))

(setf (gethash "XCHG-reg32.mem" *x64-instruction-variants-hash-table*) (list
XCHG-reg32.mem))

(setf (gethash "XCHG-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
XCHG-reg32.reg32-mr))

(setf (gethash "XCHG-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
XCHG-reg32.reg32-rm))

(setf (gethash "XCHG-reg32na.reg_eax" *x64-instruction-variants-hash-table*) (list
XCHG-reg32na.reg_eax))

(setf (gethash "XCHG-reg64.mem" *x64-instruction-variants-hash-table*) (list
XCHG-reg64.mem))

(setf (gethash "XCHG-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
XCHG-reg64.reg64-mr))

(setf (gethash "XCHG-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
XCHG-reg64.reg64-rm))

(setf (gethash "XCHG-reg64.reg_rax" *x64-instruction-variants-hash-table*) (list
XCHG-reg64.reg_rax))

(setf (gethash "XCHG-reg8.mem" *x64-instruction-variants-hash-table*) (list
XCHG-reg8.mem))

(setf (gethash "XCHG-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
XCHG-reg8.reg8-mr))

(setf (gethash "XCHG-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
XCHG-reg8.reg8-rm))

(setf (gethash "XCHG-reg_ax.reg16" *x64-instruction-variants-hash-table*) (list
XCHG-reg_ax.reg16))

(setf (gethash "XCHG-reg_eax.reg32na" *x64-instruction-variants-hash-table*) (list
XCHG-reg_eax.reg32na))

(setf (gethash "XCHG-reg_rax.reg64" *x64-instruction-variants-hash-table*) (list
XCHG-reg_rax.reg64))

(setf (gethash "XCRYPTCBC" *x64-instruction-variants-hash-table*) (list
XCRYPTCBC-void))

(setf (gethash "XCRYPTCBC-void" *x64-instruction-variants-hash-table*) (list
XCRYPTCBC-void))

(setf (gethash "XCRYPTCFB" *x64-instruction-variants-hash-table*) (list
XCRYPTCFB-void))

(setf (gethash "XCRYPTCFB-void" *x64-instruction-variants-hash-table*) (list
XCRYPTCFB-void))

(setf (gethash "XCRYPTCTR" *x64-instruction-variants-hash-table*) (list
XCRYPTCTR-void))

(setf (gethash "XCRYPTCTR-void" *x64-instruction-variants-hash-table*) (list
XCRYPTCTR-void))

(setf (gethash "XCRYPTECB" *x64-instruction-variants-hash-table*) (list
XCRYPTECB-void))

(setf (gethash "XCRYPTECB-void" *x64-instruction-variants-hash-table*) (list
XCRYPTECB-void))

(setf (gethash "XCRYPTOFB" *x64-instruction-variants-hash-table*) (list
XCRYPTOFB-void))

(setf (gethash "XCRYPTOFB-void" *x64-instruction-variants-hash-table*) (list
XCRYPTOFB-void))

(setf (gethash "XEND" *x64-instruction-variants-hash-table*) (list
XEND-void))

(setf (gethash "XEND-void" *x64-instruction-variants-hash-table*) (list
XEND-void))

(setf (gethash "XGETBV" *x64-instruction-variants-hash-table*) (list
XGETBV-void))

(setf (gethash "XGETBV-void" *x64-instruction-variants-hash-table*) (list
XGETBV-void))

(setf (gethash "XLAT" *x64-instruction-variants-hash-table*) (list
XLAT-void))

(setf (gethash "XLAT-void" *x64-instruction-variants-hash-table*) (list
XLAT-void))

(setf (gethash "XLATB" *x64-instruction-variants-hash-table*) (list
XLATB-void))

(setf (gethash "XLATB-void" *x64-instruction-variants-hash-table*) (list
XLATB-void))

(setf (gethash "XOR" *x64-instruction-variants-hash-table*) (list
XOR-mem.reg8
XOR-reg8.reg8-mr
XOR-mem.reg16
XOR-reg16.reg16-mr
XOR-mem.reg32
XOR-reg32.reg32-mr
XOR-mem.reg64
XOR-reg64.reg64-mr
XOR-reg8.mem
XOR-reg8.reg8-rm
XOR-reg16.mem
XOR-reg16.reg16-rm
XOR-reg32.mem
XOR-reg32.reg32-rm
XOR-reg64.mem
XOR-reg64.reg64-rm
XOR-rm16.imm8
XOR-rm32.imm8
XOR-rm64.imm8
XOR-reg_al.imm
XOR-reg_ax.sbyteword
XOR-reg_ax.imm
XOR-reg_eax.sbytedword
XOR-reg_eax.imm
XOR-reg_rax.sbytedword
XOR-reg_rax.imm
XOR-rm8.imm
XOR-rm16.sbyteword
XOR-rm16.imm
XOR-rm32.sbytedword
XOR-rm32.imm
XOR-rm64.sbytedword
XOR-rm64.imm
XOR-mem.imm8
XOR-mem.sbyteword16
XOR-mem.imm16
XOR-mem.sbytedword32
XOR-mem.imm32))

(setf (gethash "XOR-mem.imm16" *x64-instruction-variants-hash-table*) (list
XOR-mem.imm16))

(setf (gethash "XOR-mem.imm32" *x64-instruction-variants-hash-table*) (list
XOR-mem.imm32))

(setf (gethash "XOR-mem.imm8" *x64-instruction-variants-hash-table*) (list
XOR-mem.imm8))

(setf (gethash "XOR-mem.reg16" *x64-instruction-variants-hash-table*) (list
XOR-mem.reg16))

(setf (gethash "XOR-mem.reg32" *x64-instruction-variants-hash-table*) (list
XOR-mem.reg32))

(setf (gethash "XOR-mem.reg64" *x64-instruction-variants-hash-table*) (list
XOR-mem.reg64))

(setf (gethash "XOR-mem.reg8" *x64-instruction-variants-hash-table*) (list
XOR-mem.reg8))

(setf (gethash "XOR-mem.sbytedword32" *x64-instruction-variants-hash-table*) (list
XOR-mem.sbytedword32))

(setf (gethash "XOR-mem.sbyteword16" *x64-instruction-variants-hash-table*) (list
XOR-mem.sbyteword16))

(setf (gethash "XOR-reg16.mem" *x64-instruction-variants-hash-table*) (list
XOR-reg16.mem))

(setf (gethash "XOR-reg16.reg16-mr" *x64-instruction-variants-hash-table*) (list
XOR-reg16.reg16-mr))

(setf (gethash "XOR-reg16.reg16-rm" *x64-instruction-variants-hash-table*) (list
XOR-reg16.reg16-rm))

(setf (gethash "XOR-reg32.mem" *x64-instruction-variants-hash-table*) (list
XOR-reg32.mem))

(setf (gethash "XOR-reg32.reg32-mr" *x64-instruction-variants-hash-table*) (list
XOR-reg32.reg32-mr))

(setf (gethash "XOR-reg32.reg32-rm" *x64-instruction-variants-hash-table*) (list
XOR-reg32.reg32-rm))

(setf (gethash "XOR-reg64.mem" *x64-instruction-variants-hash-table*) (list
XOR-reg64.mem))

(setf (gethash "XOR-reg64.reg64-mr" *x64-instruction-variants-hash-table*) (list
XOR-reg64.reg64-mr))

(setf (gethash "XOR-reg64.reg64-rm" *x64-instruction-variants-hash-table*) (list
XOR-reg64.reg64-rm))

(setf (gethash "XOR-reg8.mem" *x64-instruction-variants-hash-table*) (list
XOR-reg8.mem))

(setf (gethash "XOR-reg8.reg8-mr" *x64-instruction-variants-hash-table*) (list
XOR-reg8.reg8-mr))

(setf (gethash "XOR-reg8.reg8-rm" *x64-instruction-variants-hash-table*) (list
XOR-reg8.reg8-rm))

(setf (gethash "XOR-reg_al.imm" *x64-instruction-variants-hash-table*) (list
XOR-reg_al.imm))

(setf (gethash "XOR-reg_ax.imm" *x64-instruction-variants-hash-table*) (list
XOR-reg_ax.imm))

(setf (gethash "XOR-reg_ax.sbyteword" *x64-instruction-variants-hash-table*) (list
XOR-reg_ax.sbyteword))

(setf (gethash "XOR-reg_eax.imm" *x64-instruction-variants-hash-table*) (list
XOR-reg_eax.imm))

(setf (gethash "XOR-reg_eax.sbytedword" *x64-instruction-variants-hash-table*) (list
XOR-reg_eax.sbytedword))

(setf (gethash "XOR-reg_rax.imm" *x64-instruction-variants-hash-table*) (list
XOR-reg_rax.imm))

(setf (gethash "XOR-reg_rax.sbytedword" *x64-instruction-variants-hash-table*) (list
XOR-reg_rax.sbytedword))

(setf (gethash "XOR-rm16.imm" *x64-instruction-variants-hash-table*) (list
XOR-rm16.imm))

(setf (gethash "XOR-rm16.imm8" *x64-instruction-variants-hash-table*) (list
XOR-rm16.imm8))

(setf (gethash "XOR-rm16.sbyteword" *x64-instruction-variants-hash-table*) (list
XOR-rm16.sbyteword))

(setf (gethash "XOR-rm32.imm" *x64-instruction-variants-hash-table*) (list
XOR-rm32.imm))

(setf (gethash "XOR-rm32.imm8" *x64-instruction-variants-hash-table*) (list
XOR-rm32.imm8))

(setf (gethash "XOR-rm32.sbytedword" *x64-instruction-variants-hash-table*) (list
XOR-rm32.sbytedword))

(setf (gethash "XOR-rm64.imm" *x64-instruction-variants-hash-table*) (list
XOR-rm64.imm))

(setf (gethash "XOR-rm64.imm8" *x64-instruction-variants-hash-table*) (list
XOR-rm64.imm8))

(setf (gethash "XOR-rm64.sbytedword" *x64-instruction-variants-hash-table*) (list
XOR-rm64.sbytedword))

(setf (gethash "XOR-rm8.imm" *x64-instruction-variants-hash-table*) (list
XOR-rm8.imm))

(setf (gethash "XORPD" *x64-instruction-variants-hash-table*) (list
XORPD-xmmreg.xmmrm128))

(setf (gethash "XORPD-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
XORPD-xmmreg.xmmrm128))

(setf (gethash "XORPS" *x64-instruction-variants-hash-table*) (list
XORPS-xmmreg.xmmrm128))

(setf (gethash "XORPS-xmmreg.xmmrm128" *x64-instruction-variants-hash-table*) (list
XORPS-xmmreg.xmmrm128))

(setf (gethash "XRSTOR" *x64-instruction-variants-hash-table*) (list
XRSTOR-mem))

(setf (gethash "XRSTOR-mem" *x64-instruction-variants-hash-table*) (list
XRSTOR-mem))

(setf (gethash "XRSTOR64" *x64-instruction-variants-hash-table*) (list
XRSTOR64-mem))

(setf (gethash "XRSTOR64-mem" *x64-instruction-variants-hash-table*) (list
XRSTOR64-mem))

(setf (gethash "XRSTORS" *x64-instruction-variants-hash-table*) (list
XRSTORS-mem))

(setf (gethash "XRSTORS-mem" *x64-instruction-variants-hash-table*) (list
XRSTORS-mem))

(setf (gethash "XRSTORS64" *x64-instruction-variants-hash-table*) (list
XRSTORS64-mem))

(setf (gethash "XRSTORS64-mem" *x64-instruction-variants-hash-table*) (list
XRSTORS64-mem))

(setf (gethash "XSAVE" *x64-instruction-variants-hash-table*) (list
XSAVE-mem))

(setf (gethash "XSAVE-mem" *x64-instruction-variants-hash-table*) (list
XSAVE-mem))

(setf (gethash "XSAVE64" *x64-instruction-variants-hash-table*) (list
XSAVE64-mem))

(setf (gethash "XSAVE64-mem" *x64-instruction-variants-hash-table*) (list
XSAVE64-mem))

(setf (gethash "XSAVEC" *x64-instruction-variants-hash-table*) (list
XSAVEC-mem))

(setf (gethash "XSAVEC-mem" *x64-instruction-variants-hash-table*) (list
XSAVEC-mem))

(setf (gethash "XSAVEC64" *x64-instruction-variants-hash-table*) (list
XSAVEC64-mem))

(setf (gethash "XSAVEC64-mem" *x64-instruction-variants-hash-table*) (list
XSAVEC64-mem))

(setf (gethash "XSAVEOPT" *x64-instruction-variants-hash-table*) (list
XSAVEOPT-mem))

(setf (gethash "XSAVEOPT-mem" *x64-instruction-variants-hash-table*) (list
XSAVEOPT-mem))

(setf (gethash "XSAVEOPT64" *x64-instruction-variants-hash-table*) (list
XSAVEOPT64-mem))

(setf (gethash "XSAVEOPT64-mem" *x64-instruction-variants-hash-table*) (list
XSAVEOPT64-mem))

(setf (gethash "XSAVES" *x64-instruction-variants-hash-table*) (list
XSAVES-mem))

(setf (gethash "XSAVES-mem" *x64-instruction-variants-hash-table*) (list
XSAVES-mem))

(setf (gethash "XSAVES64" *x64-instruction-variants-hash-table*) (list
XSAVES64-mem))

(setf (gethash "XSAVES64-mem" *x64-instruction-variants-hash-table*) (list
XSAVES64-mem))

(setf (gethash "XSETBV" *x64-instruction-variants-hash-table*) (list
XSETBV-void))

(setf (gethash "XSETBV-void" *x64-instruction-variants-hash-table*) (list
XSETBV-void))

(setf (gethash "XSHA1" *x64-instruction-variants-hash-table*) (list
XSHA1-void))

(setf (gethash "XSHA1-void" *x64-instruction-variants-hash-table*) (list
XSHA1-void))

(setf (gethash "XSHA256" *x64-instruction-variants-hash-table*) (list
XSHA256-void))

(setf (gethash "XSHA256-void" *x64-instruction-variants-hash-table*) (list
XSHA256-void))

(setf (gethash "XSTORE" *x64-instruction-variants-hash-table*) (list
XSTORE-void))

(setf (gethash "XSTORE-void" *x64-instruction-variants-hash-table*) (list
XSTORE-void))

(setf (gethash "XTEST" *x64-instruction-variants-hash-table*) (list
XTEST-void))

(setf (gethash "XTEST-void" *x64-instruction-variants-hash-table*) (list
XTEST-void))
